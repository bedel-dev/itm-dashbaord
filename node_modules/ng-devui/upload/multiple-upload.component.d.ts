import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { I18nInterface, I18nService } from 'ng-devui/i18n';
import { ToastService } from 'ng-devui/toast';
import { Observable, Subscription } from 'rxjs';
import { IFileOptions, IUploadOptions, UploadStatus } from './file-uploader.types';
import { MultipleUploadViewComponent } from './multiple-upload-view.component';
import { SelectFiles } from './select-files.utils';
import * as i0 from "@angular/core";
export declare class MultipleUploadComponent implements OnDestroy, OnInit {
    private selectFiles;
    private i18n;
    private doc;
    private toastService;
    uploadOptions: IUploadOptions;
    fileOptions: IFileOptions;
    autoUpload: boolean;
    withoutBtn: boolean;
    showTip: boolean;
    uploadedFiles: Array<Object>;
    uploadedFilesRef: TemplateRef<any>;
    preloadFilesRef?: TemplateRef<any>;
    filePath: string;
    placeholderText: string;
    uploadText: string;
    /**
     * @deprecated
     */
    confirmText: string;
    oneTimeUpload: boolean;
    disabled: boolean;
    beforeUpload: (files: any) => boolean | Promise<boolean> | Observable<boolean>;
    setCustomUploadOptions: (files: any, uploadOptions: any) => IUploadOptions;
    enableDrop: boolean;
    successEvent: EventEmitter<Array<{
        file: File;
        response: any;
    }>>;
    errorEvent: EventEmitter<Array<{
        file: File;
        response: any;
    }>>;
    deleteUploadedFileEvent: EventEmitter<string>;
    fileDrop: EventEmitter<any>;
    fileOver: EventEmitter<boolean>;
    fileSelect: EventEmitter<File[]>;
    multipleUploadViewComponent: MultipleUploadViewComponent;
    i18nCommonText: I18nInterface['common'];
    i18nText: I18nInterface['upload'];
    isDropOVer: boolean;
    i18nSubscription: Subscription;
    errorMsg: any[];
    UploadStatus: typeof UploadStatus;
    uploadTips: string;
    document: Document;
    private onChange;
    private onTouched;
    constructor(selectFiles: SelectFiles, i18n: I18nService, doc: any, toastService: ToastService);
    ngOnInit(): void;
    writeValue(files: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    simulateSelectFiles(files: any): Promise<unknown>;
    _dealFiles(observale: any): void;
    checkValid(): void;
    onClick(event: any): void;
    onFileDrop(files: any): void;
    onFileOver(event: any): void;
    onFileSelect(files: any): void;
    handleOneTimeUpload(uploadObservable: any): void;
    handleUpload(uploadObservable: any): void;
    upload(event?: any, fileUploader?: any): void;
    canUpload(): Promise<boolean>;
    _onDeleteUploadedFile(filePath: string): void;
    deleteFile($event: any, file: any): void;
    alertMsg(errorMsg: any): void;
    getStatus(): "failed" | "uploading" | "uploaded" | "selected";
    cancelUpload(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultipleUploadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MultipleUploadComponent, "d-multiple-upload", ["dMultipleUpload"], { "uploadOptions": "uploadOptions"; "fileOptions": "fileOptions"; "autoUpload": "autoUpload"; "withoutBtn": "withoutBtn"; "showTip": "showTip"; "uploadedFiles": "uploadedFiles"; "uploadedFilesRef": "uploadedFilesRef"; "preloadFilesRef": "preloadFilesRef"; "filePath": "filePath"; "placeholderText": "placeholderText"; "uploadText": "uploadText"; "confirmText": "confirmText"; "oneTimeUpload": "oneTimeUpload"; "disabled": "disabled"; "beforeUpload": "beforeUpload"; "setCustomUploadOptions": "setCustomUploadOptions"; "enableDrop": "enableDrop"; }, { "successEvent": "successEvent"; "errorEvent": "errorEvent"; "deleteUploadedFileEvent": "deleteUploadedFileEvent"; "fileDrop": "fileDrop"; "fileOver": "fileOver"; "fileSelect": "fileSelect"; }, never, never>;
}
