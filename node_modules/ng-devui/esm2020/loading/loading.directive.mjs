import { Directive, ElementRef, HostBinding, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { forkJoin, from, Observable, Subscription, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { LoadingBackdropComponent } from './loading-backdrop.component';
import { LoadingComponent } from './loading.component';
import * as i0 from "@angular/core";
export class LoadingDirective {
    constructor(triggerElementRef, viewContainerRef, injector, elementRef) {
        this.triggerElementRef = triggerElementRef;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.elementRef = elementRef;
        this.active = true;
    }
    ngOnChanges(changes) {
        if (changes['showLoading'] || changes['loading'] || changes['backdrop'] || changes['loadingTemplateRef']
            || changes['message'] || changes['positionType'] || changes['view'] || changes['zIndex']) {
            if (this.showLoading !== undefined) {
                this.showLoadingChangeEvent(this.showLoading);
            }
            if (this.loading !== undefined) {
                this.loadingChangeEvent(this.loading);
            }
        }
    }
    loadingChangeEvent(loading) {
        if (loading instanceof Subscription) {
            this.startLoading();
            loading.add(() => this.endLoading());
            return;
        }
        const loadingArr = [].concat(loading).map(item => {
            if (item instanceof Observable) {
                return item;
            }
            return from(item);
        });
        if (loadingArr.length > 0) {
            this.startLoading();
            forkJoin(loadingArr)
                .pipe(catchError(error => {
                return throwError(error);
            }))
                .subscribe({
                next: null,
                error: () => {
                    this.endLoading();
                },
                complete: () => {
                    this.endLoading();
                }
            });
        }
    }
    showLoadingChangeEvent(showLoading) {
        if (showLoading === true) {
            this.startLoading();
        }
        else {
            this.endLoading();
        }
    }
    startLoading() {
        this.position = this.positionType || 'relative';
        if (this.backdrop && !this.backdropRef) {
            this.createLoadingBackdrop();
        }
        if (!this.backdrop && this.backdropRef) {
            this.backdropRef.destroy();
            this.backdropRef = null;
        }
        if (!this.loadingRef) {
            this.loadingRef = this.viewContainerRef.createComponent(LoadingComponent, {
                index: null,
                injector: this.injector,
            });
            this.insert(this.loadingRef.hostView);
        }
        Object.assign(this.loadingRef.instance, {
            message: this.message,
            loadingTemplateRef: this.loadingTemplateRef,
            top: this.view ? this.view.top : '50%',
            left: this.view ? this.view.left : '50%',
            isCustomPosition: !!this.view,
            zIndex: this.zIndex ? this.zIndex : '',
        });
    }
    endLoading() {
        if (this.loadingRef) {
            this.loadingRef.destroy();
            this.loadingRef = null;
        }
        if (this.backdropRef) {
            this.backdropRef.destroy();
            this.backdropRef = null;
        }
        this.position = '';
    }
    createLoadingBackdrop() {
        this.backdropRef =
            !this.backdropRef &&
                this.viewContainerRef.createComponent(LoadingBackdropComponent, {
                    index: null,
                    injector: this.injector,
                });
        this.insert(this.backdropRef.hostView);
        Object.assign(this.backdropRef.instance, {
            triggerElementRef: this.triggerElementRef,
            backdrop: this.backdrop,
            zIndex: this.zIndex ? this.zIndex : ''
        });
    }
    insert(viewRef) {
        viewRef.rootNodes.forEach(node => this.elementRef.nativeElement.appendChild(node));
        return viewRef;
    }
}
LoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Injector }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
LoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: LoadingDirective, selector: "[dLoading]", inputs: { message: "message", backdrop: "backdrop", loadingTemplateRef: "loadingTemplateRef", positionType: "positionType", view: "view", showLoading: "showLoading", loading: "loading", zIndex: "zIndex" }, host: { properties: { "style.position": "this.position" } }, exportAs: ["dLoading"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dLoading]',
                    exportAs: 'dLoading'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Injector }, { type: i0.ElementRef }]; }, propDecorators: { message: [{
                type: Input
            }], backdrop: [{
                type: Input
            }], loadingTemplateRef: [{
                type: Input
            }], positionType: [{
                type: Input
            }], view: [{
                type: Input
            }], position: [{
                type: HostBinding,
                args: ['style.position']
            }], showLoading: [{
                type: Input
            }], loading: [{
                type: Input
            }], zIndex: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,