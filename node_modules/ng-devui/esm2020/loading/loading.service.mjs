import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Inject, Injectable, RendererFactory2 } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { LoadingBackdropComponent } from './loading-backdrop.component';
import { LoadingComponent } from './loading.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
export class LoadingService {
    constructor(overlayContainerRef, componentFactoryResolver, rendererFactory, doc) {
        this.overlayContainerRef = overlayContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.rendererFactory = rendererFactory;
        this.doc = doc;
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.document = this.doc;
    }
    // loading 服务内的函数，外部就可以传入ILoadingOptions类型的参数调用它
    open({ target = this.document.body, backdrop = true, message, loadingTemplateRef, positionType = 'relative', view, injector, zIndex, } = {}) {
        const finalComponentFactoryResolver = this.componentFactoryResolver;
        let positionTypeOld = '';
        positionTypeOld = '' || target['style']['position'];
        let backdropRef;
        if (backdrop) {
            backdropRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(LoadingBackdropComponent), injector);
            Object.assign(backdropRef.instance, {
                backdrop: backdrop,
                zIndex: zIndex,
                target: target ? target : this.document.body,
            });
            const viewRef = backdropRef.hostView;
            viewRef.rootNodes.forEach((node) => target.appendChild(node));
        }
        const loadingRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(LoadingComponent), injector);
        Object.assign(loadingRef.instance, {
            message: message,
            zIndex: zIndex,
            loadingTemplateRef: loadingTemplateRef,
            top: view ? view.top : '50%',
            left: view ? view.left : '50%',
            isCustomPosition: !!view,
            target: target ? target : this.document.body,
        });
        this.renderer.setStyle(target, 'position', positionType);
        const viewRef1 = loadingRef.hostView;
        viewRef1.rootNodes.forEach((node) => target.appendChild(node));
        loadingRef.instance.close = () => {
            if (loadingRef) {
                loadingRef.destroy();
            }
            if (backdropRef) {
                backdropRef.destroy();
                backdropRef = null;
            }
            this.renderer.setStyle(target, 'position', positionTypeOld);
        };
        //  返回一个对象内含2个实例loadingInstance和backdropInstance
        return {
            loadingInstance: loadingRef.instance,
            backdropInstance: backdropRef ? backdropRef.instance : null,
        };
    }
}
LoadingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingService, deps: [{ token: i1.OverlayContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i0.RendererFactory2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
LoadingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.OverlayContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i0.RendererFactory2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvbG9hZGluZy9sb2FkaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSx3QkFBd0IsRUFBaUMsTUFBTSxFQUFFLFVBQVUsRUFBYSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6SSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBS3ZELE1BQU0sT0FBTyxjQUFjO0lBSXpCLFlBQ1UsbUJBQXdDLEVBQ3hDLHdCQUFrRCxFQUNsRCxlQUFpQyxFQUNmLEdBQVE7UUFIMUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4Qyw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtRQUNmLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFFbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzNCLENBQUM7SUFDRCxnREFBZ0Q7SUFDaEQsSUFBSSxDQUFDLEVBQ0gsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUMzQixRQUFRLEdBQUcsSUFBSSxFQUNmLE9BQU8sRUFDUCxrQkFBa0IsRUFDbEIsWUFBWSxHQUFHLFVBQVUsRUFDekIsSUFBSSxFQUNKLFFBQVEsRUFDUixNQUFNLE1BQ2EsRUFBRTtRQUNyQixN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a0JBSDFCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFTSSxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRW1iZWRkZWRWaWV3UmVmLCBJbmplY3QsIEluamVjdGFibGUsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheUNvbnRhaW5lclJlZiB9IGZyb20gJ25nLWRldnVpL292ZXJsYXktY29udGFpbmVyJztcbmltcG9ydCB7IExvYWRpbmdCYWNrZHJvcENvbXBvbmVudCB9IGZyb20gJy4vbG9hZGluZy1iYWNrZHJvcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTG9hZGluZ0NvbXBvbmVudCB9IGZyb20gJy4vbG9hZGluZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSUxvYWRpbmdPcHRpb25zIH0gZnJvbSAnLi9sb2FkaW5nLnR5cGVzJztcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nU2VydmljZSB7XG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgb3ZlcmxheUNvbnRhaW5lclJlZjogT3ZlcmxheUNvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jOiBhbnlcbiAgKSB7XG4gICAgdGhpcy5yZW5kZXJlciA9IHRoaXMucmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvYztcbiAgfVxuICAvLyBsb2FkaW5nIOacjeWKoeWGheeahOWHveaVsO+8jOWklumDqOWwseWPr+S7peS8oOWFpUlMb2FkaW5nT3B0aW9uc+exu+Wei+eahOWPguaVsOiwg+eUqOWug1xuICBvcGVuKHtcbiAgICB0YXJnZXQgPSB0aGlzLmRvY3VtZW50LmJvZHksXG4gICAgYmFja2Ryb3AgPSB0cnVlLFxuICAgIG1lc3NhZ2UsXG4gICAgbG9hZGluZ1RlbXBsYXRlUmVmLFxuICAgIHBvc2l0aW9uVHlwZSA9ICdyZWxhdGl2ZScsXG4gICAgdmlldyxcbiAgICBpbmplY3RvcixcbiAgICB6SW5kZXgsXG4gIH06IElMb2FkaW5nT3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgZmluYWxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcblxuICAgIGxldCBwb3NpdGlvblR5cGVPbGQgPSAnJztcbiAgICBwb3NpdGlvblR5cGVPbGQgPSAnJyB8fCB0YXJnZXRbJ3N0eWxlJ11bJ3Bvc2l0aW9uJ107XG4gICAgbGV0IGJhY2tkcm9wUmVmOiBDb21wb25lbnRSZWY8TG9hZGluZ0JhY2tkcm9wQ29tcG9uZW50PjtcbiAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgIGJhY2tkcm9wUmVmID0gdGhpcy5vdmVybGF5Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChcbiAgICAgICAgZmluYWxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoTG9hZGluZ0JhY2tkcm9wQ29tcG9uZW50KSxcbiAgICAgICAgaW5qZWN0b3JcbiAgICAgICk7XG4gICAgICBPYmplY3QuYXNzaWduKGJhY2tkcm9wUmVmLmluc3RhbmNlLCB7XG4gICAgICAgIGJhY2tkcm9wOiBiYWNrZHJvcCxcbiAgICAgICAgekluZGV4OiB6SW5kZXgsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0ID8gdGFyZ2V0IDogdGhpcy5kb2N1bWVudC5ib2R5LFxuICAgICAgfSk7XG4gICAgICBjb25zdCB2aWV3UmVmID0gYmFja2Ryb3BSZWYuaG9zdFZpZXc7XG4gICAgICAodmlld1JlZiBhcyBFbWJlZGRlZFZpZXdSZWY8YW55Pikucm9vdE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHRhcmdldC5hcHBlbmRDaGlsZChub2RlKSk7XG4gICAgfVxuXG4gICAgY29uc3QgbG9hZGluZ1JlZiA9IHRoaXMub3ZlcmxheUNvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoXG4gICAgICBmaW5hbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShMb2FkaW5nQ29tcG9uZW50KSxcbiAgICAgIGluamVjdG9yXG4gICAgKTtcblxuICAgIE9iamVjdC5hc3NpZ24obG9hZGluZ1JlZi5pbnN0YW5jZSwge1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHpJbmRleDogekluZGV4LFxuICAgICAgbG9hZGluZ1RlbXBsYXRlUmVmOiBsb2FkaW5nVGVtcGxhdGVSZWYsXG4gICAgICB0b3A6IHZpZXcgPyB2aWV3LnRvcCA6ICc1MCUnLFxuICAgICAgbGVmdDogdmlldyA/IHZpZXcubGVmdCA6ICc1MCUnLFxuICAgICAgaXNDdXN0b21Qb3NpdGlvbjogISF2aWV3LFxuICAgICAgdGFyZ2V0OiB0YXJnZXQgPyB0YXJnZXQgOiB0aGlzLmRvY3VtZW50LmJvZHksXG4gICAgfSk7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRhcmdldCwgJ3Bvc2l0aW9uJywgcG9zaXRpb25UeXBlKTtcblxuICAgIGNvbnN0IHZpZXdSZWYxID0gbG9hZGluZ1JlZi5ob3N0VmlldztcbiAgICAodmlld1JlZjEgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pLnJvb3ROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSkpO1xuXG4gICAgbG9hZGluZ1JlZi5pbnN0YW5jZS5jbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmIChsb2FkaW5nUmVmKSB7XG4gICAgICAgIGxvYWRpbmdSZWYuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgaWYgKGJhY2tkcm9wUmVmKSB7XG4gICAgICAgIGJhY2tkcm9wUmVmLmRlc3Ryb3koKTtcbiAgICAgICAgYmFja2Ryb3BSZWYgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0YXJnZXQsICdwb3NpdGlvbicsIHBvc2l0aW9uVHlwZU9sZCk7XG4gICAgfTtcblxuICAgIC8vICDov5Tlm57kuIDkuKrlr7nosaHlhoXlkKsy5Liq5a6e5L6LbG9hZGluZ0luc3RhbmNl5ZKMYmFja2Ryb3BJbnN0YW5jZVxuICAgIHJldHVybiB7XG4gICAgICBsb2FkaW5nSW5zdGFuY2U6IGxvYWRpbmdSZWYuaW5zdGFuY2UsXG4gICAgICBiYWNrZHJvcEluc3RhbmNlOiBiYWNrZHJvcFJlZiA/IGJhY2tkcm9wUmVmLmluc3RhbmNlIDogbnVsbCxcbiAgICB9O1xuICB9XG59XG4iXX0=