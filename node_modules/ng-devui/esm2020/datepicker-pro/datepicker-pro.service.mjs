import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class DatepickerProService {
    constructor(doc) {
        this.doc = doc;
        this.curRangeDate = [];
        this.calendarRange = [1970, 2099];
        this.currentActiveInput = 'start';
        this._minDate = new Date(this.calendarRange[0], 0, 1);
        this._maxDate = new Date(this.calendarRange[1], 11, 31);
        this.toggleEvent = new Subject();
        this.closeDropdownEvent = new Subject();
        this.activeInputChange = new Subject();
        this.selectedDateChange = new Subject();
        this.updateDateValue = new Subject();
        this.selectedTimeChange = new Subject();
        this.updateTimeChange = new Subject();
        this.detectedChanges = new Subject();
        this.document = this.doc;
    }
    set minDate(value) {
        this._minDate = new Date(value) || new Date(this.calendarRange[0], 0, 1);
        this.detectedChanges.next();
    }
    get minDate() {
        return this._minDate;
    }
    set maxDate(value) {
        this._maxDate = new Date(value) || new Date(this.calendarRange[1], 11, 31);
        this.detectedChanges.next();
    }
    get maxDate() {
        return this._maxDate;
    }
    get closeAfterSelected() {
        return !this.isRange && !this.showTime;
    }
    get curHour() {
        if (this.isRange) {
            return (this.currentActiveInput === 'start' ? this.curRangeDate[0]?.getHours() : this.curRangeDate[1]?.getHours()) || 0;
        }
        else {
            return this.curDate?.getHours() || 0;
        }
    }
    get curMin() {
        if (this.isRange) {
            return (this.currentActiveInput === 'start' ? this.curRangeDate[0]?.getMinutes() : this.curRangeDate[1]?.getMinutes()) || 0;
        }
        else {
            return this.curDate?.getMinutes() || 0;
        }
    }
    get curSec() {
        if (this.isRange) {
            return (this.currentActiveInput === 'start' ? this.curRangeDate[0]?.getSeconds() : this.curRangeDate[1]?.getSeconds()) || 0;
        }
        else {
            return this.curDate?.getSeconds() || 0;
        }
    }
    dateInRange(date) {
        if (!date) {
            return true;
        }
        return (date.getTime() > this.minDate.getTime() && date.getTime() < this.maxDate.getTime()) ||
            date.toDateString() === this.minDate.toDateString() || date.toDateString() === this.maxDate.toDateString();
    }
    // 对范围模式下一些非法的选择进行修正
    fixRangeDate() {
        const start = this.curRangeDate[0]?.getTime();
        const end = this.curRangeDate[1]?.getTime();
        if (start && end && end < start) {
            if (this.currentActiveInput === 'start') {
                this.curRangeDate[1] = null;
            }
            else if (this.currentActiveInput === 'end') {
                this.curRangeDate[0] = null;
            }
        }
    }
    // 判断日期是否为起始日期
    isStartDate(date) {
        if (!this.isRange) {
            return false;
        }
        if (this.currentActiveInput === 'start') {
            return date.toDateString() === this.curHoverDate?.toDateString() || date.toDateString() === this.curRangeDate[0]?.toDateString();
        }
        return date.toDateString() === this.curRangeDate[0]?.toDateString();
    }
    // 判断日期是否为结束日期
    isEndDate(date) {
        if (!this.isRange) {
            return false;
        }
        if (this.currentActiveInput === 'end') {
            return date.toDateString() === this.curHoverDate?.toDateString() || date.toDateString() === this.curRangeDate[1]?.toDateString();
        }
        return date.toDateString() === this.curRangeDate[1]?.toDateString();
    }
    // 判断日期是否在hover范围或者选中的范围内
    isDateInRange(date) {
        const dateTime = date.getTime();
        const dateStr = date.toDateString();
        if (this.isRange) {
            if (this.currentActiveInput === 'start') {
                return (this.curHoverDate || this.curRangeDate[0])?.getTime() < dateTime &&
                    (this.curHoverDate || this.curRangeDate[0])?.toDateString() !== dateStr &&
                    this.curRangeDate[1]?.getTime() > dateTime &&
                    this.curRangeDate[1]?.toDateString() !== dateStr;
            }
            else {
                return this.curRangeDate[0]?.getTime() < dateTime &&
                    this.curRangeDate[0]?.toDateString() !== dateStr &&
                    (this.curHoverDate || this.curRangeDate[1])?.getTime() > dateTime &&
                    (this.curHoverDate || this.curRangeDate[1]).toDateString() !== dateStr;
            }
        }
        else {
            return false;
        }
    }
    // 判断日期是否在已选中的范围内，与hover做区分
    isDateInSelectRange(date) {
        if (!this.isRange) {
            return false;
        }
        if (!this.curRangeDate[0] || !this.curRangeDate[1]) {
            return false;
        }
        return this.curRangeDate[0].getTime() < date.getTime() && this.curRangeDate[1].getTime() > date.getTime() &&
            this.curRangeDate[1].toDateString() !== date.toDateString() && this.curRangeDate[0].toDateString() !== date.toDateString();
    }
    isDateActive(date) {
        const dateStr = date.toDateString();
        if (this.isRange) {
            return dateStr === this.curRangeDate[0]?.toDateString() || dateStr === this.curRangeDate[1]?.toDateString();
        }
        else {
            return dateStr === this.curDate?.toDateString();
        }
    }
    isMonthActive(yearIndex, monthIndex) {
        if (this.isRange) {
            return (yearIndex === this.curRangeDate[0]?.getFullYear() && monthIndex === this.curRangeDate[0]?.getMonth()) ||
                (yearIndex === this.curRangeDate[1]?.getFullYear() && monthIndex === this.curRangeDate[1]?.getMonth());
        }
        else {
            return yearIndex === this.curDate?.getFullYear() && monthIndex === this.curDate?.getMonth();
        }
    }
    isYearActive(yearIndex) {
        if (this.isRange) {
            return yearIndex === this.curRangeDate[0]?.getFullYear() || yearIndex === this.curRangeDate[1]?.getFullYear();
        }
        else {
            return yearIndex === this.curDate?.getFullYear();
        }
    }
    // 是否为范围选中日期中对应的input激活项
    isActiveInputTypeDate(date) {
        if (!this.isRange) {
            return false;
        }
        if (this.currentActiveInput === 'start') {
            return date.toDateString() === this.curRangeDate[0]?.toDateString();
        }
        else {
            return date.toDateString() === this.curRangeDate[1]?.toDateString();
        }
    }
    // 是否为选中日期且在废弃范围逻辑内
    isDateAbandon(date) {
        if (!this.isRange || (!this.curRangeDate[0] || !this.curRangeDate[1])) {
            return false;
        }
        if (!this.isDateActive(date)) {
            return false;
        }
        if (this.currentActiveInput === 'start') {
            return this.curHoverDate?.getTime() > date.getTime();
        }
        else {
            return this.curHoverDate?.getTime() < date.getTime();
        }
    }
    isInSuggestList(date) {
        if (!this.markedRangeDateList) {
            return false;
        }
        for (let index = 0; index < this.markedRangeDateList.length; index++) {
            const range = this.markedRangeDateList[index];
            if (range[0]?.getTime() < date.getTime() && range[1]?.getTime() > date.getTime()) {
                return true;
            }
            if (range[0]?.toDateString() === date.toDateString() || range[1]?.toDateString() === date.toDateString()) {
                return true;
            }
        }
        return false;
    }
    isMarkedDate(date) {
        for (let index = 0; index < this.markedDateList?.length; index++) {
            if (this.markedDateList[index]?.toDateString() === date.toDateString()) {
                return true;
            }
        }
        return false;
    }
    mearsureStrWidth(str) {
        const mearsureDom = this.document.createElement('span');
        mearsureDom.innerText = str;
        mearsureDom.style.visibility = 'hidden';
        this.document.body.appendChild(mearsureDom);
        const domWidth = mearsureDom.offsetWidth;
        this.document.body.removeChild(mearsureDom);
        return domWidth;
    }
    ngOnDestroy() {
        this.toggleEvent.complete();
        this.selectedDateChange.complete();
        this.closeDropdownEvent.complete();
        this.updateDateValue.complete();
        this.updateTimeChange.complete();
        this.selectedTimeChange.complete();
        this.activeInputChange.complete();
        this.detectedChanges.complete();
    }
}
DatepickerProService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
DatepickerProService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
export class DatepickerProCommonDataService {
    constructor() {
        this.calendarDataCache = {};
    }
}
DatepickerProCommonDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCommonDataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatepickerProCommonDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCommonDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCommonDataService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,