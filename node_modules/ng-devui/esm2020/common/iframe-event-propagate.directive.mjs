import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class IframeEventPropagateDirective {
    constructor(el, doc) {
        this.doc = doc;
        this.event = 'click';
        this.AddIframeContentDocumentClickListener = () => {
            const iframe = this.element.querySelector('iframe');
            if (iframe !== null) {
                if (iframe.contentDocument !== null) {
                    iframe.contentDocument.addEventListener(this.event, this.dispatchClickEvent);
                }
                else {
                    const loadHandler = () => {
                        iframe.contentDocument.addEventListener(this.event, this.dispatchClickEvent);
                        iframe.removeEventListener('load', loadHandler);
                    };
                    iframe.addEventListener('load', loadHandler);
                }
                this.element.removeEventListener('DOMSubtreeModified', this.AddIframeContentDocumentClickListener);
            }
        };
        this.dispatchClickEvent = ($event) => {
            const event = this.document.createEvent('MouseEvents');
            event.initEvent(this.event, true, true);
            event['originEvent'] = $event;
            this.element.dispatchEvent(event);
        };
        this.element = el.nativeElement;
        this.document = this.doc;
    }
    ngAfterViewInit() {
        this.element.addEventListener('DOMSubtreeModified', this.AddIframeContentDocumentClickListener);
        if (this.element.querySelector('iframe') !== null) {
            this.AddIframeContentDocumentClickListener();
        }
    }
}
IframeEventPropagateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: IframeEventPropagateDirective, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
IframeEventPropagateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: IframeEventPropagateDirective, selector: "[dIframeEventPropagate]", inputs: { event: "event" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: IframeEventPropagateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dIframeEventPropagate]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { event: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZyYW1lLWV2ZW50LXByb3BhZ2F0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS9jb21tb24vaWZyYW1lLWV2ZW50LXByb3BhZ2F0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUlwRixNQUFNLE9BQU8sNkJBQTZCO0lBSXhDLFlBQVksRUFBYyxFQUE0QixHQUFRO1FBQVIsUUFBRyxHQUFILEdBQUcsQ0FBSztRQUhyRCxVQUFLLEdBQUcsT0FBTyxDQUFDO1FBY3pCLDBDQUFxQyxHQUFHLEdBQUcsRUFBRTtZQUMzQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVwRCxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7Z0JBQ25CLElBQUksTUFBTSxDQUFDLGVBQWUsS0FBSyxJQUFJLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztpQkFDOUU7cUJBQU07b0JBQ0wsTUFBTSxXQUFXLEdBQUksR0FBRyxFQUFFO3dCQUN4QixNQUFNLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7d0JBQzdFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7b0JBQ2xELENBQUMsQ0FBQztvQkFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2lCQUM5QztnQkFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO2FBQ3BHO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsdUJBQWtCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN2RCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3hDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDO1FBakNBLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDM0IsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBQ2hHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ2pELElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO1NBQzlDO0lBQ0gsQ0FBQzs7MEhBZFUsNkJBQTZCLDRDQUlKLFFBQVE7OEdBSmpDLDZCQUE2QjsyRkFBN0IsNkJBQTZCO2tCQUh6QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7aUJBQ3BDOzswQkFLOEIsTUFBTTsyQkFBQyxRQUFROzRDQUhuQyxLQUFLO3NCQUFiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkSWZyYW1lRXZlbnRQcm9wYWdhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZnJhbWVFdmVudFByb3BhZ2F0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBldmVudCA9ICdjbGljayc7XG4gIGVsZW1lbnQ6IEhUTUxTZWxlY3RFbGVtZW50O1xuICBkb2N1bWVudDogRG9jdW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvYzogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWwubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5kb2M7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMuQWRkSWZyYW1lQ29udGVudERvY3VtZW50Q2xpY2tMaXN0ZW5lcik7XG4gICAgaWYgKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5BZGRJZnJhbWVDb250ZW50RG9jdW1lbnRDbGlja0xpc3RlbmVyKCk7XG4gICAgfVxuICB9XG4gIEFkZElmcmFtZUNvbnRlbnREb2N1bWVudENsaWNrTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgaWZyYW1lID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xuXG4gICAgaWYgKGlmcmFtZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGlmcmFtZS5jb250ZW50RG9jdW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgaWZyYW1lLmNvbnRlbnREb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnQsIHRoaXMuZGlzcGF0Y2hDbGlja0V2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxvYWRIYW5kbGVyID0gICgpID0+IHtcbiAgICAgICAgICBpZnJhbWUuY29udGVudERvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudCwgdGhpcy5kaXNwYXRjaENsaWNrRXZlbnQpO1xuICAgICAgICAgIGlmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgbG9hZEhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgICAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRIYW5kbGVyKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMuQWRkSWZyYW1lQ29udGVudERvY3VtZW50Q2xpY2tMaXN0ZW5lcik7XG4gICAgfVxuICB9O1xuXG4gIGRpc3BhdGNoQ2xpY2tFdmVudCA9ICgkZXZlbnQpID0+IHtcbiAgICBjb25zdCBldmVudCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gICAgZXZlbnQuaW5pdEV2ZW50KHRoaXMuZXZlbnQsIHRydWUsIHRydWUpO1xuICAgIGV2ZW50WydvcmlnaW5FdmVudCddID0gJGV2ZW50O1xuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfTtcbn1cbiJdfQ==