import { Clipboard } from '@angular/cdk/clipboard';
import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, Output } from '@angular/core';
import { I18nService } from 'ng-devui/i18n';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { PopoverComponent } from 'ng-devui/popover';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/clipboard";
import * as i2 from "ng-devui/i18n";
import * as i3 from "ng-devui/overlay-container";
export class ClipboardDirective {
    constructor(elm, clipboard, i18n, overlayContainerRef, componentFactoryResolver, doc) {
        this.elm = elm;
        this.clipboard = clipboard;
        this.i18n = i18n;
        this.overlayContainerRef = overlayContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.doc = doc;
        this.position = 'top';
        this.sticky = false;
        this.copyResultEvent = new EventEmitter();
        this.onDocumentClick = (event) => {
            event.stopPropagation();
            if (!this.elm.nativeElement.contains(event.target)) {
                this.destroy();
            }
        };
        this.document = this.doc;
    }
    ngOnInit() {
        this.setI18nText();
    }
    setI18nText() {
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nCommonText = data.common;
        });
    }
    onClickEvent() {
        let isSucceeded = false;
        const isSupported = !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!window;
        if (isSupported && this.content) {
            isSucceeded = this.clipboard.copy(this.content);
            if (isSucceeded) {
                this.tipContent = this.tipContent || this.i18nCommonText.copied;
                this.createPopover();
            }
            const result = { isSupported: isSupported, isSucceeded: isSucceeded, content: this.content };
            this.copyResultEvent.emit(result);
        }
    }
    createPopover() {
        if (this.popoverComponentRef) {
            this.popoverComponentRef.destroy();
        }
        this.popoverComponentRef = this.overlayContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(PopoverComponent));
        Object.assign(this.popoverComponentRef.instance, {
            content: this.tipContent,
            triggerElementRef: this.elm,
            position: this.position,
            popType: 'default',
            popMaxWidth: 200,
            appendToBody: true,
            zIndex: 1060
        });
        this.document.addEventListener('click', this.onDocumentClick);
        if (!this.sticky) {
            setTimeout(() => this.destroy(), 3000);
        }
    }
    destroy() {
        if (this.popoverComponentRef) {
            this.popoverComponentRef.destroy();
            this.popoverComponentRef = null;
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
ClipboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ClipboardDirective, deps: [{ token: i0.ElementRef }, { token: i1.Clipboard }, { token: i2.I18nService }, { token: i3.OverlayContainerRef }, { token: i0.ComponentFactoryResolver }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
ClipboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ClipboardDirective, selector: "[dClipboard]", inputs: { devuiTargetElm: ["dClipboard", "devuiTargetElm"], container: "container", content: "content", position: "position", sticky: "sticky", tipContent: "tipContent" }, outputs: { copyResultEvent: "copyResultEvent" }, host: { listeners: { "click": "onClickEvent()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ClipboardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dClipboard]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Clipboard }, { type: i2.I18nService }, { type: i3.OverlayContainerRef }, { type: i0.ComponentFactoryResolver }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { devuiTargetElm: [{
                type: Input,
                args: ['dClipboard']
            }], container: [{
                type: Input
            }], content: [{
                type: Input
            }], position: [{
                type: Input
            }], sticky: [{
                type: Input
            }], tipContent: [{
                type: Input
            }], copyResultEvent: [{
                type: Output
            }], onClickEvent: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,