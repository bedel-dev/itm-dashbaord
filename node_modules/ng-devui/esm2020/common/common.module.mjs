import { ClipboardModule } from '@angular/cdk/clipboard';
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { AutoFocusDirective } from './auto-focus.directive';
import { ClipboardDirective } from './clipboard.directive';
import { DatePipe } from './date-pipe';
import { SimulateATagDirective } from './helper-utils';
import { IframeEventPropagateDirective } from './iframe-event-propagate.directive';
import * as i0 from "@angular/core";
export class DCommonModule {
}
DCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DCommonModule, declarations: [AutoFocusDirective,
        DatePipe,
        SimulateATagDirective,
        IframeEventPropagateDirective,
        ClipboardDirective], imports: [CommonModule,
        ClipboardModule], exports: [AutoFocusDirective,
        DatePipe,
        SimulateATagDirective,
        IframeEventPropagateDirective,
        ClipboardDirective] });
DCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DCommonModule, providers: [], imports: [[
            CommonModule,
            ClipboardModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ClipboardModule
                    ],
                    exports: [
                        AutoFocusDirective,
                        DatePipe,
                        SimulateATagDirective,
                        IframeEventPropagateDirective,
                        ClipboardDirective
                    ],
                    declarations: [
                        AutoFocusDirective,
                        DatePipe,
                        SimulateATagDirective,
                        IframeEventPropagateDirective,
                        ClipboardDirective
                    ],
                    providers: [],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldnVpL2NvbW1vbi9jb21tb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztBQXVCbkYsTUFBTSxPQUFPLGFBQWE7OzBHQUFiLGFBQWE7MkdBQWIsYUFBYSxpQkFSdEIsa0JBQWtCO1FBQ2xCLFFBQVE7UUFDUixxQkFBcUI7UUFDckIsNkJBQTZCO1FBQzdCLGtCQUFrQixhQWZsQixZQUFZO1FBQ1osZUFBZSxhQUdmLGtCQUFrQjtRQUNsQixRQUFRO1FBQ1IscUJBQXFCO1FBQ3JCLDZCQUE2QjtRQUM3QixrQkFBa0I7MkdBV1QsYUFBYSxhQUZiLEVBQUUsWUFsQko7WUFDUCxZQUFZO1lBQ1osZUFBZTtTQUNoQjsyRkFpQlUsYUFBYTtrQkFyQnpCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBQ1osZUFBZTtxQkFDaEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLGtCQUFrQjt3QkFDbEIsUUFBUTt3QkFDUixxQkFBcUI7d0JBQ3JCLDZCQUE2Qjt3QkFDN0Isa0JBQWtCO3FCQUNuQjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osa0JBQWtCO3dCQUNsQixRQUFRO3dCQUNSLHFCQUFxQjt3QkFDckIsNkJBQTZCO3dCQUM3QixrQkFBa0I7cUJBQ25CO29CQUNELFNBQVMsRUFBRSxFQUFFO2lCQUNkIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpcGJvYXJkTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NsaXBib2FyZCc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dG9Gb2N1c0RpcmVjdGl2ZSB9IGZyb20gJy4vYXV0by1mb2N1cy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ2xpcGJvYXJkRGlyZWN0aXZlIH0gZnJvbSAnLi9jbGlwYm9hcmQuZGlyZWN0aXZlJztcbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnLi9kYXRlLXBpcGUnO1xuaW1wb3J0IHsgU2ltdWxhdGVBVGFnRGlyZWN0aXZlIH0gZnJvbSAnLi9oZWxwZXItdXRpbHMnO1xuaW1wb3J0IHsgSWZyYW1lRXZlbnRQcm9wYWdhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2lmcmFtZS1ldmVudC1wcm9wYWdhdGUuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBDbGlwYm9hcmRNb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIEF1dG9Gb2N1c0RpcmVjdGl2ZSxcbiAgICBEYXRlUGlwZSxcbiAgICBTaW11bGF0ZUFUYWdEaXJlY3RpdmUsXG4gICAgSWZyYW1lRXZlbnRQcm9wYWdhdGVEaXJlY3RpdmUsXG4gICAgQ2xpcGJvYXJkRGlyZWN0aXZlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEF1dG9Gb2N1c0RpcmVjdGl2ZSxcbiAgICBEYXRlUGlwZSxcbiAgICBTaW11bGF0ZUFUYWdEaXJlY3RpdmUsXG4gICAgSWZyYW1lRXZlbnRQcm9wYWdhdGVEaXJlY3RpdmUsXG4gICAgQ2xpcGJvYXJkRGlyZWN0aXZlXG4gIF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIERDb21tb25Nb2R1bGUge1xufVxuIl19