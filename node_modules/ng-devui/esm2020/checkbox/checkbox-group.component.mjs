import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, forwardRef, Input, Output, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DevConfigService, WithConfig } from 'ng-devui/utils';
import { isArray } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/utils";
import * as i2 from "./checkbox.component";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class CheckBoxGroupComponent {
    constructor(devConfigService) {
        this.devConfigService = devConfigService;
        this.direction = 'column';
        this.isShowTitle = true;
        this.disabled = false;
        this.options = [];
        this.showAnimation = true;
        this.change = new EventEmitter();
        this.values = [];
        this.options_display = [];
        this.onChange = (_) => null;
        this.onTouch = () => null;
    }
    ngOnChanges(changes) {
        if (changes['options']) {
            this.checkType();
        }
    }
    checkType() {
        this.options_display = [];
        const checkedArray = [];
        this.values.forEach(item => {
            if (this.filterKey && item[this.filterKey]) {
                checkedArray[item[this.filterKey]] = true;
            }
            else {
                checkedArray[item] = true;
            }
        });
        this.options.forEach(item => {
            const option = { isChecked: false };
            option['value'] = item;
            if (this.filterKey && item[this.filterKey]) {
                if (checkedArray[item[this.filterKey]]) {
                    option['isChecked'] = true;
                }
            }
            else {
                if (checkedArray[item]) {
                    option['isChecked'] = true;
                }
            }
            this.options_display.push(option);
        });
    }
    writeValue(inputArray) {
        if (inputArray && isArray(inputArray)) {
            this.values = inputArray;
            this.checkType();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    toggle($event, i) {
        this.onChange(this.getCheckedArray());
        this.onTouch();
        this.change.next(this.options_display[i]);
    }
    getCheckedArray() {
        const checkedArray = [];
        this.options_display.forEach(item => {
            if (item.isChecked) {
                checkedArray.push(item.value);
            }
        });
        return checkedArray;
    }
}
CheckBoxGroupComponent.ID_SEED = 0;
CheckBoxGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CheckBoxGroupComponent, deps: [{ token: i1.DevConfigService }], target: i0.ɵɵFactoryTarget.Component });
CheckBoxGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: CheckBoxGroupComponent, selector: "d-checkbox-group", inputs: { name: "name", itemWidth: "itemWidth", color: "color", direction: "direction", isShowTitle: "isShowTitle", disabled: "disabled", options: "options", filterKey: "filterKey", labelTemplate: "labelTemplate", showAnimation: "showAnimation", beforeChange: "beforeChange" }, outputs: { change: "change" }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => CheckBoxGroupComponent),
            multi: true
        }], usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-checkbox-group\">\n  <ul [class.devui-checkbox-list-inline]=\"direction === 'row'\">\n    <li\n      *ngFor=\"let item of options_display; let i = index\"\n      [class.devui-checkbox-column-margin]=\"direction === 'column'\"\n      [ngStyle]=\"{ 'width.px': itemWidth }\"\n      [ngClass]=\"{ 'devui-checkbox-wrap': itemWidth !== undefined }\"\n    >\n      <span>\n        <d-checkbox\n          [name]=\"name\"\n          [label]=\"item['value'][filterKey] ? item['value'][filterKey] : item['value']\"\n          [(ngModel)]=\"item['isChecked']\"\n          [isShowTitle]=\"isShowTitle\"\n          [color]=\"color\"\n          [disabled]=\"this.disabled ? true : item['value']['disabled']\"\n          [labelTemplate]=\"labelTemplate\"\n          [showAnimation]=\"showAnimation\"\n          (ngModelChange)=\"toggle($event, i)\"\n          [beforeChange]=\"beforeChange\"\n        >\n        </d-checkbox>\n      </span>\n    </li>\n  </ul>\n</div>\n", styles: [":host{display:block}.devui-checkbox-list-inline{min-height:28px;line-height:28px;display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:center;margin:-8px 0 0}.devui-checkbox-list-inline>*{margin-top:8px}.devui-checkbox-list-inline ::ng-deep li{display:inline-block}.devui-checkbox-list-inline ::ng-deep li:not(:last-child){margin-right:20px}.devui-checkbox-wrap ::ng-deep .devui-checkbox label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.devui-checkbox-column-margin{height:28px;line-height:28px}\n"], components: [{ type: i2.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], CheckBoxGroupComponent.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CheckBoxGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-checkbox-group', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => CheckBoxGroupComponent),
                            multi: true
                        }], preserveWhitespaces: false, template: "<div class=\"devui-checkbox-group\">\n  <ul [class.devui-checkbox-list-inline]=\"direction === 'row'\">\n    <li\n      *ngFor=\"let item of options_display; let i = index\"\n      [class.devui-checkbox-column-margin]=\"direction === 'column'\"\n      [ngStyle]=\"{ 'width.px': itemWidth }\"\n      [ngClass]=\"{ 'devui-checkbox-wrap': itemWidth !== undefined }\"\n    >\n      <span>\n        <d-checkbox\n          [name]=\"name\"\n          [label]=\"item['value'][filterKey] ? item['value'][filterKey] : item['value']\"\n          [(ngModel)]=\"item['isChecked']\"\n          [isShowTitle]=\"isShowTitle\"\n          [color]=\"color\"\n          [disabled]=\"this.disabled ? true : item['value']['disabled']\"\n          [labelTemplate]=\"labelTemplate\"\n          [showAnimation]=\"showAnimation\"\n          (ngModelChange)=\"toggle($event, i)\"\n          [beforeChange]=\"beforeChange\"\n        >\n        </d-checkbox>\n      </span>\n    </li>\n  </ul>\n</div>\n", styles: [":host{display:block}.devui-checkbox-list-inline{min-height:28px;line-height:28px;display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:center;margin:-8px 0 0}.devui-checkbox-list-inline>*{margin-top:8px}.devui-checkbox-list-inline ::ng-deep li{display:inline-block}.devui-checkbox-list-inline ::ng-deep li:not(:last-child){margin-right:20px}.devui-checkbox-wrap ::ng-deep .devui-checkbox label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.devui-checkbox-column-margin{height:28px;line-height:28px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DevConfigService }]; }, propDecorators: { name: [{
                type: Input
            }], itemWidth: [{
                type: Input
            }], color: [{
                type: Input
            }], direction: [{
                type: Input
            }], isShowTitle: [{
                type: Input
            }], disabled: [{
                type: Input
            }], options: [{
                type: Input
            }], filterKey: [{
                type: Input
            }], labelTemplate: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], beforeChange: [{
                type: Input
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,