import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class LazyLoadDirective {
    constructor(el) {
        this.el = el;
        // 启用懒加载，默认不启用
        this.enableLazyLoad = false;
        // 懒加载模式，默认列表模式
        this.contentMode = 'list';
        // 加载更多
        this.loadMore = new EventEmitter();
        // 触发懒加载的距离
        this.loadFactor = 5;
    }
    ngOnChanges(changes) {
        const element = this.target ? this.target : this.el.nativeElement;
        if (changes && changes['enableLazyLoad']) {
            if (changes.enableLazyLoad.currentValue) {
                const scrollEvent = fromEvent(element, 'scroll');
                let scrollEventFormat = scrollEvent;
                if (this.contentMode === 'list') {
                    scrollEventFormat = scrollEvent.pipe(debounceTime(300), distinctUntilChanged());
                }
                this.scrollSubscription = scrollEventFormat.subscribe(event => this.scrollList(event));
            }
            else if (this.scrollSubscription) {
                this.scrollSubscription.unsubscribe();
            }
            else {
                return;
            }
        }
    }
    ngAfterViewInit() {
        if (this.contentMode === 'img') {
            setTimeout(() => {
                const target = this.target ? this.target : this.el.nativeElement;
                const mockEvent = { target };
                this.scrollList(mockEvent);
            });
        }
    }
    ngOnDestroy() {
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    }
    scrollList(event) {
        const targetEl = event.target.scrollingElement ? event.target.scrollingElement : event.target;
        const clientHeight = targetEl.clientHeight;
        const scrollTop = targetEl.scrollTop;
        if (this.contentMode === 'img') {
            const rect = this.el.nativeElement.getBoundingClientRect();
            if (rect.top >= 0 && (clientHeight >= rect.top + this.loadFactor)) {
                if (this.imgLoadSrc) {
                    this.el.nativeElement.src = this.imgLoadSrc;
                }
                this.loadMore.emit(event);
                this.scrollSubscription.unsubscribe();
            }
        }
        else {
            const scrollHeight = targetEl.scrollHeight;
            if (scrollTop !== 0 && (scrollTop + clientHeight + this.loadFactor >= scrollHeight)) {
                this.loadMore.emit(event);
            }
        }
    }
}
LazyLoadDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LazyLoadDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
LazyLoadDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: LazyLoadDirective, selector: "[dLazyLoad]", inputs: { enableLazyLoad: "enableLazyLoad", contentMode: "contentMode", target: "target", imgLoadSrc: "imgLoadSrc" }, outputs: { loadMore: "loadMore" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LazyLoadDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[dLazyLoad]' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { enableLazyLoad: [{
                type: Input
            }], contentMode: [{
                type: Input
            }], target: [{
                type: Input
            }], imgLoadSrc: [{
                type: Input
            }], loadMore: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL3V0aWxzL2xhenktbG9hZC9sYXp5LWxvYWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUF3QixNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZJLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHcEUsTUFBTSxPQUFPLGlCQUFpQjtJQWtCNUIsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFoQmxDLGNBQWM7UUFDTCxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUNoQyxlQUFlO1FBQ04sZ0JBQVcsR0FBbUIsTUFBTSxDQUFDO1FBSzlDLE9BQU87UUFDRyxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUk3QyxXQUFXO1FBQ1gsZUFBVSxHQUFHLENBQUMsQ0FBQztJQUV1QixDQUFDO0lBRXZDLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUNsRSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUN4QyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO2dCQUN2QyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLGlCQUFpQixHQUFHLFdBQVcsQ0FBQztnQkFDcEMsSUFBSSxJQUFJ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Z0JBRUksUUFBUTtzQkFBakIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tkTGF6eUxvYWRdJyB9KVxuZXhwb3J0IGNsYXNzIExhenlMb2FkRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuXG4gIC8vIOWQr+eUqOaHkuWKoOi9ve+8jOm7mOiupOS4jeWQr+eUqFxuICBASW5wdXQoKSBlbmFibGVMYXp5TG9hZCA9IGZhbHNlO1xuICAvLyDmh5LliqDovb3mqKHlvI/vvIzpu5jorqTliJfooajmqKHlvI9cbiAgQElucHV0KCkgY29udGVudE1vZGU6ICdpbWcnIHwgJ2xpc3QnID0gJ2xpc3QnO1xuICAvLyDmu5rliqjnm5HlkKznmoTnm67moIfvvIzpu5jorqTmmK/lrr/kuLvvvIxcbiAgQElucHV0KCkgdGFyZ2V0OiBIVE1MRWxlbWVudCB8IFdpbmRvdztcbiAgLy8g5Zu+54mH5oeS5Yqg6L295qih5byP55qE5Zu+54mH5Zyw5Z2AXG4gIEBJbnB1dCgpIGltZ0xvYWRTcmM6IHN0cmluZztcbiAgLy8g5Yqg6L295pu05aSaXG4gIEBPdXRwdXQoKSBsb2FkTW9yZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHNjcm9sbFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIC8vIOinpuWPkeaHkuWKoOi9veeahOi3neemu1xuICBsb2FkRmFjdG9yID0gNTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMudGFyZ2V0ID8gdGhpcy50YXJnZXQgOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGNoYW5nZXMgJiYgY2hhbmdlc1snZW5hYmxlTGF6eUxvYWQnXSkge1xuICAgICAgaWYgKGNoYW5nZXMuZW5hYmxlTGF6eUxvYWQuY3VycmVudFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbEV2ZW50ID0gZnJvbUV2ZW50KGVsZW1lbnQsICdzY3JvbGwnKTtcbiAgICAgICAgbGV0IHNjcm9sbEV2ZW50Rm9ybWF0ID0gc2Nyb2xsRXZlbnQ7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRNb2RlID09PSAnbGlzdCcpIHtcbiAgICAgICAgICBzY3JvbGxFdmVudEZvcm1hdCA9IHNjcm9sbEV2ZW50LnBpcGUoXG4gICAgICAgICAgICBkZWJvdW5jZVRpbWUoMzAwKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2Nyb2xsU3Vic2NyaXB0aW9uID0gc2Nyb2xsRXZlbnRGb3JtYXQuc3Vic2NyaWJlKGV2ZW50ID0+IHRoaXMuc2Nyb2xsTGlzdChldmVudCkpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5jb250ZW50TW9kZSA9PT0gJ2ltZycpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRhcmdldCA/IHRoaXMudGFyZ2V0IDogdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBtb2NrRXZlbnQgPSB7dGFyZ2V0fTtcbiAgICAgICAgdGhpcy5zY3JvbGxMaXN0KG1vY2tFdmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5zY3JvbGxTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc2Nyb2xsU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgc2Nyb2xsTGlzdChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZXZlbnQudGFyZ2V0LnNjcm9sbGluZ0VsZW1lbnQgPyBldmVudC50YXJnZXQuc2Nyb2xsaW5nRWxlbWVudCA6IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCBjbGllbnRIZWlnaHQgPSB0YXJnZXRFbC5jbGllbnRIZWlnaHQ7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdGFyZ2V0RWwuc2Nyb2xsVG9wO1xuICAgIGlmICh0aGlzLmNvbnRlbnRNb2RlID09PSAnaW1nJykge1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChyZWN0LnRvcCA+PSAwICYmIChjbGllbnRIZWlnaHQgPj0gcmVjdC50b3AgKyB0aGlzLmxvYWRGYWN0b3IpKSB7XG4gICAgICAgIGlmICh0aGlzLmltZ0xvYWRTcmMpIHtcbiAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3JjID0gdGhpcy5pbWdMb2FkU3JjO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9hZE1vcmUuZW1pdChldmVudCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IHRhcmdldEVsLnNjcm9sbEhlaWdodDtcbiAgICAgIGlmIChzY3JvbGxUb3AgIT09IDAgJiYgKHNjcm9sbFRvcCArIGNsaWVudEhlaWdodCArIHRoaXMubG9hZEZhY3RvciA+PSBzY3JvbGxIZWlnaHQpKSB7XG4gICAgICAgIHRoaXMubG9hZE1vcmUuZW1pdChldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=