import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, NgZone, Output, Renderer2, ViewChild } from '@angular/core';
import { createPopper } from '@popperjs/core';
import { Subject } from 'rxjs';
import { AnimationCurves, AnimationDuration } from '../animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class PopperComponent {
    constructor(el, renderer, ngZone, changeDetectorRef, doc) {
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.doc = doc;
        this.fluidPopper = true;
        this.poppoverAppendDirection = 'bottom';
        this.appendTo = 'body';
        this.showAnimation = true;
        this.popper = null;
        this._isOpen = false;
        this.directionAnimationTransformOrigin = {
            'top': '0 100%',
            'bottom': '0 0'
        };
        this.directionSubject = new Subject();
        this.openChange = new EventEmitter();
        this.onDocumentClick = ($event) => {
            if (!!this.appendTo && this.popperContainer.nativeElement !== $event.target &&
                !this.popperContainer.nativeElement.contains($event.target)) {
                this.open = false;
            }
            else if (!this.appendTo && this.open && !this.el.nativeElement.contains($event.target)) {
                this.open = false;
            }
        };
        this.blockEvent = ($event) => {
            $event.preventDefault();
            $event.stopPropagation();
        };
        this.applyTransitionStyle = (data) => {
            const optionsContainer = this.popperContainer.nativeElement;
            this.updateContainerTransitionDirection(data?.state?.modifiersData?.flip?._skip);
            if (this.animate) {
                // perspective(1px) solves pixel shift caused by webkit transform
                this.renderer.setStyle(optionsContainer, 'transform', optionsContainer.style.transform +
                    ` scale3d(1, 0.8, 1) perspective(1px) ${this.popperDirection === 'bottom' ? 'translateY(-4px)' : 'translateY(4px)'}`);
                // Set container init state to transparent as beginning of the transition.
                this.renderer.setStyle(optionsContainer, 'opacity', 0);
                PopperComponent.nextTick(() => {
                    this.setTransition('open');
                    const that = this;
                    const handler = function (e) {
                        // remove transition
                        that.setTransition();
                        e.currentTarget.removeEventListener(e.type, handler);
                    };
                    optionsContainer.addEventListener('transitionend', handler);
                    this.renderer.setStyle(optionsContainer, 'transform', optionsContainer.style.transform.replace('scale3d(1, 0.8, 1)', 'scale3d(1, 1, 1)'));
                    this.popperDirection === 'bottom' ?
                        this.renderer.setStyle(optionsContainer, 'transform', optionsContainer.style.transform.replace('translateY(-4px)', 'translateY(0)')) :
                        this.renderer.setStyle(optionsContainer, 'transform', optionsContainer.style.transform.replace('translateY(4px)', 'translateY(0)'));
                    this.renderer.setStyle(optionsContainer, 'opacity', 1);
                    this.animate = false;
                });
            }
            else {
                // handle popper re-rendering, incoming transform doesn't have scale info
                this.renderer.setStyle(optionsContainer, 'transform', optionsContainer.style.transform + (this.open ? ' scale3d(1, 1, 1)' : ' scale3d(1, 0.8, 1)') + ' perspective(1px)');
            }
        };
        this.document = this.doc;
    }
    get open() {
        return this._isOpen;
    }
    set open(value) {
        if (this._isOpen === value) {
            return;
        }
        this.animate = true;
        if (value) {
            this.show();
        }
        else {
            this.close();
        }
        this._isOpen = value;
        PopperComponent.nextTick(() => {
            this.openChange.emit(value);
            this.setBlurListener();
        });
    }
    static nextTick(fn) {
        // Force to run fn after current data changed.
        setTimeout(() => fn.bind(this)());
    }
    show() {
        // Append to selector or original parent.
        if (this.appendTo) {
            if (this.fluidPopper) {
                let popperWidth = this.popperActivator.nativeElement && this.popperActivator.nativeElement.offsetWidth;
                if (this.extraConfig && this.extraConfig.extraWidth) {
                    popperWidth = popperWidth + this.extraConfig.extraWidth;
                }
                const firstEle = this.popperContainer.nativeElement.firstElementChild;
                if (firstEle.classList.contains('devui-search-container')) {
                    for (const child of this.popperContainer.nativeElement.children) {
                        child.style.width = `${popperWidth}px`;
                    }
                }
                else {
                    firstEle.style.width = `${popperWidth}px`;
                }
            }
            this.attachPopperContainerToSelector(this.appendTo);
        }
        else {
            this.attachPopperContainerToNode(this.popperParent);
        }
        this.popper = this.createCustomPopper();
        this.renderer.setStyle(this.popperContainer.nativeElement, 'display', 'block');
    }
    close() {
        const popperContainer = this.popperContainer.nativeElement;
        this.setTransition('close');
        // For IE 11/Edge
        if (popperContainer.style.transform.match(/scale3d\(1, 1, 1\)/)) {
            // Replace transform open state with close state
            this.renderer.setStyle(popperContainer, 'transform', popperContainer.style.transform.replace('scale3d(1, 1, 1)', 'scale3d(1, 0.8, 1)'));
        }
        else {
            // perspective(1px) solves pixel shift caused by webkit transform
            this.renderer.setStyle(popperContainer, 'transform', popperContainer.style.transform + ` scale3d(1, 0.8, 1) perspective(1px)`);
        }
        // Set container to transparent
        this.renderer.setStyle(popperContainer, 'opacity', 0.8);
        // Can't use bind(this) since it calls itself
        const that = this;
        const handler = function (e) {
            if (!that.open && that.popper) {
                // Set final state of container to invisible
                that.renderer.setStyle(popperContainer, 'display', 'none');
                that.animate = false;
                // Remove transition
                that.setTransition();
                that.popper.destroy();
                that.popper = null;
                that.detachPopperContainer();
            }
            e.currentTarget.removeEventListener(e.type, handler);
        };
        if (this.showAnimation) {
            this.popperContainer.nativeElement.addEventListener('transitionend', handler);
        }
        else {
            that.renderer.setStyle(popperContainer, 'display', 'none');
            that.animate = false;
            that.popper.destroy();
            that.popper = null;
            that.detachPopperContainer();
        }
    }
    setBlurListener() {
        this.ngZone.runOutsideAngular(() => {
            if (this.open) {
                this.document.addEventListener('click', this.onDocumentClick);
                this.popperContainer.nativeElement.addEventListener('click', this.blockEvent);
            }
            else {
                this.document.removeEventListener('click', this.onDocumentClick);
                this.popperContainer.nativeElement.removeEventListener('click', this.blockEvent);
            }
        });
    }
    updateContainerTransitionDirection(flipped) {
        const direction = flipped ? 'top' : 'bottom';
        if (this.popperDirection !== direction) {
            this.popperDirection = direction;
            this.setTransitionOrigin();
        }
        this.directionSubject.next(this.popperDirection);
    }
    setTransitionOrigin() {
        if (this.popperContainer.nativeElement) {
            this.renderer.setStyle(this.popperContainer.nativeElement, 'transform-origin', this.directionAnimationTransformOrigin[this.popperDirection]);
        }
    }
    createCustomPopper() {
        return createPopper(this.popperActivator.nativeElement, this.popperContainer.nativeElement, {
            placement: 'bottom-start',
            modifiers: [
                {
                    name: 'preventOverflow',
                    options: {
                        mainAxis: true, // true by default
                    },
                },
                {
                    name: 'applyReactStyle',
                    phase: 'afterWrite',
                    enabled: true,
                    fn: this.applyTransitionStyle
                },
                {
                    name: 'offset',
                    options: {
                        offset: this.extraConfig && this.extraConfig.offset
                            ? [parseInt(this.extraConfig.offset.split(',')[0], 10), parseInt(this.extraConfig.offset.split(',')[1], 10)]
                            : [0, 5], // true by default
                    },
                },
                {
                    name: 'flip',
                    options: {
                        flipVariations: true, // true by default
                    },
                },
            ],
            strategy: this.appendTo ? 'fixed' : 'absolute',
        });
    }
    setTransition(command = null) {
        const popperContainer = this.popperContainer.nativeElement;
        if (this.animate && command) {
            if (command === 'open') {
                this.renderer.setStyle(popperContainer, 'transition', this.showAnimation
                    ? `all ${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT}` : 'none');
            }
            else if (command === 'close') {
                popperContainer.style.transition = this.showAnimation ? `all ${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}` : 'none';
            }
        }
        else {
            this.renderer.setStyle(popperContainer, 'transition', null);
        }
    }
    update() {
        PopperComponent.nextTick(() => {
            if (this.popper) {
                this.popper.forceUpdate();
            }
        });
    }
    ngOnDestroy() {
        // Close popper
        this.open = false;
    }
    detachPopperContainer() {
        // Cache popper's parent and popper node.
        this.popperParent = this.popperContainer.nativeElement.parentNode;
        this.popperNode = this.popperContainer.nativeElement;
        if (this.popperParent && this.popperNode) {
            this.popperParent.removeChild(this.popperNode);
        }
    }
    attachPopperContainerToNode(nodeParent) {
        if (nodeParent && this.popperNode) {
            this.popperParent = nodeParent;
            this.popperParent.appendChild(this.popperNode);
        }
    }
    attachPopperContainerToSelector(targetSelector) {
        const nodeParent = this.document.querySelector(targetSelector);
        this.attachPopperContainerToNode(nodeParent);
    }
    ngAfterViewInit() {
        // Detach popper container once view initialized.
        this.detachPopperContainer();
    }
    directionChange() {
        return this.directionSubject.asObservable();
    }
}
PopperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PopperComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
PopperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: PopperComponent, selector: "d-popper-component", inputs: { open: "open", fluidPopper: "fluidPopper", poppoverAppendDirection: "poppoverAppendDirection", appendTo: "appendTo", extraConfig: "extraConfig", showAnimation: "showAnimation" }, outputs: { openChange: "openChange" }, viewQueries: [{ propertyName: "popperActivator", first: true, predicate: ["popperActivator"], descendants: true, static: true }, { propertyName: "popperContainer", first: true, predicate: ["popperContainer"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"popper\">\n  <div class=\"popper-activator\" #popperActivator>\n    <ng-content select=\"[popper-activator]\"></ng-content>\n  </div>\n\n  <div\n    class=\"popper-container\"\n    #popperContainer\n    [ngClass]=\"{\n      fluid: fluidPopper && !appendTo,\n      'devui-popover-container-right': poppoverAppendDirection === 'right',\n      'devui-popover-container-left': poppoverAppendDirection === 'left'\n    }\"\n  >\n    <div class=\"devui-dropdown-menu-wrap\">\n      <ng-content select=\"[popper-prepend]\"></ng-content>\n      <div class=\"popper-container-scrollable devui-scrollbar\">\n        <ng-content select=\"[popper-container]\"></ng-content>\n      </div>\n    </div>\n    <div class=\"popper-append-area\">\n      <ng-content select=\"[popper-append]\"></ng-content>\n    </div>\n  </div>\n</div>\n", styles: [".popper{position:relative;width:100%}.popper .popper-activator{width:100%}.popper-container{display:none;z-index:1052;z-index:var(--devui-z-index-dropdown, 1052);position:absolute;box-shadow:0 4px 16px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-length-feedback-overlay, 0 4px 16px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);border:none;backface-visibility:hidden;-webkit-backface-visibility:hidden;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.popper-container.devui-popover-container-right,.popper-container.devui-popover-container-left{display:flex!important}.popper-container.devui-popover-container-right>.devui-dropdown-menu-wrap,.popper-container.devui-popover-container-left>.devui-dropdown-menu-wrap{display:inline-block}.popper-container.devui-popover-container-right>.popper-append-area,.popper-container.devui-popover-container-left>.popper-append-area{display:inline-block;overflow:auto}.popper-container.devui-popover-container-right .popper-append-area,.popper-container.devui-popover-container-left .popper-append-area{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.popper-container.devui-popover-container-right .popper-append-area:before,.popper-container.devui-popover-container-left .popper-append-area:before{display:none}.popper-container.devui-popover-container-left .popper-append-area{order:-1}.popper-container .popper-container-scrollable{min-height:40px;width:100%;overflow:auto;overflow:overlay}.popper-container.fluid{width:100%}:host{display:block}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PopperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-popper-component', template: "<div class=\"popper\">\n  <div class=\"popper-activator\" #popperActivator>\n    <ng-content select=\"[popper-activator]\"></ng-content>\n  </div>\n\n  <div\n    class=\"popper-container\"\n    #popperContainer\n    [ngClass]=\"{\n      fluid: fluidPopper && !appendTo,\n      'devui-popover-container-right': poppoverAppendDirection === 'right',\n      'devui-popover-container-left': poppoverAppendDirection === 'left'\n    }\"\n  >\n    <div class=\"devui-dropdown-menu-wrap\">\n      <ng-content select=\"[popper-prepend]\"></ng-content>\n      <div class=\"popper-container-scrollable devui-scrollbar\">\n        <ng-content select=\"[popper-container]\"></ng-content>\n      </div>\n    </div>\n    <div class=\"popper-append-area\">\n      <ng-content select=\"[popper-append]\"></ng-content>\n    </div>\n  </div>\n</div>\n", styles: [".popper{position:relative;width:100%}.popper .popper-activator{width:100%}.popper-container{display:none;z-index:1052;z-index:var(--devui-z-index-dropdown, 1052);position:absolute;box-shadow:0 4px 16px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-length-feedback-overlay, 0 4px 16px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);border:none;backface-visibility:hidden;-webkit-backface-visibility:hidden;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.popper-container.devui-popover-container-right,.popper-container.devui-popover-container-left{display:flex!important}.popper-container.devui-popover-container-right>.devui-dropdown-menu-wrap,.popper-container.devui-popover-container-left>.devui-dropdown-menu-wrap{display:inline-block}.popper-container.devui-popover-container-right>.popper-append-area,.popper-container.devui-popover-container-left>.popper-append-area{display:inline-block;overflow:auto}.popper-container.devui-popover-container-right .popper-append-area,.popper-container.devui-popover-container-left .popper-append-area{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.popper-container.devui-popover-container-right .popper-append-area:before,.popper-container.devui-popover-container-left .popper-append-area:before{display:none}.popper-container.devui-popover-container-left .popper-append-area{order:-1}.popper-container .popper-container-scrollable{min-height:40px;width:100%;overflow:auto;overflow:overlay}.popper-container.fluid{width:100%}:host{display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { open: [{
                type: Input
            }], fluidPopper: [{
                type: Input
            }], poppoverAppendDirection: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], extraConfig: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], openChange: [{
                type: Output
            }], popperActivator: [{
                type: ViewChild,
                args: ['popperActivator', { static: true }]
            }], popperContainer: [{
                type: ViewChild,
                args: ['popperContainer', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,