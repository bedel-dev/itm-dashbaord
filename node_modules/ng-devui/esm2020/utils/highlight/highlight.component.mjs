import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Inject, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class HighlightComponent {
    constructor(translateHtml, eleRef, doc) {
        this.translateHtml = translateHtml;
        this.eleRef = eleRef;
        this.doc = doc;
        this.display = 'inline';
        /**
         * @deprecated
         */
        this.highlightClass = 'devui-match-highlight';
        this.document = this.doc;
    }
    ngOnChanges(changes) {
        this.addDom(this.value, this.term);
    }
    addDom(value, term) {
        if (value && term) {
            this.highlight(value, term);
        }
        else {
            const container = this.eleRef.nativeElement;
            this.emptyChildren(container);
            container.textContent = value;
        }
    }
    emptyChildren(container) {
        while (container.hasChildNodes()) {
            container.removeChild(container.firstChild);
        }
    }
    highlight(value, term) {
        const container = this.eleRef.nativeElement;
        this.emptyChildren(container);
        const reg = (str) => str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        const regExp = new RegExp('(' + reg(term) + ')', 'gi');
        const temp = value.split(regExp);
        const createHighLight = (text) => {
            const spanDOM = this.document.createElement('span');
            spanDOM.classList.add('devui-match-highlight');
            spanDOM.textContent = text;
            return spanDOM;
        };
        temp.forEach((element, index) => {
            if (index % 2 === 0) {
                container.appendChild(this.document.createTextNode(element));
            }
            else {
                container.appendChild(createHighLight(element));
            }
        });
    }
}
HighlightComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: HighlightComponent, deps: [{ token: i1.DomSanitizer }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
HighlightComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: HighlightComponent, selector: "d-highlight", inputs: { value: "value", term: "term", highlightClass: "highlightClass" }, host: { properties: { "style.display": "this.display" } }, usesOnChanges: true, ngImport: i0, template: ``, isInline: true, styles: [":host ::ng-deep .devui-match-highlight{font-weight:700}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: HighlightComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-highlight', template: ``, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host ::ng-deep .devui-match-highlight{font-weight:700}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { display: [{
                type: HostBinding,
                args: ['style.display']
            }], value: [{
                type: Input
            }], term: [{
                type: Input
            }], highlightClass: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL3V0aWxzL2hpZ2hsaWdodC9oaWdobGlnaHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDckksT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFRekQsTUFBTSxPQUFPLGtCQUFrQjtJQVU3QixZQUFvQixhQUEyQixFQUFVLE1BQWtCLEVBQTRCLEdBQVE7UUFBM0Ysa0JBQWEsR0FBYixhQUFhLENBQWM7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQTRCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFUakYsWUFBTyxHQUFHLFFBQVEsQ0FBQztRQUdqRDs7V0FFRztRQUNNLG1CQUFjLEdBQUcsdUJBQXVCLENBQUM7UUFJaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzNCLENBQUM7SUFDRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLEtBQWEsRUFBRSxJQUFZO1FBQ2hDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0wsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDNUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM5QixTQUFTLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUMvQjtJQUNILENBQUM7SUFDRCxhQUFhLENBQUMsU0FBUztRQUNyQixPQUFPLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUNoQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDNUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyRSxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2RCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUMvQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztZQUMzQixPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzlCLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25CLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUM5RDtpQkFBTTtnQkFDTCxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2pEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzsrR0FuRFUsa0JBQWtCLHdFQVV3RCxRQUFRO21HQVZsRixrQkFBa0IsK01BSm5CLEVBQUU7MkZBSUQsa0JBQWtCO2tCQU45QixTQUFTOytCQUNFLGFBQWEsWUFDYixFQUFFLG1CQUVLLHVCQUF1QixDQUFDLE1BQU07OzBCQVkrQixNQUFNOzJCQUFDLFFBQVE7NENBVC9ELE9BQU87c0JBQXBDLFdBQVc7dUJBQUMsZUFBZTtnQkFDbkIsS0FBSztzQkFBYixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFJRyxjQUFjO3NCQUF0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEluamVjdCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2QtaGlnaGxpZ2h0JyxcbiAgdGVtcGxhdGU6IGBgLFxuICBzdHlsZVVybHM6IFsnLi9oaWdobGlnaHQuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBIb3N0QmluZGluZygnc3R5bGUuZGlzcGxheScpIGRpc3BsYXkgPSAnaW5saW5lJztcbiAgQElucHV0KCkgdmFsdWU6IHN0cmluZztcbiAgQElucHV0KCkgdGVybTogc3RyaW5nO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIEBJbnB1dCgpIGhpZ2hsaWdodENsYXNzID0gJ2RldnVpLW1hdGNoLWhpZ2hsaWdodCc7XG4gIGRvY3VtZW50OiBEb2N1bWVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZUh0bWw6IERvbVNhbml0aXplciwgcHJpdmF0ZSBlbGVSZWY6IEVsZW1lbnRSZWYsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jOiBhbnkpIHtcbiAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5kb2M7XG4gIH1cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHRoaXMuYWRkRG9tKHRoaXMudmFsdWUsIHRoaXMudGVybSk7XG4gIH1cbiAgYWRkRG9tKHZhbHVlOiBzdHJpbmcsIHRlcm06IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKHZhbHVlICYmIHRlcm0pIHtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0KHZhbHVlLCB0ZXJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5lbGVSZWYubmF0aXZlRWxlbWVudDtcbiAgICAgIHRoaXMuZW1wdHlDaGlsZHJlbihjb250YWluZXIpO1xuICAgICAgY29udGFpbmVyLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIGVtcHR5Q2hpbGRyZW4oY29udGFpbmVyKSB7XG4gICAgd2hpbGUgKGNvbnRhaW5lci5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9XG5cbiAgaGlnaGxpZ2h0KHZhbHVlOiBzdHJpbmcsIHRlcm06IHN0cmluZykge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZWxlUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5lbXB0eUNoaWxkcmVuKGNvbnRhaW5lcik7XG4gICAgY29uc3QgcmVnID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG4gICAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cCgnKCcgKyByZWcodGVybSkgKyAnKScsICdnaScpO1xuICAgIGNvbnN0IHRlbXAgPSB2YWx1ZS5zcGxpdChyZWdFeHApO1xuICAgIGNvbnN0IGNyZWF0ZUhpZ2hMaWdodCA9ICh0ZXh0KSA9PiB7XG4gICAgICBjb25zdCBzcGFuRE9NID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBzcGFuRE9NLmNsYXNzTGlzdC5hZGQoJ2RldnVpLW1hdGNoLWhpZ2hsaWdodCcpO1xuICAgICAgc3BhbkRPTS50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICByZXR1cm4gc3BhbkRPTTtcbiAgICB9O1xuXG4gICAgdGVtcC5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ICUgMiA9PT0gMCkge1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlbGVtZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlSGlnaExpZ2h0KGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19