import { Inject, Injectable, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, mapTo } from 'rxjs/operators';
import { DevUIGlobalConfigToken } from './config';
import * as i0 from "@angular/core";
const isDefined = function (value) {
    return value !== undefined;
};
export class DevConfigService {
    constructor(defaultConfig) {
        this.configUpdated$ = new Subject();
        this.config = defaultConfig || {};
    }
    getConfigForComponent(componentName) {
        return this.config[componentName];
    }
    getConfigForApi(api) {
        const globalConfig = this.config['global'] || {};
        const apiConfig = globalConfig[api];
        return apiConfig;
    }
    getConfigChangeEventForComponent(componentName) {
        return this.configUpdated$.pipe(filter((n) => n === componentName), mapTo(undefined));
    }
    set(componentName, value) {
        this.config[componentName] = { ...this.config[componentName], ...value };
        this.configUpdated$.next(componentName);
    }
}
DevConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DevConfigService, deps: [{ token: DevUIGlobalConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
DevConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DevConfigService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DevConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DevUIGlobalConfigToken]
                }] }]; } });
export function WithConfig(propertyKey) {
    return function ConfigDecorator(target, propName, originalDescriptor) {
        const privatePropName = `$$__assignedValue__${propName}`;
        if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
            console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by withConfig decorator.`);
        }
        Object.defineProperty(target, privatePropName, {
            configurable: true,
            writable: true,
            enumerable: false,
        });
        return {
            get() {
                const originalValue = originalDescriptor?.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
                const assignedByUser = ((this.assignmentCount || {})[propName] || 0) > 1;
                if (assignedByUser && isDefined(originalValue)) {
                    return originalValue;
                }
                if (JSON.stringify(this.devConfigService.config) === '{}') {
                    return originalValue;
                }
                let name = this.constructor.name;
                name = name.replace('Directive', '');
                name = name.replace('Component', '');
                name = name.toLowerCase();
                const componentConfig = this.devConfigService.config[name] || {};
                const configValue = componentConfig[propName];
                const globalConfig = this.devConfigService.config['global'] || {};
                const apiConfig = globalConfig[propName];
                const ret = isDefined(configValue) ? configValue : isDefined(apiConfig) ? apiConfig : originalValue;
                return ret;
            },
            set(value) {
                this.assignmentCount = this.assignmentCount || {};
                this.assignmentCount[propName] = (this.assignmentCount[propName] || 0) + 1;
                if (originalDescriptor && originalDescriptor.set) {
                    originalDescriptor.set.bind(this)(value);
                }
                this[privatePropName] = value;
            },
            configurable: true,
            enumerable: true,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,