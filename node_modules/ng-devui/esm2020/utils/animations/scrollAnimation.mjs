export function scrollAnimate(target, currentTopValue, targetTopValue, timeGap = 40, scrollTime = 450, callback) {
    if (typeof document === 'undefined' || typeof window === 'undefined' || !target) {
        return;
    }
    const startTimeStamp = Date.now();
    const drawAnimateFrame = () => {
        const currentTime = Date.now() - startTimeStamp;
        if (currentTime - timeGap > scrollTime) {
            target.scrollTop = targetTopValue;
            if (target === document.documentElement) {
                // 兼容写法，老浏览器/老API模式需要document.body滚动，新的需要documentElement滚动
                document.body.scrollTop = targetTopValue;
            }
            if (callback) {
                callback();
            }
        }
        else {
            const tempTopValue = easeInOutCubic(currentTime, currentTopValue, targetTopValue, scrollTime);
            target.scrollTop = tempTopValue;
            if (target === document.documentElement) {
                document.body.scrollTop = tempTopValue;
            }
            setTimeout(() => {
                requestAnimationFrame(drawAnimateFrame);
            }, timeGap);
        }
    };
    requestAnimationFrame(drawAnimateFrame);
}
export function easeInOutCubic(t, b, c, d) {
    const cc = c - b;
    let tt = t / (d / 2);
    if (tt < 1) {
        return ((cc / 2) * tt * tt * tt + b);
    }
    else {
        // eslint-disable-next-line no-return-assign
        return ((cc / 2) * ((tt -= 2) * tt * tt + 2) + b);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsQW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2dWkvdXRpbHMvYW5pbWF0aW9ucy9zY3JvbGxBbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFNLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLFVBQVUsR0FBRyxHQUFHLEVBQUUsUUFBUztJQUM5RyxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDL0UsT0FBTztLQUNSO0lBQ0QsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFO1FBQzVCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxjQUFjLENBQUM7UUFDaEQsSUFBSSxXQUFXLEdBQUcsT0FBTyxHQUFHLFVBQVUsRUFBRTtZQUN0QyxNQUFNLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQztZQUNsQyxJQUFJLE1BQU0sS0FBSyxRQUFRLENBQUMsZUFBZSxFQUFFO2dCQUN2QywwREFBMEQ7Z0JBQzFELFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQzthQUMxQztZQUNELElBQUksUUFBUSxFQUFFO2dCQUNaLFFBQVEsRUFBRSxDQUFDO2FBQ1o7U0FDRjthQUFNO1lBQ0wsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzlGLE1BQU0sQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ2hDLElBQUksTUFBTSxLQUFLLFFBQVEsQ0FBQyxlQUFlLEVBQUU7Z0JBQ3ZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQzthQUN4QztZQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUMxQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDYjtJQUNILENBQUMsQ0FBQztJQUNGLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUN2RSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQixJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDdEM7U0FBTTtRQUNMLDRDQUE0QztRQUM1QyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzY3JvbGxBbmltYXRlKHRhcmdldCwgY3VycmVudFRvcFZhbHVlLCB0YXJnZXRUb3BWYWx1ZSwgdGltZUdhcCA9IDQwLCBzY3JvbGxUaW1lID0gNDUwLCBjYWxsYmFjaz8pIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXRhcmdldCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzdGFydFRpbWVTdGFtcCA9IERhdGUubm93KCk7XG4gIGNvbnN0IGRyYXdBbmltYXRlRnJhbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lU3RhbXA7XG4gICAgaWYgKGN1cnJlbnRUaW1lIC0gdGltZUdhcCA+IHNjcm9sbFRpbWUpIHtcbiAgICAgIHRhcmdldC5zY3JvbGxUb3AgPSB0YXJnZXRUb3BWYWx1ZTtcbiAgICAgIGlmICh0YXJnZXQgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAvLyDlhbzlrrnlhpnms5XvvIzogIHmtY/op4jlmagv6ICBQVBJ5qih5byP6ZyA6KaBZG9jdW1lbnQuYm9keea7muWKqO+8jOaWsOeahOmcgOimgWRvY3VtZW50RWxlbWVudOa7muWKqFxuICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHRhcmdldFRvcFZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRlbXBUb3BWYWx1ZSA9IGVhc2VJbk91dEN1YmljKGN1cnJlbnRUaW1lLCBjdXJyZW50VG9wVmFsdWUsIHRhcmdldFRvcFZhbHVlLCBzY3JvbGxUaW1lKTtcbiAgICAgIHRhcmdldC5zY3JvbGxUb3AgPSB0ZW1wVG9wVmFsdWU7XG4gICAgICBpZiAodGFyZ2V0ID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSB0ZW1wVG9wVmFsdWU7XG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdBbmltYXRlRnJhbWUpO1xuICAgICAgfSwgdGltZUdhcCk7XG4gICAgfVxuICB9O1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0FuaW1hdGVGcmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYXNlSW5PdXRDdWJpYyh0OiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyLCBkOiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBjYyA9IGMgLSBiO1xuICBsZXQgdHQgPSB0IC8gKGQgLyAyKTtcbiAgaWYgKHR0IDwgMSkge1xuICAgIHJldHVybiAoKGNjIC8gMikgKiB0dCAqIHR0ICogdHQgKyBiKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmV0dXJuLWFzc2lnblxuICAgIHJldHVybiAoKGNjIC8gMikgKiAoKHR0IC09IDIpICogdHQgKiB0dCArIDIpICsgYik7XG4gIH1cbn1cbiJdfQ==