import { animate, group, state, style, transition, trigger } from '@angular/animations';
import { AnimationCurves, AnimationDuration } from './animationParameters';
const easeOut = AnimationCurves.EASE_OUT;
const easeIn = AnimationCurves.EASE_IN;
const linear = AnimationCurves.LINEAR;
const duration = AnimationDuration.FAST;
export const wipeInOutAnimation = trigger('wipeInOutAnimation', [
    state('void', style({ opacity: 0.2, transform: 'translateY(-24px)' })),
    state('in', style({ opacity: 1, transform: 'translateY(0)' })),
    transition('void => in', group([
        animate(`${duration} ${easeOut}`, style({ opacity: 1 })),
        animate(`${duration} ${linear}`, style({ transform: 'translateY(0)' }))
    ])),
    transition('in => void', group([
        animate(`${duration} ${easeIn}`, style({ opacity: 0.2 })),
        animate(`${duration} ${linear}`, style({ transform: 'translateY(-24px)' }))
    ])),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lwZS1pbi1vdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZ1aS91dGlscy9hbmltYXRpb25zL3dpcGUtaW4tb3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQTRCLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsSCxPQUFPLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFM0UsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQztBQUN6QyxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7QUFDdEMsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0FBRXhDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUE2QixPQUFPLENBQUMsb0JBQW9CLEVBQUU7SUFDeEYsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7SUFDdEUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzlELFVBQVUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLFFBQVEsSUFBSSxPQUFPLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4RCxPQUFPLENBQUMsR0FBRyxRQUFRLElBQUksTUFBTSxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7S0FDeEUsQ0FBQyxDQUFDO0lBQ0gsVUFBVSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUM7UUFDN0IsT0FBTyxDQUFDLEdBQUcsUUFBUSxJQUFJLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLFFBQVEsSUFBSSxNQUFNLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0tBQzVFLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSwgZ3JvdXAsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ3VydmVzLCBBbmltYXRpb25EdXJhdGlvbiB9IGZyb20gJy4vYW5pbWF0aW9uUGFyYW1ldGVycyc7XG5cbmNvbnN0IGVhc2VPdXQgPSBBbmltYXRpb25DdXJ2ZXMuRUFTRV9PVVQ7XG5jb25zdCBlYXNlSW4gPSBBbmltYXRpb25DdXJ2ZXMuRUFTRV9JTjtcbmNvbnN0IGxpbmVhciA9IEFuaW1hdGlvbkN1cnZlcy5MSU5FQVI7XG5jb25zdCBkdXJhdGlvbiA9IEFuaW1hdGlvbkR1cmF0aW9uLkZBU1Q7XG5cbmV4cG9ydCBjb25zdCB3aXBlSW5PdXRBbmltYXRpb246IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSA9IHRyaWdnZXIoJ3dpcGVJbk91dEFuaW1hdGlvbicsIFtcbiAgc3RhdGUoJ3ZvaWQnLCBzdHlsZSh7IG9wYWNpdHk6IDAuMiwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMjRweCknIH0pKSxcbiAgc3RhdGUoJ2luJywgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9KSksXG4gIHRyYW5zaXRpb24oJ3ZvaWQgPT4gaW4nLCBncm91cChbXG4gICAgYW5pbWF0ZShgJHtkdXJhdGlvbn0gJHtlYXNlT3V0fWAsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXG4gICAgYW5pbWF0ZShgJHtkdXJhdGlvbn0gJHtsaW5lYXJ9YCwgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9KSlcbiAgXSkpLFxuICB0cmFuc2l0aW9uKCdpbiA9PiB2b2lkJywgZ3JvdXAoW1xuICAgIGFuaW1hdGUoYCR7ZHVyYXRpb259ICR7ZWFzZUlufWAsIHN0eWxlKHsgb3BhY2l0eTogMC4yIH0pKSxcbiAgICBhbmltYXRlKGAke2R1cmF0aW9ufSAke2xpbmVhcn1gLCBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTI0cHgpJyB9KSlcbiAgXSkpLFxuXSk7XG4iXX0=