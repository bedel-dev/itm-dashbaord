import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Inject, Input, Output } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { throttle } from 'lodash-es';
import { Subscription } from 'rxjs';
import { StepsGuideComponent } from './steps-guide.component';
import { StepsGuideService } from './steps-guide.service';
import * as i0 from "@angular/core";
import * as i1 from "./steps-guide.service";
import * as i2 from "ng-devui/overlay-container";
export class StepsGuideDirective {
    constructor(stepService, elm, componentFactoryResolver, overlayContainerRef, doc) {
        this.stepService = stepService;
        this.elm = elm;
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayContainerRef = overlayContainerRef;
        this.doc = doc;
        this.steps = [];
        // 可选，用于修正引导位置
        this.leftFix = 0;
        this.topFix = 0;
        this.zIndex = 1100;
        // 是否自动滚动页面至目标
        this.scrollToTargetSwitch = true;
        // 点击引导操作触发，返回当前步骤和当前操作，比如上一步、下一步、关闭
        this.operateChange = new EventEmitter();
        this.sub = new Subscription();
        // 监听dom变化的设置，监听属性变化和dom所属节点树变化
        this.MUTATION_OBSERVER_CONFIG = { attributes: true, subtree: true };
        this.MUTATION_OBSERVER_TIME = 500;
        // 监听dom变化的回调方法，即dom发生变化时触发resize事件
        this.mutationCallBack = () => {
            if (typeof window === 'undefined') {
                return;
            }
            const resizeEvt = this.document.createEvent('Event');
            resizeEvt.initEvent('resize', true, true);
            window.dispatchEvent(resizeEvt);
        };
        this.document = this.doc;
    }
    set dStepsGuidePosition(pos) {
        this._dStepsGuidePosition = pos;
    }
    get dStepsGuidePosition() {
        return this._dStepsGuidePosition || 'top';
    }
    /**
     * @deprecated Use dStepsGuidePosition to replace.
     */
    set position(pos) {
        if (!this._dStepsGuidePosition) {
            this.dStepsGuidePosition = pos;
        }
    }
    // 允许用户指定一个dom反馈页面变化，通过MutationObserver监听该dom所属节点树变化触发resize事件使引导弹窗自动修正位置
    set observerDom(dom) {
        if (dom) {
            this._observerDom = dom;
            // 创建监听实例，并限制回调方法在500ms内只响应一次，避免多次响应dom变化造成性能负担
            this.observer = new MutationObserver(throttle(this.mutationCallBack, this.MUTATION_OBSERVER_TIME, { 'leading': false, 'trailing': true }));
            this.observer.observe(this._observerDom, this.MUTATION_OBSERVER_CONFIG);
        }
        else {
            this.destroyMutationObserver(true);
        }
    }
    ngOnInit() {
        // 监听当前索引变化，决定显示步骤
        this.sub.add(this.stepService.currentIndex.subscribe(index => {
            this.canChange(index).then((change) => {
                if (!change) {
                    return;
                }
            });
            // 防止服务中的步骤被置空或默认为空
            const serviceSteps = this.stepService.getSteps() || [];
            this.steps = serviceSteps.length > 0 ? serviceSteps : this.steps;
            const state = localStorage.getItem(`devui_guide_${this.pageName}`) || '1';
            this.toggle = Number(state);
            this.currentIndex = index;
            const currentStep = this.steps.length > 0 && this.steps[this.currentIndex];
            // 当前步骤内容存在且未被屏蔽显示且为当前索引时插入操作指引弹窗
            if (currentStep && this.toggle && this.stepIndex === this.currentIndex) {
                const targetDom = this.targetElement || this.elm.nativeElement;
                if (this.scrollToTargetSwitch) {
                    targetDom.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
                }
                // 如果该步骤设置了监听dom和监听实例，重启监听
                if (this._observerDom && this.observer) {
                    this.observer.disconnect();
                    this.observer.observe(this._observerDom, this.MUTATION_OBSERVER_CONFIG);
                }
                setTimeout(() => {
                    this.insert({
                        triggerElement: targetDom,
                        scrollElement: this.scrollElement,
                        pageName: this.pageName,
                        title: currentStep.title,
                        content: currentStep.content,
                        stepsCount: this.steps.length,
                        stepIndex: this.stepIndex,
                        position: this.dStepsGuidePosition,
                        leftFix: this.leftFix,
                        topFix: this.topFix,
                        zIndex: this.zIndex,
                    });
                });
            }
        }));
        // 监听切换显示和隐藏
        this.sub.add(this.stepService.showGuideObs.subscribe(visible => {
            if (visible) {
                const currentIndex = this.stepService.getCurrentStep() || 0;
                localStorage.removeItem(`devui_guide_${this.pageName}`);
                this.stepService.setCurrentIndex(currentIndex);
            }
            else {
                localStorage.setItem(`devui_guide_${this.pageName}`, '0');
                this.destroyView();
            }
        }));
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
        this.destroyView();
    }
    destroyView() {
        if (this.stepRef) {
            this.stepRef.hostView.destroy();
        }
        this.destroyMutationObserver();
    }
    insert(option) {
        const hasGuide = this.document.querySelector('body>.devui-step-item');
        if (!hasGuide) {
            this.stepRef = this.overlayContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(StepsGuideComponent));
            Object.assign(this.stepRef.instance, option, { extraConfig: this.extraConfig });
            this.stepRef.instance.close = (step, type) => {
                this.operateChange.emit({ clickType: type, currentIndex: step });
                this.destroyView();
            };
        }
    }
    // 断开监听, 清空监听dom和实例
    destroyMutationObserver(destroyAll) {
        if (this.observer) {
            this.observer.disconnect();
        }
        if (destroyAll) {
            this._observerDom = undefined;
            this.observer = undefined;
        }
    }
    canChange(index) {
        let changeResult = Promise.resolve(true);
        const currentIndex = this.currentIndex >= 0 ? this.currentIndex : this.stepIndex;
        if (currentIndex === index && this.beforeChange) {
            const result = this.beforeChange(currentIndex, index);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    changeResult = result;
                }
                else if (result.subscribe) {
                    changeResult = result.toPromise();
                }
                else {
                    changeResult = Promise.resolve(result);
                }
            }
        }
        return changeResult;
    }
}
StepsGuideDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: StepsGuideDirective, deps: [{ token: i1.StepsGuideService }, { token: i0.ElementRef }, { token: i0.ComponentFactoryResolver }, { token: i2.OverlayContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
StepsGuideDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: StepsGuideDirective, selector: "[dStepsGuide]", inputs: { pageName: "pageName", steps: "steps", stepIndex: "stepIndex", dStepsGuidePosition: "dStepsGuidePosition", position: "position", leftFix: "leftFix", topFix: "topFix", zIndex: "zIndex", targetElement: "targetElement", scrollElement: "scrollElement", scrollToTargetSwitch: "scrollToTargetSwitch", extraConfig: "extraConfig", observerDom: "observerDom", beforeChange: "beforeChange" }, outputs: { operateChange: "operateChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: StepsGuideDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dStepsGuide]',
                }]
        }], ctorParameters: function () { return [{ type: i1.StepsGuideService }, { type: i0.ElementRef }, { type: i0.ComponentFactoryResolver }, { type: i2.OverlayContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { pageName: [{
                type: Input
            }], steps: [{
                type: Input
            }], stepIndex: [{
                type: Input
            }], dStepsGuidePosition: [{
                type: Input
            }], position: [{
                type: Input
            }], leftFix: [{
                type: Input
            }], topFix: [{
                type: Input
            }], zIndex: [{
                type: Input
            }], targetElement: [{
                type: Input
            }], scrollElement: [{
                type: Input
            }], scrollToTargetSwitch: [{
                type: Input
            }], extraConfig: [{
                type: Input
            }], observerDom: [{
                type: Input
            }], beforeChange: [{
                type: Input
            }], operateChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,