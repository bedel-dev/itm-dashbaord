import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class QuadrantDiagramService {
    constructor(doc) {
        this.doc = doc;
        this.document = this.doc;
    }
    showAxisLine(x, y, diagramId, view, axisConfigs) {
        const horizontalLine = this.document.querySelector('d-quadrant-diagram#' + diagramId + ' .devui-horizontal-line');
        const verticalLine = this.document.querySelector('d-quadrant-diagram#' + diagramId + ' .devui-vertical-line');
        const labelXAxisValue = this.document.querySelector('d-quadrant-diagram#' + diagramId + ' #devui-label-x-axis-value');
        const labelYAxisValue = this.document.querySelector('d-quadrant-diagram#' + diagramId + ' #devui-label-y-axis-value');
        labelXAxisValue.textContent = this.getXAxisValue(view, axisConfigs, x);
        labelYAxisValue.textContent = this.getYAxisValue(view, axisConfigs, y);
        horizontalLine.style.top = y + 'px';
        horizontalLine.style.display = '';
        verticalLine.style.left = x + 'px';
        verticalLine.style.display = '';
    }
    hideAxisLine(diagramId) {
        const horizontalLine = this.document.querySelector('d-quadrant-diagram#' + diagramId + ' .devui-horizontal-line');
        const verticalLine = this.document.querySelector('d-quadrant-diagram#' + diagramId + ' .devui-vertical-line');
        verticalLine.style.display = 'none';
        horizontalLine.style.display = 'none';
    }
    setListPointerEvents(diagramId, value) {
        const ele = this.document.querySelectorAll('d-quadrant-diagram#' + diagramId + ' .devui-list-style');
        ele.forEach(element => {
            element.style.pointerEvents = value;
        });
    }
    getXAxisValue(view, axisConfigs, left) {
        return ((left - axisConfigs.originPosition.left) / axisConfigs.xTickSpacing).toFixed(1);
    }
    getYAxisValue(view, axisConfigs, top) {
        return ((view.height - top - axisConfigs.originPosition.bottom)
            / axisConfigs.yTickSpacing).toFixed(1);
    }
}
QuadrantDiagramService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: QuadrantDiagramService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
QuadrantDiagramService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: QuadrantDiagramService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: QuadrantDiagramService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhZHJhbnQtZGlhZ3JhbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvcXVhZHJhbnQtZGlhZ3JhbS9xdWFkcmFudC1kaWFncmFtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUduRCxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLFlBQXNDLEdBQVE7UUFBUixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQzVDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUMzQixDQUFDO0lBQ0QsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxXQUFXO1FBQzdDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixHQUFHLFNBQVMsR0FBRyx5QkFBeUIsQ0FBZ0IsQ0FBQztRQUNqSSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsR0FBRyxTQUFTLEdBQUcsdUJBQXVCLENBQWdCLENBQUM7UUFDN0gsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEdBQUcsU0FBUyxHQUFHLDRCQUE0QixDQUFnQixDQUFDO1FBQ3JJLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixHQUFHLFNBQVMsR0FBRyw0QkFBNEIsQ0FBZ0IsQ0FBQztRQUNySSxlQUFlLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RSxlQUFlLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RSxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3BDLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25DLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsWUFBWSxDQUFDLFNBQVM7UUFDcEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEdBQUcsU0FBUyxHQUFHLHlCQUF5QixDQUFnQixDQUFDO1FBQ2pJLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixHQUFHLFNBQVMsR0FBRyx1QkFBdUIsQ0FBZ0IsQ0FBQztRQUM3SCxZQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDcEMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hDLENBQUM7SUFDRCxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsS0FBSztRQUNuQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixHQUFHLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3JHLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkIsT0FBdUIsQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxhQUFhLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJO1FBQ25DLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUNELGFBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUc7UUFDbEMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7Y0FDM0QsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDOzttSEFwQ1Usc0JBQXNCLGtCQUdiLFFBQVE7dUhBSGpCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxVQUFVOzswQkFJSSxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFF1YWRyYW50RGlhZ3JhbVNlcnZpY2Uge1xuICBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2M6IGFueSkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvYztcbiAgfVxuICBzaG93QXhpc0xpbmUoeCwgeSwgZGlhZ3JhbUlkLCB2aWV3LCBheGlzQ29uZmlncykge1xuICAgIGNvbnN0IGhvcml6b250YWxMaW5lID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkLXF1YWRyYW50LWRpYWdyYW0jJyArIGRpYWdyYW1JZCArICcgLmRldnVpLWhvcml6b250YWwtbGluZScpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHZlcnRpY2FsTGluZSA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZC1xdWFkcmFudC1kaWFncmFtIycgKyBkaWFncmFtSWQgKyAnIC5kZXZ1aS12ZXJ0aWNhbC1saW5lJykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgbGFiZWxYQXhpc1ZhbHVlID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkLXF1YWRyYW50LWRpYWdyYW0jJyArIGRpYWdyYW1JZCArICcgI2RldnVpLWxhYmVsLXgtYXhpcy12YWx1ZScpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGxhYmVsWUF4aXNWYWx1ZSA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZC1xdWFkcmFudC1kaWFncmFtIycgKyBkaWFncmFtSWQgKyAnICNkZXZ1aS1sYWJlbC15LWF4aXMtdmFsdWUnKSBhcyBIVE1MRWxlbWVudDtcbiAgICBsYWJlbFhBeGlzVmFsdWUudGV4dENvbnRlbnQgPSB0aGlzLmdldFhBeGlzVmFsdWUodmlldywgYXhpc0NvbmZpZ3MsIHgpO1xuICAgIGxhYmVsWUF4aXNWYWx1ZS50ZXh0Q29udGVudCA9IHRoaXMuZ2V0WUF4aXNWYWx1ZSh2aWV3LCBheGlzQ29uZmlncywgeSk7XG4gICAgaG9yaXpvbnRhbExpbmUuc3R5bGUudG9wID0geSArICdweCc7XG4gICAgaG9yaXpvbnRhbExpbmUuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIHZlcnRpY2FsTGluZS5zdHlsZS5sZWZ0ID0geCArICdweCc7XG4gICAgdmVydGljYWxMaW5lLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgfVxuICBoaWRlQXhpc0xpbmUoZGlhZ3JhbUlkKSB7XG4gICAgY29uc3QgaG9yaXpvbnRhbExpbmUgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2QtcXVhZHJhbnQtZGlhZ3JhbSMnICsgZGlhZ3JhbUlkICsgJyAuZGV2dWktaG9yaXpvbnRhbC1saW5lJykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgdmVydGljYWxMaW5lID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkLXF1YWRyYW50LWRpYWdyYW0jJyArIGRpYWdyYW1JZCArICcgLmRldnVpLXZlcnRpY2FsLWxpbmUnKSBhcyBIVE1MRWxlbWVudDtcbiAgICB2ZXJ0aWNhbExpbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBob3Jpem9udGFsTGluZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG4gIHNldExpc3RQb2ludGVyRXZlbnRzKGRpYWdyYW1JZCwgdmFsdWUpIHtcbiAgICBjb25zdCBlbGUgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2QtcXVhZHJhbnQtZGlhZ3JhbSMnICsgZGlhZ3JhbUlkICsgJyAuZGV2dWktbGlzdC1zdHlsZScpO1xuICAgIGVsZS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgKGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnBvaW50ZXJFdmVudHMgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICBnZXRYQXhpc1ZhbHVlKHZpZXcsIGF4aXNDb25maWdzLCBsZWZ0KSB7XG4gICAgcmV0dXJuICgobGVmdCAtIGF4aXNDb25maWdzLm9yaWdpblBvc2l0aW9uLmxlZnQpIC8gYXhpc0NvbmZpZ3MueFRpY2tTcGFjaW5nKS50b0ZpeGVkKDEpO1xuICB9XG4gIGdldFlBeGlzVmFsdWUodmlldywgYXhpc0NvbmZpZ3MsIHRvcCkge1xuICAgIHJldHVybiAoKHZpZXcuaGVpZ2h0IC0gdG9wIC0gYXhpc0NvbmZpZ3Mub3JpZ2luUG9zaXRpb24uYm90dG9tKVxuICAgICAgLyBheGlzQ29uZmlncy55VGlja1NwYWNpbmcpLnRvRml4ZWQoMSk7XG4gIH1cbn1cbiJdfQ==