import { __decorate, __metadata } from "tslib";
import { ComponentFactoryResolver, Directive, ElementRef, HostListener, Input } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { DevConfigService, WithConfig } from 'ng-devui/utils';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, filter, map, takeUntil } from 'rxjs/operators';
import { TooltipComponent } from './tooltip.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
import * as i2 from "ng-devui/utils";
export class TooltipDirective {
    constructor(triggerElementRef, overlayContainerRef, componentFactoryResolver, devConfigService) {
        this.triggerElementRef = triggerElementRef;
        this.overlayContainerRef = overlayContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.devConfigService = devConfigService;
        this.position = 'top';
        this.showAnimation = true;
        // 防止每次鼠标不小心经过目标元素就会显示出Tooltip的内容，所以增加适当的延迟。
        this.mouseEnterDelay = 150;
        // 因为鼠标移出之后如果立刻消失会很突然，所以增加略小一些的延迟，使得既不突然也反应灵敏
        this.mouseLeaveDelay = 100;
        this.unsubscribe$ = new Subject();
        this.unsubscribeT$ = new Subject();
    }
    /**
     * @deprecated Use showAnimation to replace.
     */
    set showAnimate(isShowAnimate) {
        this.showAnimation = isShowAnimate;
    }
    onFocus() {
        this.show();
    }
    onBlur() {
        this.hide();
    }
    createTooltip() {
        this.tooltipComponentRef = this.overlayContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(TooltipComponent));
        this.instanceAssignValue(['content', 'position', 'showAnimation', 'triggerElementRef']);
        // 对创建的ToolTip组件添加鼠标移入和移出的监听事件
        if (this.tooltipComponentRef.instance['tooltip'].nativeElement) {
            this.bindMouseEvent(this.tooltipComponentRef.instance['tooltip'].nativeElement, this.unsubscribeT$);
        }
    }
    bindMouseEvent(eventTarget, unsubscribe$) {
        fromEvent(eventTarget, 'mouseenter')
            .pipe(map((event) => {
            this.isEnter = true;
            return event;
        }), debounceTime(this.mouseEnterDelay), filter((event) => this.isEnter), takeUntil(unsubscribe$))
            .subscribe(() => {
            if (!this.tooltipComponentRef) {
                this.show();
            }
        });
        fromEvent(eventTarget, 'mouseleave')
            .pipe(map((event) => {
            this.isEnter = false;
            return event;
        }), debounceTime(this.mouseLeaveDelay), filter((event) => !this.isEnter), takeUntil(unsubscribe$))
            .subscribe(() => {
            this.hide();
        });
    }
    show() {
        if (!this.content) {
            return;
        }
        if (this.tooltipComponentRef) {
            this.destroy();
        }
        this.createTooltip();
        this.tooltipComponentRef.instance.onShow();
    }
    destroy() {
        if (this.tooltipComponentRef) {
            this.tooltipComponentRef.destroy();
            this.tooltipComponentRef = null;
        }
        if (this.unsubscribeT$) {
            this.unsubscribeT$.next();
            this.unsubscribeT$.complete();
        }
    }
    hide() {
        if (this.tooltipComponentRef) {
            this.tooltipComponentRef.instance.onHide();
            if (!this.showAnimation) {
                this.destroy();
                return;
            }
            this.tooltipComponentRef.instance.onHidden = () => {
                this.destroy();
            };
        }
        if (this.unsubscribeT$) {
            this.unsubscribeT$.next();
            this.unsubscribeT$.complete();
        }
    }
    instanceAssignValue(key) {
        const keyArr = typeof key === 'string' ? [key] : key;
        const obj = {};
        keyArr.forEach((item) => { (obj[item] = this[item]); });
        Object.assign(this.tooltipComponentRef.instance, obj);
    }
    ngOnChanges(changes) {
        if (this.tooltipComponentRef) {
            const { content, position, showAnimation } = changes;
            if (content) {
                this.instanceAssignValue('content');
            }
            if (position) {
                this.instanceAssignValue('position');
            }
            if (showAnimation) {
                this.instanceAssignValue('showAnimation');
            }
        }
    }
    ngAfterViewInit() {
        if (this.triggerElementRef.nativeElement) {
            this.bindMouseEvent(this.triggerElementRef.nativeElement, this.unsubscribe$);
        }
    }
    ngOnDestroy() {
        if (this.unsubscribeT$) {
            this.unsubscribeT$.next();
            this.unsubscribeT$.complete();
        }
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
        this.destroy();
    }
}
TooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TooltipDirective, deps: [{ token: i0.ElementRef }, { token: i1.OverlayContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i2.DevConfigService }], target: i0.ɵɵFactoryTarget.Directive });
TooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: TooltipDirective, selector: "[dTooltip]", inputs: { content: "content", position: "position", showAnimation: "showAnimation", showAnimate: "showAnimate", mouseEnterDelay: "mouseEnterDelay", mouseLeaveDelay: "mouseLeaveDelay" }, host: { listeners: { "focus": "onFocus()", "blur": "onBlur()" } }, exportAs: ["dTooltip"], usesOnChanges: true, ngImport: i0 });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], TooltipDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dTooltip]',
                    exportAs: 'dTooltip',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OverlayContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i2.DevConfigService }]; }, propDecorators: { content: [{
                type: Input
            }], position: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showAnimate: [{
                type: Input
            }], mouseEnterDelay: [{
                type: Input
            }], mouseLeaveDelay: [{
                type: Input
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,