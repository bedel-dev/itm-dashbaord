import { formatDate, getLocaleId } from '@angular/common';
import { I18nUtil } from './i18n.util';
export class I18nFormat {
    // 通过get方法来做业务没有指定locale的时候fallback
    static getLocaleAndLang(locale) {
        const currentLanguage = I18nUtil.getCurrentLanguage();
        let localeId;
        try {
            // 通过get方法来判断是否存在locale
            getLocaleId(locale);
            localeId = (locale || I18nFormat.DEFAULT_LOCALE).toLocaleLowerCase();
        }
        catch (error) {
            localeId = I18nFormat.DEFAULT_LOCALE;
        }
        return { localeId, currentLanguage };
    }
    // 短格式：y/MM/dd
    static formatDate(value, format, locale, timezone) {
        const localeLang = I18nFormat.getLocaleAndLang(locale);
        const formatStr = format ? format : I18nFormat.localFormat[localeLang.currentLanguage].short;
        return formatDate(value, formatStr, localeLang.localeId, timezone);
    }
    // 完整格式：y/MM/dd hh:mm:ss zzzz
    static formatDateTime(value, format, locale, timezone) {
        const localeLang = I18nFormat.getLocaleAndLang(locale);
        const formatStr = format ? format : I18nFormat.localFormat[localeLang.currentLanguage].full;
        return formatDate(value, formatStr, localeLang.localeId, timezone);
    }
    // 完整格式不加GMT：y/MM/dd hh:mm:ss
    static formatDateTimeWithoutGMT(value, format, locale, timezone) {
        const localeLang = I18nFormat.getLocaleAndLang(locale);
        // 非用户传入的format，就替换掉完整的格式化字符中中GMT信息
        const formatStr = format ? format : (I18nFormat.localFormat[localeLang.currentLanguage].full).replace(' zzzz', '');
        return formatDate(value, formatStr, localeLang.localeId, timezone);
    }
}
// 默认locale使用英文，因为angular默认只支持英文，其他的需要显示注册
I18nFormat.DEFAULT_LOCALE = 'en-us';
I18nFormat.DATETIME_FORMAT_EN = 'MMM dd, y HH:mm:ss zzzz';
I18nFormat.DATETIME_FORMAT_ZH = 'y/MM/dd HH:mm:ss zzzz';
I18nFormat.DATETIME_FORMAT_RU = 'dd.MM.y HH:mm:ss zzzz';
I18nFormat.DATE_FORMAT_EN = 'MMM dd, y';
I18nFormat.DATE_FORMAT_ZH = 'y/MM/dd';
I18nFormat.DATE_FORMAT_RU = 'dd.MM.y';
I18nFormat.localFormat = {
    'zh-cn': { full: I18nFormat.DATETIME_FORMAT_ZH, short: I18nFormat.DATE_FORMAT_ZH },
    'en-us': { full: I18nFormat.DATETIME_FORMAT_EN, short: I18nFormat.DATE_FORMAT_EN },
    'ru-ru': { full: I18nFormat.DATETIME_FORMAT_RU, short: I18nFormat.DATE_FORMAT_RU }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5mb3JtYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS9pMThuL2kxOG4uZm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV2QyxNQUFNLE9BQU8sVUFBVTtJQWdCckIsbUNBQW1DO0lBQzNCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNO1FBQ3BDLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3RELElBQUksUUFBUSxDQUFDO1FBQ2IsSUFBSTtZQUNGLHVCQUF1QjtZQUN2QixXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEIsUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQ3RFO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxRQUFRLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQztTQUN0QztRQUNELE9BQU8sRUFBQyxRQUFRLEVBQUUsZUFBZSxFQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGNBQWM7SUFDUCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQTZCLEVBQUUsTUFBZSxFQUFFLE1BQWUsRUFBRSxRQUFpQjtRQUN6RyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM3RixPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELDZCQUE2QjtJQUN0QixNQUFNLENBQUMsY0FBYyxDQUFDLEtBQTZCLEVBQUUsTUFBZSxFQUFFLE1BQWUsRUFBRSxRQUFpQjtRQUM3RyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM1RixPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELDZCQUE2QjtJQUN0QixNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBNkIsRUFBRSxNQUFlLEVBQUUsTUFBZSxFQUFFLFFBQWlCO1FBQ3ZILE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RCxtQ0FBbUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuSCxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7QUFqREQsMENBQTBDO0FBQ2xCLHlCQUFjLEdBQUcsT0FBTyxDQUFDO0FBQ3pCLDZCQUFrQixHQUFHLHlCQUF5QixDQUFDO0FBQy9DLDZCQUFrQixHQUFHLHVCQUF1QixDQUFDO0FBQzdDLDZCQUFrQixHQUFHLHVCQUF1QixDQUFDO0FBQzdDLHlCQUFjLEdBQUcsV0FBVyxDQUFDO0FBQzdCLHlCQUFjLEdBQUcsU0FBUyxDQUFDO0FBQzNCLHlCQUFjLEdBQUcsU0FBUyxDQUFDO0FBRTNCLHNCQUFXLEdBQUc7SUFDcEMsT0FBTyxFQUFFLEVBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLGNBQWMsRUFBQztJQUNoRixPQUFPLEVBQUUsRUFBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLGtCQUFrQixFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsY0FBYyxFQUFDO0lBQ2hGLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxVQUFVLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxjQUFjLEVBQUM7Q0FDakYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdERhdGUsIGdldExvY2FsZUlkIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEkxOG5VdGlsIH0gZnJvbSAnLi9pMThuLnV0aWwnO1xuXG5leHBvcnQgY2xhc3MgSTE4bkZvcm1hdCB7XG4gIC8vIOm7mOiupGxvY2FsZeS9v+eUqOiLseaWh++8jOWboOS4umFuZ3VsYXLpu5jorqTlj6rmlK/mjIHoi7HmlofvvIzlhbbku5bnmoTpnIDopoHmmL7npLrms6jlhoxcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9MT0NBTEUgPSAnZW4tdXMnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBEQVRFVElNRV9GT1JNQVRfRU4gPSAnTU1NIGRkLCB5IEhIOm1tOnNzIHp6enonO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBEQVRFVElNRV9GT1JNQVRfWkggPSAneS9NTS9kZCBISDptbTpzcyB6enp6JztcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREFURVRJTUVfRk9STUFUX1JVID0gJ2RkLk1NLnkgSEg6bW06c3Mgenp6eic7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERBVEVfRk9STUFUX0VOID0gJ01NTSBkZCwgeSc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERBVEVfRk9STUFUX1pIID0gJ3kvTU0vZGQnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBEQVRFX0ZPUk1BVF9SVSA9ICdkZC5NTS55JztcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBsb2NhbEZvcm1hdCA9IHtcbiAgICAnemgtY24nOiB7ZnVsbDogSTE4bkZvcm1hdC5EQVRFVElNRV9GT1JNQVRfWkgsIHNob3J0OiBJMThuRm9ybWF0LkRBVEVfRk9STUFUX1pIfSxcbiAgICAnZW4tdXMnOiB7ZnVsbDogSTE4bkZvcm1hdC5EQVRFVElNRV9GT1JNQVRfRU4sIHNob3J0OiBJMThuRm9ybWF0LkRBVEVfRk9STUFUX0VOfSxcbiAgICAncnUtcnUnOiB7ZnVsbDogSTE4bkZvcm1hdC5EQVRFVElNRV9GT1JNQVRfUlUsIHNob3J0OiBJMThuRm9ybWF0LkRBVEVfRk9STUFUX1JVfVxuICB9O1xuXG4gIC8vIOmAmui/h2dldOaWueazleadpeWBmuS4muWKoeayoeacieaMh+WummxvY2FsZeeahOaXtuWAmWZhbGxiYWNrXG4gIHByaXZhdGUgc3RhdGljIGdldExvY2FsZUFuZExhbmcobG9jYWxlKSB7XG4gICAgY29uc3QgY3VycmVudExhbmd1YWdlID0gSTE4blV0aWwuZ2V0Q3VycmVudExhbmd1YWdlKCk7XG4gICAgbGV0IGxvY2FsZUlkO1xuICAgIHRyeSB7XG4gICAgICAvLyDpgJrov4dnZXTmlrnms5XmnaXliKTmlq3mmK/lkKblrZjlnKhsb2NhbGVcbiAgICAgIGdldExvY2FsZUlkKGxvY2FsZSk7XG4gICAgICBsb2NhbGVJZCA9IChsb2NhbGUgfHwgSTE4bkZvcm1hdC5ERUZBVUxUX0xPQ0FMRSkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9jYWxlSWQgPSBJMThuRm9ybWF0LkRFRkFVTFRfTE9DQUxFO1xuICAgIH1cbiAgICByZXR1cm4ge2xvY2FsZUlkLCBjdXJyZW50TGFuZ3VhZ2V9O1xuICB9XG5cbiAgLy8g55+t5qC85byP77yaeS9NTS9kZFxuICBwdWJsaWMgc3RhdGljIGZvcm1hdERhdGUodmFsdWU6IHN0cmluZyB8IG51bWJlciB8IERhdGUsIGZvcm1hdD86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nLCB0aW1lem9uZT86IHN0cmluZykge1xuICAgIGNvbnN0IGxvY2FsZUxhbmcgPSBJMThuRm9ybWF0LmdldExvY2FsZUFuZExhbmcobG9jYWxlKTtcbiAgICBjb25zdCBmb3JtYXRTdHIgPSBmb3JtYXQgPyBmb3JtYXQgOiBJMThuRm9ybWF0LmxvY2FsRm9ybWF0W2xvY2FsZUxhbmcuY3VycmVudExhbmd1YWdlXS5zaG9ydDtcbiAgICByZXR1cm4gZm9ybWF0RGF0ZSh2YWx1ZSwgZm9ybWF0U3RyLCBsb2NhbGVMYW5nLmxvY2FsZUlkLCB0aW1lem9uZSk7XG4gIH1cblxuICAvLyDlrozmlbTmoLzlvI/vvJp5L01NL2RkIGhoOm1tOnNzIHp6enpcbiAgcHVibGljIHN0YXRpYyBmb3JtYXREYXRlVGltZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSwgZm9ybWF0Pzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcsIHRpbWV6b25lPzogc3RyaW5nKSB7XG4gICAgY29uc3QgbG9jYWxlTGFuZyA9IEkxOG5Gb3JtYXQuZ2V0TG9jYWxlQW5kTGFuZyhsb2NhbGUpO1xuICAgIGNvbnN0IGZvcm1hdFN0ciA9IGZvcm1hdCA/IGZvcm1hdCA6IEkxOG5Gb3JtYXQubG9jYWxGb3JtYXRbbG9jYWxlTGFuZy5jdXJyZW50TGFuZ3VhZ2VdLmZ1bGw7XG4gICAgcmV0dXJuIGZvcm1hdERhdGUodmFsdWUsIGZvcm1hdFN0ciwgbG9jYWxlTGFuZy5sb2NhbGVJZCwgdGltZXpvbmUpO1xuICB9XG5cbiAgLy8g5a6M5pW05qC85byP5LiN5YqgR01U77yaeS9NTS9kZCBoaDptbTpzc1xuICBwdWJsaWMgc3RhdGljIGZvcm1hdERhdGVUaW1lV2l0aG91dEdNVCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSwgZm9ybWF0Pzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcsIHRpbWV6b25lPzogc3RyaW5nKSB7XG4gICAgY29uc3QgbG9jYWxlTGFuZyA9IEkxOG5Gb3JtYXQuZ2V0TG9jYWxlQW5kTGFuZyhsb2NhbGUpO1xuICAgIC8vIOmdnueUqOaIt+S8oOWFpeeahGZvcm1hdO+8jOWwseabv+aNouaOieWujOaVtOeahOagvOW8j+WMluWtl+espuS4reS4rUdNVOS/oeaBr1xuICAgIGNvbnN0IGZvcm1hdFN0ciA9IGZvcm1hdCA/IGZvcm1hdCA6IChJMThuRm9ybWF0LmxvY2FsRm9ybWF0W2xvY2FsZUxhbmcuY3VycmVudExhbmd1YWdlXS5mdWxsKS5yZXBsYWNlKCcgenp6eicsICcnKTtcbiAgICByZXR1cm4gZm9ybWF0RGF0ZSh2YWx1ZSwgZm9ybWF0U3RyLCBsb2NhbGVMYW5nLmxvY2FsZUlkLCB0aW1lem9uZSk7XG4gIH1cblxufVxuIl19