import { __decorate, __metadata } from "tslib";
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Output, ViewChild } from '@angular/core';
import { I18nService } from 'ng-devui/i18n';
import { DefaultDateConverter, DevConfigService, fadeInOut, WithConfig } from 'ng-devui/utils';
import { Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { DatePickerConfigService as DatePickerConfig } from '../date-picker.config.service';
import * as i0 from "@angular/core";
import * as i1 from "../date-picker.config.service";
import * as i2 from "ng-devui/i18n";
import * as i3 from "ng-devui/utils";
import * as i4 from "./two-datepicker-single.component";
import * as i5 from "ng-devui/button";
import * as i6 from "@angular/cdk/overlay";
import * as i7 from "@angular/common";
export class TwoDatePickerComponent {
    constructor(el, datePickerConfig, i18n, cdr, devConfigService, doc) {
        this.el = el;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.cdr = cdr;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.showAnimation = true;
        this.showTime = false;
        this.selectedRange = [null, null];
        this.hideOnRangeSelected = true;
        this.selectedRangeChange = new EventEmitter();
        this.datePosition = 'bottom';
        this.selectDateSubject = new Subject();
        this.hoverOnDate = new Subject();
        this.switchOriginPositionSub = new Subject();
        this.today = new Date();
        this.startAnimation = false;
        this.currentCalendars = [null, null];
        this._isOpen = false;
        this.onDocumentClick = ($event) => {
            if (!this.el.nativeElement.contains($event.target)) {
                this.whichOpen = false;
                this.isOpen = false;
            }
            this.cdr.markForCheck();
        };
        this.toggle = (side = 'start') => {
            if (this.isOpen) {
                if (side === 'start') {
                    if (this.whichOpen === 'start') {
                        this.whichOpen = false;
                        this.isOpen = false;
                    }
                    else { // this.whichOpen === 'end'
                        this.whichOpen = 'start';
                    }
                }
                else { // side === 'end'
                    if (this.whichOpen === 'start') {
                        this.whichOpen = 'end';
                    }
                    else { // this.whichOpen === 'end'
                        this.whichOpen = false;
                        this.isOpen = false;
                    }
                }
            }
            else {
                this.whichOpen = side;
                this.isOpen = true;
            }
        };
        this.chooseDate = (range) => {
            if (range && Array.isArray(this.selectedRange)) {
                this.selectedRange = range;
                [this.rangeStart, this.rangeEnd] = this.selectedRange;
                this.notifyValueChange();
            }
        };
        this.clear = (side) => {
            if (this.disabled) {
                return;
            }
            if (side === 'start') {
                this.selectStart(null);
            }
            else if (side === 'end') {
                this.selectEnd(null);
            }
            [this.rangeStart, this.rangeEnd] = this.selectedRange;
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.setI18nText();
        this.document = this.doc;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set maxDate(date) {
        const parseDate = this.convertDate(date);
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.convertDate(date);
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    set whichOpen(side) {
        this._whichOpen = side;
        this.switchOriginPositionSub.next(side);
    }
    get whichOpen() {
        return this._whichOpen;
    }
    set isOpen(isOpen) {
        this._isOpen = isOpen;
        if (!isOpen) {
            this.startAnimation = false;
            this.document.removeEventListener('click', this.onDocumentClick);
        }
        else {
            setTimeout(() => {
                this.startAnimation = true;
                this.cdr.detectChanges();
                this.document.addEventListener('click', this.onDocumentClick);
            });
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.updateCdkConnectedOverlayOrigin(this.el.nativeElement);
        this.subscribeHoverActions();
    }
    isDisableToday() {
        if ((this.minDate.getTime() >= (this.today).getTime()) || (this.maxDate.getTime() <= (this.today).getTime())) {
            this.disableToday = true;
        }
        else {
            this.disableToday = false;
        }
    }
    onPositionChange(position) {
        switch (position.connectionPair.overlayY) {
            case 'top':
            case 'center':
                this.datePosition = 'bottom';
                break;
            case 'bottom':
                this.datePosition = 'top';
        }
        this.switchOriginPositionSub.next(this.whichOpen);
    }
    convertDate(date) {
        return date ?
            this.dateConverter.parse(date, this.dateFormat) : null;
    }
    formatDate(date) {
        return date ?
            this.dateConverter.format(date, this.dateFormat, this.locale || this.i18nLocale) : null;
    }
    updateCdkConnectedOverlayOrigin(el) {
        if (el) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(el);
        }
        else {
            this.cdkConnectedOverlayOrigin = undefined;
        }
    }
    syncPickerPair(currentCalender, orientation) {
        switch (orientation) {
            case 'left':
                this.currentCalendars[0] = currentCalender;
                break;
            case 'right':
                this.currentCalendars[1] = currentCalender;
                break;
        }
    }
    rangeChange(data) {
        this.chooseDate(data.selectedRange);
        this.selectDateSubject.next({ side: 'start', date: this.rangeStart, onlyWrite: true });
        this.selectDateSubject.next({ side: 'end', date: this.rangeEnd, onlyWrite: true });
    }
    notifyValueChange() {
        this.selectedRangeChange.emit(this.selectedRange);
    }
    selectingDate(event) {
        this.hoverOnDate.next(event);
    }
    subscribeHoverActions() {
        this.hoverOnDate.pipe(distinctUntilChanged()).subscribe((date) => {
            this.previewRangeEnd(date);
        });
    }
    previewRangeEnd(date) {
        this.leftPicker['previewEnd'] = date;
        this.rightPicker['previewEnd'] = date;
    }
    syncRangeStart(rangeStart, picker) {
        if (this.whichOpen === 'end') {
            this.selectEnd(rangeStart);
        }
        else { // this.whichOpen === 'start'
            this.selectStart(rangeStart);
        }
        picker.selectRange(rangeStart, true);
    }
    selectStart(date, passive = false) {
        this.selectedRange[0] = date;
        this.rangeStart = date;
        this.isDisableToday();
        if (!passive) {
            this.selectDateSubject.next({ side: 'start', date });
            this.whichOpen = 'end';
        }
    }
    selectEnd(date, passive = false) {
        this.selectedRange[1] = date;
        this.rangeEnd = date;
        this.isDisableToday();
        if (!passive) {
            this.selectDateSubject.next({ side: 'end', date: date });
            if (!this.showTime && this.hideOnRangeSelected) {
                this.isOpen = false;
                this.whichOpen = false;
            }
        }
    }
    chooseToday(event) {
        event.preventDefault();
        event.stopPropagation();
        if ((this.minDate.getTime() <= (this.today).getTime()) && (this.maxDate.getTime() >= (this.today).getTime())) {
            if (this.whichOpen === 'start') {
                this.selectStart(this.today);
            }
            else if (this.whichOpen === 'end') {
                this.selectEnd(this.today);
            }
            [this.rangeStart, this.rangeEnd] = this.selectedRange;
        }
    }
    clearBtn(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.whichOpen) {
            this.clear(this.whichOpen);
        }
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().datePicker;
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.datePicker;
            this.i18nLocale = data.locale;
        });
    }
    ngOnDestroy() {
        this.isOpen = false;
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
TwoDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerComponent, deps: [{ token: i0.ElementRef }, { token: i1.DatePickerConfigService }, { token: i2.I18nService }, { token: i0.ChangeDetectorRef }, { token: i3.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
TwoDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatePickerComponent, selector: "[dTwoDatePicker]", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", showAnimation: "showAnimation", hideOnRangeSelected: "hideOnRangeSelected", dateConfig: "dateConfig", dateFormat: "dateFormat", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedRangeChange: "selectedRangeChange" }, viewQueries: [{ propertyName: "leftPicker", first: true, predicate: ["leftPicker"], descendants: true }, { propertyName: "rightPicker", first: true, predicate: ["rightPicker"], descendants: true }, { propertyName: "templateWrap", first: true, predicate: ["templateWrap"], descendants: true }], exportAs: ["twoDatePicker"], ngImport: i0, template: "<ng-content></ng-content>\n<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen = false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datePosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-two-date-wrapper\">\n    <div class=\"devui-two-date-picker\">\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n        [whichOpen]=\"whichOpen\"\n        #leftPicker\n      >\n      </d-two-datepicker-single>\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n        [isAuxiliary]=\"true\"\n        [whichOpen]=\"whichOpen\"\n        #rightPicker\n      >\n      </d-two-datepicker-single>\n    </div>\n    <div *ngIf=\"!customViewTemplate\" class=\"devui-two-date-footer devui-two-date-custom\">\n      <a\n        [ngClass]=\"{\n          disabled: disableToday\n        }\"\n        (click)=\"chooseToday($event)\"\n        >{{ i18nText.today }}</a\n      >\n      <d-button bsStyle=\"common\" (btnClick)=\"clearBtn($event)\" bsSize=\"sm\">{{ i18nText.clear }}</d-button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-two-date-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}.devui-two-date-wrapper .devui-two-date-picker{display:inline-flex!important;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-two-date-wrapper .devui-two-date-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-two-date-wrapper .devui-two-date-footer{padding:10px;display:flex;justify-content:space-between;align-items:center}.devui-two-date-wrapper .devui-two-date-footer a{color:#526ecc;color:var(--devui-link, #526ecc);text-decoration:none;cursor:pointer}.devui-two-date-wrapper .devui-two-date-footer a.disabled{color:#d7d8da;color:var(--devui-line, #d7d8da);cursor:not-allowed}.devui-date-picker:not(:last-child){margin-right:20px}.host-wrapper{color:red}\n"], components: [{ type: i4.TwoDatepickerSingleComponent, selector: "d-two-datepicker-single", inputs: ["selectedRange", "rangePicker", "isAuxiliary", "currentCalendars", "whichOpen"], outputs: ["hoverOnDate", "rangeSelected", "rangeSelecting", "syncPickerPair", "consolidateTime"] }, { type: i5.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }], directives: [{ type: i6.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [
        fadeInOut
    ] });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], TwoDatePickerComponent.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTwoDatePicker]', exportAs: 'twoDatePicker', animations: [
                        fadeInOut
                    ], template: "<ng-content></ng-content>\n<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen = false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datePosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-two-date-wrapper\">\n    <div class=\"devui-two-date-picker\">\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n        [whichOpen]=\"whichOpen\"\n        #leftPicker\n      >\n      </d-two-datepicker-single>\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n        [isAuxiliary]=\"true\"\n        [whichOpen]=\"whichOpen\"\n        #rightPicker\n      >\n      </d-two-datepicker-single>\n    </div>\n    <div *ngIf=\"!customViewTemplate\" class=\"devui-two-date-footer devui-two-date-custom\">\n      <a\n        [ngClass]=\"{\n          disabled: disableToday\n        }\"\n        (click)=\"chooseToday($event)\"\n        >{{ i18nText.today }}</a\n      >\n      <d-button bsStyle=\"common\" (btnClick)=\"clearBtn($event)\" bsSize=\"sm\">{{ i18nText.clear }}</d-button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-two-date-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}.devui-two-date-wrapper .devui-two-date-picker{display:inline-flex!important;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-two-date-wrapper .devui-two-date-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-two-date-wrapper .devui-two-date-footer{padding:10px;display:flex;justify-content:space-between;align-items:center}.devui-two-date-wrapper .devui-two-date-footer a{color:#526ecc;color:var(--devui-link, #526ecc);text-decoration:none;cursor:pointer}.devui-two-date-wrapper .devui-two-date-footer a.disabled{color:#d7d8da;color:var(--devui-line, #d7d8da);cursor:not-allowed}.devui-date-picker:not(:last-child){margin-right:20px}.host-wrapper{color:red}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DatePickerConfigService }, { type: i2.I18nService }, { type: i0.ChangeDetectorRef }, { type: i3.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], hideOnRangeSelected: [{
                type: Input
            }], selectedRangeChange: [{
                type: Output
            }], leftPicker: [{
                type: ViewChild,
                args: ['leftPicker']
            }], rightPicker: [{
                type: ViewChild,
                args: ['rightPicker']
            }], templateWrap: [{
                type: ViewChild,
                args: ['templateWrap']
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,