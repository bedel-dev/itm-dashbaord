import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { addClassToOrigin, removeClassFromOrigin } from 'ng-devui/utils';
import { fromEvent } from 'rxjs';
import { debounceTime, map } from 'rxjs/operators';
import { TwoDatePickerComponent } from './two-datepicker.component';
import * as i0 from "@angular/core";
import * as i1 from "./two-datepicker.component";
export class TwoDatePickerEndDirective {
    constructor(twoDatePicker, renderer, el) {
        this.twoDatePicker = twoDatePicker;
        this.renderer = renderer;
        this.el = el;
        this.selectEnd = new EventEmitter();
        this.onChange = (_) => null;
        this.clear = () => {
            this.twoDatePicker.clear('end');
        };
        this.twoDateSub = this.twoDatePicker.selectDateSubject.subscribe(data => {
            if (data.side === 'end') {
                if (this.el.nativeElement.tagName === 'INPUT') {
                    this.writeValue(data.date);
                }
                else {
                    this.el.nativeElement.innerHTML = data.date ? this.twoDatePicker.formatDate(data.date) : this.userHtml;
                }
                if (!data.onlyWrite) {
                    this.selectEnd.emit(data.date);
                    this.onChange(data.date);
                }
            }
        });
        this.switchOriginSub = this.twoDatePicker.switchOriginPositionSub.subscribe(side => {
            if (side === 'end') {
                addClassToOrigin(this.el);
            }
            else {
                removeClassFromOrigin(this.el);
            }
        });
    }
    toggle(event) {
        this.twoDatePicker.toggle('end');
    }
    onBlur($event) {
        if (!this.validDate(this.el.nativeElement.value)) {
            this.resetValue();
        }
    }
    ngOnInit() {
        this.userHtml = this.el.nativeElement.innerHTML;
        this.initInputChanges();
    }
    initInputChanges() {
        this.valueChangeSubscrip = fromEvent(this.el.nativeElement, 'keyup').pipe(map((e) => {
            console.log(e);
            return e.target.value;
        }), debounceTime(300)).subscribe(value => {
            this.transUserInputToDatePicker(value);
        });
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        return;
    }
    writeValue(selectedEnd) {
        selectedEnd = selectedEnd || null;
        const formatEnd = selectedEnd ?
            this.twoDatePicker.dateConverter.format(selectedEnd, this.twoDatePicker.dateFormat, this.twoDatePicker.locale) :
            '';
        this.renderer.setProperty(this.el.nativeElement, 'value', formatEnd);
        this.twoDatePicker.selectEnd(selectedEnd, true);
    }
    transUserInputToDatePicker(value) {
        if (!this.twoDatePicker.showTime) {
            const _value = value || this.el.nativeElement.value;
            if (!_value && !this.twoDatePicker.rangeEnd || !_value) {
                this.clear();
                return;
            }
            const valueDate = new Date(_value);
            if (_value && this.validDate(_value)) {
                this.twoDatePicker.selectEnd(valueDate);
                [this.twoDatePicker.rangeStart, this.twoDatePicker.rangeEnd] = this.twoDatePicker.selectedRange;
            }
        }
        else {
            this.resetValue();
        }
    }
    validDate(value) {
        if (!value) {
            return true;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.twoDatePicker.dateConverter.format(valueDate, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat &&
                (valueDate.getTime() < this.twoDatePicker.minDate.getTime() || valueDate.getTime() > this.twoDatePicker.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        if (this.twoDatePicker.rangeEnd) {
            this.el.nativeElement.value =
                this.twoDatePicker.dateConverter.format(this.twoDatePicker.rangeEnd, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        }
    }
    ngOnDestroy() {
        if (this.twoDateSub) {
            this.twoDateSub.unsubscribe();
        }
        if (this.switchOriginSub) {
            this.switchOriginSub.unsubscribe();
        }
        if (this.valueChangeSubscrip) {
            this.valueChangeSubscrip.unsubscribe();
        }
    }
}
TwoDatePickerEndDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerEndDirective, deps: [{ token: i1.TwoDatePickerComponent }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TwoDatePickerEndDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatePickerEndDirective, selector: "[dTwoDatePickerEnd]", outputs: { selectEnd: "selectEnd" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TwoDatePickerEndDirective),
            multi: true
        }], exportAs: ["twoDatePickerEnd"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerEndDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dTwoDatePickerEnd]',
                    exportAs: 'twoDatePickerEnd',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TwoDatePickerEndDirective),
                            multi: true
                        }]
                }]
        }], ctorParameters: function () { return [{ type: i1.TwoDatePickerComponent }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { selectEnd: [{
                type: Output
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,