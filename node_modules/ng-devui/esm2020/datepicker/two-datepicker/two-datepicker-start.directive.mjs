import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { addClassToOrigin, removeClassFromOrigin } from 'ng-devui/utils';
import { fromEvent } from 'rxjs';
import { debounceTime, map } from 'rxjs/operators';
import { TwoDatePickerComponent } from './two-datepicker.component';
import * as i0 from "@angular/core";
import * as i1 from "./two-datepicker.component";
export class TwoDatePickerStartDirective {
    constructor(twoDatePicker, renderer, el) {
        this.twoDatePicker = twoDatePicker;
        this.renderer = renderer;
        this.el = el;
        this.selectStart = new EventEmitter();
        this.onChange = (_) => null;
        this.clear = () => {
            this.twoDatePicker.clear('start');
        };
        this.twoDateSub = this.twoDatePicker.selectDateSubject.subscribe(data => {
            if (data.side === 'start') {
                if (this.el.nativeElement.tagName === 'INPUT') {
                    this.writeValue(data.date);
                }
                else {
                    this.el.nativeElement.innerHTML = data.date ? this.twoDatePicker.formatDate(data.date) : this.userHtml;
                }
                if (!data.onlyWrite) {
                    this.selectStart.emit(data.date);
                    this.onChange(data.date);
                }
            }
        });
        this.switchOriginSub = this.twoDatePicker.switchOriginPositionSub.subscribe(side => {
            if (side === 'start') {
                addClassToOrigin(this.el);
            }
            else {
                removeClassFromOrigin(this.el);
            }
        });
    }
    toggle(event) {
        this.twoDatePicker.toggle('start');
    }
    onBlur($event) {
        if (!this.validDate(this.el.nativeElement.value)) {
            this.resetValue();
        }
    }
    ngOnInit() {
        this.userHtml = this.el.nativeElement.innerHTML;
        this.initInputChanges();
    }
    initInputChanges() {
        this.valueChangeSubscrip = fromEvent(this.el.nativeElement, 'keyup').pipe(map((e) => e.target.value), debounceTime(300)).subscribe(value => {
            this.transUserInputToDatePicker(value);
        });
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        return;
    }
    writeValue(selectedStart) {
        selectedStart = selectedStart || null;
        const formatStart = selectedStart ?
            this.twoDatePicker.dateConverter.format(selectedStart, this.twoDatePicker.dateFormat, this.twoDatePicker.locale) :
            '';
        this.renderer.setProperty(this.el.nativeElement, 'value', formatStart);
        this.twoDatePicker.selectStart(selectedStart, true);
    }
    transUserInputToDatePicker(value) {
        if (!this.twoDatePicker.showTime) {
            const _value = value || this.el.nativeElement.value;
            if (!_value && !this.twoDatePicker.rangeStart || !_value) {
                this.clear();
                return;
            }
            const valueDate = new Date(_value);
            if (_value && this.validDate(_value)) {
                this.twoDatePicker.selectStart(valueDate);
                [this.twoDatePicker.rangeStart, this.twoDatePicker.rangeEnd] = this.twoDatePicker.selectedRange;
            }
        }
        else {
            this.resetValue();
        }
    }
    validDate(value) {
        if (!value) {
            return true;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.twoDatePicker.dateConverter.format(valueDate, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat &&
                (valueDate.getTime() < this.twoDatePicker.minDate.getTime() || valueDate.getTime() > this.twoDatePicker.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        if (this.twoDatePicker.rangeStart) {
            this.el.nativeElement.value =
                this.twoDatePicker.dateConverter.format(this.twoDatePicker.rangeStart, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        }
    }
    ngOnDestroy() {
        if (this.twoDateSub) {
            this.twoDateSub.unsubscribe();
        }
        if (this.switchOriginSub) {
            this.switchOriginSub.unsubscribe();
        }
        if (this.valueChangeSubscrip) {
            this.valueChangeSubscrip.unsubscribe();
        }
    }
}
TwoDatePickerStartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerStartDirective, deps: [{ token: i1.TwoDatePickerComponent }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TwoDatePickerStartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatePickerStartDirective, selector: "[dTwoDatePickerStart]", outputs: { selectStart: "selectStart" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TwoDatePickerStartDirective),
            multi: true
        }], exportAs: ["twoDatePickerStart"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerStartDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dTwoDatePickerStart]',
                    exportAs: 'twoDatePickerStart',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TwoDatePickerStartDirective),
                            multi: true
                        }]
                }]
        }], ctorParameters: function () { return [{ type: i1.TwoDatePickerComponent }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { selectStart: [{
                type: Output
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,