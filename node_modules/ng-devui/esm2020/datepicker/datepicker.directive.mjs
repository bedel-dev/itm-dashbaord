import { __decorate, __metadata } from "tslib";
import { animate, AnimationBuilder, style } from '@angular/animations';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Injector, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { addClassToOrigin, AnimationCurves, AnimationDuration, DefaultDateConverter, DevConfigService, removeClassFromOrigin, WithConfig } from 'ng-devui/utils';
import { fromEvent } from 'rxjs';
import { debounceTime, filter, map } from 'rxjs/operators';
import { SelectDateChangeReason } from './date-change-event-args.model';
import { DatePickerConfigService as DatePickerConfig } from './date-picker.config.service';
import { DatepickerComponent } from './datepicker.component';
import * as i0 from "@angular/core";
import * as i1 from "./date-picker.config.service";
import * as i2 from "ng-devui/i18n";
import * as i3 from "@angular/animations";
import * as i4 from "ng-devui/utils";
export class DatepickerDirective {
    constructor(elementRef, viewContainerRef, componentFactoryResolver, renderer2, injector, datePickerConfig, i18n, builder, cdr, devConfigService, doc) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer2 = renderer2;
        this.injector = injector;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.builder = builder;
        this.cdr = cdr;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.mode = 'date';
        this.yearNumber = 12;
        this.direction = 'down';
        this.autoOpen = false;
        this.showAnimation = true;
        this.selectedDateChange = new EventEmitter();
        this._isOpen = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.onDocumentClick = ($event) => {
            if (this.elementRef.nativeElement !== $event.target) {
                this.hide();
                this.cdr.markForCheck();
            }
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.selectedDate = null;
        const factory = this.componentFactoryResolver.resolveComponentFactory(DatepickerComponent);
        this.cmpRef = this.viewContainerRef.createComponent(factory, this.viewContainerRef.length, this.injector);
        this.setI18nText();
        this.document = this.doc;
    }
    set isOpen(val) {
        this._isOpen = val;
        if (val) {
            addClassToOrigin(this.elementRef);
            setTimeout(() => {
                this.document.addEventListener('click', this.onDocumentClick);
            });
        }
        else {
            removeClassFromOrigin(this.elementRef);
            this.document.removeEventListener('click', this.onDocumentClick);
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
            this.writeModelValue({ selectedDate: this.selectedDate, reason: SelectDateChangeReason.format });
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat);
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat);
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    onBlur($event) {
        this.onTouched();
        const value = this.elementRef.nativeElement.value;
        if (!this.validateDate(value)) {
            this.resetValue();
        }
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof dateConfig.timePicker !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        const target = this.cmpRef.location.nativeElement;
        this.applyPopupStyling(target);
        const component = this.cmpRef.instance;
        component.dateFormat = this.dateFormat;
        this.renderer2.setStyle(target, 'display', 'none');
        component.writeValue(this.selectedDate);
        this.fillPopupData();
        component.ngOnInit();
        component.registerOnChange((selectedDateObj) => {
            this.writeValue(selectedDateObj);
            this.onChange(selectedDateObj.selectedDate);
        });
        component.selectedDateChange.subscribe((arg) => {
            if ((arg.reason === SelectDateChangeReason.date && !this.showTime) || arg.reason === SelectDateChangeReason.button) {
                this.hide();
            }
        });
        if (this.autoOpen) {
            this.show();
        }
        this.valueChanges = this.registerInputEvent();
        this.userInputSubscription = this.valueChanges.subscribe((source) => this.transUserInputToDatepicker(source));
    }
    writeValue(obj) {
        let curDate;
        if (obj && typeof obj === 'object' && Object.prototype.hasOwnProperty.call(obj, 'selectedDate')) {
            curDate = obj.selectedDate;
        }
        else {
            curDate = obj;
        }
        this.selectedDate = curDate ? this.dateConverter.parse(curDate, this.dateFormat) : null;
        this.writeModelValue(obj);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerInputEvent() {
        return fromEvent(this.elementRef.nativeElement, 'keyup').pipe(map((e) => e.target.value), filter(() => !this.disabled), debounceTime(300));
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
        });
    }
    applyPopupStyling(nativeElement) {
        this.renderer2.addClass(nativeElement, 'devui-dropdown-menu');
        this.renderer2.setStyle(nativeElement, 'padding', '0px');
        this.renderer2.setStyle(nativeElement, 'left', '-1px');
        this.renderer2.setStyle(nativeElement, 'top', 'calc(100% + 1px)');
        if (this.direction === 'up') {
            this.renderer2.setStyle(nativeElement, 'top', 'auto');
            this.renderer2.setStyle(nativeElement, 'bottom', 'calc(100% + 1px)');
        }
    }
    hide() {
        const playAnimation = this.isOpen !== false;
        this.isOpen = false;
        if (playAnimation) {
            this.playAnimation();
        }
    }
    writeModelValue(selectDateObj) {
        let selectDate;
        let dateReason = SelectDateChangeReason.time;
        if (selectDateObj && typeof selectDateObj === 'object' && Object.prototype.hasOwnProperty.call(selectDateObj, 'selectedDate')) {
            selectDate = selectDateObj.selectedDate;
            dateReason = selectDateObj.reason;
        }
        else {
            selectDate = selectDateObj;
        }
        if (selectDate) {
            selectDate = new Date(selectDate);
        }
        else {
            selectDate = null;
        }
        const value = selectDate ? this.dateConverter.format(selectDate, this.dateFormat, this.locale || this.i18nLocale) : '';
        this.renderer2.setProperty(this.elementRef.nativeElement, 'value', value);
        if (this.isOpen) {
            this.cmpRef.instance.writeValue(this.selectedDate);
        }
        if (selectDateObj && typeof selectDateObj === 'object' && Object.prototype.hasOwnProperty.call(selectDateObj, 'selectedDate')) {
            this.selectedDateChange.emit({
                reason: dateReason,
                selectedDate: this.selectedDate,
            });
            this.onTouched();
        }
    }
    show() {
        const component = this.cmpRef.instance;
        component.writeValue(this.selectedDate);
        this.fillPopupData();
        const playAnimation = this.isOpen !== true;
        this.isOpen = true;
        if (playAnimation) {
            setTimeout(() => {
                this.playAnimation();
            });
        }
    }
    toggle(clickShow) {
        if (clickShow === undefined) {
            if (this.isOpen) {
                this.hide();
            }
            else {
                this.show();
            }
        }
        else {
            if (clickShow) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    fillPopupData() {
        [
            'showTime',
            'maxDate',
            'minDate',
            'cssClass',
            'disabled',
            'dateConverter',
            'locale',
            'dateFormat',
            'yearNumber',
            'dateConfig',
            'mode',
            'customViewTemplate',
        ].forEach((key) => {
            if (this[key] !== undefined) {
                this.cmpRef.instance[key] = this[key];
            }
        });
    }
    clearAll(reason) {
        if (this.disabled) {
            return;
        }
        this.onTouched();
        this.cmpRef.instance.clearAll(reason);
    }
    popIn(direction) {
        switch (direction) {
            case 'top':
                return [
                    style({ transform: 'scaleY(0.8) translateY(4px)', opacity: 0.8, transformOrigin: '0% 100%', display: 'block' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT}`, style({ transform: 'scaleY(0.9999) translateY(0)', opacity: 1, transformOrigin: '0% 100%', display: 'block' })),
                ];
            case 'bottom':
            default:
                return [
                    style({ transform: 'scaleY(0.8)  translateY(-4px)', opacity: 0.8, transformOrigin: '0% 0%', display: 'block' }),
                    animate(`${AnimationDuration.BASE}  ${AnimationCurves.EASE_OUT}`, style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 0%', display: 'block' })),
                ];
        }
    }
    popOut(direction) {
        switch (direction) {
            case 'top':
                return [
                    style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 100%', display: 'block' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.8)  translateY(4px)', opacity: 0.8, transformOrigin: '0% 100%', display: 'block' })),
                ];
            case 'bottom':
            default:
                return [
                    style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 0%', display: 'block' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.8)  translateY(-4px)', opacity: 0.8, transformOrigin: '0% 0%', display: 'block' })),
                ];
        }
    }
    playAnimation() {
        if (this.player) {
            this.player.destroy();
        }
        let direction = '';
        switch (this.direction) {
            case 'down':
                direction = 'bottom';
                break;
            case 'up':
                direction = 'top';
                break;
            default:
                direction = 'bottom';
        }
        if (this.showAnimation) {
            const metadata = this.isOpen ? this.popIn(direction) : this.popOut(direction);
            const factory = this.builder.build(metadata);
            this.player = factory.create(this.cmpRef.location.nativeElement);
            this.renderer2.setStyle(this.cmpRef.location.nativeElement, 'display', 'block');
            this.player.onDone(() => {
                if (!this.isOpen) {
                    const targetElement = this.cmpRef.location.nativeElement;
                    this.renderer2.setStyle(targetElement, 'display', 'none');
                }
            });
            this.player.play();
        }
        else {
            this.renderer2.setStyle(this.cmpRef.location.nativeElement, 'display', this.isOpen ? 'block' : 'none');
        }
    }
    transUserInputToDatepicker(value) {
        if (!value && !this.selectedDate) {
            return;
        }
        if (!value) {
            this.clearAll();
            return;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate instanceof Date &&
            !isNaN(valueDate.getTime()) &&
            this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (new Date(valueFormat).getTime() === new Date(this.selectedDate).getTime() || !this.validateDate(value)) {
            return;
        }
        if (this.showTime || this.disabled) {
            this.resetValue();
        }
        else {
            this.cmpRef.instance.chooseDate(value);
        }
    }
    validateDate(value) {
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) && this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (!valueDate ||
            value !== valueFormat ||
            (value === valueFormat && (valueDate.getTime() < this.minDate.getTime() || valueDate.getTime() > this.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        const resDate = this.selectedDate ? this.dateConverter.format(this.selectedDate, this.dateFormat, this.locale || this.i18nLocale) : '';
        this.elementRef.nativeElement.value = resDate;
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        if (this.userInputSubscription) {
            this.userInputSubscription.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
DatepickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Renderer2 }, { token: i0.Injector }, { token: i1.DatePickerConfigService }, { token: i2.I18nService }, { token: i3.AnimationBuilder }, { token: i0.ChangeDetectorRef }, { token: i4.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
DatepickerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DatepickerDirective, selector: "[dDatepicker]:not([appendToBody])", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", mode: "mode", dateConverter: "dateConverter", direction: "direction", customViewTemplate: "customViewTemplate", autoOpen: "autoOpen", showAnimation: "showAnimation", showTime: "showTime", dateConfig: "dateConfig", dateFormat: "dateFormat", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedDateChange: "selectedDateChange" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatepickerDirective),
            multi: true,
        },
    ], exportAs: ["datepicker"], ngImport: i0 });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], DatepickerDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDatepicker]:not([appendToBody])',
                    exportAs: 'datepicker',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatepickerDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Renderer2 }, { type: i0.Injector }, { type: i1.DatePickerConfigService }, { type: i2.I18nService }, { type: i3.AnimationBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], mode: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], direction: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], autoOpen: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectedDateChange: [{
                type: Output
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,