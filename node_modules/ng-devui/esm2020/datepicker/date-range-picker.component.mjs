import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { DefaultDateConverter } from 'ng-devui/utils';
import { Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { DatePickerConfigService as DatePickerConfig } from './date-picker.config.service';
import { SelectDateRangeChangeReason } from './date-range-change-event-args.model';
import * as i0 from "@angular/core";
import * as i1 from "./date-picker.config.service";
import * as i2 from "ng-devui/i18n";
import * as i3 from "./single-date-range-picker.component";
import * as i4 from "@angular/common";
export class DateRangePickerComponent {
    constructor(datePickerConfig, i18n) {
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.selectedRange = [null, null];
        this.selectedRangeChange = new EventEmitter();
        this.hide = new EventEmitter();
        this.currentCalendars = [null, null];
        this.hoverOnDate = new Subject();
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.chooseDate = (range, reason) => {
            const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.custom;
            this.writeValue(range);
            this.notifyValueChange(range, currentReason);
        };
        this.clearAll = (reason) => {
            const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.custom;
            this.chooseDate([null, null], currentReason);
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.setI18nText();
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat) || null;
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat) || null;
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnChanges(changes) {
        if (changes && changes['selectedRange'] && changes['selectedRange'].currentValue) {
            this.writeValue(this.selectedRange);
        }
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.subscribeHoverActions();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(selectedRange) {
        if (selectedRange) {
            this.selectedRange = selectedRange;
            if (this.leftPicker) {
                this.leftPicker['selectedRange'] = selectedRange;
            }
            if (this.rightPicker) {
                this.rightPicker['selectedRange'] = selectedRange;
            }
            [this.rangeStart, this.rangeEnd] = this.selectedRange;
        }
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nText = this.i18n.getI18nText().datePicker;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
            this.i18nText = data.datePicker;
        });
    }
    rangeChange(data) {
        this.chooseDate(data.selectedRange, data.reason);
    }
    selectingDate(event) {
        this.hoverOnDate.next(event);
    }
    subscribeHoverActions() {
        this.hoverOnDate.pipe(distinctUntilChanged()).subscribe((date) => {
            this.previewRangeEnd(date);
        });
    }
    previewRangeEnd(date) {
        this.leftPicker['previewEnd'] = date;
        this.rightPicker['previewEnd'] = date;
    }
    syncRangeStart(rangeStart, picker) {
        picker.selectRange(rangeStart, true);
    }
    syncPickerPair(currentCalender, orientation) {
        switch (orientation) {
            case 'left':
                this.currentCalendars[0] = currentCalender;
                break;
            case 'right':
                this.currentCalendars[1] = currentCalender;
                break;
        }
    }
    notifyValueChange(range, reason) {
        this.onChange(range);
        this.onTouched();
        this.selectedRangeChange.emit({
            reason,
            selectedRange: range
        });
    }
    consolidateTime() {
        const rangeStart = this.rangeStart;
        const rangeEnd = this.rangeEnd;
        const rangeStartTime = this.leftPicker['currentTime'];
        const rangeEndTime = this.rightPicker['currentTime'];
        this.rangeStart = new Date(rangeStart.getFullYear(), rangeStart.getMonth(), rangeStart.getDate(), rangeStartTime.hour, rangeStartTime.minute, rangeStartTime.second);
        this.rangeEnd = new Date(rangeEnd.getFullYear(), rangeEnd.getMonth(), rangeEnd.getDate(), rangeEndTime.hour, rangeEndTime.minute, rangeEndTime.second);
        const newRange = [this.rangeStart, this.rangeEnd];
        this.onTouched();
        this.writeValue(newRange);
        this.notifyValueChange(newRange, SelectDateRangeChangeReason.button);
        this.hide.emit(true);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
DateRangePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerComponent, deps: [{ token: i1.DatePickerConfigService }, { token: i2.I18nService }], target: i0.ɵɵFactoryTarget.Component });
DateRangePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DateRangePickerComponent, selector: "d-date-range-picker", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", selectedRange: "selectedRange", dateFormat: "dateFormat", customViewTemplate: "customViewTemplate", showTime: "showTime", dateConfig: "dateConfig", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedRangeChange: "selectedRangeChange", hide: "hide" }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DateRangePickerComponent),
            multi: true
        }], viewQueries: [{ propertyName: "leftPicker", first: true, predicate: ["leftPicker"], descendants: true }, { propertyName: "rightPicker", first: true, predicate: ["rightPicker"], descendants: true }, { propertyName: "templateWrap", first: true, predicate: ["templateWrap"], descendants: true }], exportAs: ["dateRangePicker"], usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-date-range-picker\">\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    #leftPicker\n  ></d-datepicker-range-single>\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n    [isAuxiliary]=\"true\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    (consolidateTime)=\"consolidateTime()\"\n    #rightPicker\n  ></d-datepicker-range-single>\n</div>\n<div class=\"devui-date-range-custom\" *ngIf=\"customViewTemplate\" #templateWrap>\n  <ng-template\n    [ngTemplateOutlet]=\"customViewTemplate\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      clearAll: clearAll,\n      chooseDate: chooseDate,\n      rangeStart: rangeStart,\n      rangeEnd: rangeEnd\n    }\"\n  ></ng-template>\n</div>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"], components: [{ type: i3.SingleDateRangePickerComponent, selector: "d-datepicker-range-single", inputs: ["selectedRange", "rangePicker", "isAuxiliary", "currentCalendars"], outputs: ["hoverOnDate", "rangeSelected", "rangeSelecting", "syncPickerPair", "consolidateTime"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-date-range-picker', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DateRangePickerComponent),
                            multi: true
                        }], exportAs: 'dateRangePicker', preserveWhitespaces: false, template: "<div class=\"devui-date-range-picker\">\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    #leftPicker\n  ></d-datepicker-range-single>\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n    [isAuxiliary]=\"true\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    (consolidateTime)=\"consolidateTime()\"\n    #rightPicker\n  ></d-datepicker-range-single>\n</div>\n<div class=\"devui-date-range-custom\" *ngIf=\"customViewTemplate\" #templateWrap>\n  <ng-template\n    [ngTemplateOutlet]=\"customViewTemplate\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      clearAll: clearAll,\n      chooseDate: chooseDate,\n      rangeStart: rangeStart,\n      rangeEnd: rangeEnd\n    }\"\n  ></ng-template>\n</div>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DatePickerConfigService }, { type: i2.I18nService }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], selectedRange: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], selectedRangeChange: [{
                type: Output
            }], hide: [{
                type: Output
            }], leftPicker: [{
                type: ViewChild,
                args: ['leftPicker']
            }], rightPicker: [{
                type: ViewChild,
                args: ['rightPicker']
            }], templateWrap: [{
                type: ViewChild,
                args: ['templateWrap']
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,