import { __decorate, __metadata } from "tslib";
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, Component, ComponentRef, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Input, Output, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { addClassToOrigin, DefaultDateConverter, DevConfigService, fadeInOut, formWithDropDown, removeClassFromOrigin, WithConfig } from 'ng-devui/utils';
import { fromEvent } from 'rxjs';
import { debounceTime, filter, map } from 'rxjs/operators';
import { DatePickerConfigService as DatePickerConfig } from './date-picker.config.service';
import { SelectDateRangeChangeReason } from './date-range-change-event-args.model';
import * as i0 from "@angular/core";
import * as i1 from "./date-picker.config.service";
import * as i2 from "ng-devui/i18n";
import * as i3 from "ng-devui/utils";
import * as i4 from "./date-range-picker.component";
import * as i5 from "@angular/cdk/overlay";
import * as i6 from "@angular/forms";
// tslint:disable-next-line: component-class-suffix
export class DateRangePickerDirective {
    constructor(elementRef, renderer, datePickerConfig, i18n, cdr, devConfigService, doc) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.cdr = cdr;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.hideOnRangeSelected = false;
        this.splitter = '  -  ';
        this.showAnimation = true;
        this.selectedRangeChange = new EventEmitter();
        this._selectedRange = [null, null];
        this._isOpen = false;
        this.datepickerPosition = 'bottom';
        this.valueList = [];
        this.startAnimation = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.chooseDate = (range, reason, hide = true) => {
            if (this.dateRangePicker && this.dateRangePicker['chooseDate']) {
                this.dateRangePicker['chooseDate'](range, reason);
            }
            else {
                this._selectedRange = [...range];
                this.notifyValueChange({
                    reason: reason,
                    selectedRange: [...range]
                });
            }
            if (!this.showTime && this.hideOnRangeSelected && hide) {
                this.hide();
            }
        };
        this.onDocumentClick = ($event) => {
            let templateWrap;
            if (this.dateRangePicker && this.dateRangePicker['templateWrap']) {
                templateWrap = this.dateRangePicker['templateWrap'];
            }
            if (templateWrap && templateWrap.nativeElement.contains($event.target) && !this.hideOnRangeSelected) {
                this.isOpen = true;
            }
            else if (this.elementRef.nativeElement !== $event.target) {
                this.isOpen = false;
            }
            this.cdr.markForCheck();
        };
        this.clearAll = (reason, hide) => {
            const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.custom;
            this.chooseDate([null, null], currentReason, hide);
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.setI18nText();
        this.document = this.doc;
    }
    set maxDate(date) {
        this._maxDate = date;
    }
    get maxDate() {
        if (this.dateRangePicker && this.dateRangePicker['maxDate']) {
            return this.dateRangePicker['maxDate'];
        }
        else {
            return this._maxDate;
        }
    }
    set minDate(date) {
        this._minDate = date;
    }
    get minDate() {
        if (this.dateRangePicker && this.dateRangePicker['minDate']) {
            return this.dateRangePicker['minDate'];
        }
        else {
            return this._minDate;
        }
    }
    set selectedRange(range) {
        if (Array.isArray(range) && range.every(_ => (!!_ || _ === null))) {
            this._selectedRange = range;
        }
    }
    get selectedRange() {
        return this._selectedRange;
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set rangeStart(rangeStart) {
        if (this.dateRangePicker) {
            this.dateRangePicker['rangeStart'] = rangeStart;
        }
    }
    get rangeEnd() {
        if (this.dateRangePicker) {
            return this.dateRangePicker['rangeEnd'];
        }
    }
    set isOpen(isOpen) {
        if (this._isOpen !== isOpen) {
            this._isOpen = isOpen;
            if (!isOpen && !this.rangeEnd) {
                this.rangeStart = null;
            }
            if (!isOpen) {
                this.startAnimation = false;
                removeClassFromOrigin(this.elementRef);
                this.document.removeEventListener('click', this.onDocumentClick);
            }
            else {
                setTimeout(() => {
                    addClassToOrigin(this.elementRef);
                    this.document.addEventListener('click', this.onDocumentClick);
                    this.startAnimation = true;
                    this.cdr.detectChanges();
                });
            }
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    onBlur($event) {
        this.onTouched();
        if (!this.validateDate(this.elementRef.nativeElement.value)) {
            this.resetValue();
        }
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this.updateCdkConnectedOverlayOrigin();
        this.initInputChanges();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    initInputChanges() {
        this.valueChangeSubscrip = fromEvent(this.elementRef.nativeElement, 'keyup').pipe(map((e) => e.target.value), filter(() => !this.disabled), debounceTime(300)).subscribe(value => {
            this.transUserInputToDatepicker(value);
        });
    }
    writeValue(selectedRange) {
        this._selectedRange = selectedRange;
        if (selectedRange) {
            this.writeModelValue(selectedRange);
        }
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
        });
    }
    updateCdkConnectedOverlayOrigin() {
        if (this.elementRef.nativeElement) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(formWithDropDown(this.elementRef) || this.elementRef.nativeElement);
        }
    }
    toggle(clickShow) {
        if (clickShow === undefined) {
            this.isOpen = !this.isOpen;
        }
        else {
            this.isOpen = clickShow;
        }
    }
    hide(event) {
        if (event !== false) {
            this.isOpen = false;
        }
    }
    writeModelValue(input) {
        if (Array.isArray(input) && input.every(_ => !!_)) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.formatDateRange(input));
        }
        else {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', '');
        }
    }
    formatDateRange(arr) {
        return arr.map((date, i) => {
            return (date ?
                this.dateConverter.format(date, this.dateFormat, this.locale || this.i18nLocale) :
                ['Start', 'End'][i]);
        }).join(this.splitter);
    }
    onPositionChange(position) {
        switch (position.connectionPair.overlayY) {
            case 'top':
            case 'center':
                this.datepickerPosition = 'bottom';
                break;
            case 'bottom':
                this.datepickerPosition = 'top';
        }
    }
    notifyValueChange(dateObj) {
        this.writeValue(dateObj.selectedRange);
        this.onChange(dateObj.selectedRange);
        this.onTouched();
        this.selectedRangeChange.emit({
            reason: dateObj.reason,
            selectedRange: dateObj.selectedRange
        });
        if (!this.showTime && this.hideOnRangeSelected) {
            this.hide();
        }
    }
    transUserInputToDatepicker(value) {
        if (!this.showTime && !this.disabled) {
            const _value = value || this.elementRef.nativeElement.value;
            if (!_value && !this.selectedRange.every(val => !!val)) {
                this.clearAll(undefined, false);
                return;
            }
            if (!_value) {
                this.clearAll(undefined, false);
                return;
            }
            if (this.validateDate(_value)) {
                this.chooseDate(this.valueList, undefined, false);
            }
        }
        else {
            this.resetValue();
        }
    }
    resetValue() {
        this.writeValue(this.selectedRange);
    }
    validateDate(value) {
        if (!value) {
            return true;
        }
        this.valueList = value.split(this.splitter);
        let valueFormat;
        // 如果拆出来6个，则为日期间分隔符和年月日间分隔符相同的情况，此情况允许
        if (this.valueList.length === 6 && this.valueList.every(val => !!val)) {
            const curValueList = [];
            this.valueList.forEach((val, index) => {
                // 根据下标，前三个组装在一起，后三个组装在一起，不需要考虑分隔符，后面会format
                if ((index + 1) % 3 === 1) {
                    curValueList.push(val);
                }
                else {
                    curValueList[Math.ceil(index / 3) - 1] = curValueList[Math.ceil(index / 3) - 1] + '-' + val;
                }
            });
            this.valueList = curValueList;
        }
        // 不管拆出来是6还是2个，都需要组装成2个日期
        if (this.valueList.length === 2 &&
            this.valueList.every(val => !!val) &&
            this.valueList.every((val, index) => new Date(val).getTime() === new Date(this.selectedRange[index]).getTime())) {
            this.valueList = this.valueList.map(t => new Date(t));
            return true;
        }
        if (!this.valueList.every(val => new Date(val).getTime())) {
            return false;
        }
        if (this.valueList.length === 2 && this.valueList.every(val => !!val)) {
            const valueTimeList = this.valueList.map(val => (new Date(`${val} 00:00:00`)).getTime());
            valueFormat = this.formatDateRange(this.valueList.map(numValue => new Date(numValue)));
            if (value === valueFormat &&
                !valueTimeList.every((val) => {
                    return (val >= this.minDate.getTime() && val <= this.maxDate.getTime());
                })) {
                return false;
            }
            else {
                // 判断前后俩日期是否大于最小，小于最大，若是则合法，进行如下操作
                // 此时包括value为NaN既日期格式不正确的情况，对其进行处理下方判断会过滤掉
                this.valueList = this.valueList.map(val => new Date(val).getTime()).sort((a, b) => a - b).map(numValue => new Date(numValue));
            }
            if (valueFormat && value === valueFormat) {
                return true;
            }
            return false;
        }
        else {
            return false;
        }
    }
    ngOnDestroy() {
        this.hide();
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        if (this.valueChangeSubscrip) {
            this.valueChangeSubscrip.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
DateRangePickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DatePickerConfigService }, { token: i2.I18nService }, { token: i0.ChangeDetectorRef }, { token: i3.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DateRangePickerDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DateRangePickerDirective, selector: "[dDateRangePicker]", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", hideOnRangeSelected: "hideOnRangeSelected", customViewTemplate: "customViewTemplate", splitter: "splitter", showAnimation: "showAnimation", maxDate: "maxDate", minDate: "minDate", selectedRange: "selectedRange", showTime: "showTime", dateConfig: "dateConfig", dateFormat: "dateFormat" }, outputs: { selectedRangeChange: "selectedRangeChange" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DateRangePickerDirective),
            multi: true
        }], viewQueries: [{ propertyName: "dateRangePicker", first: true, predicate: ["dateRangePicker"], descendants: true }], exportAs: ["dateRangePicker"], ngImport: i0, template: "<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen=false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datepickerPosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-date-range-wrapper\">\n    <d-date-range-picker\n      #dateRangePicker\n      [locale]=\"locale\"\n      [cssClass]=\"cssClass\"\n      [disabled]=\"disabled\"\n      [dateConverter]=\"dateConverter\"\n      [customViewTemplate]=\"customViewTemplate\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [dateFormat]=\"dateFormat\"\n      [showTime]=\"showTime\"\n      [selectedRange]=\"selectedRange\"\n      (selectedRangeChange)=\"notifyValueChange($event)\"\n      (hide)=\"hide($event)\"\n      [(ngModel)]=\"_selectedRange\"\n    ></d-date-range-picker>\n  </div>\n</ng-template>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"], components: [{ type: i4.DateRangePickerComponent, selector: "d-date-range-picker", inputs: ["locale", "cssClass", "disabled", "dateConverter", "selectedRange", "dateFormat", "customViewTemplate", "showTime", "dateConfig", "maxDate", "minDate"], outputs: ["selectedRangeChange", "hide"], exportAs: ["dateRangePicker"] }], directives: [{ type: i5.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], animations: [
        fadeInOut
    ] });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], DateRangePickerDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerDirective, decorators: [{
            type: Component,
            args: [{ selector: '[dDateRangePicker]', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DateRangePickerDirective),
                            multi: true
                        }], exportAs: 'dateRangePicker', animations: [
                        fadeInOut
                    ], preserveWhitespaces: false, template: "<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen=false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datepickerPosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-date-range-wrapper\">\n    <d-date-range-picker\n      #dateRangePicker\n      [locale]=\"locale\"\n      [cssClass]=\"cssClass\"\n      [disabled]=\"disabled\"\n      [dateConverter]=\"dateConverter\"\n      [customViewTemplate]=\"customViewTemplate\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [dateFormat]=\"dateFormat\"\n      [showTime]=\"showTime\"\n      [selectedRange]=\"selectedRange\"\n      (selectedRangeChange)=\"notifyValueChange($event)\"\n      (hide)=\"hide($event)\"\n      [(ngModel)]=\"_selectedRange\"\n    ></d-date-range-picker>\n  </div>\n</ng-template>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DatePickerConfigService }, { type: i2.I18nService }, { type: i0.ChangeDetectorRef }, { type: i3.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], hideOnRangeSelected: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], splitter: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectedRangeChange: [{
                type: Output
            }], dateRangePicker: [{
                type: ViewChild,
                args: ['dateRangePicker']
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], selectedRange: [{
                type: Input
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,