import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { addClassToOrigin, AppendToBodyDirectionsConfig, DefaultDateConverter, fadeInOut, formWithDropDown, removeClassFromOrigin } from 'ng-devui/utils';
import { fromEvent } from 'rxjs';
import { debounceTime, filter, map } from 'rxjs/operators';
import { SelectDateChangeReason } from './date-change-event-args.model';
import { DatePickerConfigService as DatePickerConfig } from './date-picker.config.service';
import * as i0 from "@angular/core";
import * as i1 from "./date-picker.config.service";
import * as i2 from "ng-devui/i18n";
import * as i3 from "./datepicker.component";
import * as i4 from "@angular/cdk/overlay";
export class DatePickerAppendToBodyComponent {
    constructor(elementRef, viewContainerRef, renderer2, datePickerConfig, i18n, cdr, doc) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.renderer2 = renderer2;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.cdr = cdr;
        this.doc = doc;
        this.appendToBodyDirections = [
            'rightDown', 'leftDown', 'rightUp', 'leftUp'
        ];
        this.autoOpen = false;
        this.showAnimation = true;
        this.selectedDateChange = new EventEmitter();
        this._isOpen = false;
        this.datepickerPosition = 'bottom';
        this.startAnimation = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.onDocumentClick = ($event) => {
            if (this.elementRef.nativeElement !== $event.target) {
                this.isOpen = false;
                this.cdr.markForCheck();
            }
        };
        this.clearAll = (reason) => {
            if (this.disabled) {
                return;
            }
            this.writeValue(null);
            this.selectedDate = null;
            this.onChange(null);
            this.onTouched();
            const currentReason = typeof reason === 'number' ? reason : SelectDateChangeReason.custom;
            this.selectedDateChange.emit({
                reason: currentReason,
                selectedDate: null
            });
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.setI18nText();
        this.document = this.doc;
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
            this.writeModelValue({ selectedDate: this.selectedDate, reason: SelectDateChangeReason.format });
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat, this.locale || this.i18nLocale);
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat, this.locale || this.i18nLocale);
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    set isOpen(open) {
        if (this._isOpen !== open) {
            this._isOpen = open;
            if (!open) {
                this.startAnimation = false;
                removeClassFromOrigin(this.elementRef);
                this.document.removeEventListener('click', this.onDocumentClick);
            }
            else {
                setTimeout(() => {
                    this.startAnimation = true;
                    this.cdr.detectChanges();
                    addClassToOrigin(this.elementRef);
                    this.document.addEventListener('click', this.onDocumentClick);
                });
            }
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    onBlur($event) {
        this.onTouched();
        const value = this.elementRef.nativeElement.value;
        if (!this.validateDate(value)) {
            this.resetValue();
        }
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.setPositions();
        this.updateCdkConnectedOverlayOrigin();
        if (this.autoOpen) {
            this.isOpen = true;
        }
        this.valueChanges = this.registerInputEvent();
        this.userInputSubscription = this.valueChanges.subscribe((source) => this.transUserInputToDatepicker(source));
    }
    ngOnChanges(changes) {
        if (changes['appendToBodyDirections']) {
            this.setPositions();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerInputEvent() {
        return fromEvent(this.elementRef.nativeElement, 'keyup').pipe(map((e) => e.target.value), filter(() => !this.disabled), debounceTime(300));
    }
    writeValue(obj) {
        this.selectedDate = obj ?
            this.dateConverter.parse(obj, this.dateFormat, this.locale || this.i18nLocale) : null;
        const value = this.selectedDate ? this.dateConverter.format(this.selectedDate, this.dateFormat, this.locale || this.i18nLocale) : '';
        this.renderer2.setProperty(this.elementRef.nativeElement, 'value', value);
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
        });
    }
    timeChange(dateObj) {
        this.writeValue(dateObj ? dateObj['selectedDate'] : null);
        this.writeModelValue(dateObj);
        if (dateObj && (dateObj['reason'] === SelectDateChangeReason.date && !this.showTime ||
            dateObj['reason'] === SelectDateChangeReason.button)) {
            this.isOpen = false;
        }
    }
    updateCdkConnectedOverlayOrigin() {
        if (this.elementRef.nativeElement) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(formWithDropDown(this.elementRef) || this.elementRef.nativeElement);
        }
    }
    toggle(clickShow) {
        if (clickShow === undefined) {
            if (this.isOpen) {
                this.hide();
            }
            else {
                this.show();
            }
        }
        else {
            if (clickShow) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    hide() {
        this.isOpen = false;
    }
    show() {
        this.isOpen = true;
    }
    writeModelValue(selectDateObj) {
        let selectDate;
        let dateReason = SelectDateChangeReason.time;
        if (selectDateObj && typeof selectDateObj === 'object' && Object.prototype.hasOwnProperty.call(selectDateObj, 'selectedDate')) {
            selectDate = selectDateObj.selectedDate;
            dateReason = selectDateObj.reason;
        }
        if (selectDate) {
            selectDate = new Date(selectDate);
        }
        else {
            selectDate = null;
        }
        this.onChange(selectDate); // 这行代码能触发ngModel绑定的变量值发生变化
        this.onTouched();
        this.selectedDateChange.emit({
            reason: dateReason,
            selectedDate: this.selectedDate
        });
    }
    onPositionChange(position) {
        switch (position.connectionPair.overlayY) {
            case 'top':
            case 'center':
                this.datepickerPosition = 'bottom';
                break;
            case 'bottom':
                this.datepickerPosition = 'top';
        }
    }
    setPositions() {
        if (this.appendToBodyDirections && this.appendToBodyDirections.length > 0) {
            this.positions = this.appendToBodyDirections.map(position => {
                if (typeof position === 'string') {
                    return AppendToBodyDirectionsConfig[position];
                }
                else {
                    return position;
                }
            }).filter(position => position !== undefined);
        }
        else {
            this.positions = undefined;
        }
    }
    transUserInputToDatepicker(value) {
        if (!value && !this.selectedDate) {
            return;
        }
        if (!value) {
            this.clearAll();
            return;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (new Date(valueFormat).getTime() === new Date(this.selectedDate).getTime() || !this.validateDate(value)) {
            return;
        }
        if (this.showTime || this.disabled) {
            this.resetValue();
        }
        else {
            this.selectedDate = valueDate;
            this.writeModelValue({
                reason: SelectDateChangeReason.custom,
                selectedDate: valueDate
            });
        }
    }
    validateDate(value) {
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat && (valueDate.getTime() < this.minDate.getTime() || valueDate.getTime() > this.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        const resDate = this.selectedDate ?
            this.dateConverter.format(this.selectedDate, this.dateFormat, this.locale || this.i18nLocale) :
            '';
        this.elementRef.nativeElement.value = resDate;
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        if (this.userInputSubscription) {
            this.userInputSubscription.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
DatePickerAppendToBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerAppendToBodyComponent, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }, { token: i1.DatePickerConfigService }, { token: i2.I18nService }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DatePickerAppendToBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DatePickerAppendToBodyComponent, selector: "[dDatepicker][appendToBody]", inputs: { appendToBodyDirections: "appendToBodyDirections", locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", customViewTemplate: "customViewTemplate", autoOpen: "autoOpen", showAnimation: "showAnimation", showTime: "showTime", dateConfig: "dateConfig", dateFormat: "dateFormat", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedDateChange: "selectedDateChange" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatePickerAppendToBodyComponent),
            multi: true
        }], exportAs: ["datepicker"], usesOnChanges: true, ngImport: i0, template: `
    <ng-template cdk-connected-overlay
                 [cdkConnectedOverlayOrigin]="cdkConnectedOverlayOrigin"
                 [cdkConnectedOverlayPositions]="positions"
                 [cdkConnectedOverlayOpen]="isOpen"
                 (backdropClick)="isOpen=false"
                 (positionChange)="onPositionChange($event)">
      <d-datepicker [@fadeInOut]="startAnimation ? datepickerPosition : 'void'"
                      [locale]="locale || i18nLocale" [@.disabled]="!showAnimation"
                      [showTime]="showTime" [cssClass]="cssClass" [selectedDate]="selectedDate"
                      [disabled]="disabled" [dateConverter]="dateConverter" (selectedDateChange)="timeChange($event)"
                      [dateConfig]="dateConfig"
                      [customViewTemplate]="customViewTemplate" [maxDate]="maxDate"
                      [minDate]="minDate" class="devui-datepicker"></d-datepicker>
    </ng-template>
  `, isInline: true, styles: [".devui-datepicker{border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}\n"], components: [{ type: i3.DatepickerComponent, selector: "d-datepicker", inputs: ["cssClass", "dateConverter", "locale", "disabled", "customViewTemplate", "selectedDate", "mode", "dateFormat", "showTime", "dateConfig", "minDate", "maxDate"], outputs: ["selectedDateChange"] }], directives: [{ type: i4.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }], animations: [
        fadeInOut
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerAppendToBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dDatepicker][appendToBody]', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatePickerAppendToBodyComponent),
                            multi: true
                        }], exportAs: 'datepicker', template: `
    <ng-template cdk-connected-overlay
                 [cdkConnectedOverlayOrigin]="cdkConnectedOverlayOrigin"
                 [cdkConnectedOverlayPositions]="positions"
                 [cdkConnectedOverlayOpen]="isOpen"
                 (backdropClick)="isOpen=false"
                 (positionChange)="onPositionChange($event)">
      <d-datepicker [@fadeInOut]="startAnimation ? datepickerPosition : 'void'"
                      [locale]="locale || i18nLocale" [@.disabled]="!showAnimation"
                      [showTime]="showTime" [cssClass]="cssClass" [selectedDate]="selectedDate"
                      [disabled]="disabled" [dateConverter]="dateConverter" (selectedDateChange)="timeChange($event)"
                      [dateConfig]="dateConfig"
                      [customViewTemplate]="customViewTemplate" [maxDate]="maxDate"
                      [minDate]="minDate" class="devui-datepicker"></d-datepicker>
    </ng-template>
  `, animations: [
                        fadeInOut
                    ], preserveWhitespaces: false, styles: [".devui-datepicker{border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: i1.DatePickerConfigService }, { type: i2.I18nService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { appendToBodyDirections: [{
                type: Input
            }], locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], autoOpen: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectedDateChange: [{
                type: Output
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,