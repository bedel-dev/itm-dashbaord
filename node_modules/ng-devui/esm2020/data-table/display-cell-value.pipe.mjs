import { Pipe } from '@angular/core';
import { formatDate } from 'ng-devui/utils';
import * as i0 from "@angular/core";
export class DisPlayCellValuePipe {
    constructor() {
        this.datePicker = {
            format: {
                date: 'y/MM/dd',
                time: 'y/MM/dd HH:mm'
            }
        };
    }
    transform(rowItem, rowIndex, column) {
        if (!column || !column.field) {
            return null;
        }
        if (column.field === '$index') {
            return rowIndex + 1;
        }
        const cellItem = rowItem[column.field];
        switch (column.fieldType) {
            case 'date': {
                let pattern;
                if (column.extraOptions && column.extraOptions.dateFormat) {
                    pattern = column.extraOptions.dateFormat;
                }
                else {
                    pattern = column.extraOptions && column.extraOptions.showTime ?
                        this.datePicker.format.time : this.datePicker.format.date;
                }
                return cellItem ? formatDate(new Date(cellItem), pattern) : '';
            }
            case 'select':
            case 'treeSelect':
                if (column.extraOptions && column.extraOptions.multiple) {
                    if (cellItem && cellItem.length > 0) {
                        let displayValue;
                        if (column.extraOptions.filterKey) {
                            displayValue = cellItem.map(item => item[column.extraOptions.filterKey]).join(';');
                        }
                        else {
                            displayValue = cellItem.join(';');
                        }
                        return displayValue;
                    }
                    else {
                        return '--';
                    }
                }
                else {
                    let displayValue;
                    if (column.extraOptions && column.extraOptions.filterKey) {
                        displayValue = cellItem ? cellItem[column.extraOptions.filterKey] : cellItem;
                    }
                    else {
                        displayValue = cellItem;
                    }
                    return displayValue === 0 ? 0 : (displayValue || '--');
                }
            default:
                if (cellItem === null || cellItem === undefined || cellItem === '') {
                    return '--';
                }
                else {
                    return cellItem;
                }
        }
    }
}
DisPlayCellValuePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DisPlayCellValuePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
DisPlayCellValuePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DisPlayCellValuePipe, name: "disPlayCellValuePipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DisPlayCellValuePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'disPlayCellValuePipe' }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheS1jZWxsLXZhbHVlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS9kYXRhLXRhYmxlL2Rpc3BsYXktY2VsbC12YWx1ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFJNUMsTUFBTSxPQUFPLG9CQUFvQjtJQVEvQjtRQVBBLGVBQVUsR0FBRztZQUNYLE1BQU0sRUFBRTtnQkFDTixJQUFJLEVBQUUsU0FBUztnQkFDZixJQUFJLEVBQUUsZUFBZTthQUN0QjtTQUNGLENBQUM7SUFFYyxDQUFDO0lBQ2pCLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQW9DO1FBQy9ELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sUUFBUSxHQUFHLENBQUMsQ0FBQztTQUNyQjtRQUVELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkMsUUFBUSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQzFCLEtBQUssTUFBTSxDQUFDLENBQUM7Z0JBQ1gsSUFBSSxPQUFPLENBQUM7Z0JBQ1osSUFBSSxNQUFNLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFO29CQUN6RCxPQUFPLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7aUJBQzFDO3FCQUFNO29CQUNMLE9BQU8sR0FBRyxNQUFNLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQzdELElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2lCQUM3RDtnQkFDRCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDaEU7WUFDRCxLQUFLLFFBQVEsQ0FBQztZQUNkLEtBQUssWUFBWTtnQkFDZixJQUFJLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7b0JBQ3ZELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUNuQyxJQUFJLFlBQVksQ0FBQzt3QkFDakIsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTs0QkFDakMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt5QkFDcEY7NkJBQU07NEJBQ0wsWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBQ25DO3dCQUNELE9BQU8sWUFBWSxDQUFDO3FCQUNyQjt5QkFBTTt3QkFDTCxPQUFPLElBQUksQ0FBQztxQkFDYjtpQkFDRjtxQkFBTTtvQkFDTCxJQUFJLFlBQVksQ0FBQztvQkFDakIsSUFBSSxNQUFNLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFO3dCQUN4RCxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO3FCQUM5RTt5QkFBTTt3QkFDTCxZQUFZLEdBQUcsUUFBUSxDQUFDO3FCQUN6QjtvQkFDRCxPQUFPLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLENBQUM7aUJBQ3hEO1lBQ0g7Z0JBQ0UsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLEVBQUUsRUFBRTtvQkFDbEUsT0FBTyxJQUFJLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0wsT0FBTyxRQUFRLENBQUM7aUJBQ2pCO1NBQ0Y7SUFDSCxDQUFDOztpSEE3RFUsb0JBQW9COytHQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFEaEMsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxzQkFBc0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICduZy1kZXZ1aS91dGlscyc7XG5pbXBvcnQgdHlwZSB7IERhdGFUYWJsZUNvbHVtblRtcGxDb21wb25lbnQgfSBmcm9tICcuL3RtcGwvZGF0YS10YWJsZS1jb2x1bW4tdG1wbC5jb21wb25lbnQnO1xuXG5AUGlwZSh7IG5hbWU6ICdkaXNQbGF5Q2VsbFZhbHVlUGlwZScgfSlcbmV4cG9ydCBjbGFzcyBEaXNQbGF5Q2VsbFZhbHVlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBkYXRlUGlja2VyID0ge1xuICAgIGZvcm1hdDoge1xuICAgICAgZGF0ZTogJ3kvTU0vZGQnLFxuICAgICAgdGltZTogJ3kvTU0vZGQgSEg6bW0nXG4gICAgfVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG4gIHRyYW5zZm9ybShyb3dJdGVtLCByb3dJbmRleCwgY29sdW1uOiBEYXRhVGFibGVDb2x1bW5UbXBsQ29tcG9uZW50KTogYW55IHtcbiAgICBpZiAoIWNvbHVtbiB8fCAhY29sdW1uLmZpZWxkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY29sdW1uLmZpZWxkID09PSAnJGluZGV4Jykge1xuICAgICAgcmV0dXJuIHJvd0luZGV4ICsgMTtcbiAgICB9XG5cbiAgICBjb25zdCBjZWxsSXRlbSA9IHJvd0l0ZW1bY29sdW1uLmZpZWxkXTtcblxuICAgIHN3aXRjaCAoY29sdW1uLmZpZWxkVHlwZSkge1xuICAgIGNhc2UgJ2RhdGUnOiB7XG4gICAgICBsZXQgcGF0dGVybjtcbiAgICAgIGlmIChjb2x1bW4uZXh0cmFPcHRpb25zICYmIGNvbHVtbi5leHRyYU9wdGlvbnMuZGF0ZUZvcm1hdCkge1xuICAgICAgICBwYXR0ZXJuID0gY29sdW1uLmV4dHJhT3B0aW9ucy5kYXRlRm9ybWF0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0dGVybiA9IGNvbHVtbi5leHRyYU9wdGlvbnMgJiYgY29sdW1uLmV4dHJhT3B0aW9ucy5zaG93VGltZSA/XG4gICAgICAgICAgdGhpcy5kYXRlUGlja2VyLmZvcm1hdC50aW1lIDogdGhpcy5kYXRlUGlja2VyLmZvcm1hdC5kYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNlbGxJdGVtID8gZm9ybWF0RGF0ZShuZXcgRGF0ZShjZWxsSXRlbSksIHBhdHRlcm4pIDogJyc7XG4gICAgfVxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgY2FzZSAndHJlZVNlbGVjdCc6XG4gICAgICBpZiAoY29sdW1uLmV4dHJhT3B0aW9ucyAmJiBjb2x1bW4uZXh0cmFPcHRpb25zLm11bHRpcGxlKSB7XG4gICAgICAgIGlmIChjZWxsSXRlbSAmJiBjZWxsSXRlbS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbGV0IGRpc3BsYXlWYWx1ZTtcbiAgICAgICAgICBpZiAoY29sdW1uLmV4dHJhT3B0aW9ucy5maWx0ZXJLZXkpIHtcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IGNlbGxJdGVtLm1hcChpdGVtID0+IGl0ZW1bY29sdW1uLmV4dHJhT3B0aW9ucy5maWx0ZXJLZXldKS5qb2luKCc7Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IGNlbGxJdGVtLmpvaW4oJzsnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRpc3BsYXlWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJy0tJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGRpc3BsYXlWYWx1ZTtcbiAgICAgICAgaWYgKGNvbHVtbi5leHRyYU9wdGlvbnMgJiYgY29sdW1uLmV4dHJhT3B0aW9ucy5maWx0ZXJLZXkpIHtcbiAgICAgICAgICBkaXNwbGF5VmFsdWUgPSBjZWxsSXRlbSA/IGNlbGxJdGVtW2NvbHVtbi5leHRyYU9wdGlvbnMuZmlsdGVyS2V5XSA6IGNlbGxJdGVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IGNlbGxJdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXNwbGF5VmFsdWUgPT09IDAgPyAwIDogKGRpc3BsYXlWYWx1ZSB8fCAnLS0nKTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGNlbGxJdGVtID09PSBudWxsIHx8IGNlbGxJdGVtID09PSB1bmRlZmluZWQgfHwgY2VsbEl0ZW0gPT09ICcnKSB7XG4gICAgICAgIHJldHVybiAnLS0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNlbGxJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19