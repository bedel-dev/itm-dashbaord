import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { DataTableCellEditTmplComponent } from './data-table-cell-edit-tmpl.component';
import { DataTableCellViewTmplComponent } from './data-table-cell-view-tmpl.component';
import { DataTableHeadCellTmplComponent } from './data-table-head-cell-tmpl.component';
import * as i0 from "@angular/core";
export class DataTableColumnTmplComponent {
    constructor() {
        this.nestedColumnIndent = 16;
        this.order = Number.MAX_VALUE;
        this.nestedColumn = false;
        this.filterChange = new EventEmitter();
        this.filterToggle = new EventEmitter();
        this.filterMultiple = true;
        this.orderChange = new EventEmitter();
        this.widthChange = new EventEmitter();
        // 鼠标是否移动到当前表头单元格
        this.selected = false;
        // @deprecated
        this.fieldType = 'text';
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes['order']) {
            this.orderChange.emit(changes['order'].currentValue);
        }
        if (changes['width']) {
            this.widthChange.emit(changes['width'].currentValue);
        }
    }
    ngOnDestroy() {
        this.orderChange.unsubscribe();
    }
    // column.extraOptions?.dateFormat
    emitFilterData(filterData) {
        this.filterChange.emit(filterData);
    }
    emitFilterToggle(data) {
        this.filterToggle.emit(data);
    }
}
DataTableColumnTmplComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableColumnTmplComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DataTableColumnTmplComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableColumnTmplComponent, selector: "d-column", inputs: { advancedHeader: "advancedHeader", maxWidth: "maxWidth", minWidth: "minWidth", field: "field", header: "header", sortable: "sortable", editable: "editable", filterable: "filterable", closeFilterWhenScroll: "closeFilterWhenScroll", cellClass: "cellClass", nestedColumnIndent: "nestedColumnIndent", width: "width", fixedLeft: "fixedLeft", fixedRight: "fixedRight", extraOptions: "extraOptions", order: "order", nestedColumn: "nestedColumn", filterList: "filterList", filterMultiple: "filterMultiple", filterIconActive: "filterIconActive", filterBoxWidth: "filterBoxWidth", filterBoxHeight: "filterBoxHeight", beforeFilter: "beforeFilter", customFilterTemplate: "customFilterTemplate", extraFilterTemplate: "extraFilterTemplate", searchFn: "searchFn", fieldType: "fieldType" }, outputs: { filterChange: "filterChange", filterToggle: "filterToggle" }, queries: [{ propertyName: "cellCmp", first: true, predicate: DataTableCellViewTmplComponent, descendants: true }, { propertyName: "cellEditCmp", first: true, predicate: DataTableCellEditTmplComponent, descendants: true }, { propertyName: "headCellTmpl", first: true, predicate: DataTableHeadCellTmplComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableColumnTmplComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-column',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { advancedHeader: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], field: [{
                type: Input
            }], header: [{
                type: Input
            }], sortable: [{
                type: Input
            }], editable: [{
                type: Input
            }], filterable: [{
                type: Input
            }], closeFilterWhenScroll: [{
                type: Input
            }], cellClass: [{
                type: Input
            }], nestedColumnIndent: [{
                type: Input
            }], width: [{
                type: Input
            }], fixedLeft: [{
                type: Input
            }], fixedRight: [{
                type: Input
            }], extraOptions: [{
                type: Input
            }], order: [{
                type: Input
            }], nestedColumn: [{
                type: Input
            }], filterList: [{
                type: Input
            }], filterChange: [{
                type: Output
            }], filterToggle: [{
                type: Output
            }], filterMultiple: [{
                type: Input
            }], filterIconActive: [{
                type: Input
            }], filterBoxWidth: [{
                type: Input
            }], filterBoxHeight: [{
                type: Input
            }], beforeFilter: [{
                type: Input
            }], cellCmp: [{
                type: ContentChild,
                args: [DataTableCellViewTmplComponent]
            }], cellEditCmp: [{
                type: ContentChild,
                args: [DataTableCellEditTmplComponent]
            }], headCellTmpl: [{
                type: ContentChild,
                args: [DataTableHeadCellTmplComponent]
            }], customFilterTemplate: [{
                type: Input
            }], extraFilterTemplate: [{
                type: Input
            }], searchFn: [{
                type: Input
            }], fieldType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS1jb2x1bW4tdG1wbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZ1aS9kYXRhLXRhYmxlL3RtcGwvZGF0YS10YWJsZS1jb2x1bW4tdG1wbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFDbEQsTUFBTSxFQUFpQixXQUFXLEVBQ3RELE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOztBQU92RixNQUFNLE9BQU8sNEJBQTRCO0lBdUR2QztRQXRDUyx1QkFBa0IsR0FBRyxFQUFFLENBQUM7UUFNeEIsVUFBSyxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDakMsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFLcEIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUNsRCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUdyQyxDQUFDO1FBQ0ksbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFXL0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBaUIsQ0FBQztRQUNoRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDO1FBR2hELGlCQUFpQjtRQUNqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGNBQWM7UUFDTCxjQUFTLEdBQUcsTUFBTSxDQUFDO0lBSTVCLENBQUM7SUFDRCxRQUFRLEtBQVUsQ0FBQztJQUNuQixXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxrQ0FBa0M7SUFFbEMsY0FBYyxDQUFDLFVBQVU7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGdCQUFnQixDQUFDLElBR2hCO1FBQ0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7eUhBcEZVLDRCQUE0Qjs2R0FBNUIsNEJBQTRCLDg2QkF1Q3pCLDhCQUE4Qiw4RUFDOUIsOEJBQThCLCtFQUM5Qiw4QkFBOEIscUVBNUNsQyxFQUFFOzJGQUdELDRCQUE0QjtrQkFMeEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzBFQUVVLGNBQWM7c0JBQXRCLEtBQUs7Z0JBT0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0cscUJBQXFCO3NCQUE3QixLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0csa0JBQWtCO3NCQUExQixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFFRyxTQUFTO3NCQUFqQixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFJRyxVQUFVO3NCQUFsQixLQUFLO2dCQUNJLFlBQVk7c0JBQXJCLE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFJRSxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFDRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDd0MsT0FBTztzQkFBcEQsWUFBWTt1QkFBQyw4QkFBOEI7Z0JBQ0UsV0FBVztzQkFBeEQsWUFBWTt1QkFBQyw4QkFBOEI7Z0JBQ0UsWUFBWTtzQkFBekQsWUFBWTt1QkFBQyw4QkFBOEI7Z0JBQ25DLG9CQUFvQjtzQkFBNUIsS0FBSztnQkFDRyxtQkFBbUI7c0JBQTNCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFTRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlsdGVyQ29uZmlnIH0gZnJvbSAnLi4vZGF0YS10YWJsZS5tb2RlbCc7XG5pbXBvcnQgeyBEYXRhVGFibGVDZWxsRWRpdFRtcGxDb21wb25lbnQgfSBmcm9tICcuL2RhdGEtdGFibGUtY2VsbC1lZGl0LXRtcGwuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFUYWJsZUNlbGxWaWV3VG1wbENvbXBvbmVudCB9IGZyb20gJy4vZGF0YS10YWJsZS1jZWxsLXZpZXctdG1wbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YVRhYmxlSGVhZENlbGxUbXBsQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRhLXRhYmxlLWhlYWQtY2VsbC10bXBsLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2QtY29sdW1uJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVDb2x1bW5UbXBsQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGFkdmFuY2VkSGVhZGVyOiBBcnJheTx7XG4gICAgaGVhZGVyOiBzdHJpbmc7XG4gICAgcm93c3BhbjogbnVtYmVyO1xuICAgIGNvbHNwYW46IG51bWJlcjtcbiAgICBbcHJvcDogc3RyaW5nXTogYW55O1xuICB9PjtcblxuICBASW5wdXQoKSBtYXhXaWR0aDogc3RyaW5nO1xuICBASW5wdXQoKSBtaW5XaWR0aDogc3RyaW5nO1xuICBASW5wdXQoKSBmaWVsZDogc3RyaW5nO1xuICBASW5wdXQoKSBoZWFkZXI6IHN0cmluZztcbiAgQElucHV0KCkgc29ydGFibGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGVkaXRhYmxlOiBib29sZWFuO1xuICBASW5wdXQoKSBmaWx0ZXJhYmxlOiBib29sZWFuO1xuICBASW5wdXQoKSBjbG9zZUZpbHRlcldoZW5TY3JvbGw6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNlbGxDbGFzczogc3RyaW5nO1xuICBASW5wdXQoKSBuZXN0ZWRDb2x1bW5JbmRlbnQgPSAxNjtcbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZztcbiAgLy8gQElucHV0KCkgZml4ZWQ/OiBib29sZWFuO1xuICBASW5wdXQoKSBmaXhlZExlZnQ/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZpeGVkUmlnaHQ/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGV4dHJhT3B0aW9uczogYW55O1xuICBASW5wdXQoKSBvcmRlcjogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgQElucHV0KCkgbmVzdGVkQ29sdW1uID0gZmFsc2U7XG4gIC8qKlxuKiDkvKDlhaXnrZvpgInliJfooahcbiovXG4gIEBJbnB1dCgpIGZpbHRlckxpc3Q6IEFycmF5PEZpbHRlckNvbmZpZz47XG4gIEBPdXRwdXQoKSBmaWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPEZpbHRlckNvbmZpZ1tdPigpO1xuICBAT3V0cHV0KCkgZmlsdGVyVG9nZ2xlID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIGNoZWNrbGlzdDogRmlsdGVyQ29uZmlnW107XG4gIH0+KCk7XG4gIEBJbnB1dCgpIGZpbHRlck11bHRpcGxlID0gdHJ1ZTtcbiAgQElucHV0KCkgZmlsdGVySWNvbkFjdGl2ZTogYm9vbGVhbjtcbiAgQElucHV0KCkgZmlsdGVyQm94V2lkdGg6IGFueTtcbiAgQElucHV0KCkgZmlsdGVyQm94SGVpZ2h0OiBhbnk7XG4gIEBJbnB1dCgpIGJlZm9yZUZpbHRlcjogKHZhbHVlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiB8IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIEBDb250ZW50Q2hpbGQoRGF0YVRhYmxlQ2VsbFZpZXdUbXBsQ29tcG9uZW50KSBjZWxsQ21wOiBEYXRhVGFibGVDZWxsVmlld1RtcGxDb21wb25lbnQ7XG4gIEBDb250ZW50Q2hpbGQoRGF0YVRhYmxlQ2VsbEVkaXRUbXBsQ29tcG9uZW50KSBjZWxsRWRpdENtcDogRGF0YVRhYmxlQ2VsbEVkaXRUbXBsQ29tcG9uZW50O1xuICBAQ29udGVudENoaWxkKERhdGFUYWJsZUhlYWRDZWxsVG1wbENvbXBvbmVudCkgaGVhZENlbGxUbXBsOiBEYXRhVGFibGVIZWFkQ2VsbFRtcGxDb21wb25lbnQ7XG4gIEBJbnB1dCgpIGN1c3RvbUZpbHRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBleHRyYUZpbHRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBzZWFyY2hGbjogKHRlcm06IHN0cmluZykgPT4gT2JzZXJ2YWJsZTxBcnJheTxhbnk+PjtcbiAgb3JkZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFNpbXBsZUNoYW5nZXM+KCk7XG4gIHdpZHRoQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxTaW1wbGVDaGFuZ2VzPigpO1xuICBfZm9ybWF0dGVyOiAoaXRlbTogYW55LCByb3c/OiBhbnkpID0+IHN0cmluZztcblxuICAvLyDpvKDmoIfmmK/lkKbnp7vliqjliLDlvZPliY3ooajlpLTljZXlhYPmoLxcbiAgc2VsZWN0ZWQgPSBmYWxzZTtcblxuICAvLyBAZGVwcmVjYXRlZFxuICBASW5wdXQoKSBmaWVsZFR5cGUgPSAndGV4dCc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlc1snb3JkZXInXSkge1xuICAgICAgdGhpcy5vcmRlckNoYW5nZS5lbWl0KGNoYW5nZXNbJ29yZGVyJ10uY3VycmVudFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlc1snd2lkdGgnXSkge1xuICAgICAgdGhpcy53aWR0aENoYW5nZS5lbWl0KGNoYW5nZXNbJ3dpZHRoJ10uY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLm9yZGVyQ2hhbmdlLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvLyBjb2x1bW4uZXh0cmFPcHRpb25zPy5kYXRlRm9ybWF0XG5cbiAgZW1pdEZpbHRlckRhdGEoZmlsdGVyRGF0YSkge1xuICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQoZmlsdGVyRGF0YSk7XG4gIH1cblxuICBlbWl0RmlsdGVyVG9nZ2xlKGRhdGE6IHtcbiAgICBpc09wZW46IGJvb2xlYW47XG4gICAgY2hlY2tsaXN0OiBGaWx0ZXJDb25maWdbXTtcbiAgfSkge1xuICAgIHRoaXMuZmlsdGVyVG9nZ2xlLmVtaXQoZGF0YSk7XG4gIH1cblxufVxuIl19