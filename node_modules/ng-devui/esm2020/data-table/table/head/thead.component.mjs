import { Component, ContentChildren, EventEmitter, Input, QueryList } from '@angular/core';
import { TableTrComponent } from '../row/tr.component';
import { TableThComponent } from './th/th.component';
import * as i0 from "@angular/core";
export class TableTheadComponent {
    constructor() {
        this.headerCheckStatusEvent = new EventEmitter();
        this.headerChildrenTableToggleEvent = new EventEmitter();
    }
    ngOnInit() { }
    ngAfterContentInit() {
        if (this.headerRowList) {
            this.headerFirstRow = this.headerRowList.first;
            if (this.headerFirstRow) {
                this.headerFirstRow.headerRowspan = this.headerRowList.length;
                this.headerFirstRow.headerCheckable = this.checkable;
                this.headerFirstRow.headerCheckDisabled = this.checkDisabled;
                this.headerFirstRow.headerCheckOptions = this.checkOptions;
                this.checkStatusSubscription = this.headerFirstRow.headerCheckStatusEvent.subscribe((status) => {
                    this.headerCheckStatusEvent.emit(status);
                });
            }
        }
        if (this.thList) {
            this.setNestedThToggle();
            this.thList.changes.subscribe((list) => {
                this.setNestedThToggle();
            });
        }
    }
    ngOnChanges(changes) {
        if ((changes['checkable'] && !changes['checkable'].isFirstChange()) ||
            (changes['checkDisabled'] && !changes['checkDisabled'].isFirstChange()) ||
            (changes['checkOptions'] && !changes['checkOptions'].isFirstChange())) {
            if (this.headerFirstRow) {
                this.headerFirstRow.headerRowspan = this.headerRowList.length;
                this.headerFirstRow.headerCheckable = this.checkable;
                this.headerFirstRow.headerCheckDisabled = this.checkDisabled;
                this.headerFirstRow.headerCheckOptions = this.checkOptions;
            }
        }
    }
    setNestedThToggle() {
        this.nestedTh = this.thList.find(th => {
            return th.nestedColumn;
        });
        if (this.nestedTh) {
            this.toggleTableSubscription = this.nestedTh.toggleChildrenTableEvent.subscribe((childrenTableOpen) => {
                this.headerChildrenTableToggleEvent.emit(childrenTableOpen);
            });
        }
    }
    setHeaderCheckStatus(status) {
        if (status.pageAllChecked !== undefined) {
            this.headerFirstRow.headerChecked = status.pageAllChecked;
        }
        if (status.pageHalfChecked !== undefined) {
            this.headerFirstRow.headerHalfChecked = status.pageHalfChecked;
        }
    }
    setHeaderToggleStatus(open) {
        if (this.nestedTh) {
            this.nestedTh.childrenTableOpen = open;
        }
    }
    ngOnDestroy() {
        if (this.checkStatusSubscription) {
            this.checkStatusSubscription.unsubscribe();
            this.checkStatusSubscription = null;
        }
        if (this.toggleTableSubscription) {
            this.toggleTableSubscription.unsubscribe();
            this.toggleTableSubscription = null;
        }
    }
}
TableTheadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTheadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableTheadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableTheadComponent, selector: "[dTableHead]", inputs: { checkable: "checkable", checkDisabled: "checkDisabled", checkOptions: "checkOptions" }, queries: [{ propertyName: "headerRowList", predicate: TableTrComponent }, { propertyName: "thList", predicate: TableThComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-content></ng-content>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTheadComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTableHead]', template: "<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { checkable: [{
                type: Input
            }], checkDisabled: [{
                type: Input
            }], checkOptions: [{
                type: Input
            }], headerRowList: [{
                type: ContentChildren,
                args: [TableTrComponent]
            }], thList: [{
                type: ContentChildren,
                args: [TableThComponent, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,