export const simDeepClone = obj => {
    if (obj === null) {
        return null;
    }
    if (typeof obj === 'object') {
        return JSON.parse(JSON.stringify(obj));
    }
    else if (typeof obj === 'string') {
        try {
            return JSON.parse(obj);
        }
        catch (e) {
            console.error(e);
        }
    }
    else {
        return obj;
    }
};
export const highPerformanceFilter = (arr, func) => {
    let res = [];
    const arrLength = arr.length;
    // 经过调查，在小于10000或大于99999条数据的时候，for循环速度比filter速度会快7至8倍左右
    if (arrLength < 10000 || arrLength > 99999) {
        for (let a = 0; a < arrLength; a++) {
            if (func(arr[a], a)) {
                res.push(arr[a]);
            }
        }
    }
    else {
        res = arr.filter(func);
    }
    return res;
};
// 生成随机Id
export const generateId = () => {
    let timeStamp = new Date().getTime();
    if (window.performance && typeof window.performance.now === "function") {
        timeStamp += performance.now();
    }
    const id = 'aaaaaaaaaaaaaaabaaaaaaaaaaaaaaa'.replace(/[ab]/g, function (item) {
        const res = (timeStamp + Math.random() * 16) % 16 | 0;
        timeStamp = Math.floor(timeStamp / 16);
        return (item === 'a' ? res : (res & 0x3 | 0x8)).toString(16);
    });
    return id;
};
export const highPerformanceExpandObjectInArray = (oldObj, attr) => {
    oldObj[Symbol.iterator] = function () {
        return {
            next: function () {
                const array = Reflect.ownKeys(oldObj);
                if (this.index < array.length - 1) {
                    const key = array[this.index];
                    this.index++;
                    return { value: oldObj[key] };
                }
                else {
                    return { done: true };
                }
            },
            index: 0
        };
    };
    if (attr) {
        const newObj = [];
        for (let i = 0; i < attr.length; i++) {
            if (Object.prototype.hasOwnProperty.call(oldObj, attr[i])) {
                newObj.push(oldObj[attr[i]]);
            }
        }
        return newObj;
    }
    return [...oldObj];
};
// 将一些公共方法拆分出来
export const getNodeIndex = (nodeId, treeTableArray) => {
    return treeTableArray.findIndex((v) => v.node_id === nodeId);
};
export class FindChild {
    constructor() {
        this.allChildCol = [];
    }
    getChildrenOfItem(node, treeTableArray) {
        const data = highPerformanceFilter(treeTableArray, item => item.parent_node_id === node.node_id);
        return data;
    }
    getAllChildrenOfItem(node, treeTableArray) {
        this.allChildCol = [];
        this.getAllChildrenData(node, treeTableArray);
        return this.allChildCol;
    }
    getAllChildrenData(node, treeTableArray) {
        const childData = this.getChildrenOfItem(node, treeTableArray);
        const newArray = [...childData];
        newArray.push(node);
        this.allChildCol = [...this.allChildCol, ...newArray];
        for (let i = 0; i < childData.length; i++) {
            if (childData[i].node_type) {
                this.getAllChildrenData(childData[i], treeTableArray);
            }
        }
    }
}
export const distinct = (recordArr, nodeArr) => {
    const arr = recordArr.concat(nodeArr);
    const result = [];
    const obj = {};
    for (const i of arr) {
        if (!obj[i.node_id]) {
            result.push(i);
            obj[i.node_id] = 1;
        }
    }
    return result;
};
export const highPerformanceMap = (arr, func) => {
    let res = [];
    const arrLength = arr.length;
    if (arrLength < 10000 || arrLength > 99999) {
        for (let a = 0; a < arrLength; a++) {
            const rs = func(arr[a], a);
            if (rs) {
                res.push(rs);
            }
        }
    }
    else {
        res = arr.map(func);
    }
    return res;
};
export const flatTreeData = (dataSource) => {
    const flatData = [];
    const travelObj = (arr, parentId) => {
        arr.forEach(item => {
            if (item.children) {
                const obj = {
                    id: generateId(),
                    node_id: generateId(),
                    node_type: 1,
                    parent_node_id: parentId,
                    ...item
                };
                const children = obj.children;
                delete obj.children;
                flatData.push(obj);
                travelObj(children, obj.node_id);
            }
            else {
                const obj = {
                    id: generateId(),
                    node_id: generateId(),
                    node_type: 0,
                    parent_node_id: parentId,
                    ...item
                };
                flatData.push(obj);
            }
        });
    };
    travelObj(dataSource, null);
    return flatData;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZ1aS9kYXRhLXRhYmxlL3V0aWxzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsRUFBRTtJQUNoQyxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQ2xDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDeEM7U0FBTSxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUNsQyxJQUFJO1lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO0tBQ0Y7U0FBTTtRQUNMLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNqRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQzdCLHVEQUF1RDtJQUN2RCxJQUFJLFNBQVMsR0FBRyxLQUFLLElBQUksU0FBUyxHQUFHLEtBQUssRUFBRTtRQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsR0FBRyxDQUFD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cG9ydCBjb25zdCBzaW1EZWVwQ2xvbmUgPSBvYmogPT4ge1xuICBpZiAob2JqID09PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKG9iaik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGhpZ2hQZXJmb3JtYW5jZUZpbHRlciA9IChhcnIsIGZ1bmMpID0+IHtcbiAgbGV0IHJlcyA9IFtdO1xuICBjb25zdCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuICAvLyDnu4/ov4fosIPmn6XvvIzlnKjlsI/kuo4xMDAwMOaIluWkp+S6jjk5OTk55p2h5pWw5o2u55qE5pe25YCZ77yMZm9y5b6q546v6YCf5bqm5q+UZmlsdGVy6YCf5bqm5Lya5b+rN+iHszjlgI3lt6blj7NcbiAgaWYgKGFyckxlbmd0aCA8IDEwMDAwIHx8IGFyckxlbmd0aCA+IDk5OTk5KSB7XG4gICAgZm9yIChsZXQgYSA9IDA7IGEgPCBhcnJMZW5ndGg7IGErKykge1xuICAgICAgaWYgKGZ1bmMoYXJyW2FdLGEpKSB7XG4gICAgICAgIHJlcy5wdXNoKGFyclthXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcyA9IGFyci5maWx0ZXIoZnVuYyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblxuLy8g55Sf5oiQ6ZqP5py6SWRcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUlkID0gKCkgPT4ge1xuICBsZXQgdGltZVN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGlmICh3aW5kb3cucGVyZm9ybWFuY2UgJiYgdHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRpbWVTdGFtcCArPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfVxuICBjb25zdCBpZCA9ICdhYWFhYWFhYWFhYWFhYWFiYWFhYWFhYWFhYWFhYWFhJy5yZXBsYWNlKC9bYWJdL2csIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgY29uc3QgcmVzID0gKHRpbWVTdGFtcCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgdGltZVN0YW1wID0gTWF0aC5mbG9vcih0aW1lU3RhbXAgLyAxNik7XG4gICAgcmV0dXJuIChpdGVtID09PSAnYScgPyByZXMgOiAocmVzICYgMHgzIHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuICB9KTtcbiAgcmV0dXJuIGlkO1xufTtcblxuZXhwb3J0IGNvbnN0IGhpZ2hQZXJmb3JtYW5jZUV4cGFuZE9iamVjdEluQXJyYXkgPSAob2xkT2JqLCBhdHRyKSA9PiB7XG4gIG9sZE9ialtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6ZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gUmVmbGVjdC5vd25LZXlzKG9sZE9iaik7XG4gICAgICAgIGlmICh0aGlzLmluZGV4IDwgYXJyYXkubGVuZ3RoLTEpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBhcnJheVt0aGlzLmluZGV4XTtcbiAgICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG9sZE9ialtrZXldIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5kZXg6MFxuICAgIH07XG4gIH07XG4gIGlmKGF0dHIpIHtcbiAgICBjb25zdCBuZXdPYmo9W107XG4gICAgZm9yKGxldCBpPTA7aTxhdHRyLmxlbmd0aDtpKyspIHtcbiAgICAgIGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvbGRPYmosIGF0dHJbaV0pKSB7XG4gICAgICAgIG5ld09iai5wdXNoKG9sZE9ialthdHRyW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmo7XG4gIH1cbiAgcmV0dXJuIFsuLi5vbGRPYmpdO1xufTtcblxuXG4vLyDlsIbkuIDkupvlhazlhbHmlrnms5Xmi4bliIblh7rmnaVcbmV4cG9ydCBjb25zdCBnZXROb2RlSW5kZXggPSAobm9kZUlkLCB0cmVlVGFibGVBcnJheSkgPT4geyAvLyDmib7liLDoioLngrnlnKjmgLvmlbDmja7kuK3nmoTkvY3nva7nmoTmlrnms5VcbiAgcmV0dXJuIHRyZWVUYWJsZUFycmF5LmZpbmRJbmRleCgodikgPT4gdi5ub2RlX2lkID09PSBub2RlSWQpO1xufTtcblxuZXhwb3J0IGNsYXNzIEZpbmRDaGlsZCB7IC8vIOWvu+aJvuWtkOiKgueCuVxuICBhbGxDaGlsZENvbDogYW55ID0gW107XG5cbiAgZ2V0Q2hpbGRyZW5PZkl0ZW0obm9kZSwgdHJlZVRhYmxlQXJyYXkpIHsgLy8g5om+5Yiw6IqC54K55LiL55qE5a2Q6IqC54K555qE5pa55rOVXG4gICAgY29uc3QgZGF0YTogYW55ID0gaGlnaFBlcmZvcm1hbmNlRmlsdGVyKHRyZWVUYWJsZUFycmF5LCBpdGVtID0+IGl0ZW0ucGFyZW50X25vZGVfaWQgPT09IG5vZGUubm9kZV9pZCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBnZXRBbGxDaGlsZHJlbk9mSXRlbShub2RlLCB0cmVlVGFibGVBcnJheSkgeyAvLyDmib7liLDoioLngrnkuIvmiYDmnInlrZDpm4bnmoTmlrnms5VcbiAgICB0aGlzLmFsbENoaWxkQ29sID0gW107XG4gICAgdGhpcy5nZXRBbGxDaGlsZHJlbkRhdGEobm9kZSwgdHJlZVRhYmxlQXJyYXkpO1xuICAgIHJldHVybiB0aGlzLmFsbENoaWxkQ29sO1xuICB9XG5cbiAgZ2V0QWxsQ2hpbGRyZW5EYXRhKG5vZGUsIHRyZWVUYWJsZUFycmF5KSB7XG4gICAgY29uc3QgY2hpbGREYXRhID0gdGhpcy5nZXRDaGlsZHJlbk9mSXRlbShub2RlLCB0cmVlVGFibGVBcnJheSk7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbLi4uY2hpbGREYXRhXTtcbiAgICBuZXdBcnJheS5wdXNoKG5vZGUpO1xuICAgIHRoaXMuYWxsQ2hpbGRDb2wgPSBbLi4udGhpcy5hbGxDaGlsZENvbCwgLi4ubmV3QXJyYXldO1xuICAgIGZvcihsZXQgaT0wOyBpPGNoaWxkRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYoY2hpbGREYXRhW2ldLm5vZGVfdHlwZSkge1xuICAgICAgICB0aGlzLmdldEFsbENoaWxkcmVuRGF0YShjaGlsZERhdGFbaV0sIHRyZWVUYWJsZUFycmF5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRpc3RpbmN0ID0gKHJlY29yZEFyciwgbm9kZUFycikgPT4geyAvLyDmlbDnu4Tljrvph43nmoTmlrnms5VcbiAgY29uc3QgYXJyID0gcmVjb3JkQXJyLmNvbmNhdChub2RlQXJyKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBmb3IoY29uc3QgaSBvZiBhcnIpIHtcbiAgICBpZighb2JqW2kubm9kZV9pZF0pIHtcbiAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgb2JqW2kubm9kZV9pZF0gPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGhpZ2hQZXJmb3JtYW5jZU1hcCA9IChhcnIsIGZ1bmMpID0+IHtcbiAgbGV0IHJlcyA9IFtdO1xuICBjb25zdCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuICBpZiAoYXJyTGVuZ3RoIDwgMTAwMDAgfHwgYXJyTGVuZ3RoID4gOTk5OTkpIHtcbiAgICBmb3IgKGxldCBhID0gMDsgYSA8IGFyckxlbmd0aDsgYSsrKSB7XG4gICAgICBjb25zdCBycz1mdW5jKGFyclthXSxhKTtcbiAgICAgIGlmIChycykge1xuICAgICAgICByZXMucHVzaChycyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcyA9IGFyci5tYXAoZnVuYyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbmV4cG9ydCBjb25zdCBmbGF0VHJlZURhdGEgPSAoZGF0YVNvdXJjZTogYW55W10pID0+IHtcbiAgY29uc3QgZmxhdERhdGEgPSBbXTtcblxuICBjb25zdCB0cmF2ZWxPYmogPSAoYXJyLCBwYXJlbnRJZCkgPT4ge1xuICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgIGlkOiBnZW5lcmF0ZUlkKCksXG4gICAgICAgICAgbm9kZV9pZDogZ2VuZXJhdGVJZCgpLFxuICAgICAgICAgIG5vZGVfdHlwZTogMSxcbiAgICAgICAgICBwYXJlbnRfbm9kZV9pZDogcGFyZW50SWQsXG4gICAgICAgICAgLi4uaXRlbVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG9iai5jaGlsZHJlbjtcbiAgICAgICAgZGVsZXRlIG9iai5jaGlsZHJlbjtcbiAgICAgICAgZmxhdERhdGEucHVzaChvYmopO1xuICAgICAgICB0cmF2ZWxPYmooY2hpbGRyZW4sIG9iai5ub2RlX2lkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICBpZDogZ2VuZXJhdGVJZCgpLFxuICAgICAgICAgIG5vZGVfaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICBub2RlX3R5cGU6IDAsXG4gICAgICAgICAgcGFyZW50X25vZGVfaWQ6IHBhcmVudElkLFxuICAgICAgICAgIC4uLml0ZW1cbiAgICAgICAgfTtcbiAgICAgICAgZmxhdERhdGEucHVzaChvYmopO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRyYXZlbE9iaihkYXRhU291cmNlLCBudWxsKTtcblxuICByZXR1cm4gZmxhdERhdGE7XG59O1xuIl19