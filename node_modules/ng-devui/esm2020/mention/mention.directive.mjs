import { DOWN_ARROW, ENTER, ESCAPE, LEFT_ARROW, RIGHT_ARROW, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { ConnectionPositionPair, Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostListener, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { MentionComponent } from './mention.component';
import { DEFAULT_MENTION_BOTTOM_POSITIONS } from './position';
import { getCaretCoordinates } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class MentionDirective {
    constructor(el, viewContainerRef, cdr, overlay) {
        this.el = el;
        this.viewContainerRef = viewContainerRef;
        this.cdr = cdr;
        this.overlay = overlay;
        this.mentionNotFoundContent = 'No suggestion matched';
        this.mentionSuggestions = [];
        this.mentionLoading = false;
        this.mentionTrigger = ['@'];
        this.mentionPosition = 'bottom';
        this.mentionSelectItem = new EventEmitter();
        this.mentionSearchChange = new EventEmitter();
        this.mentionAfterMentionInit = new EventEmitter();
        this.value = '';
        this.previousValue = '';
        this.overlayRef = null;
        this.filterSuggestions = [];
        this.isOpen = false;
        this.activeIndex = -1;
        this.unsubscribe$ = new Subject();
        this.defaultNotFoundText = '';
        this.mentionValueParse = (value) => value;
    }
    get nativeElement() {
        return this.el.nativeElement;
    }
    onKeyDown(event) {
        if (this.mentionRef) {
            const keyCode = event.keyCode;
            if (this.isOpen && keyCode === ENTER && this.activeIndex !== -1 && this.filterSuggestions.length) {
                this.selectSuggestion(this.filterSuggestions[this.activeIndex]);
                event.preventDefault();
            }
            else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {
                if (keyCode === LEFT_ARROW) {
                    this.cursorMentionStart = this.cursorMentionStart - 1;
                }
                else {
                    this.cursorMentionStart = this.cursorMentionStart + 1;
                }
                event.stopPropagation();
                setTimeout(() => {
                    this.resetMention();
                });
            }
            else {
                if (this.isOpen && (keyCode === TAB || keyCode === ESCAPE)) {
                    this.hideMention();
                    return;
                }
                if (this.isOpen && keyCode === UP_ARROW) {
                    event.preventDefault();
                    event.stopPropagation();
                    this.setPreviousItemActive();
                }
                if (this.isOpen && keyCode === DOWN_ARROW) {
                    event.preventDefault();
                    event.stopPropagation();
                    this.setNextItemActive();
                }
            }
            this.setMentionData();
        }
    }
    onClick(e) {
        if (this.overlayRef && this.isOpen) {
            if (!this.nativeElement.contains(e.target)) {
                this.hideMention();
            }
        }
        else if (this.nativeElement.contains(e.target)) {
            this.resetMention();
        }
    }
    ngOnInit() {
        this.mentionAfterMentionInit.emit(this);
    }
    ngAfterViewInit() {
        fromEvent(this.el.nativeElement, 'input')
            .pipe(debounceTime(300))
            .subscribe(() => {
            this.resetMention();
        });
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'mentionSuggestions')) {
            if (this.isOpen) {
                this.previousValue = null;
                this.activeIndex = -1;
                this.resetMention(false);
            }
        }
    }
    resetMention(emit = true) {
        this.checkMention();
        if (!this.cursorMention) {
            this.hideMention();
            return;
        }
        this.suggestionsFilter(this.cursorMention, emit);
        const activeIndex = this.filterSuggestions.indexOf(this.cursorMention.substring(1));
        this.activeIndex = activeIndex >= 0 ? activeIndex : 0;
        this.showMention();
    }
    checkMention() {
        const value = this.nativeElement.value.replace(/[\r\n]/g, ' ') || '';
        const selectionStart = this.nativeElement.selectionStart;
        let i = this.mentionTrigger.length;
        while (i >= 0) {
            const startPos = value.lastIndexOf(this.mentionTrigger[i], selectionStart);
            const endPos = value.indexOf(' ', selectionStart) > -1 ? value.indexOf(' ', selectionStart) : value.length;
            const mention = value.substring(startPos, selectionStart);
            if ((startPos > 0 && value[startPos - 1] !== ' ') ||
                startPos < 0 ||
                mention.includes(this.mentionTrigger[i], 1) ||
                mention.includes(' ')) {
                this.cursorMention = null;
                this.cursorMentionStart = -1;
                this.cursorMentionEnd = -1;
                this.cursorEnd = -1;
                this.value = '';
            }
            else {
                this.cursorMention = mention[0];
                this.cursorMentionStart = startPos;
                this.cursorMentionEnd = endPos;
                this.cursorEnd = selectionStart;
                this.value = mention.slice(1);
                return;
            }
            i--;
        }
    }
    hideMention() {
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            this.overlayRef.detach();
            this.cdr.markForCheck();
            this.isOpen = false;
        }
    }
    showMention() {
        this.attachOverlay();
        this.isOpen = true;
        this.cdr.markForCheck();
    }
    attachOverlay() {
        if (!this.overlayRef) {
            this.portal = new ComponentPortal(MentionComponent, this.viewContainerRef);
            this.overlayRef = this.overlay.create(this.getOverlayConfig());
        }
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            this.mentionRef = this.overlayRef.attach(this.portal);
            this.mentionRef.instance.mentionItemTemplate = this.mentionItemTemplate;
            this.mentionRef.instance.mentionNotFoundContent = this.mentionNotFoundContent;
        }
        this.updatePositions();
    }
    getOverlayConfig() {
        const target = this.el;
        return new OverlayConfig({
            positionStrategy: this.getOverlayPosition(target),
            scrollStrategy: this.overlay.scrollStrategies.reposition(),
            disposeOnNavigation: true,
        });
    }
    getOverlayPosition(target) {
        const positions = [
            new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
        ];
        this.positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(target)
            .withPositions(positions)
            .withFlexibleDimensions(false)
            .withPush(false);
        return this.positionStrategy;
    }
    updatePositions() {
        const coordinates = getCaretCoordinates(this.nativeElement, this.cursorEnd);
        const top = coordinates.top - this.nativeElement.getBoundingClientRect().height - this.nativeElement.scrollTop;
        const left = coordinates.left - this.nativeElement.scrollLeft;
        this.positionStrategy.withDefaultOffsetX(left).withDefaultOffsetY(top);
        this.positionStrategy.withPositions([...DEFAULT_MENTION_BOTTOM_POSITIONS]);
        this.positionStrategy.apply();
        this.setMentionData();
    }
    suggestionsFilter(value, emit) {
        if (this.previousValue === value && value !== this.cursorMention[0]) {
            return;
        }
        this.previousValue = value;
        if (emit) {
            this.mentionSearchChange.emit({
                value: this.value,
                trigger: this.cursorMention,
            });
        }
        const searchValue = this.value.toLowerCase();
        this.filterSuggestions = this.mentionSuggestions.filter((suggestion) => this.mentionValueParse(suggestion).toLowerCase().includes(searchValue));
    }
    setMentionData() {
        Object.assign(this.mentionRef.instance, {
            suggestions: this.filterSuggestions,
            activeIndex: this.activeIndex,
            loading: this.mentionLoading,
            trigger: this,
            position: this.mentionPosition,
        });
    }
    selectSuggestion(suggestion) {
        const value = this.mentionValueParse(suggestion);
        this.insertMention({
            mention: value,
            startPos: this.cursorMentionStart,
            endPos: this.cursorMentionEnd,
        });
        this.mentionSelectItem.emit(suggestion);
        this.hideMention();
        this.activeIndex = -1;
    }
    insertMention(mention) {
        const value = this.el.nativeElement.value;
        const insertValue = mention.mention.trim() + ' ';
        const newValue = [value.slice(0, mention.startPos + 1), insertValue, value.slice(mention.endPos, value.length)].join('');
        this.el.nativeElement.value = newValue;
        this.value = newValue;
    }
    setPreviousItemActive() {
        this.activeIndex = this.activeIndex - 1 < 0 ? this.filterSuggestions.length - 1 : this.activeIndex - 1;
        this.cdr.markForCheck();
        setTimeout(() => {
            if (this.mentionRef) {
                this.mentionRef.instance.scrollToFocusItem();
            }
        });
    }
    setNextItemActive() {
        this.activeIndex = this.activeIndex + 1 <= this.filterSuggestions.length - 1 ? this.activeIndex + 1 : 0;
        this.cdr.markForCheck();
        setTimeout(() => {
            if (this.mentionRef) {
                this.mentionRef.instance.scrollToFocusItem();
            }
        });
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
    }
}
MentionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MentionDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i1.Overlay }], target: i0.ɵɵFactoryTarget.Directive });
MentionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: MentionDirective, selector: "[dMention]", inputs: { mentionNotFoundContent: "mentionNotFoundContent", mentionSuggestions: "mentionSuggestions", mentionLoading: "mentionLoading", mentionTrigger: "mentionTrigger", mentionPosition: "mentionPosition", mentionItemTemplate: "mentionItemTemplate", mentionValueParse: "mentionValueParse" }, outputs: { mentionSelectItem: "mentionSelectItem", mentionSearchChange: "mentionSearchChange", mentionAfterMentionInit: "mentionAfterMentionInit" }, host: { listeners: { "keydown": "onKeyDown($event)", "document:click": "onClick($event)" } }, exportAs: ["dMention"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MentionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dMention]',
                    exportAs: 'dMention',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i1.Overlay }]; }, propDecorators: { mentionNotFoundContent: [{
                type: Input
            }], mentionSuggestions: [{
                type: Input
            }], mentionLoading: [{
                type: Input
            }], mentionTrigger: [{
                type: Input
            }], mentionPosition: [{
                type: Input
            }], mentionItemTemplate: [{
                type: Input
            }], mentionSelectItem: [{
                type: Output
            }], mentionSearchChange: [{
                type: Output
            }], mentionAfterMentionInit: [{
                type: Output
            }], mentionValueParse: [{
                type: Input
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,