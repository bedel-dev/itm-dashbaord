import { ComponentFactoryResolver, Injectable } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { assign } from 'lodash-es';
import { ToastComponent } from './toast.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
export class ToastService {
    constructor(overlayContainerRef, componentFactoryResolver) {
        this.overlayContainerRef = overlayContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    open({ value, life = 5000, lifeMode = 'global', sticky = false, style, styleClass, injector, 
    /**
     * @deprecated
     */
    component, componentFactoryResolver, } = {}) {
        const finalComponentFactoryResolver = componentFactoryResolver || this.componentFactoryResolver;
        const toastRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(ToastComponent), injector);
        assign(toastRef.instance, {
            lifeMode: lifeMode,
            sticky: sticky,
            style: style,
            styleClass: styleClass,
            value: value,
            life: life,
        });
        toastRef.instance.close = (index) => {
            if (index !== undefined && index > -1) {
                toastRef.instance.removeIndexThrottle(index);
            }
            else if (index !== undefined) {
                toastRef.instance.removeMsgThrottle(index);
            }
            else {
                setTimeout(() => {
                    toastRef.instance.removeAll();
                    setTimeout(() => {
                        if (toastRef) {
                            toastRef.destroy();
                        }
                    }, 300);
                });
            }
        };
        toastRef.instance.onHidden = () => {
            if (toastRef?.hostView) {
                toastRef.hostView.destroy();
            }
        };
        toastRef.instance.show();
        return {
            toastInstance: toastRef.instance,
        };
    }
}
ToastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToastService, deps: [{ token: i1.OverlayContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Injectable });
ToastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToastService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToastService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.OverlayContainerRef }, { type: i0.ComponentFactoryResolver }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldnVpL3RvYXN0L3RvYXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDakUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQVcsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7OztBQWU1RCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUFvQixtQkFBd0MsRUFBVSx3QkFBa0Q7UUFBcEcsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUFVLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7SUFBRyxDQUFDO0lBRTVILElBQUksQ0FBQyxFQUNILEtBQUssRUFDTCxJQUFJLEdBQUcsSUFBSSxFQUNYLFFBQVEsR0FBRyxRQUFRLEVBQ25CLE1BQU0sR0FBRyxLQUFLLEVBQ2QsS0FBSyxFQUNMLFVBQVUsRUFDVixRQUFRO0lBQ1I7O09BRUc7SUFDSCxTQUFTLEVBQ1Qsd0JBQXdCLE1BQ1AsRUFBRTtRQUNuQixNQUFNLDZCQUE2QixHQUFHLHdCQUF3QixJQUFJLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUNoRyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUN2RCw2QkFBNkIsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsRUFDckUsUUFBUSxDQUNULENBQUM7UUFDRixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUN4QixRQUFRLEVBQUUsUUFBUTtZQUNsQixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osVUFBVSxFQUFFLFVBQVU7WUFDdEIsS0FBSyxFQUFFLEtBQUs7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBd0IsRUFBRSxFQUFFO1lBQ3JELElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JDLFFBQVEsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsS0FBZSxDQUFDLENBQUM7YUFDeEQ7aUJBQU0sSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUM5QixRQUFRLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVDO2lCQUFNO2dCQUNMLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDOUIsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDZCxJQUFJLFFBQVEsRUFBRTs0QkFDWixRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7eUJBQ3BCO29CQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDVixDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ2hDLElBQUksUUFBUSxFQUFFLFFBQVEsRUFBRTtnQkFDdEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM3QjtRQUNILENBQUMsQ0FBQztRQUVGLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekIsT0FBTztZQUNMLGFBQWEsRUFBRSxRQUFRLENBQUMsUUFBUTtTQUNqQyxDQUFDO0lBQ0osQ0FBQzs7eUdBMURVLFlBQVk7NkdBQVosWUFBWTsyRkFBWixZQUFZO2tCQUR4QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RhYmxlLCBJbmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheUNvbnRhaW5lclJlZiB9IGZyb20gJ25nLWRldnVpL292ZXJsYXktY29udGFpbmVyJztcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBNZXNzYWdlLCBUb2FzdENvbXBvbmVudCB9IGZyb20gJy4vdG9hc3QuY29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBJVG9hc3RPcHRpb25zIHtcbiAgdmFsdWU/OiBBcnJheTxNZXNzYWdlPjtcbiAgbGlmZT86IG51bWJlcjtcbiAgbGlmZU1vZGU/OiBzdHJpbmc7XG4gIHN0eWxlPzogb2JqZWN0O1xuICBzdHlsZUNsYXNzPzogc3RyaW5nO1xuICBzdGlja3k/OiBib29sZWFuO1xuICBpbmplY3Rvcj86IEluamVjdG9yO1xuICBjb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcj86IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRvYXN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3ZlcmxheUNvbnRhaW5lclJlZjogT3ZlcmxheUNvbnRhaW5lclJlZiwgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge31cblxuICBvcGVuKHtcbiAgICB2YWx1ZSxcbiAgICBsaWZlID0gNTAwMCxcbiAgICBsaWZlTW9kZSA9ICdnbG9iYWwnLFxuICAgIHN0aWNreSA9IGZhbHNlLFxuICAgIHN0eWxlLFxuICAgIHN0eWxlQ2xhc3MsXG4gICAgaW5qZWN0b3IsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBjb21wb25lbnQsXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICB9OiBJVG9hc3RPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBmaW5hbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciA9IGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB8fCB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBjb25zdCB0b2FzdFJlZiA9IHRoaXMub3ZlcmxheUNvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoXG4gICAgICBmaW5hbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShUb2FzdENvbXBvbmVudCksXG4gICAgICBpbmplY3RvclxuICAgICk7XG4gICAgYXNzaWduKHRvYXN0UmVmLmluc3RhbmNlLCB7XG4gICAgICBsaWZlTW9kZTogbGlmZU1vZGUsXG4gICAgICBzdGlja3k6IHN0aWNreSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHN0eWxlQ2xhc3M6IHN0eWxlQ2xhc3MsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBsaWZlOiBsaWZlLFxuICAgIH0pO1xuXG4gICAgdG9hc3RSZWYuaW5zdGFuY2UuY2xvc2UgPSAoaW5kZXg/OiBudW1iZXIgfCBNZXNzYWdlKSA9PiB7XG4gICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+IC0xKSB7XG4gICAgICAgIHRvYXN0UmVmLmluc3RhbmNlLnJlbW92ZUluZGV4VGhyb3R0bGUoaW5kZXggYXMgbnVtYmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0b2FzdFJlZi5pbnN0YW5jZS5yZW1vdmVNc2dUaHJvdHRsZShpbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0b2FzdFJlZi5pbnN0YW5jZS5yZW1vdmVBbGwoKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0b2FzdFJlZikge1xuICAgICAgICAgICAgICB0b2FzdFJlZi5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRvYXN0UmVmLmluc3RhbmNlLm9uSGlkZGVuID0gKCkgPT4ge1xuICAgICAgaWYgKHRvYXN0UmVmPy5ob3N0Vmlldykge1xuICAgICAgICB0b2FzdFJlZi5ob3N0Vmlldy5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRvYXN0UmVmLmluc3RhbmNlLnNob3coKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9hc3RJbnN0YW5jZTogdG9hc3RSZWYuaW5zdGFuY2UsXG4gICAgfTtcbiAgfVxufVxuIl19