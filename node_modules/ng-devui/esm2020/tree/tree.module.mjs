import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CheckBoxModule } from 'ng-devui/checkbox';
import { LoadingModule } from 'ng-devui/loading';
import { OperableTreeComponent } from './operable-tree.component';
import { TreeNodesComponent } from './tree-nodes.component';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { PopoverModule } from 'ng-devui/popover';
import { HighlightModule, SafePipeModule } from 'ng-devui/utils';
import { AutofocusDirective } from './auto-focus.directive';
import { FilterNodesPipe } from './pipe/filter-nodes.pipe';
import { TransferToArrayPipe } from './pipe/transfer-to-array.pipe';
import { TreeComponent } from './tree.component';
import * as i0 from "@angular/core";
export class TreeModule {
}
TreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TreeModule, declarations: [TreeComponent, TreeNodesComponent, OperableTreeComponent, AutofocusDirective, FilterNodesPipe, TransferToArrayPipe], imports: [CommonModule, FormsModule, LoadingModule, CheckBoxModule, PopoverModule, SafePipeModule, HighlightModule, ScrollingModule], exports: [TreeComponent, TreeNodesComponent, OperableTreeComponent] });
TreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TreeModule, providers: [], imports: [[CommonModule, FormsModule, LoadingModule, CheckBoxModule, PopoverModule, SafePipeModule, HighlightModule, ScrollingModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TreeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, LoadingModule, CheckBoxModule, PopoverModule, SafePipeModule, HighlightModule, ScrollingModule],
                    exports: [TreeComponent, TreeNodesComponent, OperableTreeComponent],
                    declarations: [TreeComponent, TreeNodesComponent, OperableTreeComponent, AutofocusDirective, FilterNodesPipe, TransferToArrayPipe],
                    providers: [],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS90cmVlL3RyZWUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQVFqRCxNQUFNLE9BQU8sVUFBVTs7dUdBQVYsVUFBVTt3R0FBVixVQUFVLGlCQUhOLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLGFBRnZILFlBQVksRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxlQUFlLGFBQ3pILGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUI7d0dBSXZELFVBQVUsYUFGVixFQUFFLFlBSEosQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsZUFBZSxDQUFDOzJGQUt6SCxVQUFVO2tCQU50QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUM7b0JBQ3BJLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQztvQkFDbkUsWUFBWSxFQUFFLENBQUMsYUFBYSxFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxtQkFBbUIsQ0FBQztvQkFDbEksU0FBUyxFQUFFLEVBQUU7aUJBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ2hlY2tCb3hNb2R1bGUgfSBmcm9tICduZy1kZXZ1aS9jaGVja2JveCc7XG5pbXBvcnQgeyBMb2FkaW5nTW9kdWxlIH0gZnJvbSAnbmctZGV2dWkvbG9hZGluZyc7XG5pbXBvcnQgeyBPcGVyYWJsZVRyZWVDb21wb25lbnQgfSBmcm9tICcuL29wZXJhYmxlLXRyZWUuY29tcG9uZW50JztcbmltcG9ydCB7IFRyZWVOb2Rlc0NvbXBvbmVudCB9IGZyb20gJy4vdHJlZS1ub2Rlcy5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBTY3JvbGxpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZy1kZXZ1aS9wb3BvdmVyJztcbmltcG9ydCB7IEhpZ2hsaWdodE1vZHVsZSwgU2FmZVBpcGVNb2R1bGV9IGZyb20gJ25nLWRldnVpL3V0aWxzJztcbmltcG9ydCB7IEF1dG9mb2N1c0RpcmVjdGl2ZSB9IGZyb20gJy4vYXV0by1mb2N1cy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRmlsdGVyTm9kZXNQaXBlIH0gZnJvbSAnLi9waXBlL2ZpbHRlci1ub2Rlcy5waXBlJztcbmltcG9ydCB7IFRyYW5zZmVyVG9BcnJheVBpcGUgfSBmcm9tICcuL3BpcGUvdHJhbnNmZXItdG8tYXJyYXkucGlwZSc7XG5pbXBvcnQgeyBUcmVlQ29tcG9uZW50IH0gZnJvbSAnLi90cmVlLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBMb2FkaW5nTW9kdWxlLCBDaGVja0JveE1vZHVsZSwgUG9wb3Zlck1vZHVsZSwgU2FmZVBpcGVNb2R1bGUsIEhpZ2hsaWdodE1vZHVsZSwgU2Nyb2xsaW5nTW9kdWxlXSxcbiAgZXhwb3J0czogW1RyZWVDb21wb25lbnQsIFRyZWVOb2Rlc0NvbXBvbmVudCwgT3BlcmFibGVUcmVlQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbVHJlZUNvbXBvbmVudCwgVHJlZU5vZGVzQ29tcG9uZW50LCBPcGVyYWJsZVRyZWVDb21wb25lbnQsIEF1dG9mb2N1c0RpcmVjdGl2ZSwgRmlsdGVyTm9kZXNQaXBlLCBUcmFuc2ZlclRvQXJyYXlQaXBlXSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgVHJlZU1vZHVsZSB7XG59XG4iXX0=