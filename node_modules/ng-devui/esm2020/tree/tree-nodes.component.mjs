import { Component, Input, TemplateRef } from '@angular/core';
import { TreeFactory } from './tree-factory.class';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/scrolling";
import * as i3 from "./pipe/filter-nodes.pipe";
export class TreeNodesComponent {
    constructor() {
        this.virtualScroll = false;
    }
    trackByFn(index, item) {
        return index;
    }
}
TreeNodesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TreeNodesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TreeNodesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TreeNodesComponent, selector: "d-tree-nodes", inputs: { treeList: "treeList", treeNodesRef: "treeNodesRef", treeFactory: "treeFactory", virtualScroll: "virtualScroll" }, ngImport: i0, template: "<ng-container *ngIf=\"virtualScroll\">\n  <ng-template\n    *cdkVirtualFor=\"let treeNode of treeList | filterNodesPipe: 'hideInVirtualScroll'; trackBy: trackByFn\"\n    [ngTemplateOutlet]=\"treeNodesRef\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      treeNode: treeNode,\n      treeFactory: treeFactory\n    }\"\n  >\n  </ng-template>\n</ng-container>\n<ng-container *ngIf=\"!virtualScroll\">\n  <ng-template\n    *ngFor=\"let treeNode of treeList; trackBy: trackByFn\"\n    [ngTemplateOutlet]=\"treeNodesRef\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      treeNode: treeNode,\n      treeFactory: treeFactory\n    }\"\n  >\n  </ng-template>\n</ng-container>\n", styles: [":host{display:block}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "filterNodesPipe": i3.FilterNodesPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TreeNodesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-tree-nodes', preserveWhitespaces: false, template: "<ng-container *ngIf=\"virtualScroll\">\n  <ng-template\n    *cdkVirtualFor=\"let treeNode of treeList | filterNodesPipe: 'hideInVirtualScroll'; trackBy: trackByFn\"\n    [ngTemplateOutlet]=\"treeNodesRef\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      treeNode: treeNode,\n      treeFactory: treeFactory\n    }\"\n  >\n  </ng-template>\n</ng-container>\n<ng-container *ngIf=\"!virtualScroll\">\n  <ng-template\n    *ngFor=\"let treeNode of treeList; trackBy: trackByFn\"\n    [ngTemplateOutlet]=\"treeNodesRef\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      treeNode: treeNode,\n      treeFactory: treeFactory\n    }\"\n  >\n  </ng-template>\n</ng-container>\n", styles: [":host{display:block}\n"] }]
        }], propDecorators: { treeList: [{
                type: Input
            }], treeNodesRef: [{
                type: Input
            }], treeFactory: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2Rlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS90cmVlL3RyZWUtbm9kZXMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZGV2dWkvdHJlZS90cmVlLW5vZGVzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFdBQVcsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsV0FBVyxFQUVaLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0FBUTlCLE1BQU0sT0FBTyxrQkFBa0I7SUFOL0I7UUFVVyxrQkFBYSxHQUFHLEtBQUssQ0FBQztLQUloQztJQUhDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSTtRQUNuQixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OytHQVBVLGtCQUFrQjttR0FBbEIsa0JBQWtCLGdMQ2hCL0IsOHJCQXdCQTsyRkRSYSxrQkFBa0I7a0JBTjlCLFNBQVM7K0JBQ0UsY0FBYyx1QkFHSCxLQUFLOzhCQUdqQixRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyxhQUFhO3NCQUFyQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBUcmVlRmFjdG9yeSxcbiAgVHJlZU5vZGVcbn0gZnJvbSAnLi90cmVlLWZhY3RvcnkuY2xhc3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkLXRyZWUtbm9kZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vdHJlZS1ub2Rlcy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RyZWUtbm9kZXMuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFRyZWVOb2Rlc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHRyZWVMaXN0OiBBcnJheTxUcmVlTm9kZT47XG4gIEBJbnB1dCgpIHRyZWVOb2Rlc1JlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgdHJlZUZhY3Rvcnk6IFRyZWVGYWN0b3J5O1xuICBASW5wdXQoKSB2aXJ0dWFsU2Nyb2xsID0gZmFsc2U7XG4gIHRyYWNrQnlGbihpbmRleCwgaXRlbSkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInZpcnR1YWxTY3JvbGxcIj5cbiAgPG5nLXRlbXBsYXRlXG4gICAgKmNka1ZpcnR1YWxGb3I9XCJsZXQgdHJlZU5vZGUgb2YgdHJlZUxpc3QgfCBmaWx0ZXJOb2Rlc1BpcGU6ICdoaWRlSW5WaXJ0dWFsU2Nyb2xsJzsgdHJhY2tCeTogdHJhY2tCeUZuXCJcbiAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJ0cmVlTm9kZXNSZWZcIlxuICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7XG4gICAgICAkaW1wbGljaXQ6IHRoaXMsXG4gICAgICB0cmVlTm9kZTogdHJlZU5vZGUsXG4gICAgICB0cmVlRmFjdG9yeTogdHJlZUZhY3RvcnlcbiAgICB9XCJcbiAgPlxuICA8L25nLXRlbXBsYXRlPlxuPC9uZy1jb250YWluZXI+XG48bmctY29udGFpbmVyICpuZ0lmPVwiIXZpcnR1YWxTY3JvbGxcIj5cbiAgPG5nLXRlbXBsYXRlXG4gICAgKm5nRm9yPVwibGV0IHRyZWVOb2RlIG9mIHRyZWVMaXN0OyB0cmFja0J5OiB0cmFja0J5Rm5cIlxuICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRyZWVOb2Rlc1JlZlwiXG4gICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntcbiAgICAgICRpbXBsaWNpdDogdGhpcyxcbiAgICAgIHRyZWVOb2RlOiB0cmVlTm9kZSxcbiAgICAgIHRyZWVGYWN0b3J5OiB0cmVlRmFjdG9yeVxuICAgIH1cIlxuICA+XG4gIDwvbmctdGVtcGxhdGU+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==