import { __decorate, __metadata } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Directive, ElementRef, Inject, Injector, Input, ViewContainerRef } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { DevConfigService, WithConfig } from 'ng-devui/utils';
import { fromEvent, Subject, Subscription } from 'rxjs';
import { debounceTime, filter, map, takeUntil } from 'rxjs/operators';
import { PopoverComponent } from './popover.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
import * as i2 from "ng-devui/utils";
export class PopoverDirective {
    constructor(triggerElementRef, overlayContainerRef, viewContainerRef, injector, componentFactoryResolver, devConfigService, doc) {
        this.triggerElementRef = triggerElementRef;
        this.overlayContainerRef = overlayContainerRef;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.subscription = new Subscription();
        /**
         * popover显示位置
         */
        this.position = ['top', 'right', 'bottom', 'left'];
        /**
         * 是否显示动画
         */
        this.showAnimation = true;
        /**
         * `appendToBody`默认可以不传，仅当popover绑定元素外层宽高不够时，overflow为hidden，不想popover的弹出框被一并隐藏掉。
         */
        this.appendToBody = true;
        this.zIndex = 1060;
        this.popType = 'default';
        // 触发 popover 的方式（点击/鼠标悬停等）
        this.trigger = 'click';
        /**
         * @deprecated
         * 是否可以移入popover内部
         */
        this.hoverToContent = false;
        // 防止每次鼠标不小心经过目标元素就会显示出PopOver的内容，所以增加适当的延迟。
        this.mouseEnterDelay = 150;
        // 因为鼠标移出之后如果立刻消失会很突然，所以增加略小一些的延迟，使得既不突然也反应灵敏
        this.mouseLeaveDelay = 100;
        this.unsubscribe$ = new Subject();
        this.unsubscribeP$ = new Subject();
        this.onDocumentClick = (event) => {
            event.stopPropagation();
            if (this.controlled && !this.triggerElementRef.nativeElement.contains(event.target) &&
                !(this.popoverComponentRef && this.popoverComponentRef.instance.elementRef.nativeElement.contains(event.target))) {
                this.hide();
            }
        };
        this.document = this.doc;
    }
    /**
     * popover内容
     */
    set content(_popoverContent) {
        this._content = _popoverContent;
        if (this.popoverComponentRef) {
            this.popoverComponentRef.instance.content = _popoverContent;
            setTimeout(() => {
                if (this.popoverComponentRef) {
                    this.popoverComponentRef.instance.updatePosition();
                }
            });
        }
    }
    /**
     * @deprecated Use showAnimation to replace.
     */
    set showAnimate(isShowAnimate) {
        this.showAnimation = isShowAnimate;
    }
    /**
     * @deprecated Use mouseLeaveDelay to replace.
     * 曾经是触发移入popover内部的延迟时间
     * 废弃,现在使用参数mouseLeaveDelay代替
     */
    set hoverDelayTime(delayTime) {
        this.mouseLeaveDelay = delayTime;
    }
    set visible(_isShow) {
        if (_isShow) {
            // when set value and create component at the same time，should wait after ng2 dirty check done
            setTimeout(() => this.show(), 0);
        }
        else {
            this.hide();
        }
    }
    get eleAppendToBody() {
        return this.appendToBody || this.triggerElementRef.nativeElement.style.position === 'fixed';
    }
    createPopover() {
        if (this.eleAppendToBody) {
            this.popoverComponentRef = this.overlayContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(PopoverComponent));
        }
        else {
            this.popoverComponentRef = this.viewContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(PopoverComponent), this.viewContainerRef.length, this.injector);
        }
        Object.assign(this.popoverComponentRef.instance, {
            content: this._content,
            triggerElementRef: this.triggerElementRef,
            position: this.position,
            popType: this.popType,
            popMaxWidth: this.popMaxWidth,
            scrollElement: this.scrollElement,
            appendToBody: this.eleAppendToBody,
            zIndex: this.zIndex,
            showAnimation: this.showAnimation,
            popoverStyle: this.popoverStyle,
        });
        // 对创建的ToolTip组件添加鼠标移入和移出的监听事件
        if (this.popoverComponentRef.instance.elementRef.nativeElement && this.trigger === 'hover') {
            this.addMouseEvent();
        }
    }
    addMouseEvent() {
        const el = this.popoverComponentRef.instance.elementRef.nativeElement;
        fromEvent(el, 'mouseenter')
            .pipe(map((event) => {
            this.isEnter = true;
            return event;
        }), debounceTime(0), filter((event) => this.isEnter), takeUntil(this.unsubscribeP$))
            .subscribe(() => {
            if (!this.popoverComponentRef) {
                this.show();
            }
        });
        fromEvent(el, 'mouseleave')
            .pipe(map((event) => {
            this.isEnter = false;
            return event;
        }), debounceTime(this.mouseLeaveDelay), filter((event) => !this.isEnter), takeUntil(this.unsubscribeP$))
            .subscribe(() => {
            this.hide();
        });
    }
    show() {
        this.hide();
        if (!this.popoverComponentRef) {
            this.createPopover();
        }
        this.popoverComponentRef.instance.show();
        this.document.addEventListener('click', this.onDocumentClick);
    }
    destroy() {
        if (this.popoverComponentRef) {
            this.popoverComponentRef.destroy();
            this.popoverComponentRef = null;
        }
        this.document.removeEventListener('click', this.onDocumentClick);
        if (this.unsubscribeP$) {
            this.unsubscribeP$.next();
            this.unsubscribeP$.complete();
        }
    }
    ngOnInit() {
        const element = this.triggerElementRef.nativeElement;
        if (this.trigger === 'click') {
            this.subscription.add(fromEvent(element, 'click').subscribe((event) => {
                if (this.controlled) {
                    this.show();
                }
            }));
        }
        else if (this.trigger === 'hover') {
            fromEvent(element, 'mouseenter')
                .pipe(map((event) => {
                this.isEnter = true;
                return event;
            }), debounceTime(this.mouseEnterDelay), filter((event) => this.isEnter), takeUntil(this.unsubscribe$))
                .subscribe(() => {
                if (!this.popoverComponentRef && this.controlled) {
                    this.show();
                }
            });
            fromEvent(element, 'mouseleave')
                .pipe(map((event) => {
                this.isEnter = false;
                return event;
            }), debounceTime(this.mouseLeaveDelay), filter((event) => !this.isEnter), takeUntil(this.unsubscribe$))
                .subscribe(() => {
                if (this.controlled) {
                    this.hide();
                }
            });
        }
    }
    ngOnDestroy() {
        if (this.unsubscribeP$) {
            this.unsubscribeP$.next();
            this.unsubscribeP$.complete();
        }
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
        this.destroy();
        this.subscription.unsubscribe();
    }
    hide() {
        if (this.popoverComponentRef) {
            if (!this.showAnimation) {
                this.destroy();
                return;
            }
            this.popoverComponentRef.instance.hide();
            this.popoverComponentRef.instance.onHidden = () => {
                this.destroy();
            };
        }
        if (this.unsubscribeP$) {
            this.unsubscribeP$.next();
            this.unsubscribeP$.complete();
        }
    }
}
PopoverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PopoverDirective, deps: [{ token: i0.ElementRef }, { token: i1.OverlayContainerRef }, { token: i0.ViewContainerRef }, { token: i0.Injector }, { token: i0.ComponentFactoryResolver }, { token: i2.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
PopoverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: PopoverDirective, selector: "[dPopover]", inputs: { content: "content", controlled: "controlled", position: "position", showAnimation: "showAnimation", showAnimate: "showAnimate", scrollElement: "scrollElement", appendToBody: "appendToBody", zIndex: "zIndex", popType: "popType", popMaxWidth: "popMaxWidth", trigger: "trigger", hoverToContent: "hoverToContent", hoverDelayTime: "hoverDelayTime", popoverStyle: "popoverStyle", mouseEnterDelay: "mouseEnterDelay", mouseLeaveDelay: "mouseLeaveDelay", visible: "visible" }, exportAs: ["dPopover"], ngImport: i0 });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], PopoverDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PopoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dPopover]',
                    exportAs: 'dPopover',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OverlayContainerRef }, { type: i0.ViewContainerRef }, { type: i0.Injector }, { type: i0.ComponentFactoryResolver }, { type: i2.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { content: [{
                type: Input
            }], controlled: [{
                type: Input
            }], position: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showAnimate: [{
                type: Input
            }], scrollElement: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], zIndex: [{
                type: Input
            }], popType: [{
                type: Input
            }], popMaxWidth: [{
                type: Input
            }], trigger: [{
                type: Input
            }], hoverToContent: [{
                type: Input
            }], hoverDelayTime: [{
                type: Input
            }], popoverStyle: [{
                type: Input
            }], mouseEnterDelay: [{
                type: Input
            }], mouseLeaveDelay: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,