import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { GanttScaleUnit } from './gantt.model';
import * as i0 from "@angular/core";
export class GanttMarkerDirective {
    constructor(element, renderer) {
        this.renderer = renderer;
        this.monthMark = false;
        this.weekend = false;
        this.today = false;
        this.milestone = '';
        this.hostElement = element.nativeElement;
    }
    ngOnChanges(changes) {
        if (changes['ganttBarContainerElement'] && this.ganttBarContainerElement) {
            this.initMarkElement();
        }
        if (changes['ganttScaleContainerOffsetLeft'] && this.ganttScaleContainerOffsetLeft) {
            this.setElementsStyle();
        }
        if (changes['monthMark']) {
            if (this.monthMark) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('monthMark');
            }
        }
        if (changes['weekend'] || changes['last']) {
            if (this.weekend && !this.last) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('weekend');
            }
        }
        if (changes['today']) {
            if (this.today) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('today');
            }
        }
        if (changes['milestone']) {
            if (this.milestone) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('milestone');
            }
        }
        if (changes['unit'] && this.unit) {
            this.setElementsStyle();
        }
    }
    initMarkElement() {
        if (this.ganttBarContainerElement) {
            if (this.monthMark && !this.monthMarkElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-line');
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.monthMarkElement = node;
                this.setElementsStyle();
            }
            if (this.weekend && !this.last && !this.weekendElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-stripe');
                this.renderer.addClass(node, this.unit);
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.weekendElement = node;
                this.setElementsStyle();
            }
            if (this.today && !this.todayElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-line');
                this.renderer.addClass(node, 'today');
                this.renderer.addClass(node, this.unit);
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.todayElement = node;
                this.setElementsStyle();
            }
            if (this.milestone && !this.milestoneElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-line');
                this.renderer.addClass(node, 'milestone');
                this.renderer.addClass(node, this.unit);
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.milestoneElement = node;
                this.setElementsStyle();
            }
        }
    }
    removeMonthMark() {
        if (this.monthMarkElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.monthMarkElement);
            this.monthMarkElement = null;
        }
    }
    removeWeekendMark() {
        if (this.weekendElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.weekendElement);
            this.weekendElement = null;
        }
    }
    removeTodayMark() {
        if (this.todayElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.todayElement);
            this.todayElement = null;
        }
    }
    removeMileStoneMark() {
        if (this.milestoneElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.milestoneElement);
            this.milestoneElement = null;
        }
    }
    destroyMarkElement(type = 'all') {
        switch (type) {
            case 'monthMark':
                this.removeMonthMark();
                break;
            case 'weekend':
                this.removeWeekendMark();
                break;
            case 'today':
                this.removeTodayMark();
                break;
            case 'milestone':
                this.removeMileStoneMark();
                break;
            case 'all':
                this.removeMonthMark();
                this.removeWeekendMark();
                this.removeTodayMark();
                this.removeMileStoneMark();
                break;
            default:
                break;
        }
    }
    setElementsStyle() {
        this.ganttScaleContainerOffsetLeft = this.ganttScaleContainerOffsetLeft ? this.ganttScaleContainerOffsetLeft : 0;
        const leftOffset = this.hostElement.offsetLeft + this.ganttScaleContainerOffsetLeft + 'px';
        if (this.monthMark && this.monthMarkElement) {
            this.renderer.setStyle(this.monthMarkElement, 'left', leftOffset);
        }
        if (this.weekend && this.weekendElement) {
            this.weekendElement.className = 'devui-mark-stripe ' + this.unit;
            this.renderer.setStyle(this.weekendElement, 'left', leftOffset);
        }
        if (this.today && this.todayElement) {
            this.todayElement.className = 'devui-mark-line today ' + this.unit;
            this.renderer.setStyle(this.todayElement, 'left', leftOffset);
        }
        if (this.milestone && this.milestoneElement) {
            this.milestoneElement.className = 'devui-mark-line milestone ' + this.unit;
            this.renderer.setStyle(this.milestoneElement, 'left', leftOffset);
        }
    }
    ngOnDestroy() {
        this.destroyMarkElement();
    }
}
GanttMarkerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttMarkerDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
GanttMarkerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: GanttMarkerDirective, selector: "[dGanttMarker]", inputs: { ganttBarContainerElement: "ganttBarContainerElement", ganttScaleContainerOffsetLeft: "ganttScaleContainerOffsetLeft", monthMark: "monthMark", weekend: "weekend", today: "today", milestone: "milestone", unit: "unit", date: "date", last: "last" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttMarkerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dGanttMarker]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { ganttBarContainerElement: [{
                type: Input
            }], ganttScaleContainerOffsetLeft: [{
                type: Input
            }], monthMark: [{
                type: Input
            }], weekend: [{
                type: Input
            }], today: [{
                type: Input
            }], milestone: [{
                type: Input
            }], unit: [{
                type: Input
            }], date: [{
                type: Input
            }], last: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,