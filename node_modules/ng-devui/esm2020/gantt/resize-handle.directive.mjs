import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostListener, Inject, Input, NgZone, Output, Renderer2 } from '@angular/core';
import { fromEvent } from 'rxjs';
import * as i0 from "@angular/core";
export class ResizeHandleDirective {
    constructor(element, renderer2, zone, doc) {
        this.renderer2 = renderer2;
        this.zone = zone;
        this.doc = doc;
        this.resizeStartEvent = new EventEmitter();
        this.resizingEvent = new EventEmitter();
        this.resizeEndEvent = new EventEmitter();
        this.collapseEvent = new EventEmitter();
        this.preventRemoveHandle = false;
        this.bindMousemove = (e) => {
            this.move(e);
        };
        this.element = element.nativeElement;
        this.document = this.doc;
    }
    onMouseEnter(event) {
        if (!this.resizeHandle) {
            this.resizeHandle = this.renderer2.createElement('div');
            this.renderer2.appendChild(this.containerElement, this.resizeHandle);
            this.renderer2.addClass(this.resizeHandle, 'resize-handle');
            const left = this.element.getBoundingClientRect().right - this.containerElement.getBoundingClientRect().left;
            this.renderer2.setStyle(this.resizeHandle, 'left', left + 'px');
            this.resizeHandleEnter = this.renderer2.listen(this.resizeHandle, 'mouseenter', this.onHandleMouseEnter.bind(this));
            this.resizeHandleLeave = this.renderer2.listen(this.resizeHandle, 'mouseleave', this.onHandleMouseLeave.bind(this));
            this.resizeHandleClick = this.renderer2.listen(this.resizeHandle, 'mousedown', this.onMousedown.bind(this));
        }
    }
    onMouseLeave(event) {
        setTimeout(() => {
            if (!this.preventRemoveHandle) {
                if (this.resizeHandle) {
                    this.renderer2.removeChild(this.containerElement, this.resizeHandle);
                    this.resizeHandle = null;
                }
                if (this.resizeHandleClick) {
                    this.resizeHandleClick();
                }
            }
        }, 100);
    }
    onHandleMouseEnter() {
        this.preventRemoveHandle = true;
    }
    onHandleMouseLeave() {
        this.preventRemoveHandle = false;
        if (this.resizeHandle) {
            this.renderer2.removeChild(this.containerElement, this.resizeHandle);
            this.resizeHandle = null;
        }
        if (this.resizeHandleClick) {
            this.resizeHandleClick();
        }
    }
    onMousedown(event) {
        this.moveCount = 0;
        this.resizeStartEvent.emit(event); // emit begin resize event
        this.initialWidth = this.element.clientWidth;
        const initialOffset = this.element.getBoundingClientRect().left - this.containerElement.getBoundingClientRect().left;
        this.mouseDownScreenX = event.clientX;
        event.stopPropagation();
        // create resizeOverlay
        this.resizeOverlay = this.renderer2.createElement('div');
        this.renderer2.appendChild(this.containerElement, this.resizeOverlay);
        this.renderer2.addClass(this.resizeOverlay, 'resize-overlay');
        this.renderer2.listen(this.resizeOverlay, 'click', (clickEvent) => clickEvent.stopPropagation());
        const resizeBar = this.renderer2.createElement('div');
        this.renderer2.addClass(resizeBar, 'resize-bar');
        this.resizeBarRefElement = resizeBar;
        this.renderer2.appendChild(this.containerElement, resizeBar);
        this.renderer2.setStyle(this.resizeBarRefElement, 'display', 'block');
        this.renderer2.setStyle(this.resizeBarRefElement, 'left', initialOffset + this.initialWidth + 'px');
        const mouseup = fromEvent(document, 'mouseup');
        this.mouseUpSubscription = mouseup.subscribe((ev) => this.onMouseup(ev));
        this.zone.runOutsideAngular(() => {
            this.document.addEventListener('mousemove', this.bindMousemove);
        });
    }
    onMouseup(event) {
        const movementX = event.clientX - this.mouseDownScreenX;
        const newWidth = this.initialWidth + movementX;
        const finalWidth = this.getFinalWidth(newWidth);
        // destroy overlay
        this.renderer2.removeChild(this.element, this.resizeOverlay);
        this.renderer2.removeChild(this.containerElement, this.resizeBarRefElement);
        this.resizeEndEvent.emit({ width: finalWidth });
        if (this.mouseUpSubscription && !this.mouseUpSubscription.closed) {
            this._destroySubscription();
        }
        this.document.removeEventListener('mousemove', this.bindMousemove);
    }
    move(event) {
        this.moveCount++;
        if (this.moveCount % 2 === 0) {
            return;
        }
        const movementX = event.clientX - this.mouseDownScreenX;
        const newWidth = this.initialWidth + movementX;
        const finalWidth = this.getFinalWidth(newWidth);
        this.renderer2.setStyle(this.resizeBarRefElement, 'left', `${finalWidth + this.element.getBoundingClientRect().left - this.containerElement.getBoundingClientRect().left}px`);
        this.resizingEvent.emit({ width: finalWidth });
    }
    getFinalWidth(newWidth) {
        const minWidth = this.handleWidth(this.minWidth);
        const maxWidth = this.handleWidth(this.maxWidth);
        const overMinWidth = !this.minWidth || newWidth >= minWidth;
        const underMaxWidth = !this.maxWidth || newWidth <= maxWidth;
        const finalWidth = !overMinWidth ? minWidth : !underMaxWidth ? maxWidth : newWidth;
        return finalWidth;
    }
    handleWidth(width) {
        if (!width) {
            return;
        }
        if (typeof width === 'number') {
            return width;
        }
        if (width.includes('%')) {
            const tableWidth = this.containerElement.clientWidth;
            return (tableWidth * parseInt(width, 10)) / 100;
        }
        return parseInt(width.replace(/[^\d]+/, ''), 10);
    }
    _destroySubscription() {
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
            this.mouseUpSubscription = undefined;
        }
    }
}
ResizeHandleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResizeHandleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
ResizeHandleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ResizeHandleDirective, selector: "[dResizeHandle]", inputs: { containerElement: "containerElement", minWidth: "minWidth", maxWidth: "maxWidth" }, outputs: { resizeStartEvent: "resizeStartEvent", resizingEvent: "resizingEvent", resizeEndEvent: "resizeEndEvent", collapseEvent: "collapseEvent" }, host: { listeners: { "mouseenter": "onMouseEnter($event)", "mouseleave": "onMouseLeave($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResizeHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dResizeHandle]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { containerElement: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], resizeStartEvent: [{
                type: Output
            }], resizingEvent: [{
                type: Output
            }], resizeEndEvent: [{
                type: Output
            }], collapseEvent: [{
                type: Output
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,