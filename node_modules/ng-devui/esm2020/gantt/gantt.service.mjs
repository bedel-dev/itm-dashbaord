import { Injectable } from '@angular/core';
import { fromEvent, merge, Observable, ReplaySubject, Subject } from 'rxjs';
import { pluck } from 'rxjs/operators';
import { GanttScaleUnit } from './gantt.model';
import * as i0 from "@angular/core";
export class GanttService {
    constructor() {
        this.scaleUnit = GanttScaleUnit.day;
        this.ganttBarStatusChange = new Subject();
        this.ganttScaleConfigChange = new ReplaySubject(1);
        this.mouseMoveListener = new Observable();
        this.mouseEndListener = new Observable();
    }
    changeGanttBarStatus(status) {
        this.ganttBarStatusChange.next(status);
    }
    registContainerEvents(scrollContainer) {
        // 背景拖拽
        this.mouseDownListener = fromEvent(scrollContainer, 'mousedown').pipe(pluck('pageX'));
        this.mouseMoveListener = fromEvent(scrollContainer, 'mousemove').pipe(pluck('pageX'));
        this.mouseEndListener = merge(fromEvent(scrollContainer, 'mouseup'), fromEvent(scrollContainer, 'mouseout')).pipe(pluck('pageX'));
    }
    changeGanttScaleConfig(status) {
        this.ganttScaleConfigChange.next(status);
    }
    setScaleConfig(config) {
        if (config.startDate) {
            this.scaleStartDate = config.startDate;
        }
        if (config.endDate) {
            this.scaleEndDate = config.endDate;
        }
        if (config.unit) {
            this.scaleUnit = config.unit;
        }
        this.changeGanttScaleConfig(config);
    }
    getScaleUnitPixel() {
        switch (this.scaleUnit) {
            case GanttScaleUnit.day:
                return 40;
                break;
            case GanttScaleUnit.week:
                return 30;
                break;
            case GanttScaleUnit.month:
                return 20;
                break;
            default:
                break;
        }
    }
    getDatePostionOffset(date) {
        if (date && this.scaleStartDate) {
            const timeOffset = date.getTime() - this.scaleStartDate.getTime();
            const units = timeOffset / GanttService.DAY_DURATION;
            return units * this.getScaleUnitPixel();
        }
    }
    getDuration(startDate, endDate) {
        if (startDate && endDate) {
            const timeOffset = endDate.getTime() - startDate.getTime();
            const duration = timeOffset / GanttService.DAY_DURATION + 1;
            return Math.round(duration);
        }
    }
    getDurationWidth(startDate, endDate) {
        if (startDate && endDate) {
            const duration = this.getDuration(startDate, endDate);
            return duration * this.getScaleUnitPixel();
        }
    }
    isSomeDate(date, compareDate) {
        if (date.getFullYear() !== compareDate.getFullYear()) {
            return false;
        }
        if (date.getMonth() !== compareDate.getMonth()) {
            return false;
        }
        if (date.getDate() !== compareDate.getDate()) {
            return false;
        }
        return true;
    }
    roundDate(date) {
        if (date.getHours() >= 12) {
            date.setDate(date.getDate() + 1);
            date.setHours(0, 0, 0);
        }
        else if (date.getHours() < 12) {
            date.setHours(0, 0, 0);
        }
    }
    unRegistContainerEvents() { }
}
GanttService.DAY_DURATION = 24 * 60 * 60 * 1000;
GanttService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
GanttService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,