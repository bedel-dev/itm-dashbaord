import { fromEvent, of, Subscription } from 'rxjs';
import { delay, tap, throttleTime } from 'rxjs/operators';
export class TransformableElement {
    constructor(element, { zoom = 1, turn = 0, translateX = 0, translateY = 0 }) {
        this._mouseDown = false;
        this._originTranslateX = 0;
        this._originTranslateY = 0;
        this.MIN_SCALE = 0.2;
        this.MAX_SCALE = 2.5;
        this.element = element;
        this.zoom = zoom;
        this.turn = turn;
        this.translateX = translateX;
        this.translateY = translateY;
        this.setElementTransform();
    }
    get element() {
        return this._element;
    }
    set element(ele) {
        this._element = ele;
        this.setElementListener();
    }
    setElementListener() {
        if (typeof window === 'undefined') {
            return;
        }
        if (this.eventSub) {
            this.eventSub.unsubscribe();
        }
        this.eventSub = new Subscription();
        this.eventSub.add(fromEvent(this._element, 'mousewheel').subscribe($event => this.mouseZoom($event)));
        this.eventSub.add(fromEvent(window, 'mousedown').subscribe($event => this.mouseDown($event)));
        this.eventSub.add(fromEvent(window, 'mousemove').subscribe($event => this.mouseMove($event)));
        this.eventSub.add(fromEvent(window, 'mouseup').subscribe($event => this.mouseUp($event)));
    }
    removeElementListener() {
        if (this.eventSub) {
            this.eventSub.unsubscribe();
        }
        if (this.zoomSub) {
            this.zoomSub.unsubscribe();
        }
    }
    mouseZoom($event) {
        if (typeof document === 'undefined') {
            return;
        }
        this.zoomSub = of($event).pipe(throttleTime(300), tap((event) => {
            const value = -event.wheelDelta || event.deltaY || event.detail;
            if (value < 0) {
                if (this.zoom === this.MAX_SCALE) {
                    this.element.style.cursor = 'not-allowed';
                    return;
                }
                this.element.style.cursor = 'zoom-in';
                document.body.style.cursor = 'zoom-in';
                this.zoomIn(0.2);
            }
            else {
                if (this.zoom === this.MIN_SCALE) {
                    this.element.style.cursor = 'not-allowed';
                    return;
                }
                this.element.style.cursor = 'zoom-out';
                document.body.style.cursor = 'zoom-out';
                this.zoomOut(0.2);
            }
        }), delay(400)).subscribe(() => {
            this.element.style.cursor = 'grab';
            document.body.style.cursor = 'default';
        });
    }
    mouseDown($event) {
        if ($event.target !== this.element) {
            return;
        }
        this._mouseDown = true;
        this._originMouseX = $event['clientX'];
        this._originMouseY = $event['clientY'];
        this._originTranslateX = this.translateX;
        this._originTranslateY = this.translateY;
    }
    mouseMove($event) {
        if (this._mouseDown && typeof document !== 'undefined') {
            $event.stopPropagation();
            $event.preventDefault();
            this.translateX = this._originTranslateX + ($event['clientX'] - this._originMouseX);
            this.translateY = this._originTranslateY + ($event['clientY'] - this._originMouseY);
            this.setElementTransform();
            document.body.style.cursor = 'grabbing';
            this.element.style.cursor = 'grabbing';
        }
    }
    mouseUp($event) {
        if (typeof document !== 'undefined') {
            this._mouseDown = false;
            document.body.style.cursor = 'default';
            this.element.style.cursor = 'grab';
        }
    }
    zoomOut(step = 0.25) {
        this.zoom = Math.max(this.MIN_SCALE, this.zoom - step);
        this.setElementTransform();
    }
    zoomIn(step = 0.25) {
        this.zoom = Math.min(this.MAX_SCALE, this.zoom + step);
        this.setElementTransform();
    }
    rotate() {
        this.turn -= 0.25;
        this.setElementTransform();
    }
    setOriginalScale() {
        this.resetTransformProperties();
        this.setElementTransform();
    }
    setBestScale() {
        this.resetTransformProperties();
        this.setElementTransform();
    }
    resetTransformProperties() {
        this.zoom = 1;
        this.translateX = 0;
        this.translateY = 1;
    }
    setElementTransform(target, zoom = this.zoom, translateX = this.translateX, translateY = this.translateY, turn = this.turn) {
        if (!target) {
            target = this.element;
        }
        target.style.transform = `translate(${translateX}px, ${translateY}px) scale(${zoom}) rotate(${turn}turn)`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtYWJsZS1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvaW1hZ2UtcHJldmlldy90cmFuc2Zvcm1hYmxlLWVsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFELE1BQU0sT0FBTyxvQkFBb0I7SUE0Qi9CLFlBQVksT0FBb0IsRUFBRSxFQUFFLElBQUksR0FBRSxDQUFDLEVBQUUsSUFBSSxHQUFFLENBQUMsRUFBRSxVQUFVLEdBQUUsQ0FBQyxFQUFFLFVBQVUsR0FBRSxDQUFDLEVBQUU7UUExQjVFLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFHbkIsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQW1COUIsY0FBUyxHQUFHLEdBQUcsQ0FBQztRQUNoQixjQUFTLEdBQUcsR0FBRyxDQUFDO1FBR2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFFN0IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQTVCRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLEdBQWdCO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3BCLElBQUksQ0FB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QUNkLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELHdCQUF3QjtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxNQUFPLEVBQ1AsSUFBSSxHQUFFLElBQUksQ0FBQyxJQUFJLEVBQ2YsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQzVCLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUM1QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7UUFFbEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQUU7UUFDdkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsYUFBYSxVQUFVLE9BQU8sVUFBVSxhQUFhLElBQUksWUFBWSxJQUFJLE9BQU8sQ0FBQztJQUM1RyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tRXZlbnQsIG9mLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbGF5LCB0YXAsIHRocm90dGxlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybWFibGVFbGVtZW50IHtcbiAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgX21vdXNlRG93biA9IGZhbHNlO1xuICBwcml2YXRlIF9vcmlnaW5Nb3VzZVg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfb3JpZ2luTW91c2VZOiBudW1iZXI7XG4gIHByaXZhdGUgX29yaWdpblRyYW5zbGF0ZVggPSAwO1xuICBwcml2YXRlIF9vcmlnaW5UcmFuc2xhdGVZID0gMDtcblxuICBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICBzZXQgZWxlbWVudChlbGU6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZTtcbiAgICB0aGlzLnNldEVsZW1lbnRMaXN0ZW5lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSB6b29tOiBudW1iZXI7XG4gIHByaXZhdGUgdHVybjogbnVtYmVyOyAgIC8vIHR1cm5cbiAgcHJpdmF0ZSB0cmFuc2xhdGVYOiBudW1iZXI7ICAvLyBweFxuICBwcml2YXRlIHRyYW5zbGF0ZVk6IG51bWJlcjsgIC8vIHB4XG5cbiAgcHJpdmF0ZSBldmVudFN1YjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHpvb21TdWI6IFN1YnNjcmlwdGlvbjtcblxuICBNSU5fU0NBTEUgPSAwLjI7XG4gIE1BWF9TQ0FMRSA9IDIuNTtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCwgeyB6b29tPSAxLCB0dXJuPSAwLCB0cmFuc2xhdGVYPSAwLCB0cmFuc2xhdGVZPSAwIH0pIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuem9vbSA9IHpvb207XG4gICAgdGhpcy50dXJuID0gdHVybjtcbiAgICB0aGlzLnRyYW5zbGF0ZVggPSB0cmFuc2xhdGVYO1xuICAgIHRoaXMudHJhbnNsYXRlWSA9IHRyYW5zbGF0ZVk7XG5cbiAgICB0aGlzLnNldEVsZW1lbnRUcmFuc2Zvcm0oKTtcbiAgfVxuXG4gIHNldEVsZW1lbnRMaXN0ZW5lcigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXZlbnRTdWIpIHtcbiAgICAgIHRoaXMuZXZlbnRTdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudFN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV2ZW50U3ViLmFkZChmcm9tRXZlbnQodGhpcy5fZWxlbWVudCwgJ21vdXNld2hlZWwnKS5zdWJzY3JpYmUoJGV2ZW50ID0+IHRoaXMubW91c2Vab29tKCRldmVudCkpKTtcbiAgICB0aGlzLmV2ZW50U3ViLmFkZChmcm9tRXZlbnQod2luZG93LCAnbW91c2Vkb3duJykuc3Vic2NyaWJlKCRldmVudCA9PiB0aGlzLm1vdXNlRG93bigkZXZlbnQpKSk7XG4gICAgdGhpcy5ldmVudFN1Yi5hZGQoZnJvbUV2ZW50KHdpbmRvdywgJ21vdXNlbW92ZScpLnN1YnNjcmliZSgkZXZlbnQgPT4gdGhpcy5tb3VzZU1vdmUoJGV2ZW50KSkpO1xuICAgIHRoaXMuZXZlbnRTdWIuYWRkKGZyb21FdmVudCh3aW5kb3csICdtb3VzZXVwJykuc3Vic2NyaWJlKCRldmVudCA9PiB0aGlzLm1vdXNlVXAoJGV2ZW50KSkpO1xuICB9XG5cbiAgcmVtb3ZlRWxlbWVudExpc3RlbmVyKCkge1xuICAgIGlmICh0aGlzLmV2ZW50U3ViKSB7XG4gICAgICB0aGlzLmV2ZW50U3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnpvb21TdWIpIHtcbiAgICAgIHRoaXMuem9vbVN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIG1vdXNlWm9vbSgkZXZlbnQpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnpvb21TdWIgPSBvZigkZXZlbnQpLnBpcGUoXG4gICAgICB0aHJvdHRsZVRpbWUoMzAwKSxcbiAgICAgIHRhcCgoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAtZXZlbnQud2hlZWxEZWx0YSB8fCBldmVudC5kZWx0YVkgfHwgZXZlbnQuZGV0YWlsO1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuem9vbSA9PT0gdGhpcy5NQVhfU0NBTEUpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5jdXJzb3IgPSAnbm90LWFsbG93ZWQnO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ3pvb20taW4nO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ3pvb20taW4nO1xuICAgICAgICAgIHRoaXMuem9vbUluKDAuMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuem9vbSA9PT0gdGhpcy5NSU5fU0NBTEUpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5jdXJzb3IgPSAnbm90LWFsbG93ZWQnO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ3pvb20tb3V0JztcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICd6b29tLW91dCc7XG4gICAgICAgICAgdGhpcy56b29tT3V0KDAuMik7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgZGVsYXkoNDAwKSxcbiAgICApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ2dyYWInO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAnZGVmYXVsdCc7XG4gICAgfSk7XG4gIH1cblxuICBtb3VzZURvd24oJGV2ZW50KSB7XG4gICAgaWYgKCRldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21vdXNlRG93biA9IHRydWU7XG4gICAgdGhpcy5fb3JpZ2luTW91c2VYID0gJGV2ZW50WydjbGllbnRYJ107XG4gICAgdGhpcy5fb3JpZ2luTW91c2VZID0gJGV2ZW50WydjbGllbnRZJ107XG4gICAgdGhpcy5fb3JpZ2luVHJhbnNsYXRlWCA9IHRoaXMudHJhbnNsYXRlWDtcbiAgICB0aGlzLl9vcmlnaW5UcmFuc2xhdGVZID0gdGhpcy50cmFuc2xhdGVZO1xuICB9XG5cbiAgbW91c2VNb3ZlKCRldmVudCkge1xuICAgIGlmICh0aGlzLl9tb3VzZURvd24gJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnRyYW5zbGF0ZVggPSB0aGlzLl9vcmlnaW5UcmFuc2xhdGVYICsgKCRldmVudFsnY2xpZW50WCddIC0gdGhpcy5fb3JpZ2luTW91c2VYKTtcbiAgICAgIHRoaXMudHJhbnNsYXRlWSA9IHRoaXMuX29yaWdpblRyYW5zbGF0ZVkgKyAoJGV2ZW50WydjbGllbnRZJ10gLSB0aGlzLl9vcmlnaW5Nb3VzZVkpO1xuICAgICAgdGhpcy5zZXRFbGVtZW50VHJhbnNmb3JtKCk7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICdncmFiYmluZyc7XG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJztcbiAgICB9XG4gIH1cblxuICBtb3VzZVVwKCRldmVudCkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLl9tb3VzZURvd24gPSBmYWxzZTtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnO1xuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmN1cnNvciA9ICdncmFiJztcbiAgICB9XG4gIH1cblxuICB6b29tT3V0KHN0ZXAgPSAwLjI1KSB7XG4gICAgdGhpcy56b29tID0gTWF0aC5tYXgodGhpcy5NSU5fU0NBTEUsIHRoaXMuem9vbSAtIHN0ZXApO1xuICAgIHRoaXMuc2V0RWxlbWVudFRyYW5zZm9ybSgpO1xuICB9XG5cbiAgem9vbUluKHN0ZXAgPSAwLjI1KSB7XG4gICAgdGhpcy56b29tID0gTWF0aC5taW4odGhpcy5NQVhfU0NBTEUsIHRoaXMuem9vbSArIHN0ZXApO1xuICAgIHRoaXMuc2V0RWxlbWVudFRyYW5zZm9ybSgpO1xuICB9XG5cbiAgcm90YXRlKCkge1xuICAgIHRoaXMudHVybiAtPSAwLjI1O1xuICAgIHRoaXMuc2V0RWxlbWVudFRyYW5zZm9ybSgpO1xuICB9XG5cbiAgc2V0T3JpZ2luYWxTY2FsZSgpIHtcbiAgICB0aGlzLnJlc2V0VHJhbnNmb3JtUHJvcGVydGllcygpO1xuICAgIHRoaXMuc2V0RWxlbWVudFRyYW5zZm9ybSgpO1xuICB9XG5cbiAgc2V0QmVzdFNjYWxlKCkge1xuICAgIHRoaXMucmVzZXRUcmFuc2Zvcm1Qcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy5zZXRFbGVtZW50VHJhbnNmb3JtKCk7XG4gIH1cblxuICByZXNldFRyYW5zZm9ybVByb3BlcnRpZXMoKSB7XG4gICAgdGhpcy56b29tID0gMTtcbiAgICB0aGlzLnRyYW5zbGF0ZVggPSAwO1xuICAgIHRoaXMudHJhbnNsYXRlWSA9IDE7XG4gIH1cblxuICBzZXRFbGVtZW50VHJhbnNmb3JtKHRhcmdldD8sXG4gICAgICAgICAgICAgICAgICAgICAgem9vbT0gdGhpcy56b29tLFxuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVggPSB0aGlzLnRyYW5zbGF0ZVgsXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWSA9IHRoaXMudHJhbnNsYXRlWSxcbiAgICAgICAgICAgICAgICAgICAgICB0dXJuID0gdGhpcy50dXJuXG4gICkge1xuICAgIGlmICghdGFyZ2V0KSB7IHRhcmdldCA9IHRoaXMuZWxlbWVudDsgfVxuICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4KSBzY2FsZSgke3pvb219KSByb3RhdGUoJHt0dXJufXR1cm4pYDtcbiAgfVxufVxuIl19