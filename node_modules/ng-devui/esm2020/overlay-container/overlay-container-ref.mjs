import { ApplicationRef, Injectable, Injector } from '@angular/core';
import { DocumentRef } from 'ng-devui/window-ref';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/window-ref";
export class OverlayContainerRef {
    constructor(_appRef, documentRef, _injector) {
        this._appRef = _appRef;
        this.documentRef = documentRef;
        this._injector = _injector;
    }
    insert(viewRef) {
        this._appRef.attachView(viewRef);
        this.documentRef.body.appendChild(viewRef.rootNodes[0]);
        return viewRef;
    }
    remove(viewRef) {
        viewRef.destroy();
    }
    createEmbeddedView(templateRef, context) {
        const viewRef = templateRef.createEmbeddedView(context || {});
        return this.insert(viewRef);
    }
    createComponent(componentFactory, injector, projectableNodes) {
        const componentRef = componentFactory.create(injector || this._injector, projectableNodes);
        this.insert(componentRef.hostView);
        return componentRef;
    }
}
OverlayContainerRef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: OverlayContainerRef, deps: [{ token: i0.ApplicationRef }, { token: i1.DocumentRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
OverlayContainerRef.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: OverlayContainerRef });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: OverlayContainerRef, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i1.DocumentRef }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1jb250YWluZXItcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvb3ZlcmxheS1jb250YWluZXIvb3ZlcmxheS1jb250YWluZXItcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxjQUFjLEVBS2QsVUFBVSxFQUNWLFFBQVEsRUFHVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUdsRCxNQUFNLE9BQU8sbUJBQW1CO0lBRTlCLFlBQW9CLE9BQXVCLEVBQ3ZCLFdBQXdCLEVBQ3hCLFNBQW1CO1FBRm5CLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3ZCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGNBQVMsR0FBVCxTQUFTLENBQVU7SUFDdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFnQjtRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUUsT0FBZ0MsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQWdCO1FBQ3JCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0JBQWtCLENBQUksV0FBNkIsRUFBRSxPQUFXO1FBQzlELE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxlQUFlLENBQUksZ0JBQXFDLEVBQ3JDLFFBQW1CLEVBQ25CLGdCQUEwQjtRQUMzQyxNQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQW9CLENBQUM7UUFDOUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7Z0hBNUJVLG1CQUFtQjtvSEFBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZixcbiAgQ29tcG9uZW50RmFjdG9yeSxcbiAgQ29tcG9uZW50UmVmLFxuICBFbGVtZW50UmVmLFxuICBFbWJlZGRlZFZpZXdSZWYsXG4gIEluamVjdGFibGUsXG4gIEluamVjdG9yLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld1JlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRG9jdW1lbnRSZWYgfSBmcm9tICduZy1kZXZ1aS93aW5kb3ctcmVmJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE92ZXJsYXlDb250YWluZXJSZWYge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2FwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgZG9jdW1lbnRSZWY6IERvY3VtZW50UmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgfVxuXG4gIGluc2VydCh2aWV3UmVmOiBWaWV3UmVmKTogVmlld1JlZiB7XG4gICAgdGhpcy5fYXBwUmVmLmF0dGFjaFZpZXcodmlld1JlZik7XG4gICAgdGhpcy5kb2N1bWVudFJlZi5ib2R5LmFwcGVuZENoaWxkKCh2aWV3UmVmIGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KS5yb290Tm9kZXNbMF0pO1xuICAgIHJldHVybiB2aWV3UmVmO1xuICB9XG5cbiAgcmVtb3ZlKHZpZXdSZWY6IFZpZXdSZWYpIHtcbiAgICB2aWV3UmVmLmRlc3Ryb3koKTtcbiAgfVxuXG4gIGNyZWF0ZUVtYmVkZGVkVmlldzxDPih0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PiwgY29udGV4dD86IEMpIHtcbiAgICBjb25zdCB2aWV3UmVmID0gdGVtcGxhdGVSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KGNvbnRleHQgfHwge30pO1xuICAgIHJldHVybiB0aGlzLmluc2VydCh2aWV3UmVmKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbXBvbmVudDxDPihjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PEM+LFxuICAgICAgICAgICAgICAgICAgICAgaW5qZWN0b3I/OiBJbmplY3RvcixcbiAgICAgICAgICAgICAgICAgICAgIHByb2plY3RhYmxlTm9kZXM/OiBhbnlbXVtdKSB7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gY29tcG9uZW50RmFjdG9yeS5jcmVhdGUoaW5qZWN0b3IgfHwgdGhpcy5faW5qZWN0b3IsIHByb2plY3RhYmxlTm9kZXMpIGFzIENvbXBvbmVudFJlZjxDPjtcbiAgICB0aGlzLmluc2VydChjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgIHJldHVybiBjb21wb25lbnRSZWY7XG4gIH1cbn1cbiJdfQ==