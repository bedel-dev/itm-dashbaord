export class EventBus {
    constructor() {
        this.eventBusCore = [];
    }
    areFuncEqual(a, b) {
        return a.toString() === b.toString();
    }
    isKeyValueObjInArr(arr, key, val) {
        const filteredArr = arr.filter(entry => {
            return entry[key] === val;
        });
        return filteredArr.length > 0;
    }
    removeFuncInFuncArr(arr, fn) {
        for (let z = 0; z < arr.length; z++) {
            if (this.areFuncEqual(arr[z], fn)) {
                arr.splice(z, 1);
            }
        }
        return arr;
    }
    getKeyValueObjInArr(arr, key, val) {
        const filteredArr = arr.filter(entry => {
            return entry[key] === val;
        });
        return filteredArr[0];
    }
    addEvent(eventName, eventFunc) {
        if (!this.isKeyValueObjInArr(this.eventBusCore, 'eventName', eventName)) {
            this.eventBusCore.push({ eventName: eventName, eventFuncArr: [eventFunc] });
        }
        else {
            this.eventBusCore = this.eventBusCore.map(event => {
                if (event['eventName'] === eventName) {
                    event.eventFuncArr.push(eventFunc);
                }
                return event;
            });
        }
    }
    add(eventName, callbacks) {
        if (!eventName) {
            return;
        }
        if (typeof callbacks === 'function') {
            for (let i = 1; i < arguments.length; i++) {
                this.addEvent(eventName, arguments[i]);
            }
        }
        if (typeof callbacks === 'object' && callbacks.forEach) {
            callbacks.forEach(fn => {
                this.addEvent(eventName, fn);
            });
        }
    }
    remove(eventName, callbacks) {
        if (!eventName) {
            return;
        }
        for (let i = 0; i < this.eventBusCore.length; i++) {
            if (this.eventBusCore[i].eventName === eventName) {
                if (arguments.length === 1) {
                    return this.eventBusCore.splice(i, 1);
                }
                const removedEvent = this.eventBusCore.splice(i, 1)[0];
                if (typeof callbacks === 'function') {
                    for (let k = 1; k < arguments.length; k++) {
                        removedEvent.eventFuncArr = this.removeFuncInFuncArr(removedEvent.eventFuncArr, arguments[k]);
                    }
                }
                if (typeof callbacks === 'object' && callbacks.length) {
                    for (let x = 0; x < callbacks.length; x++) {
                        removedEvent.eventFuncArr = this.removeFuncInFuncArr(removedEvent.eventFuncArr, callbacks[x]);
                    }
                }
                this.eventBusCore.push(removedEvent);
            }
        }
    }
    trigger(eventName, data) {
        const event = this.getKeyValueObjInArr(this.eventBusCore, 'eventName', eventName);
        if (event) {
            (event.eventFuncArr || []).forEach(fn => {
                fn.apply(this, data);
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtYnVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2dWkvdGhlbWUvdXRpbHMvZXZlbnQtYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxRQUFRO0lBQXJCO1FBQ1UsaUJBQVksR0FBRyxFQUFFLENBQUM7SUFtRjVCLENBQUM7SUFsRlMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBQ08sa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ3RDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ08sbUJBQW1CLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDbEI7U0FDRjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNPLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztRQUN2QyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JDLE9BQU8s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LEVBQUUsRUFBRTt3QkFDekMsWUFBWSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDL0Y7aUJBQ0Y7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdEM7U0FDRjtJQUNILENBQUM7SUFDTSxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUk7UUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2xGLElBQUksS0FBSyxFQUFFO1lBQ1QsQ0FBQyxLQUFLLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElFdmVudEJ1cyB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzIGltcGxlbWVudHMgSUV2ZW50QnVzIHtcbiAgcHJpdmF0ZSBldmVudEJ1c0NvcmUgPSBbXTtcbiAgcHJpdmF0ZSBhcmVGdW5jRXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcbiAgfVxuICBwcml2YXRlIGlzS2V5VmFsdWVPYmpJbkFycihhcnIsIGtleSwgdmFsKSB7XG4gICAgY29uc3QgZmlsdGVyZWRBcnIgPSBhcnIuZmlsdGVyKGVudHJ5ID0+IHtcbiAgICAgIHJldHVybiBlbnRyeVtrZXldID09PSB2YWw7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbHRlcmVkQXJyLmxlbmd0aCA+IDA7XG4gIH1cbiAgcHJpdmF0ZSByZW1vdmVGdW5jSW5GdW5jQXJyKGFyciwgZm4pIHtcbiAgICBmb3IgKGxldCB6ID0gMDsgeiA8IGFyci5sZW5ndGg7IHorKykge1xuICAgICAgaWYgKHRoaXMuYXJlRnVuY0VxdWFsKGFyclt6XSwgZm4pKSB7XG4gICAgICAgIGFyci5zcGxpY2UoeiwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cbiAgcHJpdmF0ZSBnZXRLZXlWYWx1ZU9iakluQXJyKGFyciwga2V5LCB2YWwpIHtcbiAgICBjb25zdCBmaWx0ZXJlZEFyciA9IGFyci5maWx0ZXIoZW50cnkgPT4ge1xuICAgICAgcmV0dXJuIGVudHJ5W2tleV0gPT09IHZhbDtcbiAgICB9KTtcbiAgICByZXR1cm4gZmlsdGVyZWRBcnJbMF07XG4gIH1cbiAgcHJpdmF0ZSBhZGRFdmVudChldmVudE5hbWUsIGV2ZW50RnVuYykge1xuICAgIGlmICghdGhpcy5pc0tleVZhbHVlT2JqSW5BcnIodGhpcy5ldmVudEJ1c0NvcmUsICdldmVudE5hbWUnLCBldmVudE5hbWUpKSB7XG4gICAgICB0aGlzLmV2ZW50QnVzQ29yZS5wdXNoKHsgZXZlbnROYW1lOiBldmVudE5hbWUsIGV2ZW50RnVuY0FycjogW2V2ZW50RnVuY10gfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXZlbnRCdXNDb3JlID0gdGhpcy5ldmVudEJ1c0NvcmUubWFwKGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50WydldmVudE5hbWUnXSA9PT0gZXZlbnROYW1lKSB7XG4gICAgICAgICAgZXZlbnQuZXZlbnRGdW5jQXJyLnB1c2goZXZlbnRGdW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGFkZChldmVudE5hbWUsIGNhbGxiYWNrcykge1xuICAgIGlmICghZXZlbnROYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmFkZEV2ZW50KGV2ZW50TmFtZSwgYXJndW1lbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFja3MgPT09ICdvYmplY3QnICYmIGNhbGxiYWNrcy5mb3JFYWNoKSB7XG4gICAgICBjYWxsYmFja3MuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgIHRoaXMuYWRkRXZlbnQoZXZlbnROYW1lLCBmbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHJlbW92ZShldmVudE5hbWUsIGNhbGxiYWNrcykge1xuICAgIGlmICghZXZlbnROYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ldmVudEJ1c0NvcmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmV2ZW50QnVzQ29yZVtpXS5ldmVudE5hbWUgPT09IGV2ZW50TmFtZSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50QnVzQ29yZS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtb3ZlZEV2ZW50ID0gdGhpcy5ldmVudEJ1c0NvcmUuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGZvciAobGV0IGsgPSAxOyBrIDwgYXJndW1lbnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICByZW1vdmVkRXZlbnQuZXZlbnRGdW5jQXJyID0gdGhpcy5yZW1vdmVGdW5jSW5GdW5jQXJyKHJlbW92ZWRFdmVudC5ldmVudEZ1bmNBcnIsIGFyZ3VtZW50c1trXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2tzID09PSAnb2JqZWN0JyAmJiBjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBjYWxsYmFja3MubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIHJlbW92ZWRFdmVudC5ldmVudEZ1bmNBcnIgPSB0aGlzLnJlbW92ZUZ1bmNJbkZ1bmNBcnIocmVtb3ZlZEV2ZW50LmV2ZW50RnVuY0FyciwgY2FsbGJhY2tzW3hdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudEJ1c0NvcmUucHVzaChyZW1vdmVkRXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwdWJsaWMgdHJpZ2dlcihldmVudE5hbWUsIGRhdGEpIHtcbiAgICBjb25zdCBldmVudCA9IHRoaXMuZ2V0S2V5VmFsdWVPYmpJbkFycih0aGlzLmV2ZW50QnVzQ29yZSwgJ2V2ZW50TmFtZScsIGV2ZW50TmFtZSk7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICAoZXZlbnQuZXZlbnRGdW5jQXJyIHx8IFtdKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgZm4uYXBwbHkodGhpcywgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==