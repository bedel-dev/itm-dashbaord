import * as enquire from 'enquire.js';
import { ReplaySubject } from 'rxjs';
export class PrefersColorSchemeMediaQuery {
    constructor() {
        this.prefersColorSchemeSubject = new ReplaySubject(1);
        this.prefersColorSchemeChange = this.prefersColorSchemeSubject.asObservable();
        this.handleColorSchemeChange = (value) => {
            this.prefersColorSchemeSubject.next(value);
        };
    }
    register() {
        PrefersColorSchemeMediaQuery.enquire
            .register.bind(enquire)(PrefersColorSchemeMediaQuery.Query.light, {
            match: () => {
                this.handleColorSchemeChange('light');
            }
        })
            .register(PrefersColorSchemeMediaQuery.Query.dark, {
            match: () => {
                this.handleColorSchemeChange('dark');
            }
        });
        this.prefersColorSchemeSubject.next(this.getInitValue());
    }
    unregister() {
        PrefersColorSchemeMediaQuery.enquire
            .unregister(PrefersColorSchemeMediaQuery.Query.light)
            .unregister(PrefersColorSchemeMediaQuery.Query.dark);
        this.prefersColorSchemeSubject.complete();
    }
    getInitValue() {
        return window.matchMedia(PrefersColorSchemeMediaQuery.Query.light).matches && 'light'
            || window.matchMedia(PrefersColorSchemeMediaQuery.Query.dark).matches && 'dark'
            || 'no-preference';
    }
}
PrefersColorSchemeMediaQuery.enquire = enquire; // prevent code optimization excluding enquire out
/* eslint-disable-next-line @typescript-eslint/no-namespace */
(function (PrefersColorSchemeMediaQuery) {
    let Query;
    (function (Query) {
        Query["light"] = "screen and (prefers-color-scheme: light)";
        Query["dark"] = "screen and (prefers-color-scheme: dark)";
        Query["noPreferences"] = "screen and (prefers-color-scheme: light)";
    })(Query = PrefersColorSchemeMediaQuery.Query || (PrefersColorSchemeMediaQuery.Query = {}));
})(PrefersColorSchemeMediaQuery || (PrefersColorSchemeMediaQuery = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtcXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS90aGVtZS9tZWRpYS1xdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJDLE1BQU0sT0FBTyw0QkFBNEI7SUFBekM7UUFFVSw4QkFBeUIsR0FBRyxJQUFJLGFBQWEsQ0FBcUMsQ0FBQyxDQUFDLENBQUM7UUFDdEYsNkJBQXdCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFlBQVksRUFBRSxDQUFDO1FBd0JoRiw0QkFBdUIsR0FBRyxDQUFDLEtBQXlDLEVBQUUsRUFBRTtZQUN0RSxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQztJQU9KLENBQUM7SUEvQkMsUUFBUTtRQUNOLDRCQUE0QixDQUFDLE9BQU87YUFDakMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2hFLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3hDLENBQUM7U0FDRixDQUFDO2FBQ0QsUUFBUSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDakQsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkMsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUNMLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELFVBQVU7UUFDUiw0QkFBNEIsQ0FBQyxPQUFPO2FBQ2pDLFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ3BELFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFNRCxZQUFZO1FBQ1YsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTztlQUNqRixNQUFNLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksTUFBTTtlQUM1RSxlQUFlLENBQUM7SUFDdEIsQ0FBQzs7QUFsQ00sb0NBQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxrREFBa0Q7QUFxQzlFLDhEQUE4RDtBQUM5RCxXQUFpQiw0QkFBNEI7SUFFM0MsSUFBWSxLQUlYO0lBSkQsV0FBWSxLQUFLO1FBQ2YsMkRBQW9ELENBQUE7UUFDcEQseURBQWtELENBQUE7UUFDbEQsbUVBQTRELENBQUE7SUFDOUQsQ0FBQyxFQUpXLEtBQUssR0FBTCxrQ0FBSyxLQUFMLGtDQUFLLFFBSWhCO0FBQ0gsQ0FBQyxFQVBnQiw0QkFBNEIsS0FBNUIsNEJBQTRCLFFBTzVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZW5xdWlyZSBmcm9tICdlbnF1aXJlLmpzJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNsYXNzIFByZWZlcnNDb2xvclNjaGVtZU1lZGlhUXVlcnkge1xuICBzdGF0aWMgZW5xdWlyZSA9IGVucXVpcmU7IC8vIHByZXZlbnQgY29kZSBvcHRpbWl6YXRpb24gZXhjbHVkaW5nIGVucXVpcmUgb3V0XG4gIHByaXZhdGUgcHJlZmVyc0NvbG9yU2NoZW1lU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PFByZWZlcnNDb2xvclNjaGVtZU1lZGlhUXVlcnkuVmFsdWU+KDEpO1xuICBwdWJsaWMgcHJlZmVyc0NvbG9yU2NoZW1lQ2hhbmdlID0gdGhpcy5wcmVmZXJzQ29sb3JTY2hlbWVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gIHJlZ2lzdGVyKCkge1xuICAgIFByZWZlcnNDb2xvclNjaGVtZU1lZGlhUXVlcnkuZW5xdWlyZVxuICAgICAgLnJlZ2lzdGVyLmJpbmQoZW5xdWlyZSkoUHJlZmVyc0NvbG9yU2NoZW1lTWVkaWFRdWVyeS5RdWVyeS5saWdodCwge1xuICAgICAgICBtYXRjaDogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaGFuZGxlQ29sb3JTY2hlbWVDaGFuZ2UoJ2xpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAucmVnaXN0ZXIoUHJlZmVyc0NvbG9yU2NoZW1lTWVkaWFRdWVyeS5RdWVyeS5kYXJrLCB7XG4gICAgICAgIG1hdGNoOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVDb2xvclNjaGVtZUNoYW5nZSgnZGFyaycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB0aGlzLnByZWZlcnNDb2xvclNjaGVtZVN1YmplY3QubmV4dCh0aGlzLmdldEluaXRWYWx1ZSgpKTtcbiAgfVxuXG4gIHVucmVnaXN0ZXIoKSB7XG4gICAgUHJlZmVyc0NvbG9yU2NoZW1lTWVkaWFRdWVyeS5lbnF1aXJlXG4gICAgICAudW5yZWdpc3RlcihQcmVmZXJzQ29sb3JTY2hlbWVNZWRpYVF1ZXJ5LlF1ZXJ5LmxpZ2h0KVxuICAgICAgLnVucmVnaXN0ZXIoUHJlZmVyc0NvbG9yU2NoZW1lTWVkaWFRdWVyeS5RdWVyeS5kYXJrKTtcbiAgICB0aGlzLnByZWZlcnNDb2xvclNjaGVtZVN1YmplY3QuY29tcGxldGUoKTtcbiAgfVxuXG4gIGhhbmRsZUNvbG9yU2NoZW1lQ2hhbmdlID0gKHZhbHVlOiBQcmVmZXJzQ29sb3JTY2hlbWVNZWRpYVF1ZXJ5LlZhbHVlKSA9PiB7XG4gICAgdGhpcy5wcmVmZXJzQ29sb3JTY2hlbWVTdWJqZWN0Lm5leHQodmFsdWUpO1xuICB9O1xuXG4gIGdldEluaXRWYWx1ZSgpOiBQcmVmZXJzQ29sb3JTY2hlbWVNZWRpYVF1ZXJ5LlZhbHVlIHtcbiAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEoUHJlZmVyc0NvbG9yU2NoZW1lTWVkaWFRdWVyeS5RdWVyeS5saWdodCkubWF0Y2hlcyAmJiAnbGlnaHQnXG4gICAgIHx8IHdpbmRvdy5tYXRjaE1lZGlhKFByZWZlcnNDb2xvclNjaGVtZU1lZGlhUXVlcnkuUXVlcnkuZGFyaykubWF0Y2hlcyAmJiAnZGFyaydcbiAgICAgfHwgJ25vLXByZWZlcmVuY2UnO1xuICB9XG59XG5cbi8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlICovXG5leHBvcnQgbmFtZXNwYWNlIFByZWZlcnNDb2xvclNjaGVtZU1lZGlhUXVlcnkge1xuICBleHBvcnQgdHlwZSBWYWx1ZSA9ICdsaWdodCcgfCAnZGFyaycgfCAnbm8tcHJlZmVyZW5jZSc7XG4gIGV4cG9ydCBlbnVtIFF1ZXJ5IHtcbiAgICAnbGlnaHQnID0gJ3NjcmVlbiBhbmQgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBsaWdodCknLFxuICAgICdkYXJrJyA9ICdzY3JlZW4gYW5kIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknLFxuICAgICdub1ByZWZlcmVuY2VzJyA9ICdzY3JlZW4gYW5kIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpJyxcbiAgfVxufVxuIl19