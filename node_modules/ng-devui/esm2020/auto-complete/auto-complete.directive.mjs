import { __decorate, __metadata } from "tslib";
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Injector, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { PositionService } from 'ng-devui/position';
import { addClassToOrigin, AppendToBodyDirectionsConfig, DevConfigService, removeClassFromOrigin, WithConfig } from 'ng-devui/utils';
import { fromEvent, of, Subject } from 'rxjs';
import { debounceTime, filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { AutoCompleteConfig } from './auto-complete-config';
import { AutoCompletePopupComponent } from './auto-complete-popup.component';
import * as i0 from "@angular/core";
import * as i1 from "./auto-complete-config";
import * as i2 from "ng-devui/position";
import * as i3 from "ng-devui/i18n";
import * as i4 from "ng-devui/utils";
export class AutoCompleteDirective {
    constructor(autoCompleteConfig, elementRef, viewContainerRef, componentFactoryResolver, renderer, injector, positionService, changeDetectorRef, i18n, devConfigService) {
        this.autoCompleteConfig = autoCompleteConfig;
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        this.injector = injector;
        this.positionService = positionService;
        this.changeDetectorRef = changeDetectorRef;
        this.i18n = i18n;
        this.devConfigService = devConfigService;
        this.autocomplete = 'off';
        this.autocapitalize = 'off';
        this.autocorrect = 'off';
        this.delay = 300;
        this.appendToBody = false;
        this.appendToBodyDirections = ['rightDown', 'leftDown', 'rightUp', 'leftUp'];
        this.cdkOverlayOffsetY = 0; // 内部使用不开放
        this.sceneType = ''; // sceneType使用场景：select(下拉框) suggest(联想)
        this.tipsText = ''; // 提示文字
        this.maxHeight = 300;
        this.showAnimation = true;
        /**
         *  【可选】启用数据懒加载，默认不启用
         */
        this.enableLazyLoad = false;
        this.allowEmptyValueSearch = false; // 在value为空时，是否允许进行搜索
        this.loadMore = new EventEmitter();
        this.selectValue = new EventEmitter();
        this.transInputFocusEmit = new EventEmitter(); // input状态传给父组件函数
        /**
         * @deprecated
         */
        this.changeDropDownStatus = new EventEmitter();
        this.toggleChange = new EventEmitter();
        this.KEYBOARD_EVENT_NOT_REFRESH = ['escape', 'enter', 'arrowup', 'arrowdown', /* ie 10 edge */ 'esc', 'up', 'down'];
        this.destroy$ = new Subject();
        this.popTipsText = '';
        this.focus = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
    }
    set isSearching(isSearching) {
        if (this.popupRef && this.searchingTemplate) {
            const pop = this.popupRef.instance;
            pop.isSearching = isSearching;
            pop.searchingTemplate = this.searchingTemplate;
            if (isSearching) {
                pop.isOpen = true;
            }
        }
    }
    ngOnInit() {
        this.init();
        this.setI18nText();
        this.valueChanges = this.registerInputEvent(this.elementRef);
        // 调用时机：input keyup
        this.subscription = this.valueChanges.subscribe((source) => this.onSourceChange(source));
        // 动态的创建了popup组件，
        const factory = this.componentFactoryResolver.resolveComponentFactory(AutoCompletePopupComponent);
        this.popupRef = this.viewContainerRef.createComponent(factory, this.viewContainerRef.length, this.injector);
        this.fillPopup(this.source);
        if (!this.searchFn) {
            this.searchFn = (term) => {
                return of(this.source.filter((item) => this.formatter(item).toLowerCase().indexOf(term.toLowerCase()) !== -1));
            };
        }
        // 调用时机：选中回车或者鼠标单击下拉选项
        this.popupRef.instance.registerOnChange((item) => {
            if (item.type === 'loadMore') {
                this.loadMore.emit(item.value);
                return;
            }
            const value = this.valueParser(item.value);
            this.writeValue(value);
            this.onChange(value);
            this.hidePopup();
            this.selectValue.emit(item.value);
            if (this.overview && this.overview !== 'single') {
                setTimeout(() => {
                    // 这里稍微延迟一下，等待光标的位置发生变化，好重新获取光标的位置
                    this.restLatestSource();
                }, 0);
            }
        });
        this.setPositions();
    }
    ngOnChanges(changes) {
        if (changes && this.popupRef && changes.source) {
            this.fillPopup(this.source);
        }
        if (changes['appendToBodyDirections']) {
            this.setPositions();
        }
    }
    init() {
        this.minLength = this.minLength ?? this.autoCompleteConfig.autoComplete.minLength;
        this.itemTemplate = this.itemTemplate || this.autoCompleteConfig.autoComplete.itemTemplate;
        this.noResultItemTemplate = this.noResultItemTemplate || this.autoCompleteConfig.autoComplete.noResultItemTemplate;
        this.formatter = this.formatter || this.autoCompleteConfig.autoComplete.formatter;
        this.valueParser = this.valueParser || this.autoCompleteConfig.autoComplete.valueParser;
    }
    setPositions() {
        if (this.popupRef) {
            this.popupRef.instance.overlayPositions =
                this.appendToBodyDirections && this.appendToBodyDirections.length > 0
                    ? this.appendToBodyDirections
                        .map((position) => {
                        if (typeof position === 'string') {
                            return AppendToBodyDirectionsConfig[position];
                        }
                        else {
                            return position;
                        }
                    })
                        .filter((position) => position !== undefined)
                    : undefined;
        }
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().autoComplete;
        // this.i18nLang = this.i18n.getI18nText().locale; // 如果需要获取当前语言
        this.i18n
            .langChange()
            .pipe(takeUntil(this.destroy$))
            .subscribe((data) => {
            this.i18nText = data.autoComplete;
            // this.i18nLang = data.locale; // 如果需要获取当前语言
        });
    }
    restLatestSource() {
        if (this.latestSource && this.latestSource.length > 0) {
            this.writeValue('');
            this.clearInputValue();
            this.showLatestSource();
        }
    }
    // 调用时机：input keyup
    onSourceChange(source) {
        if (!this.elementRef.nativeElement.value) {
            if (this.sceneType !== 'select' && !this.allowEmptyValueSearch) {
                // 下拉场景不展示最近输入
                this.showLatestSource();
            }
            else {
                this.showSource(source, true, true);
            }
        }
        else {
            this.showSource(source, true, true);
        }
    }
    showLatestSource() {
        let tempSource = [];
        if (this.latestSource && this.latestSource.length > 0) {
            this.searchFn('').subscribe((source) => {
                const t = this.latestSource;
                tempSource = t.filter((data) => {
                    if (!data.label) {
                        return source.find((item) => item === data);
                    }
                    else {
                        return source.find((item) => item.label === data.label);
                    }
                });
                const pop = this.popupRef.instance;
                pop.reset();
                this.popTipsText = this.i18nText.latestInput;
                this.fillPopup(tempSource);
                this.openPopup();
                this.changeDetectorRef.markForCheck();
                this.updatePosition();
            });
        }
        if (tempSource.length <= 0) {
            this.hidePopup();
        }
    }
    showSource(source, setOpen, isReset) {
        if ((source && source.length) || this.noResultItemTemplate) {
            const pop = this.popupRef.instance;
            if (isReset) {
                pop.reset();
            }
            this.popTipsText = this.tipsText || '';
            this.fillPopup(source, this.value);
            if (setOpen) {
                this.openPopup();
            }
            this.changeDetectorRef.markForCheck();
            this.updatePosition();
        }
        else {
            this.hidePopup();
        }
    }
    updatePosition() {
        if (this.appendToBody) {
            setTimeout(() => {
                if (this.popupRef.instance.connectedOverlay && this.popupRef.instance.connectedOverlay.overlayRef) {
                    this.popupRef.instance.connectedOverlay.overlayRef.updatePosition();
                }
            });
        }
    }
    openPopup(activeIndex = 0) {
        this.popupRef.instance.activeIndex = activeIndex;
        this.popupRef.instance.isOpen = true;
        this.popupRef.instance.disabled = this.disabled;
        addClassToOrigin(this.elementRef);
        this.changeDropDownStatus.emit(true);
        this.toggleChange.emit(true);
    }
    writeValue(obj) {
        this.value = this.formatter(obj) || '';
        this.writeInputValue(this.value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
        if (this.popupRef) {
            this.popupRef.instance.setDisabledState(isDisabled);
        }
    }
    ngOnDestroy() {
        this.unSubscription();
        this.destroy$.next();
        this.destroy$.complete();
    }
    onFocus($event) {
        this.focus = true;
        this.transInputFocusEmit.emit({
            focus: true,
            popupRef: this.popupRef,
        });
        const isOpen = this.sceneType !== 'select';
        if (this.sceneType === 'select') {
            this.searchFn('').subscribe((source) => {
                this.showSource(source, isOpen, false);
            });
        }
    }
    onBlur($event) {
        this.focus = false;
        // this.hidePopup();    // TODO: 直接做失焦关闭，与点击操作将有冲突，存在click未完成已经blur，这个改动需要考虑
        this.onTouched();
    }
    onEscKeyup($event) {
        this.hidePopup();
    }
    onEnterKeyDown($event) {
        if (!this.popupRef.instance.source || !this.popupRef.instance.isOpen) {
            return;
        }
        if (this.popupRef) {
            this.popupRef.instance.selectCurrentItem($event);
        }
    }
    onArrowUpKeyDown($event) {
        if (this.popupRef) {
            $event.preventDefault();
            $event.stopPropagation();
            this.popupRef.instance.prev();
        }
    }
    onArrowDownKeyDown($event) {
        if (this.popupRef) {
            $event.preventDefault();
            $event.stopPropagation();
            this.popupRef.instance.next();
        }
    }
    onDocumentClick($event) {
        if (this.focus) {
            this.transInputFocusEmit.emit({
                focus: this.focus,
                popupRef: this.popupRef,
            });
        }
        // TODO: sceneType为'select'时，自定义了太多处理，十分不优雅，需要合一化
        const hostElement = this.elementRef.nativeElement;
        if (this.popupRef && this.popupRef.instance.isOpen) {
            if ((!hostElement.contains($event.target) && this.sceneType === 'select') || this.sceneType !== 'select') {
                this.hidePopup();
            }
            if (!hostElement.contains($event.target)) {
                this.transInputFocusEmit.emit({
                    focus: false,
                    popupRef: this.popupRef,
                });
            }
        }
        else if (hostElement.contains($event.target) && this.sceneType !== 'select') {
            if (!this.elementRef.nativeElement.value && !this.allowEmptyValueSearch) {
                this.showLatestSource();
            }
            else {
                this.searchFn(this.elementRef.nativeElement.value).subscribe((source) => {
                    this.showSource(source, true, false);
                });
            }
        }
    }
    hidePopup() {
        if (this.popupRef) {
            this.popupRef.instance.isOpen = false;
            removeClassFromOrigin(this.elementRef);
            this.changeDropDownStatus.emit(false);
            this.toggleChange.emit(false);
        }
    }
    fillPopup(source, term) {
        this.position = this.positionService.position(this.elementRef.nativeElement);
        const pop = this.popupRef.instance;
        pop.source = source;
        pop.maxHeight = this.maxHeight;
        pop.term = term;
        pop.disabledKey = this.disabledKey;
        pop.enableLazyLoad = this.enableLazyLoad;
        pop.disabled = this.disabled;
        if (this.appendToBody) {
            pop.appendToBody = true;
            pop.origin = new CdkOverlayOrigin(this.elementRef);
            pop.width = this.dAutoCompleteWidth ? this.dAutoCompleteWidth : this.elementRef.nativeElement.offsetWidth;
            pop.cdkOverlayOffsetY = this.cdkOverlayOffsetY;
        }
        else {
            pop.appendToBody = false;
        }
        [
            'formatter',
            'itemTemplate',
            'noResultItemTemplate',
            'cssClass',
            'dropdown',
            'popTipsText',
            'position',
            'overview',
            'showAnimation',
        ].forEach((key) => {
            if (this[key] !== undefined) {
                pop[key] = this[key];
            }
        });
    }
    writeInputValue(value) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);
    }
    clearInputValue() {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', '');
    }
    unSubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    onTermChange(term) {
        this.value = term;
        if (this.popupRef) {
            this.popupRef.instance.term = term;
        }
        this.onChange(term);
    }
    registerInputEvent(elementRef) {
        return fromEvent(elementRef.nativeElement, 'input').pipe(map((e) => e.target.value), filter((term) => !this.disabled && this.searchFn && term.length >= 0), debounceTime(this.delay), tap((term) => this.onTermChange(term)), switchMap((term) => this.searchFn(term, this)));
    }
}
AutoCompleteDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AutoCompleteDirective, deps: [{ token: i1.AutoCompleteConfig }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Renderer2 }, { token: i0.Injector }, { token: i2.PositionService }, { token: i0.ChangeDetectorRef }, { token: i3.I18nService }, { token: i4.DevConfigService }], target: i0.ɵɵFactoryTarget.Directive });
AutoCompleteDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: AutoCompleteDirective, selector: "[dAutoComplete]", inputs: { disabled: "disabled", cssClass: "cssClass", delay: "delay", minLength: "minLength", itemTemplate: "itemTemplate", noResultItemTemplate: "noResultItemTemplate", searchingTemplate: "searchingTemplate", isSearching: "isSearching", appendToBody: "appendToBody", appendToBodyDirections: "appendToBodyDirections", cdkOverlayOffsetY: "cdkOverlayOffsetY", dAutoCompleteWidth: "dAutoCompleteWidth", formatter: "formatter", sceneType: "sceneType", tipsText: "tipsText", overview: "overview", latestSource: "latestSource", source: "source", valueParser: "valueParser", searchFn: "searchFn", dropdown: "dropdown", maxHeight: "maxHeight", disabledKey: "disabledKey", showAnimation: "showAnimation", enableLazyLoad: "enableLazyLoad", allowEmptyValueSearch: "allowEmptyValueSearch" }, outputs: { loadMore: "loadMore", selectValue: "selectValue", transInputFocusEmit: "transInputFocusEmit", changeDropDownStatus: "changeDropDownStatus", toggleChange: "toggleChange" }, host: { listeners: { "focus": "onFocus($event)", "blur": "onBlur($event)", "keydown.esc": "onEscKeyup($event)", "keydown.Enter": "onEnterKeyDown($event)", "keydown.ArrowUp": "onArrowUpKeyDown($event)", "keydown.ArrowDown": "onArrowDownKeyDown($event)", "document:click": "onDocumentClick($event)" }, properties: { "attr.autocomplete": "this.autocomplete", "attr.autocapitalize": "this.autocapitalize", "attr.autocorrect": "this.autocorrect" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => AutoCompleteDirective),
            multi: true,
        },
    ], exportAs: ["autoComplete"], usesOnChanges: true, ngImport: i0 });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], AutoCompleteDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AutoCompleteDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dAutoComplete]',
                    exportAs: 'autoComplete',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => AutoCompleteDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.AutoCompleteConfig }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Renderer2 }, { type: i0.Injector }, { type: i2.PositionService }, { type: i0.ChangeDetectorRef }, { type: i3.I18nService }, { type: i4.DevConfigService }]; }, propDecorators: { autocomplete: [{
                type: HostBinding,
                args: ['attr.autocomplete']
            }], autocapitalize: [{
                type: HostBinding,
                args: ['attr.autocapitalize']
            }], autocorrect: [{
                type: HostBinding,
                args: ['attr.autocorrect']
            }], disabled: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], delay: [{
                type: Input
            }], minLength: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }], noResultItemTemplate: [{
                type: Input
            }], searchingTemplate: [{
                type: Input
            }], isSearching: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], appendToBodyDirections: [{
                type: Input
            }], cdkOverlayOffsetY: [{
                type: Input
            }], dAutoCompleteWidth: [{
                type: Input
            }], formatter: [{
                type: Input
            }], sceneType: [{
                type: Input
            }], tipsText: [{
                type: Input
            }], overview: [{
                type: Input
            }], latestSource: [{
                type: Input
            }], source: [{
                type: Input
            }], valueParser: [{
                type: Input
            }], searchFn: [{
                type: Input
            }], dropdown: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], disabledKey: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], enableLazyLoad: [{
                type: Input
            }], allowEmptyValueSearch: [{
                type: Input
            }], loadMore: [{
                type: Output
            }], selectValue: [{
                type: Output
            }], transInputFocusEmit: [{
                type: Output
            }], changeDropDownStatus: [{
                type: Output
            }], toggleChange: [{
                type: Output
            }], onFocus: [{
                type: HostListener,
                args: ['focus', ['$event']]
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }], onEscKeyup: [{
                type: HostListener,
                args: ['keydown.esc', ['$event']]
            }], onEnterKeyDown: [{
                type: HostListener,
                args: ['keydown.Enter', ['$event']]
            }], onArrowUpKeyDown: [{
                type: HostListener,
                args: ['keydown.ArrowUp', ['$event']]
            }], onArrowDownKeyDown: [{
                type: HostListener,
                args: ['keydown.ArrowDown', ['$event']]
            }], onDocumentClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,