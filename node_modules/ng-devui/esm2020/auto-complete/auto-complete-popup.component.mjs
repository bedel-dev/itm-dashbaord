import { CdkConnectedOverlay, CdkOverlayOrigin } from '@angular/cdk/overlay';
import { Component, ElementRef, Input, TemplateRef, ViewChild } from '@angular/core';
import { fadeInOut } from 'ng-devui/utils';
import { AutoCompleteConfig } from './auto-complete-config';
import * as i0 from "@angular/core";
import * as i1 from "./auto-complete-config";
import * as i2 from "ng-devui/utils";
import * as i3 from "@angular/common";
import * as i4 from "@angular/cdk/overlay";
import * as i5 from "ng-devui/loading";
export class AutoCompletePopupComponent {
    constructor(autoCompleteConfig, elementRef) {
        this.autoCompleteConfig = autoCompleteConfig;
        this.elementRef = elementRef;
        this.maxHeight = 300;
        this.disabled = false;
        this.isSearching = false;
        this.appendToBody = false;
        this.cdkOverlayOffsetY = 0;
        this.showAnimation = true;
        this.activeIndex = 0;
        this.hoverIndex = 0;
        this.labelMinHeight = 20; // position.top小于20px时候，表示光标在第一行
        this.showLoading = false;
        this.popPosition = 'bottom';
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.formatter = this.autoCompleteConfig.autoComplete.formatter;
    }
    writeValue(obj) {
        this.value = obj;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    onSelect(event, item) {
        if (this.disabledKey && item && item[this.disabledKey]) {
            event.preventDefault();
            event.stopPropagation();
            return;
        }
        if (this.overview === 'single') {
            // 单选场景和单行场景不需要冒泡
            event.preventDefault();
            event.stopPropagation();
        }
        this.value = item;
        this.onTouched();
        this.onChange({ type: 'select', value: this.value });
    }
    selectCurrentItem(event) {
        this.activeIndex = this.hoverIndex;
        this.onSelect(event, this.source[this.hoverIndex]);
    }
    onActiveIndexChange(index) {
        this.activeIndex = index;
    }
    reset() {
        this.activeIndex = 0;
        this.hoverIndex = 0;
    }
    scrollToActive(index) {
        const that = this;
        setTimeout(() => {
            const scrollIndex = index === undefined ? this.activeIndex : index;
            const selectIndex = scrollIndex;
            const scrollPane = that.dropdownUl.nativeElement.children[selectIndex];
            if (scrollPane.scrollIntoViewIfNeeded) {
                scrollPane.scrollIntoViewIfNeeded(false);
            }
            else {
                const containerInfo = that.dropdownUl.nativeElement.getBoundingClientRect();
                const elementInfo = scrollPane.getBoundingClientRect();
                if (elementInfo.bottom > containerInfo.bottom || elementInfo.top < containerInfo.top) {
                    scrollPane.scrollIntoView(false);
                }
            }
        });
    }
    next() {
        if (this.isOpen && this.source && this.source.length) {
            if (this.hoverIndex === this.source.length - 1) {
                this.hoverIndex = 0;
                this.scrollToActive(this.hoverIndex);
                return;
            }
            this.hoverIndex = this.hoverIndex + 1;
            this.scrollToActive(this.hoverIndex);
        }
    }
    prev() {
        if (this.isOpen && this.source && this.source.length) {
            if (this.hoverIndex === 0) {
                this.hoverIndex = this.source.length - 1;
                this.scrollToActive(this.hoverIndex);
                return;
            }
            this.hoverIndex = this.hoverIndex - 1;
            this.scrollToActive(this.hoverIndex);
        }
    }
    trackByFn(index, item) {
        return index;
    }
    animationEnd($event) {
        if (!this.isOpen && this.selectMenuElement) {
            const targetElement = this.selectMenuElement.nativeElement;
            setTimeout(() => {
                targetElement.style.display = 'none';
            });
        }
    }
    loadMoreEvent($event) {
        this.showLoading = true;
        this.onChange({ type: 'loadMore', value: this });
    }
    loadFinish($event) {
        this.showLoading = false;
    }
    onPositionChange(position) {
        this.popPosition = position.connectionPair.originY;
    }
}
AutoCompletePopupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AutoCompletePopupComponent, deps: [{ token: i1.AutoCompleteConfig }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
AutoCompletePopupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: AutoCompletePopupComponent, selector: "d-auto-complete-popup", inputs: { width: "width", cssClass: "cssClass", maxHeight: "maxHeight", disabled: "disabled", disabledKey: "disabledKey", source: "source", position: "position", isOpen: "isOpen", term: "term", popTipsText: "popTipsText", overview: "overview", itemTemplate: "itemTemplate", noResultItemTemplate: "noResultItemTemplate", searchingTemplate: "searchingTemplate", isSearching: "isSearching", formatter: "formatter", dropdown: "dropdown", selectWidth: "selectWidth", enableLazyLoad: "enableLazyLoad", appendToBody: "appendToBody", cdkOverlayOffsetY: "cdkOverlayOffsetY", origin: "origin", showAnimation: "showAnimation" }, viewQueries: [{ propertyName: "selectMenuElement", first: true, predicate: ["selectMenuElement"], descendants: true }, { propertyName: "dropdownUl", first: true, predicate: ["dropdownUl"], descendants: true }, { propertyName: "connectedOverlay", first: true, predicate: CdkConnectedOverlay, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"appendToBody\">\n  <ng-template\n    cdk-connected-overlay\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayWidth]=\"width\"\n    [cdkConnectedOverlayOpen]=\"isOpen && !disabled\"\n    [cdkConnectedOverlayOffsetY]=\"cdkOverlayOffsetY\"\n    [cdkConnectedOverlayPositions]=\"overlayPositions\"\n    (positionChange)=\"onPositionChange($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"popTpl\"> </ng-template>\n  </ng-template>\n</ng-container>\n\n<ng-container *ngIf=\"!appendToBody\">\n  <ng-template [ngTemplateOutlet]=\"popTpl\"> </ng-template>\n</ng-container>\n\n<ng-template #popTpl>\n  <div\n    class=\"devui-dropdown-menu\"\n    [ngClass]=\"{ 'devui-dropdown-menu-cdk': appendToBody }\"\n    [style.display]=\"isOpen && (source?.length || noResultItemTemplate) && !disabled ? 'inline-block' : 'none'\"\n    [style.top]=\"overview === 'multiline' ? (position?.top < labelMinHeight ? '50%' : '100%') : '100%'\"\n    [style.left]=\"overview === 'multiline' ? position?.left + 'px' : '0'\"\n    [@fadeInOut]=\"isOpen && !disabled ? (appendToBody ? popPosition : 'bottom') : 'void'\"\n    (@fadeInOut.done)=\"animationEnd($event)\"\n    [@.disabled]=\"!showAnimation\"\n    #selectMenuElement\n    dLoading\n    [showLoading]=\"showLoading\"\n    [backdrop]=\"true\"\n  >\n    <ul\n      class=\"devui-list-unstyled devui-scrollbar scroll-height\"\n      [style.maxHeight]=\"maxHeight + 'px'\"\n      dLazyLoad\n      [enableLazyLoad]=\"enableLazyLoad\"\n      (loadMore)=\"loadMoreEvent($event)\"\n      #dropdownUl\n    >\n      <ng-container *ngIf=\"!isSearching || !searchingTemplate\">\n        <li *ngIf=\"popTipsText && popTipsText.length > 0\" class=\"devui-popup-tips\">\n          {{ popTipsText }}\n        </li>\n        <li\n          *ngFor=\"let item of source; let $index = index; trackBy: trackByFn\"\n          class=\"devui-dropdown-item\"\n          [title]=\"formatter(item)\"\n          [ngClass]=\"{\n            selected: $index == activeIndex,\n            'devui-dropdown-bg': $index == hoverIndex,\n            disabled: disabledKey && item[disabledKey]\n          }\"\n          (click)=\"onSelect($event, item)\"\n        >\n          <ng-template\n            [ngTemplateOutlet]=\"itemTemplate || defaultItemTemplate\"\n            [ngTemplateOutletContext]=\"{\n              formatter: formatter,\n              term: term,\n              source: source,\n              item: item,\n              $index: $index\n            }\"\n          >\n          </ng-template>\n        </li>\n        <div class=\"devui-no-data-tip\" *ngIf=\"!source?.length && noResultItemTemplate\">\n          <ng-template [ngTemplateOutlet]=\"noResultItemTemplate\" [ngTemplateOutletContext]=\"{ term: term, source: source }\"> </ng-template>\n        </div>\n      </ng-container>\n      <div class=\"devui-no-data-tip\" *ngIf=\"isSearching && searchingTemplate\">\n        <ng-template [ngTemplateOutlet]=\"searchingTemplate\" [ngTemplateOutletContext]=\"{ term: term }\"> </ng-template>\n      </div>\n    </ul>\n  </div>\n</ng-template>\n\n<ng-template #defaultItemTemplate let-item=\"item\" let-term=\"term\">\n  <d-highlight [value]=\"formatter(item)\" [term]=\"term\"></d-highlight>\n</ng-template>\n", styles: [".devui-dropdown-menu{width:100%;display:block}.devui-dropdown-menu-cdk{position:static}ul.devui-list-unstyled{margin:0}.devui-popup-tips{color:#575d6c;color:var(--devui-text-weak, #575d6c);padding:4px 12px}\n"], components: [{ type: i2.HighlightComponent, selector: "d-highlight", inputs: ["value", "term", "highlightClass"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.LoadingDirective, selector: "[dLoading]", inputs: ["message", "backdrop", "loadingTemplateRef", "positionType", "view", "showLoading", "loading", "zIndex"], exportAs: ["dLoading"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.LazyLoadDirective, selector: "[dLazyLoad]", inputs: ["enableLazyLoad", "contentMode", "target", "imgLoadSrc"], outputs: ["loadMore"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], animations: [fadeInOut] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AutoCompletePopupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-auto-complete-popup', animations: [fadeInOut], preserveWhitespaces: false, template: "<ng-container *ngIf=\"appendToBody\">\n  <ng-template\n    cdk-connected-overlay\n    [cdkConnectedOverlayOrigin]=\"origin\"\n    [cdkConnectedOverlayWidth]=\"width\"\n    [cdkConnectedOverlayOpen]=\"isOpen && !disabled\"\n    [cdkConnectedOverlayOffsetY]=\"cdkOverlayOffsetY\"\n    [cdkConnectedOverlayPositions]=\"overlayPositions\"\n    (positionChange)=\"onPositionChange($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"popTpl\"> </ng-template>\n  </ng-template>\n</ng-container>\n\n<ng-container *ngIf=\"!appendToBody\">\n  <ng-template [ngTemplateOutlet]=\"popTpl\"> </ng-template>\n</ng-container>\n\n<ng-template #popTpl>\n  <div\n    class=\"devui-dropdown-menu\"\n    [ngClass]=\"{ 'devui-dropdown-menu-cdk': appendToBody }\"\n    [style.display]=\"isOpen && (source?.length || noResultItemTemplate) && !disabled ? 'inline-block' : 'none'\"\n    [style.top]=\"overview === 'multiline' ? (position?.top < labelMinHeight ? '50%' : '100%') : '100%'\"\n    [style.left]=\"overview === 'multiline' ? position?.left + 'px' : '0'\"\n    [@fadeInOut]=\"isOpen && !disabled ? (appendToBody ? popPosition : 'bottom') : 'void'\"\n    (@fadeInOut.done)=\"animationEnd($event)\"\n    [@.disabled]=\"!showAnimation\"\n    #selectMenuElement\n    dLoading\n    [showLoading]=\"showLoading\"\n    [backdrop]=\"true\"\n  >\n    <ul\n      class=\"devui-list-unstyled devui-scrollbar scroll-height\"\n      [style.maxHeight]=\"maxHeight + 'px'\"\n      dLazyLoad\n      [enableLazyLoad]=\"enableLazyLoad\"\n      (loadMore)=\"loadMoreEvent($event)\"\n      #dropdownUl\n    >\n      <ng-container *ngIf=\"!isSearching || !searchingTemplate\">\n        <li *ngIf=\"popTipsText && popTipsText.length > 0\" class=\"devui-popup-tips\">\n          {{ popTipsText }}\n        </li>\n        <li\n          *ngFor=\"let item of source; let $index = index; trackBy: trackByFn\"\n          class=\"devui-dropdown-item\"\n          [title]=\"formatter(item)\"\n          [ngClass]=\"{\n            selected: $index == activeIndex,\n            'devui-dropdown-bg': $index == hoverIndex,\n            disabled: disabledKey && item[disabledKey]\n          }\"\n          (click)=\"onSelect($event, item)\"\n        >\n          <ng-template\n            [ngTemplateOutlet]=\"itemTemplate || defaultItemTemplate\"\n            [ngTemplateOutletContext]=\"{\n              formatter: formatter,\n              term: term,\n              source: source,\n              item: item,\n              $index: $index\n            }\"\n          >\n          </ng-template>\n        </li>\n        <div class=\"devui-no-data-tip\" *ngIf=\"!source?.length && noResultItemTemplate\">\n          <ng-template [ngTemplateOutlet]=\"noResultItemTemplate\" [ngTemplateOutletContext]=\"{ term: term, source: source }\"> </ng-template>\n        </div>\n      </ng-container>\n      <div class=\"devui-no-data-tip\" *ngIf=\"isSearching && searchingTemplate\">\n        <ng-template [ngTemplateOutlet]=\"searchingTemplate\" [ngTemplateOutletContext]=\"{ term: term }\"> </ng-template>\n      </div>\n    </ul>\n  </div>\n</ng-template>\n\n<ng-template #defaultItemTemplate let-item=\"item\" let-term=\"term\">\n  <d-highlight [value]=\"formatter(item)\" [term]=\"term\"></d-highlight>\n</ng-template>\n", styles: [".devui-dropdown-menu{width:100%;display:block}.devui-dropdown-menu-cdk{position:static}ul.devui-list-unstyled{margin:0}.devui-popup-tips{color:#575d6c;color:var(--devui-text-weak, #575d6c);padding:4px 12px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AutoCompleteConfig }, { type: i0.ElementRef }]; }, propDecorators: { width: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], disabled: [{
                type: Input
            }], disabledKey: [{
                type: Input
            }], source: [{
                type: Input
            }], position: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], term: [{
                type: Input
            }], popTipsText: [{
                type: Input
            }], overview: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }], noResultItemTemplate: [{
                type: Input
            }], searchingTemplate: [{
                type: Input
            }], isSearching: [{
                type: Input
            }], formatter: [{
                type: Input
            }], dropdown: [{
                type: Input
            }], selectWidth: [{
                type: Input
            }], enableLazyLoad: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], cdkOverlayOffsetY: [{
                type: Input
            }], origin: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectMenuElement: [{
                type: ViewChild,
                args: ['selectMenuElement']
            }], dropdownUl: [{
                type: ViewChild,
                args: ['dropdownUl']
            }], connectedOverlay: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }] } });
//# sourceMappingURL=data:application/json;base64,