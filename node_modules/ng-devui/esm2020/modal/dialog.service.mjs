import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Inject, Injectable, RendererFactory2 } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { DevConfigService } from 'ng-devui/utils';
import { assign, isUndefined } from 'lodash-es';
import { ModalContainerComponent } from './modal-container.component';
import { ModalComponent } from './modal.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
import * as i2 from "ng-devui/utils";
export class DialogService {
    constructor(componentFactoryResolver, overlayContainerRef, rendererFactory, devConfigService, doc) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayContainerRef = overlayContainerRef;
        this.rendererFactory = rendererFactory;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.document = this.doc;
    }
    open({ id, width, zIndex, backDropZIndex, backdropCloseable, maxHeight, showAnimation, 
    /**
     * @deprecated
     */
    showAnimate, title, content, html, data, buttons, injector, componentFactoryResolver, beforeHidden, onClose, dialogtype = 'standard', showCloseBtn = true, draggable = true, placement = 'center', offsetX, offsetY, bodyScrollable = true, contentTemplate, escapable = true }) {
        const finalComponentFactoryResolver = componentFactoryResolver || this.componentFactoryResolver;
        const modalRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(ModalComponent), injector);
        let showAnimateValue = true;
        const componentConfig = this.devConfigService.getConfigForComponent('modal') || {};
        const configValue = componentConfig['showAnimation'];
        const apiConfig = this.devConfigService.getConfigForApi('showAnimation');
        if (configValue !== undefined) {
            showAnimateValue = configValue;
        }
        else if (apiConfig !== undefined) {
            showAnimateValue = apiConfig;
        }
        if (showAnimation === undefined) {
            if (showAnimate !== undefined) {
                showAnimation = showAnimate;
            }
            else {
                showAnimation = showAnimateValue;
            }
        }
        assign(modalRef.instance, {
            id,
            width,
            zIndex,
            backDropZIndex,
            showAnimation,
            beforeHidden,
            // set backdropCloseable default value "true" when not passing it
            backdropCloseable: isUndefined(backdropCloseable) ? true : backdropCloseable,
            draggable,
            placement,
            offsetX,
            offsetY,
            bodyScrollable,
            escapable
        });
        const modalContainerRef = modalRef.instance.modalContainerHost.viewContainerRef
            .createComponent(finalComponentFactoryResolver.resolveComponentFactory(ModalContainerComponent), 0, injector);
        assign(modalContainerRef.instance, { title, buttons, maxHeight, dialogtype, showCloseBtn });
        if (contentTemplate) {
            assign(modalContainerRef.instance, { contentTemplate });
        }
        else {
            if (typeof content === 'string') {
                assign(modalContainerRef.instance, { content, html });
            }
            else {
                this.contentRef = modalContainerRef.instance.modalContentHost.viewContainerRef
                    .createComponent(finalComponentFactoryResolver.resolveComponentFactory(content));
                assign(this.contentRef.instance, { data, dialogtype });
            }
        }
        modalContainerRef.instance.onClose = () => {
            modalRef.instance.hide();
        };
        modalRef.instance.updateButtonOptions = buttonOptions => modalContainerRef.instance.updateButtonOptions(buttonOptions);
        modalRef.instance.onHidden = () => {
            if (modalRef.instance.documentOverFlow) {
                this.renderer.removeStyle(this.document.body, 'top');
                this.renderer.removeStyle(this.document.body, 'left');
                this.renderer.removeClass(this.document.body, 'devui-body-scrollblock');
                this.renderer.removeClass(this.document.body, 'devui-body-overflow-hidden');
                this.document.documentElement.scrollTop = modalRef.instance.scrollTop;
                this.document.body.scrollTop = modalRef.instance.scrollTop;
                this.document.documentElement.scrollLeft = modalRef.instance.scrollLeft;
                this.document.body.scrollLeft = modalRef.instance.scrollLeft;
            }
            if (onClose) {
                onClose();
            }
            setTimeout(() => {
                modalRef.hostView.destroy();
            });
        };
        modalRef.instance.show();
        return {
            modalInstance: modalRef.instance,
            modalContentInstance: this.contentRef ? this.contentRef.instance : null,
        };
    }
}
DialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DialogService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1.OverlayContainerRef }, { token: i0.RendererFactory2 }, { token: i2.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
DialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DialogService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DialogService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1.OverlayContainerRef }, { type: i0.RendererFactory2 }, { type: i2.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,