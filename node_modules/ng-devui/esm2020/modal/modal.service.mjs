import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Inject, Injectable, RendererFactory2 } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { DevConfigService } from 'ng-devui/utils';
import { assign, isUndefined } from 'lodash-es';
import { ModalComponent } from './modal.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
import * as i2 from "ng-devui/utils";
export class ModalService {
    constructor(componentFactoryResolver, overlayContainerRef, rendererFactory, devConfigService, doc) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayContainerRef = overlayContainerRef;
        this.rendererFactory = rendererFactory;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.document = this.doc;
    }
    open({ id, component, injector, width, zIndex, backDropZIndex, data, handler, showAnimation, 
    /**
     * @deprecated
     */
    showAnimate, backdropCloseable, componentFactoryResolver, onClose, beforeHidden, placement = 'center', offsetX, offsetY, bodyScrollable = true, contentTemplate, escapable = true }) {
        const finalComponentFactoryResolver = componentFactoryResolver || this.componentFactoryResolver;
        const modalRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(ModalComponent), injector);
        let showAnimateValue = true;
        const componentConfig = this.devConfigService.getConfigForComponent('modal') || {};
        const configValue = componentConfig['showAnimation'];
        const apiConfig = this.devConfigService.getConfigForApi('showAnimation');
        if (configValue !== undefined) {
            showAnimateValue = configValue;
        }
        else if (apiConfig !== undefined) {
            showAnimateValue = apiConfig;
        }
        if (showAnimation === undefined) {
            if (showAnimate !== undefined) {
                showAnimation = showAnimate;
            }
            else {
                showAnimation = showAnimateValue;
            }
        }
        assign(modalRef.instance, {
            id,
            width,
            zIndex,
            backDropZIndex,
            showAnimation,
            beforeHidden,
            backdropCloseable: isUndefined(backdropCloseable) ? true : backdropCloseable,
            placement,
            offsetX,
            offsetY,
            bodyScrollable,
            contentTemplate,
            escapable
        });
        let modalContentInstance;
        if (component) {
            modalContentInstance = modalRef.instance.modalContainerHost.viewContainerRef
                .createComponent(finalComponentFactoryResolver.resolveComponentFactory(component), 0, injector);
            assign(modalContentInstance.instance, { data, handler });
        }
        modalRef.instance.onHidden = () => {
            if (modalRef.instance.documentOverFlow) {
                this.renderer.removeStyle(this.document.body, 'top');
                this.renderer.removeStyle(this.document.body, 'left');
                this.renderer.removeClass(this.document.body, 'devui-body-scrollblock');
                this.renderer.removeClass(this.document.body, 'devui-body-overflow-hidden');
                this.document.documentElement.scrollTop = modalRef.instance.scrollTop;
                this.document.body.scrollTop = modalRef.instance.scrollTop;
                this.document.documentElement.scrollLeft = modalRef.instance.scrollLeft;
                this.document.body.scrollLeft = modalRef.instance.scrollLeft;
            }
            if (onClose) {
                onClose();
            }
            setTimeout(() => {
                modalRef.hostView.destroy();
            });
        };
        modalRef.instance.show();
        return {
            modalInstance: modalRef.instance,
            modalContentInstance: modalContentInstance ? modalContentInstance.instance : null
        };
    }
}
ModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ModalService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1.OverlayContainerRef }, { token: i0.RendererFactory2 }, { token: i2.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
ModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ModalService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ModalService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1.OverlayContainerRef }, { type: i0.RendererFactory2 }, { type: i2.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,