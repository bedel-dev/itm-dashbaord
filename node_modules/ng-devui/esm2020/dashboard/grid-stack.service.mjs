import { Injectable, isDevMode } from '@angular/core';
import { GridStackDDI, Utils } from 'gridstack';
import 'gridstack/dist/h5/gridstack-dd-native';
import * as i0 from "@angular/core";
export class GridStackService {
    constructor() {
        this._itemRemoving = (el, remove) => {
            const node = el ? el.gridstackNode : undefined;
            if (!node || !node.grid) {
                return;
            }
            remove ? node['_isAboutToRemove'] = true : delete node['_isAboutToRemove'];
            remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');
        };
    }
    getDD() {
        return GridStackDDI.get();
    }
    static cleanDragIn(el) {
        if (el.classList.contains('ui-draggable')) {
            GridStackDDI.get().draggable(el, 'destroy');
        }
    }
    static isDraggable(el) {
        return Boolean(el.classList.contains('ui-draggable'));
    }
    static isDroppable(el) {
        return Boolean(el.classList.contains('ui-droppable'));
    }
    static enableDrag(el) {
        if (!GridStackService.isDraggable(el)) {
            return;
        }
        GridStackDDI.get().draggable(el, 'enable');
    }
    static disableDrag(el) {
        if (!GridStackService.isDraggable(el)) {
            return;
        }
        GridStackDDI.get().draggable(el, 'disable');
    }
    static enableDrop(el) {
        if (!GridStackService.isDroppable(el)) {
            return;
        }
        GridStackDDI.get().droppable(el, 'enable');
    }
    static disableDrop(el) {
        if (!GridStackService.isDroppable(el)) {
            return;
        }
        GridStackDDI.get().droppable(el, 'disable');
    }
    resetAcceptWidget(dashboard) {
        if (!this.gridStack) {
            if (isDevMode()) {
                console.warn('call resetAcceptWidget after gridStack init');
            }
            return;
        }
        if (this.gridStack.opts.staticGrid || !this.gridStack.opts.acceptWidgets) {
            return;
        }
        if (!this.getDD().isDroppable(this.gridStack.el)) {
            const that = this.gridStack;
            this.getDD().droppable(that.el, {
                accept: (el) => {
                    const node = el.gridstackNode;
                    // set accept drop to true on ourself (which we ignore) so we don't get "can't drop" icon in HTML5 mode while moving
                    if (node && node.grid === that) {
                        return true;
                    }
                    if (!that.opts.acceptWidgets) {
                        return false;
                    }
                    // check for accept method or class matching
                    let canAccept = true;
                    if (typeof that.opts.acceptWidgets === 'function') {
                        canAccept = that.opts.acceptWidgets(el);
                    }
                    else {
                        const selector = (that.opts.acceptWidgets === true ? '.grid-stack-item' : that.opts.acceptWidgets);
                        canAccept = el.matches(selector);
                    }
                    // finally check to make sure we actually have space left #1571
                    if (canAccept && node && that.opts.maxRow) {
                        const n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH }; // only width/height matters and autoPosition
                        canAccept = that.engine.willItFit(n);
                    }
                    return canAccept;
                },
            });
        }
        this.getDD()
            .off(this.gridStack.el, 'dropout')
            .on(this.gridStack.el, 'dropout', (event, el, helper) => {
            // 覆盖这个方法是因为 float模式下 dropout影响了原来的布局
            const that = this.gridStack;
            const node = el.gridstackNode;
            if (!node.grid || node.grid === that) {
                that['_leave'](el, helper);
            }
            this.fixFloat(that, node); // 增加了float模式下的恢复
            this.getDD().off(el, 'drag');
            return false;
        })
            .off(this.gridStack.el, 'drop')
            .on(this.gridStack.el, 'drop', (event, el, helper) => {
            // 覆盖这个方法是因为 drop的情况不想让它放进去而是只发射通知
            const that = this.gridStack;
            const node = el.gridstackNode;
            if (node && node.grid === that && !node['_isExternal']) {
                return false;
            }
            const wasAdded = !!that['placeholder'].parentElement;
            that['placeholder'].remove();
            const origNode = el['_gridstackNodeOrig'];
            delete el['_gridstackNodeOrig'];
            if (!node) {
                return false;
            }
            if (wasAdded) {
                that.engine.cleanupNode(node); // 好像没用
                node.grid = that;
            }
            if (helper !== el) {
                helper.remove();
                el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info
            }
            else {
                Utils.removePositioningStyles(el);
            }
            this.getDD().off(el, 'drag');
            that.engine.removeNode(node);
            this.fixFloat(that, node);
            that['_updateContainerHeight']();
            dashboard.handleDragInNode(node, origNode, this.dragInWidget);
        });
    }
    resetRemoveDrop(dashboard) {
        if (!this.gridStack) {
            if (isDevMode()) {
                console.warn('call resetDragDrop after gridStack init');
            }
            return;
        }
        if (!(!this.gridStack.opts.staticGrid && typeof this.gridStack.opts.removable === 'string')) {
            return;
        }
        const trashZone = document.querySelector(this.gridStack.opts.removable);
        if (!trashZone) {
            return;
        }
        if (this.getDD().isDroppable(trashZone)) {
            // 清理掉了dropover和dropout 直接重新绑定对应的逻辑
            this.getDD().off(trashZone, 'dropover').off(trashZone, 'dropout');
        }
    }
    fixFloat(gridstack, node) {
        if (gridstack.getFloat()) {
            gridstack.engine.batchUpdate();
            gridstack.engine.nodes
                .filter((n) => n !== node)
                .reverse()
                .forEach((n) => {
                if (n['_origX'] !== undefined || n['_origY'] !== undefined) {
                    n.x = n['_origX'] !== undefined ? n['_origX'] : n.x;
                    n.y = n['_origY'] !== undefined ? n['_orig&'] : n.y;
                    gridstack.engine.moveNode(n, { x: n.x, y: n.y });
                    gridstack['_writeAttrs'](n.el, n.x, n.y);
                }
            });
            gridstack.engine.commit();
        }
    }
    /* 设置新的可拖入的widget */
    setupDragIn(el, widget, helper, notify) {
        this.getDD().dragIn(el, {
            ...widget.targetDashboard.finalOption.dragInOptions,
            ...{ helper: helper || widget.targetDashboard.finalOption.dragInOptions.helper, handle: this.gridStack.opts.handle },
            ...{
                start: () => {
                    this.dragInWidget = widget;
                    if (notify) {
                        notify('dragStart')();
                    }
                },
                stop: () => {
                    this.dragInWidget = undefined;
                    if (notify) {
                        notify('dragStop')();
                    }
                },
            },
        });
    }
    destroyDragIn(el) {
        this.getDD().draggable(el, 'destroy');
    }
    /* 设置自定义的回收站 */
    setupRemoveDropArea(trashZone, dashboard, trash) {
        if (!this.gridStack) {
            if (isDevMode()) {
                console.warn('call setupRemoveDropArea after gridStack init');
            }
            return;
        }
        const trashEl = trashZone;
        this.getDD().droppable(trashEl, this.gridStack.opts.removableOptions)
            .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))
            .on(trashEl, 'dropout', (event, el) => this._itemRemoving(el, false));
    }
    /* 清理自定义的回收站 */
    destroyRemoveDropAreas(trashZone) {
        if (!this.gridStack) {
            console.warn('call destroyRemoveDropAreas after gridStack init');
            return;
        }
        const that = this.gridStack;
        if (!this.getDD().isDroppable(trashZone)) {
            return;
        }
        this.getDD().off(trashZone, 'dropover').off(trashZone, 'dropout').off(trashZone, 'drop');
    }
    // 设置背景
    updateBackgroundGridBlock() {
        if (this.gridStack) {
            if (!this.lastStyleSheet) {
                this.lastStyleSheet = Utils.createStylesheet('d-dashboard-' + this.gridStack.opts['_styleSheetClass'], this.gridStack.el.parentElement);
            }
            else {
                this.lastStyleSheet.removeRule(0);
            }
            const column = this.gridStack.opts.column;
            const margin = this.gridStack.opts.margin;
            const marginUnit = this.gridStack.opts.marginUnit;
            const cellHeight = this.gridStack.opts.cellHeight;
            const cellHeightUnit = this.gridStack.opts.cellHeightUnit;
            const prefix = `.${this.gridStack.opts['_styleSheetClass']}`;
            if (!this.lastStyleSheet) {
                return;
            }
            Utils.addCSSRule(this.lastStyleSheet, `${prefix}.d-dashboard-show-grid-block::before`, `
      background-image:
        linear-gradient(#fff 0, #fff ${margin * 2}${marginUnit},
          transparent ${margin * 2}${marginUnit}, transparent 100%),
        linear-gradient(90deg, #fff 0, #fff ${margin * 2}${marginUnit},
          transparent ${margin * 2}${marginUnit}, transparent 100%),
        linear-gradient(#f8f8f8 0 , #f8f8f8 100%);
      background-image:
        linear-gradient(var(--devui-base-bg, #fff) 0, var(--devui-base-bg, #fff) ${margin * 2}${marginUnit},
          transparent ${margin * 2}${marginUnit}, transparent 100%),
        linear-gradient(90deg, var(--devui-base-bg, #fff) 0, var(--devui-base-bg, #fff) ${margin * 2}${marginUnit},
          transparent ${margin * 2}${marginUnit}, transparent 100%),
        linear-gradient(var(--devui-area, #f8f8f8) 0 , var(--devui-area, #f8f8f8) 100%);
      background-size: ${100 / column}% ${cellHeight}${cellHeightUnit};
      background-position: -${margin}${marginUnit} -${margin}${marginUnit};
      `);
            this.lastColumn = column;
        }
    }
    setBackgroundGridBlockIfColumnChange() {
        if (this.gridStack?.opts?.column !== this.lastColumn) {
            this.updateBackgroundGridBlock();
        }
    }
    removeBackgroundGridBlockStyleSheet() {
        if (this.lastStyleSheet) {
            Utils.removeStylesheet('d-dashboard-' + this.gridStack.opts['_class']);
        }
    }
}
GridStackService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GridStackService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
GridStackService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GridStackService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GridStackService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,