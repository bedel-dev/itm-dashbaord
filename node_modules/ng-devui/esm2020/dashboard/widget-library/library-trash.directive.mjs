import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import { DashboardComponent } from '../dashboard.component';
import { GridStackService } from '../grid-stack.service';
import * as i0 from "@angular/core";
export class DashboardLibraryTrashDirective {
    constructor(el) {
        this.el = el;
        this.dropDisabled = false;
        this.hostBinding = true;
        this.isSetup = false;
    }
    get gridStackService() {
        return this.targetDashboard?.gridStackService;
    }
    ngAfterViewInit() {
        this.setup();
    }
    ngOnChanges(changes) {
        if (changes.targetDashBoard) {
            this.setup();
        }
        if (changes.dropDisabled) {
            if (this.dropDisabled) {
                GridStackService.disableDrop(this.el.nativeElement);
            }
            else {
                GridStackService.enableDrop(this.el.nativeElement);
            }
        }
    }
    ngOnDestroy() {
        if (this.gridStackService && this.isSetup) {
            this.gridStackService.destroyRemoveDropAreas(this.el.nativeElement);
        }
    }
    setup() {
        if (this.targetDashboard && !this.isSetup) {
            setTimeout(() => {
                if (this.gridStackService) {
                    this.gridStackService.setupRemoveDropArea(this.el.nativeElement, this.targetDashboard, this);
                    if (this.dropDisabled) {
                        GridStackService.disableDrop(this.el.nativeElement);
                    }
                }
            });
            this.isSetup = true;
        }
    }
}
DashboardLibraryTrashDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DashboardLibraryTrashDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
DashboardLibraryTrashDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DashboardLibraryTrashDirective, selector: "[dDashboardLibraryTrash]", inputs: { targetDashboard: "targetDashboard", trashData: "trashData", dropDisabled: "dropDisabled" }, host: { properties: { "class.grid-stack-library-trash": "this.hostBinding" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DashboardLibraryTrashDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDashboardLibraryTrash]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { targetDashboard: [{
                type: Input
            }], trashData: [{
                type: Input
            }], dropDisabled: [{
                type: Input
            }], hostBinding: [{
                type: HostBinding,
                args: ['class.grid-stack-library-trash']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS10cmFzaC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZ1aS9kYXNoYm9hcmQvd2lkZ2V0LWxpYnJhcnkvbGlicmFyeS10cmFzaC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQXVDLE1BQU0sZUFBZSxDQUFDO0FBQzlILE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUt6RCxNQUFNLE9BQU8sOEJBQThCO0lBY3pDLFlBQXFCLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBWDFCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBRzlCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBRW5CLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFNc0IsQ0FBQztJQUp2QyxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUM7SUFDaEQsQ0FBQztJQUdELGVBQWU7UUFDYixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBQ0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtRQUNELElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN4QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JCLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3BEO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDekMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDekMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzdGLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTt3QkFDckIsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7cUJBQ3JEO2lCQUNGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNILENBQUM7OzJIQWpEVSw4QkFBOEI7K0dBQTlCLDhCQUE4QjsyRkFBOUIsOEJBQThCO2tCQUgxQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3JDO2lHQUVVLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUdOLFdBQVc7c0JBRFYsV0FBVzt1QkFBQyxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhc2hib2FyZENvbXBvbmVudCB9IGZyb20gJy4uL2Rhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JpZFN0YWNrU2VydmljZSB9IGZyb20gJy4uL2dyaWQtc3RhY2suc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkRGFzaGJvYXJkTGlicmFyeVRyYXNoXScsXG59KVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZExpYnJhcnlUcmFzaERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgdGFyZ2V0RGFzaGJvYXJkOiBEYXNoYm9hcmRDb21wb25lbnQ7XG4gIEBJbnB1dCgpIHRyYXNoRGF0YTtcbiAgQElucHV0KCkgZHJvcERpc2FibGVkID0gZmFsc2U7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ncmlkLXN0YWNrLWxpYnJhcnktdHJhc2gnKVxuICBob3N0QmluZGluZyA9IHRydWU7XG5cbiAgaXNTZXR1cCA9IGZhbHNlO1xuXG4gIGdldCBncmlkU3RhY2tTZXJ2aWNlKCkge1xuICAgIHJldHVybiB0aGlzLnRhcmdldERhc2hib2FyZD8uZ3JpZFN0YWNrU2VydmljZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zZXR1cCgpO1xuICB9XG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy50YXJnZXREYXNoQm9hcmQpIHtcbiAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXMuZHJvcERpc2FibGVkKSB7XG4gICAgICBpZiAodGhpcy5kcm9wRGlzYWJsZWQpIHtcbiAgICAgICAgR3JpZFN0YWNrU2VydmljZS5kaXNhYmxlRHJvcCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgR3JpZFN0YWNrU2VydmljZS5lbmFibGVEcm9wKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZ3JpZFN0YWNrU2VydmljZSAmJiB0aGlzLmlzU2V0dXApIHtcbiAgICAgIHRoaXMuZ3JpZFN0YWNrU2VydmljZS5kZXN0cm95UmVtb3ZlRHJvcEFyZWFzKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgc2V0dXAoKSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0RGFzaGJvYXJkICYmICF0aGlzLmlzU2V0dXApIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5ncmlkU3RhY2tTZXJ2aWNlKSB7XG4gICAgICAgICAgdGhpcy5ncmlkU3RhY2tTZXJ2aWNlLnNldHVwUmVtb3ZlRHJvcEFyZWEodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLnRhcmdldERhc2hib2FyZCwgdGhpcyk7XG4gICAgICAgICAgaWYgKHRoaXMuZHJvcERpc2FibGVkKSB7XG4gICAgICAgICAgICBHcmlkU3RhY2tTZXJ2aWNlLmRpc2FibGVEcm9wKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaXNTZXR1cCA9IHRydWU7XG4gICAgfVxuICB9XG59XG4iXX0=