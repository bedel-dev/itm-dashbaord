import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, HostBinding, Injector, Input, Optional, TemplateRef, ViewContainerRef } from '@angular/core';
import { DashboardComponent } from '../dashboard.component';
import { GridStackService } from '../grid-stack.service';
import { DashboardLibraryPanelDirective } from '../widget-library/library-panel.directive';
import * as i0 from "@angular/core";
import * as i1 from "../widget-library/library-panel.directive";
export class DashboardLibraryWidgetDirective {
    constructor(el, cfr, appRef, injector, vcf, libraryPanel) {
        this.el = el;
        this.cfr = cfr;
        this.appRef = appRef;
        this.injector = injector;
        this.vcf = vcf;
        this.libraryPanel = libraryPanel;
        this.dragMode = 'copy';
        this.dragDisabled = false;
        this.dragCopyStyle = false;
        this.hostBinding = true;
        this.isSetup = false;
        this.notify = (event) => {
            if (this.libraryPanel) {
                if (event === 'dragStart') {
                    return (...args) => {
                        this.libraryPanel.dragStartHandler();
                    };
                }
                if (event === 'dragStop') {
                    return (...args) => {
                        this.libraryPanel.dragStopHandler();
                    };
                }
            }
            else {
                return () => { };
            }
        };
        this.helper = (event) => {
            if (this.dragMode === 'move') {
                // grid stack 有高度变化的bug， 暂时就不解决了
                return this.el.nativeElement;
            }
            if (!this.dragTemplate) {
                const el = this.el.nativeElement.cloneNode(true);
                el.style.zIndex = '1060';
                this.copyCanvas(this.el.nativeElement, el);
                if (this.dragCopyStyle) {
                    this.copyStyle(this.el.nativeElement, el);
                }
                return el;
            }
            else {
                const el = document.createElement('div');
                el.classList.add('grid-stack-item-adding-item-template');
                el.style.zIndex = '1060';
                if (this.width !== undefined) {
                    el.setAttribute('gs-w', `${this.width}`);
                }
                if (this.height !== undefined) {
                    el.setAttribute('gs-h', `${this.height}`);
                }
                this.setDragWidthHeight(el);
                const domPortalOutlet = new DomPortalOutlet(el, this.cfr, this.appRef, this.injector);
                domPortalOutlet.attachTemplatePortal(new TemplatePortal(this.dragTemplate, this.vcf, {
                    $implicit: this.widgetData,
                    width: this.width,
                    height: this.height,
                }));
                const result = el.cloneNode(true);
                this.copyCanvas(el, result);
                if (this.dragCopyStyle) {
                    this.copyStyle(el, result);
                }
                domPortalOutlet.detach();
                domPortalOutlet.dispose();
                return result;
            }
        };
    }
    get gridStackService() {
        return this.targetDashboard?.gridStackService;
    }
    ngOnChanges(changes) {
        if (changes.targetDashboard) {
            this.setup();
        }
        if (changes.dragDisabled) {
            if (this.dragDisabled) {
                GridStackService.disableDrag(this.el.nativeElement);
            }
            else {
                GridStackService.enableDrag(this.el.nativeElement);
            }
        }
    }
    ngAfterViewInit() {
        if (!this.isSetup) {
            GridStackService.cleanDragIn(this.el.nativeElement);
            this.setup();
        }
    }
    ngOnDestroy() {
        if (this.gridStackService) {
            this.gridStackService.destroyDragIn(this.el.nativeElement);
        }
    }
    setup() {
        if (this.targetDashboard && !this.isSetup) {
            setTimeout(() => {
                if (this.gridStackService && this.gridStackService.gridStack) {
                    GridStackService.cleanDragIn(this.el.nativeElement);
                    this.gridStackService.setupDragIn(this.el.nativeElement, this, this.helper, this.notify);
                    if (this.dragDisabled) {
                        GridStackService.disableDrag(this.el.nativeElement);
                    }
                }
            });
            this.isSetup = true;
        }
    }
    copyCanvas(origin, target) {
        // 拷贝canvas的内容
        const originCanvasArr = origin.querySelectorAll('canvas');
        const targetCanvasArr = target.querySelectorAll('canvas');
        [].forEach.call(targetCanvasArr, (canvas, index) => {
            canvas.getContext('2d').drawImage(originCanvasArr[index], 0, 0);
        });
    }
    setDragWidthHeight(el) {
        const columnWidth = this.targetDashboard.getCurrentColumnWidth();
        const cellHeight = this.targetDashboard.getCurrentCellHeight();
        const margin = this.targetDashboard.getCurrentMargin();
        if (this.width) {
            el.style.width = columnWidth * (this.width || 1) - margin * ((this.width || 1) - 1) + 'px';
        }
        if (this.height) {
            el.style.height = cellHeight * (this.height || 1) - margin * 2 + 'px';
        }
    }
    copyStyle(source, target) {
        ['id', 'style', 'draggable'].forEach((att) => {
            target.removeAttribute(att);
        });
        // copy style (without transitions)
        const computedStyle = getComputedStyle(source);
        for (let i = 0; i < computedStyle.length; i++) {
            const key = computedStyle[i];
            if (key.indexOf('transition') < 0) {
                target.style[key] = computedStyle[key];
            }
        }
        target.style.pointerEvents = 'none';
        // and repeat for all children
        for (let i = 0; i < source.children.length; i++) {
            this.copyStyle(source.children[i], target.children[i]);
        }
    }
}
DashboardLibraryWidgetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DashboardLibraryWidgetDirective, deps: [{ token: i0.ElementRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: i1.DashboardLibraryPanelDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
DashboardLibraryWidgetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DashboardLibraryWidgetDirective, selector: "[dDashboardLibraryWidget]", inputs: { width: "width", height: "height", widgetData: "widgetData", dragMode: "dragMode", dragTemplate: "dragTemplate", dragDisabled: "dragDisabled", dragCopyStyle: "dragCopyStyle", targetDashboard: "targetDashboard" }, host: { properties: { "attr.gs-w": "this.width", "attr.gs-h": "this.height", "class.grid-stack-new-item": "this.hostBinding", "attr.gs-instance": "this.gridStackId" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DashboardLibraryWidgetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDashboardLibraryWidget]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: i1.DashboardLibraryPanelDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { width: [{
                type: HostBinding,
                args: ['attr.gs-w']
            }, {
                type: Input
            }], height: [{
                type: HostBinding,
                args: ['attr.gs-h']
            }, {
                type: Input
            }], widgetData: [{
                type: Input
            }], dragMode: [{
                type: Input
            }], dragTemplate: [{
                type: Input
            }], dragDisabled: [{
                type: Input
            }], dragCopyStyle: [{
                type: Input
            }], hostBinding: [{
                type: HostBinding,
                args: ['class.grid-stack-new-item']
            }], gridStackId: [{
                type: HostBinding,
                args: ['attr.gs-instance']
            }], targetDashboard: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS13aWRnZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2dWkvZGFzaGJvYXJkL3dpZGdldC1saWJyYXJ5L2xpYnJhcnktd2lkZ2V0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RFLE9BQU8sRUFDVSxjQUFjLEVBQUUsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUNyRyxLQUFLLEVBQXdCLFFBQVEsRUFBaUIsV0FBVyxFQUFFLGdCQUFnQixFQUNwRixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7O0FBSzNGLE1BQU0sT0FBTywrQkFBK0I7SUEwQjFDLFlBQ1UsRUFBYyxFQUNkLEdBQTZCLEVBQzdCLE1BQXNCLEVBQ3RCLFFBQWtCLEVBQ2xCLEdBQXFCLEVBQ1QsWUFBNEM7UUFMeEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzdCLFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFDVCxpQkFBWSxHQUFaLFlBQVksQ0FBZ0M7UUFyQnpELGFBQVEsR0FBb0IsTUFBTSxDQUFDO1FBRW5DLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBRy9CLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBS25CLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFvRGhC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QyxFQUFFO2dCQUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4QztTQUNGO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO1FBQ3BDLDhCQUE4QjtRQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4RDtJQUNILENBQUM7OzRIQTVLVSwrQkFBK0I7Z0hBQS9CLCtCQUErQjsyRkFBL0IsK0JBQStCO2tCQUgzQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3RDOzswQkFpQ0ksUUFBUTs0Q0E3QlgsS0FBSztzQkFGSixXQUFXO3VCQUFDLFdBQVc7O3NCQUN2QixLQUFLO2dCQUtOLE1BQU07c0JBRkwsV0FBVzt1QkFBQyxXQUFXOztzQkFDdkIsS0FBSztnQkFHRyxVQUFVO3NCQUFsQixLQUFLO2dCQUVHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBR04sV0FBVztzQkFEVixXQUFXO3VCQUFDLDJCQUEyQjtnQkFHeEMsV0FBVztzQkFEVixXQUFXO3VCQUFDLGtCQUFrQjtnQkFHdEIsZUFBZTtzQkFBdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbVBvcnRhbE91dGxldCwgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEluamVjdG9yLFxuICBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9wdGlvbmFsLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhc2hib2FyZENvbXBvbmVudCB9IGZyb20gJy4uL2Rhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JpZFN0YWNrU2VydmljZSB9IGZyb20gJy4uL2dyaWQtc3RhY2suc2VydmljZSc7XG5pbXBvcnQgeyBEYXNoYm9hcmRMaWJyYXJ5UGFuZWxEaXJlY3RpdmUgfSBmcm9tICcuLi93aWRnZXQtbGlicmFyeS9saWJyYXJ5LXBhbmVsLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkRGFzaGJvYXJkTGlicmFyeVdpZGdldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRMaWJyYXJ5V2lkZ2V0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuZ3MtdycpXG4gIEBJbnB1dCgpXG4gIHdpZHRoOiBudW1iZXI7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmdzLWgnKVxuICBASW5wdXQoKVxuICBoZWlnaHQ6IG51bWJlcjtcblxuICBASW5wdXQoKSB3aWRnZXREYXRhO1xuXG4gIEBJbnB1dCgpIGRyYWdNb2RlOiAnY29weScgfCAnbW92ZScgPSAnY29weSc7XG4gIEBJbnB1dCgpIGRyYWdUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIGRyYWdDb3B5U3R5bGUgPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmdyaWQtc3RhY2stbmV3LWl0ZW0nKVxuICBob3N0QmluZGluZyA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnYXR0ci5ncy1pbnN0YW5jZScpXG4gIGdyaWRTdGFja0lkO1xuXG4gIEBJbnB1dCgpIHRhcmdldERhc2hib2FyZDogRGFzaGJvYXJkQ29tcG9uZW50O1xuICBpc1NldHVwID0gZmFsc2U7XG4gIGdldCBncmlkU3RhY2tTZXJ2aWNlKCk6IEdyaWRTdGFja1NlcnZpY2Uge1xuICAgIHJldHVybiB0aGlzLnRhcmdldERhc2hib2FyZD8uZ3JpZFN0YWNrU2VydmljZTtcbiAgfVxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgdmNmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGlicmFyeVBhbmVsOiBEYXNoYm9hcmRMaWJyYXJ5UGFuZWxEaXJlY3RpdmVcbiAgKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMudGFyZ2V0RGFzaGJvYXJkKSB7XG4gICAgICB0aGlzLnNldHVwKCk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLmRyYWdEaXNhYmxlZCkge1xuICAgICAgaWYgKHRoaXMuZHJhZ0Rpc2FibGVkKSB7XG4gICAgICAgIEdyaWRTdGFja1NlcnZpY2UuZGlzYWJsZURyYWcodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEdyaWRTdGFja1NlcnZpY2UuZW5hYmxlRHJhZyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU2V0dXApIHtcbiAgICAgIEdyaWRTdGFja1NlcnZpY2UuY2xlYW5EcmFnSW4odGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5ncmlkU3RhY2tTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmdyaWRTdGFja1NlcnZpY2UuZGVzdHJveURyYWdJbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHNldHVwKCkge1xuICAgIGlmICh0aGlzLnRhcmdldERhc2hib2FyZCAmJiAhdGhpcy5pc1NldHVwKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZFN0YWNrU2VydmljZSAmJiB0aGlzLmdyaWRTdGFja1NlcnZpY2UuZ3JpZFN0YWNrKSB7XG4gICAgICAgICAgR3JpZFN0YWNrU2VydmljZS5jbGVhbkRyYWdJbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgIHRoaXMuZ3JpZFN0YWNrU2VydmljZS5zZXR1cERyYWdJbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMsIHRoaXMuaGVscGVyLCB0aGlzLm5vdGlmeSk7XG4gICAgICAgICAgaWYgKHRoaXMuZHJhZ0Rpc2FibGVkKSB7XG4gICAgICAgICAgICBHcmlkU3RhY2tTZXJ2aWNlLmRpc2FibGVEcmFnKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaXNTZXR1cCA9IHRydWU7XG4gICAgfVxuICB9XG4gIG5vdGlmeSA9IChldmVudDogJ2RyYWdTdGFydCcgfCAnZHJhZ1N0b3AnIHwgc3RyaW5nKSA9PiB7XG4gICAgaWYgKHRoaXMubGlicmFyeVBhbmVsKSB7XG4gICAgICBpZiAoZXZlbnQgPT09ICdkcmFnU3RhcnQnKSB7XG4gICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIHRoaXMubGlicmFyeVBhbmVsLmRyYWdTdGFydEhhbmRsZXIoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudCA9PT0gJ2RyYWdTdG9wJykge1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICB0aGlzLmxpYnJhcnlQYW5lbC5kcmFnU3RvcEhhbmRsZXIoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgpID0+IHsgfTtcbiAgICB9XG4gIH07XG5cbiAgaGVscGVyID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMuZHJhZ01vZGUgPT09ICdtb3ZlJykge1xuICAgICAgLy8gZ3JpZCBzdGFjayDmnInpq5jluqblj5jljJbnmoRidWfvvIwg5pqC5pe25bCx5LiN6Kej5Yaz5LqGXG4gICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZHJhZ1RlbXBsYXRlKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICBlbC5zdHlsZS56SW5kZXggPSAnMTA2MCc7XG4gICAgICB0aGlzLmNvcHlDYW52YXModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBlbCk7XG4gICAgICBpZiAodGhpcy5kcmFnQ29weVN0eWxlKSB7XG4gICAgICAgIHRoaXMuY29weVN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgZWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZ3JpZC1zdGFjay1pdGVtLWFkZGluZy1pdGVtLXRlbXBsYXRlJyk7XG4gICAgICBlbC5zdHlsZS56SW5kZXggPSAnMTA2MCc7XG4gICAgICBpZiAodGhpcy53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZ3MtdycsIGAke3RoaXMud2lkdGh9YCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2dzLWgnLCBgJHt0aGlzLmhlaWdodH1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0RHJhZ1dpZHRoSGVpZ2h0KGVsKTtcbiAgICAgIGNvbnN0IGRvbVBvcnRhbE91dGxldCA9IG5ldyBEb21Qb3J0YWxPdXRsZXQoZWwsIHRoaXMuY2ZyLCB0aGlzLmFwcFJlZiwgdGhpcy5pbmplY3Rvcik7XG4gICAgICBkb21Qb3J0YWxPdXRsZXQuYXR0YWNoVGVtcGxhdGVQb3J0YWwoXG4gICAgICAgIG5ldyBUZW1wbGF0ZVBvcnRhbCh0aGlzLmRyYWdUZW1wbGF0ZSwgdGhpcy52Y2YsIHtcbiAgICAgICAgICAkaW1wbGljaXQ6IHRoaXMud2lkZ2V0RGF0YSxcbiAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGVsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRoaXMuY29weUNhbnZhcyhlbCwgcmVzdWx0KTtcbiAgICAgIGlmICh0aGlzLmRyYWdDb3B5U3R5bGUpIHtcbiAgICAgICAgdGhpcy5jb3B5U3R5bGUoZWwsIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBkb21Qb3J0YWxPdXRsZXQuZGV0YWNoKCk7XG4gICAgICBkb21Qb3J0YWxPdXRsZXQuZGlzcG9zZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG5cbiAgY29weUNhbnZhcyhvcmlnaW4sIHRhcmdldCkge1xuICAgIC8vIOaLt+i0nWNhbnZhc+eahOWGheWuuVxuICAgIGNvbnN0IG9yaWdpbkNhbnZhc0FyciA9IG9yaWdpbi5xdWVyeVNlbGVjdG9yQWxsKCdjYW52YXMnKTtcbiAgICBjb25zdCB0YXJnZXRDYW52YXNBcnIgPSB0YXJnZXQucXVlcnlTZWxlY3RvckFsbCgnY2FudmFzJyk7XG4gICAgW10uZm9yRWFjaC5jYWxsKHRhcmdldENhbnZhc0FyciwgKGNhbnZhcywgaW5kZXgpID0+IHtcbiAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShvcmlnaW5DYW52YXNBcnJbaW5kZXhdLCAwLCAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldERyYWdXaWR0aEhlaWdodChlbCkge1xuICAgIGNvbnN0IGNvbHVtbldpZHRoID0gdGhpcy50YXJnZXREYXNoYm9hcmQuZ2V0Q3VycmVudENvbHVtbldpZHRoKCk7XG4gICAgY29uc3QgY2VsbEhlaWdodCA9IHRoaXMudGFyZ2V0RGFzaGJvYXJkLmdldEN1cnJlbnRDZWxsSGVpZ2h0KCk7XG4gICAgY29uc3QgbWFyZ2luID0gdGhpcy50YXJnZXREYXNoYm9hcmQuZ2V0Q3VycmVudE1hcmdpbigpO1xuICAgIGlmICh0aGlzLndpZHRoKSB7XG4gICAgICBlbC5zdHlsZS53aWR0aCA9IGNvbHVtbldpZHRoICogKHRoaXMud2lkdGggfHwgMSkgLSBtYXJnaW4gKiAoKHRoaXMud2lkdGggfHwgMSkgLSAxKSArICdweCc7XG4gICAgfVxuICAgIGlmICh0aGlzLmhlaWdodCkge1xuICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gY2VsbEhlaWdodCAqICh0aGlzLmhlaWdodCB8fCAxKSAtIG1hcmdpbiAqIDIgKyAncHgnO1xuICAgIH1cbiAgfVxuICBjb3B5U3R5bGUoc291cmNlLCB0YXJnZXQpIHtcbiAgICBbJ2lkJywgJ3N0eWxlJywgJ2RyYWdnYWJsZSddLmZvckVhY2goKGF0dCkgPT4ge1xuICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShhdHQpO1xuICAgIH0pO1xuXG4gICAgLy8gY29weSBzdHlsZSAod2l0aG91dCB0cmFuc2l0aW9ucylcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShzb3VyY2UpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcHV0ZWRTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gY29tcHV0ZWRTdHlsZVtpXTtcbiAgICAgIGlmIChrZXkuaW5kZXhPZigndHJhbnNpdGlvbicpIDwgMCkge1xuICAgICAgICB0YXJnZXQuc3R5bGVba2V5XSA9IGNvbXB1dGVkU3R5bGVba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGFyZ2V0LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgLy8gYW5kIHJlcGVhdCBmb3IgYWxsIGNoaWxkcmVuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuY29weVN0eWxlKHNvdXJjZS5jaGlsZHJlbltpXSwgdGFyZ2V0LmNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==