import { DOCUMENT } from '@angular/common';
import { ComponentFactoryResolver, Directive, ElementRef, HostListener, Inject, Injector, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { of } from 'rxjs';
import { ReadTipComponent } from './read-tip.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
export class ReadTipDirective {
    constructor(el, componentFactoryResolver, overlayContainerRef, inject, viewContainerRef, doc) {
        this.el = el;
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayContainerRef = overlayContainerRef;
        this.inject = inject;
        this.viewContainerRef = viewContainerRef;
        this.doc = doc;
        this.defaultOptions = {
            trigger: 'hover',
            showAnimate: false,
            mouseenterTime: 100,
            mouseleaveTime: 100,
            position: 'top',
            overlayClassName: '',
            appendToBody: true,
            rules: { selector: null },
        };
        this.onDocumentClick = (event) => {
            event.stopPropagation();
            if (!this.el.nativeElement.contains(event.target) &&
                !(this.readTipComponentRef && this.readTipComponentRef.instance.elementRef.nativeElement.contains(event.target))) {
                this.hide();
            }
        };
        this.document = this.doc;
    }
    set prevTarget(target) {
        if (target !== this._prevTarget) {
            this._prevTarget = target;
            this.hide();
        }
    }
    onMouseOver(event) {
        this.findElementIndex(event.target, this.readTipOptions?.rules, 'hover').subscribe((elementInfo) => {
            if (elementInfo?.shouldTrigger) {
                this.hide();
                if (!this.readTipComponentRef) {
                    const target = new ElementRef(event.target);
                    setTimeout(() => {
                        this.show(target, elementInfo.rule);
                    }, elementInfo.rule?.mouseenterTime);
                }
                if (this.readTipComponentRef) {
                    setTimeout(() => {
                        if (this.readTipComponentRef) {
                            this.readTipComponentRef.instance.updatePosition();
                        }
                    }, elementInfo.rule?.mouseenterTime);
                }
            }
        });
    }
    onMouseOut(event) {
        this.findElementIndex(event.target, this.readTipOptions?.rules, 'hover').subscribe((elementInfo) => {
            if (elementInfo?.shouldTrigger) {
                setTimeout(() => {
                    this.hide();
                }, elementInfo.rule?.mouseleaveTime);
            }
        });
    }
    onClick(event) {
        this.findElementIndex(event.target, this.readTipOptions?.rules, 'click').subscribe((elementInfo) => {
            this.prevTarget = event.target;
            if (elementInfo?.shouldTrigger) {
                if (!this.readTipComponentRef) {
                    const target = new ElementRef(event.target);
                    this.show(target, elementInfo.rule);
                }
                if (this.readTipComponentRef) {
                    setTimeout(() => {
                        if (this.readTipComponentRef) {
                            this.readTipComponentRef.instance.updatePosition();
                        }
                    });
                }
            }
        });
    }
    ngOnInit() { }
    ngOnDestroy() {
        this.destroy();
    }
    show(target, rule) {
        this.hide();
        if (!this.readTipComponentRef) {
            this.createReadTip(target, rule);
        }
        if (rule.showAnimate) {
            this.readTipComponentRef.instance.show();
        }
        if (rule.trigger === 'click') {
            this.document.addEventListener('click', this.onDocumentClick);
        }
    }
    createReadTip(target, rule) {
        if (rule.appendToBody) {
            this.readTipComponentRef = this.overlayContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(ReadTipComponent));
        }
        else {
            this.readTipComponentRef = this.viewContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(ReadTipComponent), this.viewContainerRef.length, this.inject);
        }
        if (this.contentTemplate) {
            Object.assign(this.readTipComponentRef.instance, {
                content: this.contentTemplate,
                triggerElementRef: target,
                appendToBody: rule.appendToBody,
                position: rule.position,
                overlayClassName: rule.overlayClassName,
            });
        }
        else {
            if (rule.dataFn) {
                rule.dataFn({ element: target.nativeElement, rule }).subscribe((data) => {
                    if (data.template) {
                        Object.assign(this.readTipComponentRef.instance, {
                            content: data.template,
                            customData: data.customData,
                            triggerElementRef: target,
                            appendToBody: rule.appendToBody,
                            position: rule.position,
                            overlayClassName: rule.overlayClassName,
                        });
                    }
                    else {
                        Object.assign(this.readTipComponentRef.instance, {
                            content: data.content,
                            title: data.title,
                            triggerElementRef: target,
                            appendToBody: rule.appendToBody,
                            position: rule.position,
                            overlayClassName: rule.overlayClassName,
                        });
                    }
                });
            }
            else {
                Object.assign(this.readTipComponentRef.instance, {
                    content: rule.content,
                    title: rule.title,
                    triggerElementRef: target,
                    appendToBody: rule.appendToBody,
                    position: rule.position,
                    overlayClassName: rule.overlayClassName,
                });
            }
        }
    }
    hide() {
        if (this.readTipComponentRef) {
            if (!this.readTipOptions.showAnimate) {
                this.destroy();
                return;
            }
            this.readTipComponentRef.instance.hide();
            this.readTipComponentRef.instance.onHidden = () => {
                this.destroy();
            };
        }
    }
    destroy() {
        if (this.readTipComponentRef) {
            this.readTipComponentRef.destroy();
            this.readTipComponentRef = null;
        }
        if (this.readTipOptions.trigger === 'click') {
            this.document.removeEventListener('click', this.onDocumentClick);
        }
    }
    findElementIndex(element, rules, trigger) {
        const keysCanInherit = ['trigger', 'showAnimate', 'mouseenterTime', 'mouseleaveTime', 'position', 'overlayClassName', 'appendToBody'];
        if (rules instanceof Array) {
            let elementIndex = -1;
            for (let i = 0; i < rules.length; i++) {
                if (this.isCorrectElement(rules[i].selector, element)) {
                    elementIndex = i;
                    break;
                }
            }
            keysCanInherit.forEach((key) => {
                if (rules[elementIndex]) {
                    rules[elementIndex][key] = rules[elementIndex][key] || this.readTipOptions[key] || this.defaultOptions[key];
                }
            });
            return of({
                shouldTrigger: rules[elementIndex]?.trigger === trigger && this.isCorrectElement(rules[elementIndex]?.selector, element),
                rule: rules[elementIndex],
            });
        }
        else {
            keysCanInherit.forEach((key) => {
                if (rules) {
                    rules[key] = rules[key] || this.readTipOptions[key] || this.defaultOptions[key];
                }
            });
            return of({
                shouldTrigger: rules?.trigger === trigger && this.isCorrectElement(rules?.selector, element),
                rule: rules,
            });
        }
    }
    isCorrectElement(selector, element) {
        const elementsArray = this.el.nativeElement.querySelectorAll(selector);
        for (let i = 0; i < elementsArray.length; i++) {
            if (elementsArray[i] === element) {
                return true;
            }
        }
        return false;
    }
}
ReadTipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ReadTipDirective, deps: [{ token: i0.ElementRef }, { token: i0.ComponentFactoryResolver }, { token: i1.OverlayContainerRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
ReadTipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ReadTipDirective, selector: "[dReadTip]", inputs: { readTipOptions: "readTipOptions", contentTemplate: "contentTemplate" }, host: { listeners: { "mouseover": "onMouseOver($event)", "mouseout": "onMouseOut($event)", "click": "onClick($event)" } }, exportAs: ["dReadTip"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ReadTipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dReadTip]',
                    exportAs: 'dReadTip',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ComponentFactoryResolver }, { type: i1.OverlayContainerRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { readTipOptions: [{
                type: Input
            }], contentTemplate: [{
                type: Input
            }], onMouseOver: [{
                type: HostListener,
                args: ['mouseover', ['$event']]
            }], onMouseOut: [{
                type: HostListener,
                args: ['mouseout', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,