import { from, merge, of } from 'rxjs';
import { catchError, toArray } from 'rxjs/operators';
import { FileUploader } from './file-uploader.class';
import { UploadStatus } from './file-uploader.types';
export class UploadComponent {
    constructor() {
        this.fileUploaders = [];
        this.filesWithSameName = [];
    }
    addFile(file, options) {
        if (options && options.checkSameName) {
            if (this.checkFileSame(file.name)) {
                this.fileUploaders.push(new FileUploader(file, options));
            }
        }
        else {
            this.fileUploaders.push(new FileUploader(file, options));
        }
    }
    checkFileSame(fileName) {
        let checkRel = true;
        for (let i = 0; i < this.fileUploaders.length; i++) {
            if (fileName === this.fileUploaders[i].file.name) {
                checkRel = false;
                if (this.filesWithSameName.indexOf(fileName) === -1) {
                    this.filesWithSameName.push(fileName);
                }
                break;
            }
        }
        return checkRel;
    }
    getFiles() {
        return this.fileUploaders.map(fileUploader => {
            return fileUploader.file;
        });
    }
    getFullFiles() {
        return this.fileUploaders.map(fileUploader => {
            return fileUploader;
        });
    }
    upload(oneFile, isMultipleUpload = false) {
        let uploads = [];
        if (oneFile) {
            oneFile.percentage = 0;
            uploads.push(from(oneFile.send()));
        }
        else {
            const preFiles = this.fileUploaders.filter((fileUploader) => (fileUploader.status === UploadStatus.preLoad));
            const failedFiles = this.fileUploaders.filter((fileUploader) => (fileUploader.status === UploadStatus.failed));
            const uploadFiles = preFiles.length > 0 ? preFiles : failedFiles;
            uploads = uploadFiles.map((fileUploader) => {
                fileUploader.percentage = 0;
                if (isMultipleUpload) {
                    return from(fileUploader.sendMultiple()).pipe(catchError(error => of(error)));
                }
                else {
                    return from(fileUploader.send());
                }
            });
        }
        if (uploads.length > 0) {
            return merge(...uploads).pipe(toArray());
        }
        return from(Promise.reject('no files'));
    }
    oneTimeUpload() {
        const uploads = this.fileUploaders
            .filter((fileUploader) => fileUploader.status !== UploadStatus.uploaded);
        return from(this.dealOneTimeUploadFiles(uploads));
    }
    async dealOneTimeUploadFiles(uploads) {
        if (!uploads || !uploads.length) {
            return Promise.reject('no files');
        }
        // 触发文件上传
        let finalUploads = [];
        await uploads[0].send(uploads).finally(() => {
            finalUploads = uploads.map((file) => {
                file.status = uploads[0].status;
                file.percentage = uploads[0].percentage;
                return { file: file.file, response: uploads[0].response };
            });
        });
        return finalUploads;
    }
    deleteFile(file) {
        this.fileUploaders = this.fileUploaders.filter((fileUploader) => {
            return file !== fileUploader.file;
        });
    }
    removeFiles() {
        this.fileUploaders = [];
        this.filesWithSameName = [];
    }
    getSameNameFiles() {
        return this.filesWithSameName.join();
    }
    resetSameNameFiles() {
        this.filesWithSameName = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvdXBsb2FkL3VwbG9hZC5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQ0wsWUFBWSxFQUNiLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXJELE1BQU0sT0FBTyxlQUFlO0lBQTVCO1FBQ0Usa0JBQWEsR0FBd0IsRUFBRSxDQUFDO1FBQ3hDLHNCQUFpQixHQUFHLEVBQUUsQ0FBQztJQXdHekIsQ0FBQztJQXZHQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU87UUFDbkIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUNwQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUMxRDtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7SUFDRCxhQUFhLENBQUMsUUFBUTtRQUNwQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xELElBQUksUUFB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QUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBQ0Qsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbSwgbWVyZ2UsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0b0FycmF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgRmlsZVVwbG9hZGVyXG59IGZyb20gJy4vZmlsZS11cGxvYWRlci5jbGFzcyc7XG5pbXBvcnQgeyBVcGxvYWRTdGF0dXMgfSBmcm9tICcuL2ZpbGUtdXBsb2FkZXIudHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgVXBsb2FkQ29tcG9uZW50IHtcbiAgZmlsZVVwbG9hZGVyczogQXJyYXk8RmlsZVVwbG9hZGVyPiA9IFtdO1xuICBmaWxlc1dpdGhTYW1lTmFtZSA9IFtdO1xuICBhZGRGaWxlKGZpbGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNoZWNrU2FtZU5hbWUpIHtcbiAgICAgIGlmICh0aGlzLmNoZWNrRmlsZVNhbWUoZmlsZS5uYW1lKSkge1xuICAgICAgICB0aGlzLmZpbGVVcGxvYWRlcnMucHVzaChuZXcgRmlsZVVwbG9hZGVyKGZpbGUsIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maWxlVXBsb2FkZXJzLnB1c2gobmV3IEZpbGVVcGxvYWRlcihmaWxlLCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG4gIGNoZWNrRmlsZVNhbWUoZmlsZU5hbWUpIHtcbiAgICBsZXQgY2hlY2tSZWwgPSB0cnVlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbGVVcGxvYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChmaWxlTmFtZSA9PT0gdGhpcy5maWxlVXBsb2FkZXJzW2ldLmZpbGUubmFtZSkge1xuICAgICAgICBjaGVja1JlbCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5maWxlc1dpdGhTYW1lTmFtZS5pbmRleE9mKGZpbGVOYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLmZpbGVzV2l0aFNhbWVOYW1lLnB1c2goZmlsZU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hlY2tSZWw7XG4gIH1cblxuICBnZXRGaWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlVXBsb2FkZXJzLm1hcChmaWxlVXBsb2FkZXIgPT4ge1xuICAgICAgcmV0dXJuIGZpbGVVcGxvYWRlci5maWxlO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0RnVsbEZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGVVcGxvYWRlcnMubWFwKGZpbGVVcGxvYWRlciA9PiB7XG4gICAgICByZXR1cm4gZmlsZVVwbG9hZGVyO1xuICAgIH0pO1xuICB9XG5cbiAgdXBsb2FkKG9uZUZpbGU/LCBpc011bHRpcGxlVXBsb2FkPWZhbHNlKSB7XG4gICAgbGV0IHVwbG9hZHM6IGFueVtdID0gW107XG4gICAgaWYgKG9uZUZpbGUpIHtcbiAgICAgIG9uZUZpbGUucGVyY2VudGFnZSA9IDA7XG4gICAgICB1cGxvYWRzLnB1c2goZnJvbShvbmVGaWxlLnNlbmQoKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcmVGaWxlcyA9IHRoaXMuZmlsZVVwbG9hZGVycy5maWx0ZXIoKGZpbGVVcGxvYWRlcikgPT4gKGZpbGVVcGxvYWRlci5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5wcmVMb2FkKSk7XG4gICAgICBjb25zdCBmYWlsZWRGaWxlcyA9IHRoaXMuZmlsZVVwbG9hZGVycy5maWx0ZXIoKGZpbGVVcGxvYWRlcikgPT4gKGZpbGVVcGxvYWRlci5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5mYWlsZWQpKTtcbiAgICAgIGNvbnN0IHVwbG9hZEZpbGVzID0gcHJlRmlsZXMubGVuZ3RoID4gMCA/IHByZUZpbGVzIDogZmFpbGVkRmlsZXM7XG4gICAgICB1cGxvYWRzID0gdXBsb2FkRmlsZXMubWFwKChmaWxlVXBsb2FkZXIpID0+IHtcbiAgICAgICAgZmlsZVVwbG9hZGVyLnBlcmNlbnRhZ2UgPSAwO1xuICAgICAgICBpZihpc011bHRpcGxlVXBsb2FkKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb20oZmlsZVVwbG9hZGVyLnNlbmRNdWx0aXBsZSgpKS5waXBlKGNhdGNoRXJyb3IoZXJyb3IgPT4gb2YoZXJyb3IpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZyb20oZmlsZVVwbG9hZGVyLnNlbmQoKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodXBsb2Fkcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gbWVyZ2UoLi4udXBsb2FkcykucGlwZSh0b0FycmF5KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9tKFByb21pc2UucmVqZWN0KCdubyBmaWxlcycpKTtcbiAgfVxuXG4gIG9uZVRpbWVVcGxvYWQoKSB7XG4gICAgY29uc3QgdXBsb2FkcyA9IHRoaXMuZmlsZVVwbG9hZGVyc1xuICAgICAgLmZpbHRlcigoZmlsZVVwbG9hZGVyKSA9PiBmaWxlVXBsb2FkZXIuc3RhdHVzICE9PSBVcGxvYWRTdGF0dXMudXBsb2FkZWQpO1xuICAgIHJldHVybiBmcm9tKHRoaXMuZGVhbE9uZVRpbWVVcGxvYWRGaWxlcyh1cGxvYWRzKSk7XG4gIH1cblxuICBhc3luYyBkZWFsT25lVGltZVVwbG9hZEZpbGVzKHVwbG9hZHMpIHtcbiAgICBpZiAoIXVwbG9hZHMgfHwgIXVwbG9hZHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ25vIGZpbGVzJyk7XG4gICAgfVxuICAgIC8vIOinpuWPkeaWh+S7tuS4iuS8oFxuICAgIGxldCBmaW5hbFVwbG9hZHMgPSBbXTtcbiAgICBhd2FpdCB1cGxvYWRzWzBdLnNlbmQodXBsb2FkcykuZmluYWxseSgoKSA9PlxuICAgIC8vIOagueaNrnVwbG9hZHNbMF3nmoTkuIrkvKDnirbmgIHkuLrlhbbku5ZmaWxl6K6+572u54q25oCBXG4gICAge1xuICAgICAgZmluYWxVcGxvYWRzID0gdXBsb2Fkcy5tYXAoKGZpbGUpID0+IHtcbiAgICAgICAgZmlsZS5zdGF0dXMgPSB1cGxvYWRzWzBdLnN0YXR1cztcbiAgICAgICAgZmlsZS5wZXJjZW50YWdlID0gdXBsb2Fkc1swXS5wZXJjZW50YWdlO1xuICAgICAgICByZXR1cm4geyBmaWxlOiBmaWxlLmZpbGUsIHJlc3BvbnNlOiB1cGxvYWRzWzBdLnJlc3BvbnNlIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgKTtcblxuICAgIHJldHVybiBmaW5hbFVwbG9hZHM7XG4gIH1cblxuICBkZWxldGVGaWxlKGZpbGUpIHtcbiAgICB0aGlzLmZpbGVVcGxvYWRlcnMgPSB0aGlzLmZpbGVVcGxvYWRlcnMuZmlsdGVyKChmaWxlVXBsb2FkZXIpID0+IHtcbiAgICAgIHJldHVybiBmaWxlICE9PSBmaWxlVXBsb2FkZXIuZmlsZTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZUZpbGVzKCkge1xuICAgIHRoaXMuZmlsZVVwbG9hZGVycyA9IFtdO1xuICAgIHRoaXMuZmlsZXNXaXRoU2FtZU5hbWUgPSBbXTtcbiAgfVxuICBnZXRTYW1lTmFtZUZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGVzV2l0aFNhbWVOYW1lLmpvaW4oKTtcbiAgfVxuICByZXNldFNhbWVOYW1lRmlsZXMoKSB7XG4gICAgdGhpcy5maWxlc1dpdGhTYW1lTmFtZSA9IFtdO1xuICB9XG59XG4iXX0=