import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { I18nService } from 'ng-devui/i18n';
import { from, Observable } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/i18n";
export class SelectFiles {
    constructor(i18n, doc) {
        this.i18n = i18n;
        this.doc = doc;
        this.selectFiles = ({ multiple, accept, webkitdirectory }) => {
            return new Promise((resolve) => {
                const tempNode = this.document.getElementById('d-upload-temp');
                if (tempNode) {
                    this.document.body.removeChild(tempNode);
                }
                const input = this.document.createElement('input');
                input.style.position = 'fixed';
                input.style.left = '-2000px';
                input.style.top = '-2000px';
                input.setAttribute('id', 'd-upload-temp');
                input.setAttribute('type', 'file');
                if (multiple) {
                    input.setAttribute('multiple', '');
                }
                if (accept) {
                    input.setAttribute('accept', accept);
                }
                if (webkitdirectory) {
                    input.setAttribute('webkitdirectory', '');
                }
                input.addEventListener('change', event => {
                    resolve(Array.prototype.slice.call(event.target.files));
                });
                this.document.body.appendChild(input); // Fix compatibility issue with Internet Explorer 11
                this.simulateClickEvent(input);
            });
        };
        this.isAllowedFileType = (accept, file) => {
            if (accept) {
                const acceptArr = accept.split(',');
                const baseMimeType = file.type.replace(/\/.*$/, '');
                return acceptArr.some((type) => {
                    const validType = type.trim();
                    //  suffix name (e.g. '.png,.xlsx')
                    if (validType.startsWith('.')) {
                        return (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.toLowerCase().length - validType.toLowerCase().length) > -1);
                        // mime type like 'image/*'
                    }
                    else if (/\/\*$/.test(validType)) {
                        return baseMimeType === validType.replace(/\/.*$/, '');
                    }
                    //  mime type like 'text/plain,application/json'
                    return file.type === validType;
                });
            }
            return true;
        };
        this.beyondMaximalSize = (fileSize, maximumSize) => {
            if (maximumSize) {
                return fileSize > 1024 * 1024 * maximumSize;
            }
            return false;
        };
        this.beyondAllFilesMaximalSize = (fileSize, maximumSize) => {
            if (maximumSize) {
                return fileSize > 1024 * 1024 * maximumSize;
            }
            return false;
        };
        this.triggerSelectFiles = (fileOptions, uploadOptions) => {
            const { multiple, accept, webkitdirectory } = fileOptions;
            return from(this.selectFiles({ multiple, accept, webkitdirectory })).pipe(mergeMap(file => file));
        };
        this.triggerDropFiles = (fileOptions, uploadOptions, files) => {
            return new Observable(observer => observer.next(files)).pipe(mergeMap(file => file));
        };
        this.document = this.doc;
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    checkAllFilesSize(fileSize, maximumSize) {
        if (this.beyondMaximalSize(fileSize, maximumSize)) {
            this.BEYOND_MAXIMAL_FILE_SIZE_MSG = this.i18nText.getAllFilesBeyondMaximalFileSizeMsg(maximumSize);
            return { checkError: true, errorMsg: this.BEYOND_MAXIMAL_FILE_SIZE_MSG };
        }
    }
    _validateFiles(file, accept, uploadOptions) {
        if (!this.isAllowedFileType(accept, file)) {
            this.NOT_ALLOWED_FILE_TYPE_MSG = this.i18nText.getNotAllowedFileTypeMsg(file.name, accept);
            return { checkError: true, errorMsg: this.NOT_ALLOWED_FILE_TYPE_MSG };
        }
        if (this.beyondMaximalSize(file.size, uploadOptions.maximumSize)) {
            this.BEYOND_MAXIMAL_FILE_SIZE_MSG = this.i18nText.getBeyondMaximalFileSizeMsg(file.name, uploadOptions.maximumSize);
            return { checkError: true, errorMsg: this.BEYOND_MAXIMAL_FILE_SIZE_MSG };
        }
        return { checkError: false, errorMsg: undefined };
    }
    simulateClickEvent(input) {
        const evt = this.document.createEvent('MouseEvents');
        evt.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
        input.dispatchEvent(evt);
    }
}
SelectFiles.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SelectFiles, deps: [{ token: i1.I18nService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
SelectFiles.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SelectFiles });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SelectFiles, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,