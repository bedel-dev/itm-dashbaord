import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { IUploadOptions, UploadStatus } from './file-uploader.types';
import { UploadComponent } from './upload.class';
import { UploadedFilesComponent } from './uploaded-files.component';
import * as i0 from "@angular/core";
import * as i1 from "./uploaded-files.component";
import * as i2 from "@angular/common";
export class SingleUploadViewComponent extends UploadComponent {
    constructor() {
        super(...arguments);
        this.uploadedFiles = [];
        this.deleteUploadedFileEvent = new EventEmitter();
        this.UploadStatus = UploadStatus;
        this.fileUploaders = [];
        // 解决templateContext 传递method.bind(this)引发模板中内嵌组件initialize问题
        this.deleteFileProxy = file => {
            this.deleteFile(file);
        };
    }
    addFile(file) {
        this.fileUploaders = [];
        let uploadOptions = this.uploadOptions;
        if (this.dynamicUploadOptionsFn) {
            uploadOptions = this.dynamicUploadOptionsFn(file, this.uploadOptions);
        }
        super.addFile(file, uploadOptions);
    }
    deleteFile(file) {
        super.deleteFile(file);
        this.deleteUploadedFileEvent.emit(file);
    }
    deletePreUploadFile(file) {
        super.deleteFile(file);
    }
    _onDeleteUploadedFile(filePath) {
        this.deleteUploadedFileEvent.emit(filePath);
    }
}
SingleUploadViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleUploadViewComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SingleUploadViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SingleUploadViewComponent, selector: "d-single-upload-view", inputs: { uploadOptions: "uploadOptions", preloadFilesRef: "preloadFilesRef", uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", filePath: "filePath", dynamicUploadOptionsFn: "dynamicUploadOptionsFn" }, outputs: { deleteUploadedFileEvent: "deleteUploadedFileEvent" }, viewQueries: [{ propertyName: "uploadedFilesComponent", first: true, predicate: ["dUploadedFiles"], descendants: true, static: true }], exportAs: ["dSingleUploadView"], usesInheritance: true, ngImport: i0, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n", components: [{ type: i1.UploadedFilesComponent, selector: "d-uploaded-files", inputs: ["uploadedFiles", "uploadedFilesRef", "filePath"], outputs: ["deleteUploadedFileEvent"], exportAs: ["dUploadFiles"] }], directives: [{ type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleUploadViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-single-upload-view', exportAs: 'dSingleUploadView', preserveWhitespaces: false, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n" }]
        }], propDecorators: { uploadOptions: [{
                type: Input
            }], preloadFilesRef: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], dynamicUploadOptionsFn: [{
                type: Input
            }], deleteUploadedFileEvent: [{
                type: Output
            }], uploadedFilesComponent: [{
                type: ViewChild,
                args: ['dUploadedFiles', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLXVwbG9hZC12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldnVpL3VwbG9hZC9zaW5nbGUtdXBsb2FkLXZpZXcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZGV2dWkvdXBsb2FkL3NpbmdsZS11cGxvYWQtdmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLGNBQWMsRUFDZCxZQUFZLEVBQ2IsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7QUFRcEUsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGVBQWU7SUFOOUQ7O1FBU1csa0JBQWEsR0FBa0IsRUFBRSxDQUFDO1FBSWpDLDRCQUF1QixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRy9FLGlCQUFZLEdBQUcsWUFBWSxDQUFDO1FBQzVCLGtCQUFhLEdBQXdCLEVBQUUsQ0FBQztRQW9CeEMsNkRBQTZEO1FBQzdELG9CQUFlLEdBQUcsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUM7S0FLSDtJQTFCQyxPQUFPLENBQUMsSUFBVTtRQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3ZDLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQy9CLGFBQWEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN2RTtRQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBVTtRQUNuQixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELG1CQUFtQixDQUFDLElBQUk7UUFDdEIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBT0QscUJBQXFCLENBQUMsUUFBZ0I7UUFDcEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDOztzSEF0Q1UseUJBQXlCOzBHQUF6Qix5QkFBeUIsMmhCQ3RCdEMsaWNBYUE7MkZEU2EseUJBQXlCO2tCQU5yQyxTQUFTOytCQUNFLHNCQUFzQixZQUN0QixtQkFBbUIsdUJBRVIsS0FBSzs4QkFHakIsYUFBYTtzQkFBckIsS0FBSztnQkFDRyxlQUFlO3NCQUF2QixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csc0JBQXNCO3NCQUE5QixLQUFLO2dCQUNJLHVCQUF1QjtzQkFBaEMsTUFBTTtnQkFDd0Msc0JBQXNCO3NCQUFwRSxTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmlsZVVwbG9hZGVyIH0gZnJvbSAnLi9maWxlLXVwbG9hZGVyLmNsYXNzJztcbmltcG9ydCB7XG4gIElVcGxvYWRPcHRpb25zLFxuICBVcGxvYWRTdGF0dXNcbn0gZnJvbSAnLi9maWxlLXVwbG9hZGVyLnR5cGVzJztcbmltcG9ydCB7IFVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vdXBsb2FkLmNsYXNzJztcbmltcG9ydCB7IFVwbG9hZGVkRmlsZXNDb21wb25lbnQgfSBmcm9tICcuL3VwbG9hZGVkLWZpbGVzLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Qtc2luZ2xlLXVwbG9hZC12aWV3JyxcbiAgZXhwb3J0QXM6ICdkU2luZ2xlVXBsb2FkVmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi9zaW5nbGUtdXBsb2FkLXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgU2luZ2xlVXBsb2FkVmlld0NvbXBvbmVudCBleHRlbmRzIFVwbG9hZENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHVwbG9hZE9wdGlvbnM6IElVcGxvYWRPcHRpb25zO1xuICBASW5wdXQoKSBwcmVsb2FkRmlsZXNSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHVwbG9hZGVkRmlsZXM6IEFycmF5PE9iamVjdD4gPSBbXTtcbiAgQElucHV0KCkgdXBsb2FkZWRGaWxlc1JlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgZmlsZVBhdGg6IHN0cmluZztcbiAgQElucHV0KCkgZHluYW1pY1VwbG9hZE9wdGlvbnNGbjogKGZpbGVzLCB1cGxvYWRPcHRpb25zKSA9PiBJVXBsb2FkT3B0aW9ucztcbiAgQE91dHB1dCgpIGRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAVmlld0NoaWxkKCdkVXBsb2FkZWRGaWxlcycsIHsgc3RhdGljOiB0cnVlIH0pIHVwbG9hZGVkRmlsZXNDb21wb25lbnQ6IFVwbG9hZGVkRmlsZXNDb21wb25lbnQ7XG5cbiAgVXBsb2FkU3RhdHVzID0gVXBsb2FkU3RhdHVzO1xuICBmaWxlVXBsb2FkZXJzOiBBcnJheTxGaWxlVXBsb2FkZXI+ID0gW107XG5cbiAgYWRkRmlsZShmaWxlOiBGaWxlKSB7XG4gICAgdGhpcy5maWxlVXBsb2FkZXJzID0gW107XG4gICAgbGV0IHVwbG9hZE9wdGlvbnMgPSB0aGlzLnVwbG9hZE9wdGlvbnM7XG4gICAgaWYgKHRoaXMuZHluYW1pY1VwbG9hZE9wdGlvbnNGbikge1xuICAgICAgdXBsb2FkT3B0aW9ucyA9IHRoaXMuZHluYW1pY1VwbG9hZE9wdGlvbnNGbihmaWxlLCB0aGlzLnVwbG9hZE9wdGlvbnMpO1xuICAgIH1cbiAgICBzdXBlci5hZGRGaWxlKGZpbGUsIHVwbG9hZE9wdGlvbnMpO1xuICB9XG5cbiAgZGVsZXRlRmlsZShmaWxlOiBGaWxlKSB7XG4gICAgc3VwZXIuZGVsZXRlRmlsZShmaWxlKTtcbiAgICB0aGlzLmRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50LmVtaXQoZmlsZSk7XG4gIH1cblxuICBkZWxldGVQcmVVcGxvYWRGaWxlKGZpbGUpIHtcbiAgICBzdXBlci5kZWxldGVGaWxlKGZpbGUpO1xuICB9XG5cbiAgLy8g6Kej5YazdGVtcGxhdGVDb250ZXh0IOS8oOmAkm1ldGhvZC5iaW5kKHRoaXMp5byV5Y+R5qih5p2/5Lit5YaF5bWM57uE5Lu2aW5pdGlhbGl6ZemXrumimFxuICBkZWxldGVGaWxlUHJveHkgPSBmaWxlID0+IHtcbiAgICB0aGlzLmRlbGV0ZUZpbGUoZmlsZSk7XG4gIH07XG5cbiAgX29uRGVsZXRlVXBsb2FkZWRGaWxlKGZpbGVQYXRoOiBzdHJpbmcpIHtcbiAgICB0aGlzLmRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50LmVtaXQoZmlsZVBhdGgpO1xuICB9XG59XG4iLCI8ZC11cGxvYWRlZC1maWxlc1xuICAjZFVwbG9hZGVkRmlsZXNcbiAgW3VwbG9hZGVkRmlsZXNdPVwidXBsb2FkZWRGaWxlc1wiXG4gIFtmaWxlUGF0aF09XCJmaWxlUGF0aFwiXG4gIFt1cGxvYWRlZEZpbGVzUmVmXT1cInVwbG9hZGVkRmlsZXNSZWZcIlxuICAoZGVsZXRlVXBsb2FkZWRGaWxlRXZlbnQpPVwiX29uRGVsZXRlVXBsb2FkZWRGaWxlKCRldmVudClcIlxuPlxuPC9kLXVwbG9hZGVkLWZpbGVzPlxuPG5nLXRlbXBsYXRlXG4gIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInByZWxvYWRGaWxlc1JlZlwiXG4gIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7ICRpbXBsaWNpdDogdGhpcywgZmlsZVVwbG9hZGVyczogZmlsZVVwbG9hZGVycywgVXBsb2FkU3RhdHVzOiBVcGxvYWRTdGF0dXMsIGRlbGV0ZUZpbGU6IGRlbGV0ZUZpbGVQcm94eSB9XCJcbj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=