import { Component, EventEmitter, Input, Output, TemplateRef, } from '@angular/core';
import { I18nService } from 'ng-devui/i18n';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/i18n";
import * as i2 from "@angular/common";
export class UploadedFilesComponent {
    constructor(i18n) {
        this.i18n = i18n;
        this.uploadedFiles = [];
        this.deleteUploadedFileEvent = new EventEmitter();
        // 解决templateContext 传递method.bind(this)引发模板中内嵌组件initialize问题
        this.deleteFileProxy = filePath => {
            this.deleteFile(filePath);
        };
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    cleanUploadedFiles() {
        this.uploadedFiles = [];
    }
    addAndOverwriteFile(file) {
        this.cleanUploadedFiles();
        this.uploadedFiles.push(file);
    }
    addFile(file) {
        this.uploadedFiles.push(file);
    }
    deleteFile(filePath) {
        this.uploadedFiles = this.uploadedFiles.filter((file) => {
            return filePath !== file[this.filePath];
        });
        this.deleteUploadedFileEvent.emit(filePath);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
UploadedFilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadedFilesComponent, deps: [{ token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
UploadedFilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: UploadedFilesComponent, selector: "d-uploaded-files", inputs: { uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", filePath: "filePath" }, outputs: { deleteUploadedFileEvent: "deleteUploadedFileEvent" }, exportAs: ["dUploadFiles"], ngImport: i0, template: "<ng-template\n  [ngTemplateOutlet]=\"uploadedFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, uploadedFiles: uploadedFiles, filePath: filePath, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n", directives: [{ type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadedFilesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-uploaded-files', exportAs: 'dUploadFiles', preserveWhitespaces: false, template: "<ng-template\n  [ngTemplateOutlet]=\"uploadedFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, uploadedFiles: uploadedFiles, filePath: filePath, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }]; }, propDecorators: { uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], deleteUploadedFileEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZWQtZmlsZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvdXBsb2FkL3VwbG9hZGVkLWZpbGVzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL2RldnVpL3VwbG9hZC91cGxvYWRlZC1maWxlcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNOLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWlCLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQVMzRCxNQUFNLE9BQU8sc0JBQXNCO0lBT2pDLFlBQW9CLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7UUFONUIsa0JBQWEsR0FBa0IsRUFBRSxDQUFDO1FBR2pDLDRCQUF1QixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBaUMvRSw2REFBNkQ7UUFDN0Qsb0JBQWUsR0FBRyxRQUFRLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQztJQS9CRixDQUFDO0lBQ0QsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBWTtRQUM5QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVk7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFnQjtRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdEQsT0FBTyxRQUFRLEtBQU0sSUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQU1ELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FFckM7SUFDSCxDQUFDOzttSEE5Q1Usc0JBQXNCO3VHQUF0QixzQkFBc0IsNlBDbEJuQyxrTkFLQTsyRkRhYSxzQkFBc0I7a0JBTmxDLFNBQVM7K0JBQ0Usa0JBQWtCLFlBQ2xCLGNBQWMsdUJBRUgsS0FBSztrR0FHakIsYUFBYTtzQkFBckIsS0FBSztnQkFDRyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDSSx1QkFBdUI7c0JBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEkxOG5JbnRlcmZhY2UsIEkxOG5TZXJ2aWNlIH0gZnJvbSAnbmctZGV2dWkvaTE4bic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZC11cGxvYWRlZC1maWxlcycsXG4gIGV4cG9ydEFzOiAnZFVwbG9hZEZpbGVzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VwbG9hZGVkLWZpbGVzLmNvbXBvbmVudC5odG1sJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFVwbG9hZGVkRmlsZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHVwbG9hZGVkRmlsZXM6IEFycmF5PE9iamVjdD4gPSBbXTtcbiAgQElucHV0KCkgdXBsb2FkZWRGaWxlc1JlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgZmlsZVBhdGg6IHN0cmluZztcbiAgQE91dHB1dCgpIGRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBpMThuVGV4dDogSTE4bkludGVyZmFjZVsndXBsb2FkJ107XG4gIGkxOG5TdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBJMThuU2VydmljZSkge1xuXG4gIH1cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pMThuVGV4dCA9IHRoaXMuaTE4bi5nZXRJMThuVGV4dCgpLnVwbG9hZDtcbiAgICB0aGlzLmkxOG5TdWJzY3JpcHRpb24gPSB0aGlzLmkxOG4ubGFuZ0NoYW5nZSgpLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5pMThuVGV4dCA9IGRhdGEudXBsb2FkO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYW5VcGxvYWRlZEZpbGVzKCkge1xuICAgIHRoaXMudXBsb2FkZWRGaWxlcyA9IFtdO1xuICB9XG5cbiAgYWRkQW5kT3ZlcndyaXRlRmlsZShmaWxlOiBPYmplY3QpIHtcbiAgICB0aGlzLmNsZWFuVXBsb2FkZWRGaWxlcygpO1xuICAgIHRoaXMudXBsb2FkZWRGaWxlcy5wdXNoKGZpbGUpO1xuICB9XG5cbiAgYWRkRmlsZShmaWxlOiBPYmplY3QpIHtcbiAgICB0aGlzLnVwbG9hZGVkRmlsZXMucHVzaChmaWxlKTtcbiAgfVxuXG4gIGRlbGV0ZUZpbGUoZmlsZVBhdGg6IHN0cmluZykge1xuICAgIHRoaXMudXBsb2FkZWRGaWxlcyA9IHRoaXMudXBsb2FkZWRGaWxlcy5maWx0ZXIoKGZpbGUpID0+IHtcbiAgICAgIHJldHVybiBmaWxlUGF0aCAhPT0gKGZpbGUgYXMgYW55KVt0aGlzLmZpbGVQYXRoXTtcbiAgICB9KTtcbiAgICB0aGlzLmRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50LmVtaXQoZmlsZVBhdGgpO1xuICB9XG5cbiAgLy8g6Kej5YazdGVtcGxhdGVDb250ZXh0IOS8oOmAkm1ldGhvZC5iaW5kKHRoaXMp5byV5Y+R5qih5p2/5Lit5YaF5bWM57uE5Lu2aW5pdGlhbGl6ZemXrumimFxuICBkZWxldGVGaWxlUHJveHkgPSBmaWxlUGF0aCA9PiB7XG4gICAgdGhpcy5kZWxldGVGaWxlKGZpbGVQYXRoKTtcbiAgfTtcbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuaTE4blN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5pMThuU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cbiAgICB9XG4gIH1cbn1cbiIsIjxuZy10ZW1wbGF0ZVxuICBbbmdUZW1wbGF0ZU91dGxldF09XCJ1cGxvYWRlZEZpbGVzUmVmXCJcbiAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInsgJGltcGxpY2l0OiB0aGlzLCB1cGxvYWRlZEZpbGVzOiB1cGxvYWRlZEZpbGVzLCBmaWxlUGF0aDogZmlsZVBhdGgsIGRlbGV0ZUZpbGU6IGRlbGV0ZUZpbGVQcm94eSB9XCJcbj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=