import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { I18nService } from 'ng-devui/i18n';
import { IUploadOptions, UploadStatus } from './file-uploader.types';
import { UploadComponent } from './upload.class';
import { UploadedFilesComponent } from './uploaded-files.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/i18n";
import * as i2 from "./uploaded-files.component";
import * as i3 from "@angular/common";
export class MultipleUploadViewComponent extends UploadComponent {
    constructor(i18n) {
        super();
        this.i18n = i18n;
        this.uploadedFiles = [];
        this.deleteUploadedFileEvent = new EventEmitter();
        this.UploadStatus = UploadStatus;
        this.fileUploaders = [];
        // 解决templateContext 传递method.bind(this)引发模板中内嵌组件initialize问题
        this.deleteFileProxy = file => {
            this.deleteFile(file);
        };
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    addFile(file) {
        let uploadOptions = this.uploadOptions;
        if (this.setCustomUploadOptions) {
            uploadOptions = this.setCustomUploadOptions(file, this.uploadOptions);
        }
        super.addFile(file, uploadOptions);
    }
    deleteFile(file) {
        super.deleteFile(file);
        this.deleteUploadedFileEvent.emit(file);
    }
    deletePreUploadFile(file) {
        super.deleteFile(file);
    }
    removeFiles() {
        super.removeFiles();
    }
    _onDeleteUploadedFile(filePath) {
        this.deleteUploadedFileEvent.emit(filePath);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
MultipleUploadViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MultipleUploadViewComponent, deps: [{ token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
MultipleUploadViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: MultipleUploadViewComponent, selector: "d-multiple-upload-view", inputs: { uploadOptions: "uploadOptions", preloadFilesRef: "preloadFilesRef", uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", filePath: "filePath", setCustomUploadOptions: "setCustomUploadOptions" }, outputs: { deleteUploadedFileEvent: "deleteUploadedFileEvent" }, viewQueries: [{ propertyName: "uploadedFilesComponent", first: true, predicate: ["dUploadedFiles"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n", components: [{ type: i2.UploadedFilesComponent, selector: "d-uploaded-files", inputs: ["uploadedFiles", "uploadedFilesRef", "filePath"], outputs: ["deleteUploadedFileEvent"], exportAs: ["dUploadFiles"] }], directives: [{ type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MultipleUploadViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-multiple-upload-view', preserveWhitespaces: false, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }]; }, propDecorators: { uploadedFilesComponent: [{
                type: ViewChild,
                args: ['dUploadedFiles', { static: true }]
            }], uploadOptions: [{
                type: Input
            }], preloadFilesRef: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], deleteUploadedFileEvent: [{
                type: Output
            }], setCustomUploadOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwbGUtdXBsb2FkLXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvdXBsb2FkL211bHRpcGxlLXVwbG9hZC12aWV3LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL2RldnVpL3VwbG9hZC9tdWx0aXBsZS11cGxvYWQtdmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFpQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0QsT0FBTyxFQUNMLGNBQWMsRUFDZCxZQUFZLEVBQ2IsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7O0FBTXBFLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxlQUFlO0lBYTlELFlBQW9CLElBQWlCO1FBQ25DLEtBQUssRUFBRSxDQUFDO1FBRFUsU0FBSSxHQUFKLElBQUksQ0FBYTtRQVQ1QixrQkFBYSxHQUFrQixFQUFFLENBQUM7UUFHakMsNEJBQXVCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFL0UsaUJBQVksR0FBRyxZQUFZLENBQUM7UUFDNUIsa0JBQWEsR0FBd0IsRUFBRSxDQUFDO1FBa0N4Qyw2REFBNkQ7UUFDN0Qsb0JBQWUsR0FBRyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQztJQWhDRixDQUFDO0lBQ0QsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFJO1FBQ1YsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUN2QyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixhQUFhLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkU7UUFDRCxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsVUFBVSxDQUFDLElBQUk7UUFDYixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELG1CQUFtQixDQUFDLElBQUk7UUFDdEIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVztRQUNULEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBT0QscUJBQXFCLENBQUMsUUFBZ0I7UUFDcEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUVyQztJQUNILENBQUM7O3dIQTFEVSwyQkFBMkI7NEdBQTNCLDJCQUEyQiw0ZkN6QnhDLGljQWFBOzJGRFlhLDJCQUEyQjtrQkFMdkMsU0FBUzsrQkFDRSx3QkFBd0IsdUJBRWIsS0FBSztrR0FHcUIsc0JBQXNCO3NCQUFwRSxTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDcEMsYUFBYTtzQkFBckIsS0FBSztnQkFDRyxlQUFlO3NCQUF2QixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0ksdUJBQXVCO3NCQUFoQyxNQUFNO2dCQUNFLHNCQUFzQjtzQkFBOUIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEkxOG5JbnRlcmZhY2UsIEkxOG5TZXJ2aWNlIH0gZnJvbSAnbmctZGV2dWkvaTE4bic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbGVVcGxvYWRlciB9IGZyb20gJy4vZmlsZS11cGxvYWRlci5jbGFzcyc7XG5pbXBvcnQge1xuICBJVXBsb2FkT3B0aW9ucyxcbiAgVXBsb2FkU3RhdHVzXG59IGZyb20gJy4vZmlsZS11cGxvYWRlci50eXBlcyc7XG5pbXBvcnQgeyBVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuL3VwbG9hZC5jbGFzcyc7XG5pbXBvcnQgeyBVcGxvYWRlZEZpbGVzQ29tcG9uZW50IH0gZnJvbSAnLi91cGxvYWRlZC1maWxlcy5jb21wb25lbnQnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZC1tdWx0aXBsZS11cGxvYWQtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi9tdWx0aXBsZS11cGxvYWQtdmlldy5jb21wb25lbnQuaHRtbCcsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBNdWx0aXBsZVVwbG9hZFZpZXdDb21wb25lbnQgZXh0ZW5kcyBVcGxvYWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kgLCBPbkluaXQge1xuICBAVmlld0NoaWxkKCdkVXBsb2FkZWRGaWxlcycsIHsgc3RhdGljOiB0cnVlIH0pIHVwbG9hZGVkRmlsZXNDb21wb25lbnQ6IFVwbG9hZGVkRmlsZXNDb21wb25lbnQ7XG4gIEBJbnB1dCgpIHVwbG9hZE9wdGlvbnM6IElVcGxvYWRPcHRpb25zO1xuICBASW5wdXQoKSBwcmVsb2FkRmlsZXNSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHVwbG9hZGVkRmlsZXM6IEFycmF5PE9iamVjdD4gPSBbXTtcbiAgQElucHV0KCkgdXBsb2FkZWRGaWxlc1JlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgZmlsZVBhdGg6IHN0cmluZztcbiAgQE91dHB1dCgpIGRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBASW5wdXQoKSBzZXRDdXN0b21VcGxvYWRPcHRpb25zOiAoZmlsZXMsIHVwbG9hZE9wdGlvbnMpID0+IElVcGxvYWRPcHRpb25zO1xuICBVcGxvYWRTdGF0dXMgPSBVcGxvYWRTdGF0dXM7XG4gIGZpbGVVcGxvYWRlcnM6IEFycmF5PEZpbGVVcGxvYWRlcj4gPSBbXTtcbiAgaTE4blRleHQ6IEkxOG5JbnRlcmZhY2VbJ3VwbG9hZCddO1xuICBpMThuU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4bjogSTE4blNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaTE4blRleHQgPSB0aGlzLmkxOG4uZ2V0STE4blRleHQoKS51cGxvYWQ7XG4gICAgdGhpcy5pMThuU3Vic2NyaXB0aW9uID0gdGhpcy5pMThuLmxhbmdDaGFuZ2UoKS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcbiAgICAgIHRoaXMuaTE4blRleHQgPSBkYXRhLnVwbG9hZDtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEZpbGUoZmlsZSkge1xuICAgIGxldCB1cGxvYWRPcHRpb25zID0gdGhpcy51cGxvYWRPcHRpb25zO1xuICAgIGlmICh0aGlzLnNldEN1c3RvbVVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHVwbG9hZE9wdGlvbnMgPSB0aGlzLnNldEN1c3RvbVVwbG9hZE9wdGlvbnMoZmlsZSwgdGhpcy51cGxvYWRPcHRpb25zKTtcbiAgICB9XG4gICAgc3VwZXIuYWRkRmlsZShmaWxlLCB1cGxvYWRPcHRpb25zKTtcbiAgfVxuXG4gIGRlbGV0ZUZpbGUoZmlsZSkge1xuICAgIHN1cGVyLmRlbGV0ZUZpbGUoZmlsZSk7XG4gICAgdGhpcy5kZWxldGVVcGxvYWRlZEZpbGVFdmVudC5lbWl0KGZpbGUpO1xuICB9XG5cbiAgZGVsZXRlUHJlVXBsb2FkRmlsZShmaWxlKSB7XG4gICAgc3VwZXIuZGVsZXRlRmlsZShmaWxlKTtcbiAgfVxuXG4gIHJlbW92ZUZpbGVzKCkge1xuICAgIHN1cGVyLnJlbW92ZUZpbGVzKCk7XG4gIH1cblxuICAvLyDop6PlhrN0ZW1wbGF0ZUNvbnRleHQg5Lyg6YCSbWV0aG9kLmJpbmQodGhpcynlvJXlj5HmqKHmnb/kuK3lhoXltYznu4Tku7Zpbml0aWFsaXpl6Zeu6aKYXG4gIGRlbGV0ZUZpbGVQcm94eSA9IGZpbGUgPT4ge1xuICAgIHRoaXMuZGVsZXRlRmlsZShmaWxlKTtcbiAgfTtcblxuICBfb25EZWxldGVVcGxvYWRlZEZpbGUoZmlsZVBhdGg6IHN0cmluZykge1xuICAgIHRoaXMuZGVsZXRlVXBsb2FkZWRGaWxlRXZlbnQuZW1pdChmaWxlUGF0aCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pMThuU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmkxOG5TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblxuICAgIH1cbiAgfVxufVxuIiwiPGQtdXBsb2FkZWQtZmlsZXNcbiAgI2RVcGxvYWRlZEZpbGVzXG4gIFt1cGxvYWRlZEZpbGVzXT1cInVwbG9hZGVkRmlsZXNcIlxuICBbZmlsZVBhdGhdPVwiZmlsZVBhdGhcIlxuICBbdXBsb2FkZWRGaWxlc1JlZl09XCJ1cGxvYWRlZEZpbGVzUmVmXCJcbiAgKGRlbGV0ZVVwbG9hZGVkRmlsZUV2ZW50KT1cIl9vbkRlbGV0ZVVwbG9hZGVkRmlsZSgkZXZlbnQpXCJcbj5cbjwvZC11cGxvYWRlZC1maWxlcz5cbjxuZy10ZW1wbGF0ZVxuICBbbmdUZW1wbGF0ZU91dGxldF09XCJwcmVsb2FkRmlsZXNSZWZcIlxuICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwieyAkaW1wbGljaXQ6IHRoaXMsIGZpbGVVcGxvYWRlcnM6IGZpbGVVcGxvYWRlcnMsIFVwbG9hZFN0YXR1czogVXBsb2FkU3RhdHVzLCBkZWxldGVGaWxlOiBkZWxldGVGaWxlUHJveHkgfVwiXG4+XG48L25nLXRlbXBsYXRlPlxuIl19