import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { from } from 'rxjs';
import { debounceTime, last, map, mergeMap } from 'rxjs/operators';
import { IFileOptions, IUploadOptions, UploadStatus } from './file-uploader.types';
import { SelectFiles } from './select-files.utils';
import { UploadComponent } from './upload.class';
import * as i0 from "@angular/core";
import * as i1 from "./select-files.utils";
import * as i2 from "ng-devui/i18n";
export class UploadDirective extends UploadComponent {
    constructor(selectFiles, i18n, element) {
        super();
        this.selectFiles = selectFiles;
        this.i18n = i18n;
        this.uploadedFiles = [];
        this.fileUploaders = [];
        this.enableDrop = false;
        this.fileOver = new EventEmitter();
        this.fileDrop = new EventEmitter();
        this.successEvent = new EventEmitter();
        this.errorEvent = new EventEmitter();
        this.alertMsgEvent = new EventEmitter();
        this.fileSelect = new EventEmitter();
        this.errorMsg = [];
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.element = element;
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    writeValue(files) {
        if (files) {
            const simulateFiles = from(this.simulateSelectFiles(files)).pipe(mergeMap(file => file));
            this._dealFiles(simulateFiles);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    simulateSelectFiles(files) {
        return new Promise((resolve) => {
            resolve(Array.prototype.slice.call(files));
        });
    }
    onClick() {
        this._dealFiles(this.selectFiles.triggerSelectFiles(this.fileOptions, this.uploadOptions));
    }
    _dealFiles(observale) {
        super.resetSameNameFiles();
        observale.pipe(map(file => {
            let uploadOptions = this.uploadOptions;
            if (this.dynamicUploadOptionsFn) {
                uploadOptions = this.dynamicUploadOptionsFn(file, this.uploadOptions);
            }
            super.addFile(file, uploadOptions);
        }), debounceTime(100))
            .subscribe(() => {
            this.checkValid();
            this.checkSameName();
            const selectedFiles = this.fileUploaders
                .filter(fileUploader => fileUploader.status === UploadStatus.preLoad)
                .map(fileUploader => fileUploader.file);
            this.onFileSelect(selectedFiles);
            this.uploadFiles();
        }, (error) => {
            this.errorMsg = [{ severity: 'warn', detail: error.message }];
            this.alertMsgEvent.emit(this.errorMsg);
        });
    }
    checkSameName() {
        const sameNameFiles = super.getSameNameFiles();
        if (this.uploadOptions.checkSameName && sameNameFiles.length) {
            this.errorMsg = [{
                    severity: 'warn',
                    detail: this.i18nText.getExistSameNameFilesMsg(sameNameFiles)
                }];
            this.alertMsgEvent.emit(this.errorMsg);
        }
    }
    // 文件大小、类型是否符合上传条件
    checkValid() {
        let totalFileSize = 0;
        this.fileUploaders.forEach(fileUploader => {
            totalFileSize += fileUploader.file.size;
            const checkResult = this.selectFiles._validateFiles(fileUploader.file, this.fileOptions.accept, fileUploader.uploadOptions);
            if (checkResult && checkResult.checkError) {
                super.deleteFile(fileUploader.file);
                this.errorMsg = [{ severity: 'warn', detail: checkResult.errorMsg }];
                this.alertMsgEvent.emit(this.errorMsg);
                return;
            }
        });
    }
    uploadFiles() {
        this.canUpload().then((canUpload) => {
            if (!canUpload) {
                return;
            }
            const uploadObservable = super.upload();
            uploadObservable
                .pipe(last())
                .subscribe((results) => {
                this.successEvent.emit(results);
                results.forEach((result) => {
                    this.uploadedFiles.push(result.file);
                });
            }, (error) => {
                this.errorEvent.emit(error);
            });
        });
    }
    onFileSelect(files) {
        this.fileSelect.emit(files);
    }
    onDrop(event) {
        if (!this.enableDrop) {
            return;
        }
        const transfer = this._getTransfer(event);
        if (!transfer) {
            return;
        }
        this._preventAndStop(event);
        this._dealFiles(this.selectFiles.triggerDropFiles(this.fileOptions, this.uploadOptions, transfer.files));
        this.fileDrop.emit(transfer.files);
    }
    onDragOver(event) {
        if (!this.enableDrop) {
            return;
        }
        const transfer = this._getTransfer(event);
        if (!this._haveFiles(transfer.types)) {
            return;
        }
        this._preventAndStop(event);
        this.fileOver.emit(true);
    }
    onDragLeave(event) {
        if (!this.enableDrop) {
            return;
        }
        if (this.element) {
            if (event.currentTarget === this.element[0]) {
                return;
            }
        }
        this._preventAndStop(event);
        this.fileOver.emit(false);
    }
    _getTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;
    }
    _preventAndStop(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    _haveFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        else if (types.contains) {
            return types.contains('Files');
        }
        else {
            return false;
        }
    }
    canUpload() {
        let uploadResult = Promise.resolve(true);
        if (this.beforeUpload) {
            const result = this.beforeUpload(this.fileUploaders);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    uploadResult = result;
                }
                else if (result.subscribe) {
                    uploadResult = result.toPromise();
                }
                else {
                    uploadResult = Promise.resolve(result);
                }
            }
        }
        return uploadResult;
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
UploadDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadDirective, deps: [{ token: i1.SelectFiles }, { token: i2.I18nService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
UploadDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: UploadDirective, selector: "[dUpload]", inputs: { uploadOptions: "uploadOptions", fileOptions: "fileOptions", uploadedFiles: "uploadedFiles", fileUploaders: "fileUploaders", enableDrop: "enableDrop", dynamicUploadOptionsFn: "dynamicUploadOptionsFn", beforeUpload: "beforeUpload" }, outputs: { fileOver: "fileOver", fileDrop: "fileDrop", successEvent: "successEvent", errorEvent: "errorEvent", alertMsgEvent: "alertMsgEvent", fileSelect: "fileSelect" }, host: { listeners: { "click": "onClick()", "drop": "onDrop($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => UploadDirective),
            multi: true
        }
    ], exportAs: ["dUpload"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dUpload]',
                    exportAs: 'dUpload',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => UploadDirective),
                            multi: true
                        }
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.SelectFiles }, { type: i2.I18nService }, { type: i0.ElementRef }]; }, propDecorators: { uploadOptions: [{
                type: Input
            }], fileOptions: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], fileUploaders: [{
                type: Input
            }], enableDrop: [{
                type: Input
            }], dynamicUploadOptionsFn: [{
                type: Input
            }], beforeUpload: [{
                type: Input
            }], fileOver: [{
                type: Output
            }], fileDrop: [{
                type: Output
            }], successEvent: [{
                type: Output
            }], errorEvent: [{
                type: Output
            }], alertMsgEvent: [{
                type: Output
            }], fileSelect: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,