import { EventEmitter } from '@angular/core';
export class PreserveNextEventEmitter extends EventEmitter {
    constructor(isAsync = false) {
        super(isAsync);
        this._isAsync = isAsync;
    }
    get schedulerFns() { return this._schedulerFns; }
    forceCallback(value, once = false) {
        if (this.schedulerFns && this.schedulerFns.size) {
            this.schedulerFns.forEach(fn => {
                fn(value);
            });
            if (once) {
                this.cleanCallbackFn();
            }
        }
    }
    cleanCallbackFn() {
        this._schedulerFns = undefined;
    }
    emit(value) { super.emit(value); }
    subscribe(generatorOrNext, error, complete) {
        let schedulerFn;
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this._isAsync ? (value) => {
                setTimeout(() => generatorOrNext.next(value));
            } : (value) => { generatorOrNext.next(value); };
        }
        else {
            schedulerFn = this._isAsync ? (value) => { setTimeout(() => generatorOrNext(value)); } :
                (value) => { generatorOrNext(value); };
        }
        if (!this._schedulerFns) {
            this._schedulerFns = new Set();
        }
        this._schedulerFns.add(schedulerFn);
        return super.subscribe(generatorOrNext, error, complete);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VydmUtbmV4dC1ldmVudC1lbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2dWkvZHJhZ2Ryb3Avc2hhcmVkL3ByZXNlcnZlLW5leHQtZXZlbnQtZW1pdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdDLE1BQU0sT0FBTyx3QkFBNEIsU0FBUSxZQUFlO0lBTTlELFlBQVksT0FBTyxHQUFHLEtBQUs7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUxELElBQUksWUFBWSxLQUFLLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFPakQsYUFBYSxDQUFDLEtBQVEsRUFBRSxJQUFJLEdBQUcsS0FBSztRQUNsQyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQzdCLEVBQUUsQ0FBRSxLQUFLLENBQUMsQ0FBQztZQUNiLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO2FBQ3hCO1NBQ0Y7SUFDSCxDQUFDO0lBQ0QsZUFBZTtRQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLENBQUMsS0FBUyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRDLFNBQVMsQ0FBQyxlQUFxQixFQUFFLEtBQVcsRUFBRSxRQUFjO1FBQzFELElBQUksV0FBNEIsQ0FBQztRQUVqQyxJQUFJLGVBQWUsSUFBSSxPQUFPLGVBQWUsS0FBSyxRQUFRLEVBQUU7WUFDMUQsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQzNDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0RDthQUFNO1lBQ0wsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0YsQ0FBQyxLQUFVLEVBQUUsRUFBRSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxHQUFHLEVBQU8sQ0FBQztTQUNyQztRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXBDLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgUHJlc2VydmVOZXh0RXZlbnRFbWl0dGVyPFQ+IGV4dGVuZHMgRXZlbnRFbWl0dGVyPFQ+IHtcbiAgLyoqIOS/neeVmeazqOWGjOeahCBnZW5lcmF0b3JPck5leHTmnoTmiJDnmoTlh73mlbAqL1xuICBwcml2YXRlIF9zY2hlZHVsZXJGbnM6IFNldDxhbnk+O1xuICBwcml2YXRlIF9pc0FzeW5jOiBib29sZWFuO1xuICBnZXQgc2NoZWR1bGVyRm5zKCkgeyByZXR1cm4gdGhpcy5fc2NoZWR1bGVyRm5zOyB9XG5cbiAgY29uc3RydWN0b3IoaXNBc3luYyA9IGZhbHNlKSB7XG4gICAgc3VwZXIoaXNBc3luYyk7XG4gICAgdGhpcy5faXNBc3luYyA9IGlzQXN5bmM7XG4gIH1cblxuICBmb3JjZUNhbGxiYWNrKHZhbHVlOiBULCBvbmNlID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5zY2hlZHVsZXJGbnMgJiYgdGhpcy5zY2hlZHVsZXJGbnMuc2l6ZSkge1xuICAgICAgdGhpcy5zY2hlZHVsZXJGbnMuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgIGZuICh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChvbmNlKSB7XG4gICAgICAgIHRoaXMuY2xlYW5DYWxsYmFja0ZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNsZWFuQ2FsbGJhY2tGbigpIHtcbiAgICB0aGlzLl9zY2hlZHVsZXJGbnMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBlbWl0KHZhbHVlPzogVCkgeyBzdXBlci5lbWl0KHZhbHVlKTsgfVxuXG4gIHN1YnNjcmliZShnZW5lcmF0b3JPck5leHQ/OiBhbnksIGVycm9yPzogYW55LCBjb21wbGV0ZT86IGFueSk6IGFueSB7XG4gICAgbGV0IHNjaGVkdWxlckZuOiAodDogYW55KSA9PiBhbnk7XG5cbiAgICBpZiAoZ2VuZXJhdG9yT3JOZXh0ICYmIHR5cGVvZiBnZW5lcmF0b3JPck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBzY2hlZHVsZXJGbiA9IHRoaXMuX2lzQXN5bmMgPyAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGdlbmVyYXRvck9yTmV4dC5uZXh0KHZhbHVlKSk7XG4gICAgICB9IDogKHZhbHVlOiBhbnkpID0+IHsgZ2VuZXJhdG9yT3JOZXh0Lm5leHQodmFsdWUpOyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZXJGbiA9IHRoaXMuX2lzQXN5bmMgPyAodmFsdWU6IGFueSkgPT4geyBzZXRUaW1lb3V0KCgpID0+IGdlbmVyYXRvck9yTmV4dCh2YWx1ZSkpOyB9IDpcbiAgICAgICAgKHZhbHVlOiBhbnkpID0+IHsgZ2VuZXJhdG9yT3JOZXh0KHZhbHVlKTsgfTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9zY2hlZHVsZXJGbnMpIHtcbiAgICAgIHRoaXMuX3NjaGVkdWxlckZucyA9IG5ldyBTZXQ8YW55PigpO1xuICAgIH1cbiAgICB0aGlzLl9zY2hlZHVsZXJGbnMuYWRkKHNjaGVkdWxlckZuKTtcblxuICAgIHJldHVybiBzdXBlci5zdWJzY3JpYmUoZ2VuZXJhdG9yT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICB9XG5cbn1cbiJdfQ==