import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostBinding, Inject, Input, NgZone, Optional, Output, Renderer2, Self } from '@angular/core';
import { fromEvent, Subject, Subscription } from 'rxjs';
import { DragDropService } from '../services/drag-drop.service';
import { Utils } from '../shared/utils';
import { PreserveNextEventEmitter } from './../shared/preserve-next-event-emitter';
import { DragPreviewDirective } from './drag-preview.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/drag-drop.service";
import * as i2 from "./drag-preview.directive";
/**
 * Makes an element draggable by adding the draggable html attribute
 */
export class DraggableDirective {
    constructor(el, renderer, dragDropService, ngZone, dragPreviewDirective, doc) {
        this.el = el;
        this.renderer = renderer;
        this.dragDropService = dragDropService;
        this.ngZone = ngZone;
        this.dragPreviewDirective = dragPreviewDirective;
        this.doc = doc;
        this.draggable = true;
        /**
         * Currently not used
         */
        this.dragEffect = 'move';
        /**
         * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
         */
        this.dragScope = 'default';
        this.dragHandleClass = 'drag-handle';
        /**
         * Event fired when Drag is started
         */
        this.dragStartEvent = new EventEmitter();
        /**
         * @deprecated
         * Event fired while the element is being dragged
         * 为了性能优化，该函数废弃，请用(drag)自行监听， 如果不需要angular脏检测则最好用runOutsideAngular的addEventListener监听以获得好的性能
         */
        this.dragEvent = new PreserveNextEventEmitter();
        /**
         * Event fired when dragged ends
         */
        this.dragEndEvent = new EventEmitter();
        this.dropEndEvent = new PreserveNextEventEmitter();
        this.enableDragFollow = false; // 默认false使用浏览器H5API拖拽, 否则使用原dom定位偏移
        this.dragItemParentName = ''; // 当前拖拽元素的类名或元素名称（类名需要加.）,主要用于子节点的截取操作
        this.dragItemChildrenName = ''; // 当前拖拽元素的子节点类名或元素名称（类名需要加.）
        this.dragsSub = new Subscription();
        this.destroyDragEndSub = new Subscription();
        this.dragElShowHideEvent = new Subject();
        this.beforeDragStartEvent = new Subject();
        this.insertOriginPlaceholder = (directShow = true, updateService = true) => {
            if (this.delayRemoveOriginPlaceholderTimer) {
                clearTimeout(this.delayRemoveOriginPlaceholderTimer);
                this.delayRemoveOriginPlaceholderTimer = undefined;
            }
            const node = this.document.createElement(this.originPlaceholder.tag || 'div');
            const rect = this.el.nativeElement.getBoundingClientRect();
            if (directShow) {
                node.style.display = 'block';
            }
            else {
                node.style.display = 'none';
            }
            node.style.width = rect.width + 'px';
            node.style.height = rect.height + 'px';
            node.classList.add('drag-origin-placeholder');
            if (this.originPlaceholder.text) {
                node.innerText = this.originPlaceholder.text;
            }
            if (this.originPlaceholder.style) {
                Utils.addElStyles(node, this.originPlaceholder.style);
            }
            if (updateService) {
                this.dragDropService.dragOriginPlaceholder = node;
                this.dragDropService.dragOriginPlaceholderNextSibling = this.el.nativeElement.nextSibling;
            }
            else {
                node.classList.add('side-drag-origin-placeholder');
                const originCloneNode = this.el.nativeElement.cloneNode(true);
                originCloneNode.style.margin = 0;
                originCloneNode.style.pointerEvents = 'none';
                originCloneNode.style.opacity = '0.3';
                node.appendChild(originCloneNode);
            }
            this.dragOriginPlaceholder = node;
            this.dragOriginPlaceholderNextSibling = this.el.nativeElement.nextSibling;
            this.el.nativeElement.parentElement.insertBefore(node, this.el.nativeElement.nextSibling);
        };
        this.removeOriginPlaceholder = (updateService = true) => {
            if (this.dragOriginPlaceholder) {
                this.dragOriginPlaceholder.parentElement.removeChild(this.dragOriginPlaceholder);
            }
            if (updateService) {
                this.dragDropService.dragOriginPlaceholder = undefined;
                this.dragDropService.dragOriginPlaceholderNextSibling = undefined;
            }
            this.dragOriginPlaceholder = undefined;
            this.dragOriginPlaceholderNextSibling = undefined;
        };
        this.delayRemoveOriginPlaceholder = (updateService = true) => {
            const timeout = this.originPlaceholder.removeDelay;
            const delayOriginPlaceholder = this.dragOriginPlaceholder;
            const dragOriginPlaceholderNextSibling = this.findNextSibling(this.dragOriginPlaceholderNextSibling);
            // 需要临时移动位置，保证被ngFor刷新之后位置是正确的
            // ngFor刷新的原理是有变化的部分都刷新，夹在变化部分中间的内容将被刷到变化部分之后的位置，所以需要恢复位置
            // setTimeout是等ngFor的View刷新, 后续需要订阅sortContainer的view的更新才需要重新恢复位置
            if (delayOriginPlaceholder.parentElement.contains(dragOriginPlaceholderNextSibling)) {
                delayOriginPlaceholder.parentElement.insertBefore(delayOriginPlaceholder, dragOriginPlaceholderNextSibling);
            }
            setTimeout(() => {
                if (delayOriginPlaceholder.parentElement.contains(dragOriginPlaceholderNextSibling)) {
                    delayOriginPlaceholder.parentElement.insertBefore(delayOriginPlaceholder, dragOriginPlaceholderNextSibling);
                }
                delayOriginPlaceholder.classList.add('delay-deletion');
                this.delayRemoveOriginPlaceholderTimer = setTimeout(() => {
                    delayOriginPlaceholder.parentElement.removeChild(delayOriginPlaceholder);
                    if (this.document.body.contains(this.el.nativeElement)) {
                        this.el.nativeElement.style.display = '';
                        this.dragDropService.dragElShowHideEvent.next(false);
                    }
                }, timeout);
                if (updateService) {
                    this.dragDropService.dragOriginPlaceholder = undefined;
                    this.dragDropService.dragOriginPlaceholderNextSibling = undefined;
                }
                this.dragOriginPlaceholder = undefined;
                this.dragOriginPlaceholderNextSibling = undefined;
            });
        };
        this.document = this.doc;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        this.draggable = !this._disabled;
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.dragsSub.add(fromEvent(this.el.nativeElement, 'mouseover').subscribe(event => this.mouseover(event)));
            this.dragsSub.add(fromEvent(this.el.nativeElement, 'dragstart').subscribe(event => this.dragStart(event)));
            this.dragsSub.add(fromEvent(this.el.nativeElement, 'dragend').subscribe(event => this.dragEnd(event)));
        });
    }
    dropSubscription() {
        this.dragDropService.newSubscription().add(this.dragDropService.dropEvent.subscribe((event) => {
            this.mouseOverElement = undefined;
            this.renderer.removeClass(this.el.nativeElement, this.dragOverClass);
            this.dropEndEvent.emit(event);
            // 兼容虚拟滚动后被销毁
            if (this.isDestroyed) {
                if (this.dropEndEvent.schedulerFns && this.dropEndEvent.schedulerFns.size > 0) {
                    this.dropEndEvent.forceCallback(event, true);
                }
            }
            if (this.dragDropService.dragOriginPlaceholder) {
                if (this.originPlaceholder && this.originPlaceholder.removeDelay > 0
                    && !this.dragDropService.dropOnOrigin) { // 非drop到自己的情况
                    this.delayRemoveOriginPlaceholder();
                }
                else {
                    this.removeOriginPlaceholder();
                }
                this.dragDropService.draggedElIdentity = undefined;
            }
            this.dragDropService.subscription.unsubscribe();
        })).add(this.dragDropService.dragElShowHideEvent.subscribe(this.dragElShowHideEvent));
    }
    ngAfterViewInit() {
        this.applyDragHandleClass();
        if (this.dragIdentity) {
            if (this.dragDropService.draggedEl && this.dragIdentity === this.dragDropService.draggedElIdentity) {
                if (this.originPlaceholder && this.originPlaceholder.show !== false) {
                    this.insertOriginPlaceholder();
                }
                this.dragDropService.draggedEl = this.el.nativeElement;
                this.el.nativeElement.style.display = 'none'; // recovery don't need to emit event
            }
        }
    }
    ngOnDestroy() {
        // 兼容虚拟滚动后被销毁
        this.isDestroyed = true;
        if (this.dragDropService.draggedEl === this.el.nativeElement) {
            this.destroyDragEndSub = new Subscription();
            this.destroyDragEndSub.add(fromEvent(this.el.nativeElement, 'dragend').subscribe(event => {
                this.dragEnd(event);
                if (this.dropEndEvent.schedulerFns && this.dropEndEvent.schedulerFns.size > 0) {
                    this.dropEndEvent.forceCallback(event, true);
                }
                this.destroyDragEndSub.unsubscribe();
                this.destroyDragEndSub = undefined;
            }));
            if (this.originPlaceholder && this.originPlaceholder.show !== false
                && this.dragDropService.dragOriginPlaceholder && this.dragDropService.draggedElIdentity) {
                // 如果有originPlaceholder 则销毁
                this.removeOriginPlaceholder();
            }
        }
        this.dragsSub.unsubscribe();
    }
    dragStart(e) {
        if (this.allowDrag(e)) {
            this.renderer.addClass(this.el.nativeElement, this.dragOverClass);
            this.dragDropService.dragData = this.dragData;
            this.dragDropService.scope = this.dragScope;
            this.dragDropService.draggedEl = this.el.nativeElement;
            this.dragDropService.draggedElIdentity = this.dragIdentity;
            this.dragDropService.dragFollow = this.enableDragFollow;
            this.dragDropService.dragFollowOptions = this.dragFollowOptions;
            this.dragDropService.dragItemParentName = this.dragItemParentName;
            this.dragDropService.dragItemChildrenName = this.dragItemChildrenName;
            this.beforeDragStartEvent.next();
            if (this.dragPreviewDirective && this.dragPreviewDirective.dragPreviewTemplate) {
                this.dragDropService.dragFollow = true;
                this.dragDropService.dragPreviewDirective = this.dragPreviewDirective;
            }
            if (this.batchDraggable) {
                if (this.batchDraggable.dragData) {
                    // 有dragData证明被加入到了group里
                    if (this.dragDropService.batchDragData && this.dragDropService.batchDragData.length > 1) {
                        this.dragDropService.batchDragging = true;
                        this.dragDropService.batchDragStyle = this.batchDraggable.batchDragStyle;
                    }
                }
                else if (this.batchDraggable.batchDragLastOneAutoActiveEventKeys) {
                    const batchActiveAble = this.batchDraggable.batchDragLastOneAutoActiveEventKeys
                        .map(key => e[key])
                        .some(eventKey => eventKey === true);
                    if (batchActiveAble) {
                        if (this.dragDropService.batchDragData && this.dragDropService.batchDragData.length > 0) {
                            this.batchDraggable.active();
                            if (!this.batchDraggable.dragData) {
                                // 如果用户没做任何处理把项目加到组里则加到组里
                                this.batchDraggable.addToBatchGroup();
                            }
                            if (this.dragDropService.batchDragData.some(dragData => dragData.draggable === this)) {
                                this.dragDropService.batchDragging = true;
                                this.dragDropService.batchDragStyle = this.batchDraggable.batchDragStyle;
                            }
                        }
                    }
                }
            }
            const targetOffset = this.el.nativeElement.getBoundingClientRect();
            if (this.dragDropService.dragFollow) {
                const mousePositionXY = this.mousePosition(e);
                // 用于出现transform的场景position:fixed相对位置变更
                const transformOffset = this.checkAndGetViewPointChange(this.el.nativeElement);
                this.dragDropService.dragOffset = {
                    left: targetOffset.left,
                    top: targetOffset.top,
                    offsetLeft: mousePositionXY.x - targetOffset.left + transformOffset.offsetX,
                    offsetTop: mousePositionXY.y - targetOffset.top + transformOffset.offsetY,
                    width: targetOffset.width,
                    height: targetOffset.height
                };
                this.dragDropService.enableDraggedCloneNodeFollowMouse();
            }
            else {
                this.dragDropService.dragOffset = {
                    left: targetOffset.left,
                    top: targetOffset.top,
                    offsetLeft: null,
                    offsetTop: null,
                    width: targetOffset.width,
                    height: targetOffset.height
                };
            }
            if (this.originPlaceholder && this.originPlaceholder.show !== false) {
                this.insertOriginPlaceholder(false);
            }
            if (this.dragDropService.batchDragging
                && this.dragDropService.batchDragData && this.dragDropService.batchDragData.length > 1) {
                this.dragDropService.batchDragData.map(dragData => dragData.draggable)
                    .filter(draggable => draggable && draggable !== this)
                    .forEach((draggable) => {
                    if (draggable.originPlaceholder && draggable.originPlaceholder.show !== false) {
                        draggable.insertOriginPlaceholder(true, false);
                        draggable.el.nativeElement.style.display = 'none';
                    }
                    else {
                        setTimeout(() => { draggable.el.nativeElement.style.display = 'none'; });
                    }
                });
            }
            // Firefox requires setData() to be called otherwise the drag does not work.
            if (e.dataTransfer !== null) {
                e.dataTransfer.setData('text', '');
            }
            e.dataTransfer.effectAllowed = this.dragEffect;
            this.dropSubscription();
            if (this.dragDropService.dragFollow) {
                if (typeof DataTransfer.prototype.setDragImage === 'function') {
                    e.dataTransfer.setDragImage(this.dragDropService.dragEmptyImage, 0, 0);
                }
                else {
                    e.srcElement.style.display = 'none';
                    this.dragDropService.dragElShowHideEvent.next(false);
                }
            }
            e.stopPropagation();
            this.dragStartEvent.emit(e);
            this.dragDropService.dragStartEvent.next(e);
        }
        else {
            e.preventDefault();
        }
    }
    dragEnd(e) {
        this.renderer.removeClass(this.el.nativeElement, this.dragOverClass);
        this.dragDropService.dragEndEvent.next(e);
        this.mouseOverElement = undefined;
        if (this.dragDropService.draggedEl) {
            // 当dom被清除的的时候不会触发dragend，所以清理工作部分交给了drop，但是内部排序的时候dom不会被清理，dragend防止和drop重复操作清理动作
            if (this.dragDropService.dragFollow) {
                this.dragDropService.disableDraggedCloneNodeFollowMouse();
            }
            if (this.dragDropService.dragOriginPlaceholder) {
                this.removeOriginPlaceholder();
            }
            if (this.dragDropService.batchDragging && this.dragDropService.batchDragData && this.dragDropService.batchDragData.length > 1) {
                this.dragDropService.batchDragData.map(dragData => dragData.draggable)
                    .filter(draggable => draggable && draggable !== this)
                    .forEach((draggable) => {
                    if (draggable.originPlaceholder && draggable.originPlaceholder.show !== false) {
                        draggable.el.nativeElement.style.display = '';
                        draggable.removeOriginPlaceholder();
                    }
                    else {
                        draggable.el.nativeElement.style.display = '';
                    }
                });
            }
            if (this.batchDraggable && !this.batchDraggable.batchDragActive) {
                this.batchDraggable.removeFromBatchGroup();
                this.dragDropService.batchDragging = false;
                this.dragDropService.batchDragStyle = undefined;
            }
            if (this.dragDropService.subscription) {
                this.dragDropService.subscription.unsubscribe();
            }
            this.dragDropService.dragData = undefined;
            this.dragDropService.scope = undefined;
            this.dragDropService.draggedEl = undefined;
            this.dragDropService.dragFollow = undefined;
            this.dragDropService.dragFollowOptions = undefined;
            this.dragDropService.dragOffset = undefined;
            this.dragDropService.draggedElIdentity = undefined;
            this.dragDropService.dragPreviewDirective = undefined;
        }
        e.stopPropagation();
        e.preventDefault();
        this.dragEndEvent.emit(e);
    }
    mouseover(e) {
        this.mouseOverElement = e.target;
    }
    allowDrag(e) {
        if (!this.draggable) {
            return false;
        }
        if (this.batchDraggable && !this.batchDraggable.allowAddToBatchGroup()) { // 批量拖拽判断group是否相同
            return false;
        }
        if (this.dragHandle) {
            if (e && e.fromTouch) {
                return true;
            } // from touchstart dispatch event
            if (!this.mouseOverElement) {
                return false;
            }
            return Utils.matches(this.mouseOverElement, this.dragHandle);
        }
        else {
            return true;
        }
    }
    applyDragHandleClass() {
        const dragElement = this.getDragHandleElement();
        if (!dragElement) {
            return;
        }
        if (this.draggable) {
            Utils.addClass(dragElement, this.dragHandleClass);
        }
        else {
            Utils.removeClass(this.el, this.dragHandleClass);
        }
    }
    getDragHandleElement() {
        let dragElement = this.el;
        if (this.dragHandle) {
            dragElement = this.el.nativeElement.querySelector(this.dragHandle);
        }
        return dragElement;
    }
    mousePosition(event) {
        return {
            x: event.clientX,
            y: event.clientY
        };
    }
    findNextSibling(currentNextSibling) {
        if (!this.dragDropService.batchDragData) {
            return currentNextSibling;
        }
        else {
            if (this.dragDropService.batchDragData
                .map(dragData => dragData.draggable && dragData.draggable.el.nativeElement)
                .indexOf(currentNextSibling) > -1) {
                currentNextSibling = currentNextSibling.nextSibling;
            }
            return currentNextSibling;
        }
    }
    checkAndGetViewPointChange(element) {
        if (!element.parentNode) {
            return null;
        }
        // 模拟一个元素测预测位置和最终位置是否符合，如果不符合则是有transform等造成的偏移
        const elementPosition = element.getBoundingClientRect();
        const testEl = this.document.createElement('div');
        Utils.addElStyles(testEl, {
            opacity: '0',
            position: 'fixed',
            top: elementPosition.top + 'px',
            left: elementPosition.left + 'px',
            width: '1px',
            height: '1px',
            zIndex: '-999999',
        });
        element.parentNode.appendChild(testEl);
        const testElPosition = testEl.getBoundingClientRect();
        element.parentNode.removeChild(testEl);
        return {
            offsetX: testElPosition.left - elementPosition.left,
            offsetY: testElPosition.top - elementPosition.top
        };
    }
}
DraggableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DraggableDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DragDropService }, { token: i0.NgZone }, { token: i2.DragPreviewDirective, optional: true, self: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
DraggableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DraggableDirective, selector: "[dDraggable]", inputs: { dragData: "dragData", dragHandle: "dragHandle", dragEffect: "dragEffect", dragScope: "dragScope", dragHandleClass: "dragHandleClass", dragOverClass: "dragOverClass", disabled: "disabled", enableDragFollow: "enableDragFollow", dragFollowOptions: "dragFollowOptions", originPlaceholder: "originPlaceholder", dragIdentity: "dragIdentity", dragItemParentName: "dragItemParentName", dragItemChildrenName: "dragItemChildrenName" }, outputs: { dragStartEvent: "dragStartEvent", dragEvent: "dragEvent", dragEndEvent: "dragEndEvent", dropEndEvent: "dropEndEvent" }, host: { properties: { "draggable": "this.draggable", "attr.data-drag-handle-selector": "this.dragHandle" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DraggableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDraggable]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DragDropService }, { type: i0.NgZone }, { type: i2.DragPreviewDirective, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { draggable: [{
                type: HostBinding,
                args: ['draggable']
            }], dragData: [{
                type: Input
            }], dragHandle: [{
                type: HostBinding,
                args: ['attr.data-drag-handle-selector']
            }, {
                type: Input
            }], dragEffect: [{
                type: Input
            }], dragScope: [{
                type: Input
            }], dragHandleClass: [{
                type: Input
            }], dragOverClass: [{
                type: Input
            }], dragStartEvent: [{
                type: Output
            }], dragEvent: [{
                type: Output
            }], dragEndEvent: [{
                type: Output
            }], dropEndEvent: [{
                type: Output
            }], disabled: [{
                type: Input
            }], enableDragFollow: [{
                type: Input
            }], dragFollowOptions: [{
                type: Input
            }], originPlaceholder: [{
                type: Input
            }], dragIdentity: [{
                type: Input
            }], dragItemParentName: [{
                type: Input
            }], dragItemChildrenName: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL2RyYWdkcm9wL2RpcmVjdGl2ZXMvZHJhZ2dhYmxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUNVLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUNsRCxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQXFCLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFDekYsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFLaEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBeUY3QixZQUFtQixFQUFjLEVBQVUsUUFBbUIsRUFBVSxlQUFnQyxFQUFVLE1BQWMsRUFDekYsb0JBQTBDLEVBQTRCLEdBQVE7UUFEbEcsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ3pGLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFBNEIsUUFBRyxHQUFILEdBQUcsQ0FBSztRQXpGM0YsY0FBUyxHQUFHLElBQUksQ0FBQztRQVkzQzs7V0FFRztRQUNNLGVB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bEIsa0JBQWtCO2tCQU45QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6Qjs7MEJBOEZjLFFBQVE7OzBCQUFJLElBQUk7OzBCQUF1RCxNQUFNOzJCQUFDLFFBQVE7NENBekZ6RSxTQUFTO3NCQUFsQyxXQUFXO3VCQUFDLFdBQVc7Z0JBSWYsUUFBUTtzQkFBaEIsS0FBSztnQkFNRyxVQUFVO3NCQURsQixXQUFXO3VCQUFDLGdDQUFnQzs7c0JBQzVDLEtBQUs7Z0JBS0csVUFBVTtzQkFBbEIsS0FBSztnQkFLRyxTQUFTO3NCQUFqQixLQUFLO2dCQUVHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBSUcsYUFBYTtzQkFBckIsS0FBSztnQkFLSSxjQUFjO3NCQUF2QixNQUFNO2dCQU9HLFNBQVM7c0JBQWxCLE1BQU07Z0JBS0csWUFBWTtzQkFBckIsTUFBTTtnQkFNRyxZQUFZO3NCQUFyQixNQUFNO2dCQUVJLFFBQVE7c0JBRGxCLEtBQUs7Z0JBV0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUNHLGlCQUFpQjtzQkFBekIsS0FBSztnQkFHRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBT0csWUFBWTtzQkFBcEIsS0FBSztnQkFFRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBQ0csb0JBQW9CO3NCQUE1QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLCBJbmplY3QsIElucHV0LCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0LCBPcHRpb25hbCwgT3V0cHV0LCBSZW5kZXJlcjIsIFNlbGZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZHJhZy1kcm9wLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgUHJlc2VydmVOZXh0RXZlbnRFbWl0dGVyIH0gZnJvbSAnLi8uLi9zaGFyZWQvcHJlc2VydmUtbmV4dC1ldmVudC1lbWl0dGVyJztcbmltcG9ydCB7IERyYWdQcmV2aWV3RGlyZWN0aXZlIH0gZnJvbSAnLi9kcmFnLXByZXZpZXcuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2REcmFnZ2FibGVdJ1xufSlcbi8qKlxuICogTWFrZXMgYW4gZWxlbWVudCBkcmFnZ2FibGUgYnkgYWRkaW5nIHRoZSBkcmFnZ2FibGUgaHRtbCBhdHRyaWJ1dGVcbiAqL1xuZXhwb3J0IGNsYXNzIERyYWdnYWJsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgQEhvc3RCaW5kaW5nKCdkcmFnZ2FibGUnKSBkcmFnZ2FibGUgPSB0cnVlO1xuICAvKipcbiAgICogVGhlIGRhdGEgdGhhdCB3aWxsIGJlIGF2YWlsYWJsZSB0byB0aGUgZHJvcHBhYmxlIGRpcmVjdGl2ZSBvbiBpdHMgYGRyb3BFdmVudCgpYCBldmVudC5cbiAgICovXG4gIEBJbnB1dCgpIGRyYWdEYXRhO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VsZWN0b3IgdGhhdCBkZWZpbmVzIHRoZSBkcmFnIEhhbmRsZS4gSWYgZGVmaW5lZCBkcmFnIHdpbGwgb25seSBiZSBhbGxvd2VkIGlmIGRyYWdnZWQgZnJvbSB0aGUgc2VsZWN0b3IgZWxlbWVudC5cbiAgICovXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWRyYWctaGFuZGxlLXNlbGVjdG9yJykgLy8gaG9zdC1iaW5kaW5nIGF0dHJpYnV0ZSBmb3IgY29tbXVuaWNhdGUgd2l0aCB0b3VjaCBzdXBwb3J0IGpzXG4gIEBJbnB1dCgpIGRyYWdIYW5kbGU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3VycmVudGx5IG5vdCB1c2VkXG4gICAqL1xuICBASW5wdXQoKSBkcmFnRWZmZWN0ID0gJ21vdmUnO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGNvbXBhdGlibGUgZHJhZyBkcm9wIHBhaXJzLiBWYWx1ZXMgbXVzdCBtYXRjaCBib3RoIGluIGRyYWdnYWJsZSBhbmQgZHJvcHBhYmxlLmRyb3BTY29wZS5cbiAgICovXG4gIEBJbnB1dCgpIGRyYWdTY29wZTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiA9ICdkZWZhdWx0JztcblxuICBASW5wdXQoKSBkcmFnSGFuZGxlQ2xhc3MgPSAnZHJhZy1oYW5kbGUnO1xuICAvKipcbiAgICogQ1NTIGNsYXNzIGFwcGxpZWQgb24gdGhlIGRyYWdnYWJsZSB0aGF0IGlzIGFwcGxpZWQgd2hlbiB0aGUgaXRlbSBpcyBiZWluZyBkcmFnZ2VkLlxuICAgKi9cbiAgQElucHV0KCkgZHJhZ092ZXJDbGFzczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFdmVudCBmaXJlZCB3aGVuIERyYWcgaXMgc3RhcnRlZFxuICAgKi9cbiAgQE91dHB1dCgpIGRyYWdTdGFydEV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBFdmVudCBmaXJlZCB3aGlsZSB0aGUgZWxlbWVudCBpcyBiZWluZyBkcmFnZ2VkXG4gICAqIOS4uuS6huaAp+iDveS8mOWMlu+8jOivpeWHveaVsOW6n+W8g++8jOivt+eUqChkcmFnKeiHquihjOebkeWQrO+8jCDlpoLmnpzkuI3pnIDopoFhbmd1bGFy6ISP5qOA5rWL5YiZ5pyA5aW955SocnVuT3V0c2lkZUFuZ3VsYXLnmoRhZGRFdmVudExpc3RlbmVy55uR5ZCs5Lul6I635b6X5aW955qE5oCn6IO9XG4gICAqL1xuICBAT3V0cHV0KCkgZHJhZ0V2ZW50OiBQcmVzZXJ2ZU5leHRFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBQcmVzZXJ2ZU5leHRFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBFdmVudCBmaXJlZCB3aGVuIGRyYWdnZWQgZW5kc1xuICAgKi9cbiAgQE91dHB1dCgpIGRyYWdFbmRFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvKipcbiAgICogS2VlcHMgdHJhY2sgb2YgbW91c2Ugb3ZlciBlbGVtZW50IHRoYXQgaXMgdXNlZCB0byBkZXRlcm1pbmUgZHJhZyBoYW5kbGVzXG4gICAqL1xuICBwcml2YXRlIG1vdXNlT3ZlckVsZW1lbnQ6IGFueTtcbiAgQE91dHB1dCgpIGRyb3BFbmRFdmVudDogUHJlc2VydmVOZXh0RXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgUHJlc2VydmVOZXh0RXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQElucHV0KClcbiAgcHVibGljIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICB0aGlzLmRyYWdnYWJsZSA9ICF0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKSBlbmFibGVEcmFnRm9sbG93ID0gZmFsc2U7IC8vIOm7mOiupGZhbHNl5L2/55So5rWP6KeI5ZmoSDVBUEnmi5bmi70sIOWQpuWImeS9v+eUqOWOn2RvbeWumuS9jeWBj+enu1xuICBASW5wdXQoKSBkcmFnRm9sbG93T3B0aW9uczoge1xuICAgIGFwcGVuZFRvQm9keT86IGJvb2xlYW47XG4gIH07XG4gIEBJbnB1dCgpIG9yaWdpblBsYWNlaG9sZGVyOiB7XG4gICAgc2hvdz86IGJvb2xlYW47XG4gICAgdGFnPzogc3RyaW5nO1xuICAgIHN0eWxlPzoge1tjc3NQcm9wZXJ0aWVzOiBzdHJpbmddOiBzdHJpbmd9O1xuICAgIHRleHQ/OiBzdHJpbmc7XG4gICAgcmVtb3ZlRGVsYXk/OiBudW1iZXI7IC8vIOWNleS9jTogbXNcbiAgfTtcbiAgQElucHV0KCkgZHJhZ0lkZW50aXR5OiBhbnk7IC8vIOeUqOS6juiZmuaLn+a7muWKqOeahOaBouWkjVxuXG4gIEBJbnB1dCgpIGRyYWdJdGVtUGFyZW50TmFtZSA9ICcnOyAvLyDlvZPliY3mi5bmi73lhYPntKDnmoTnsbvlkI3miJblhYPntKDlkI3np7DvvIjnsbvlkI3pnIDopoHliqAu77yJLOS4u+imgeeUqOS6juWtkOiKgueCueeahOaIquWPluaTjeS9nFxuICBASW5wdXQoKSBkcmFnSXRlbUNoaWxkcmVuTmFtZSA9ICcnOyAvLyDlvZPliY3mi5bmi73lhYPntKDnmoTlrZDoioLngrnnsbvlkI3miJblhYPntKDlkI3np7DvvIjnsbvlkI3pnIDopoHliqAu77yJXG5cbiAgZHJhZ3NTdWI6IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgZGVzdHJveURyYWdFbmRTdWI6IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgaXNEZXN0cm95ZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgZGVsYXlSZW1vdmVPcmlnaW5QbGFjZWhvbGRlclRpbWVyO1xuICBwdWJsaWMgYmF0Y2hEcmFnZ2FibGU7XG4gIHByaXZhdGUgZHJhZ09yaWdpblBsYWNlaG9sZGVyO1xuICBwcml2YXRlIGRyYWdPcmlnaW5QbGFjZWhvbGRlck5leHRTaWJsaW5nO1xuICBwdWJsaWMgZHJhZ0VsU2hvd0hpZGVFdmVudCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIHB1YmxpYyBiZWZvcmVEcmFnU3RhcnRFdmVudCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIGRvY3VtZW50OiBEb2N1bWVudDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBkcmFnRHJvcFNlcnZpY2U6IERyYWdEcm9wU2VydmljZSwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwdWJsaWMgZHJhZ1ByZXZpZXdEaXJlY3RpdmU6IERyYWdQcmV2aWV3RGlyZWN0aXZlLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvYzogYW55XG4gICkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLmRvYztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuZHJhZ3NTdWIuYWRkKGZyb21FdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdtb3VzZW92ZXInKS5zdWJzY3JpYmUoZXZlbnQgPT4gdGhpcy5tb3VzZW92ZXIoZXZlbnQpKSk7XG4gICAgICB0aGlzLmRyYWdzU3ViLmFkZChmcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZHJhZ3N0YXJ0Jykuc3Vic2NyaWJlKGV2ZW50ID0+IHRoaXMuZHJhZ1N0YXJ0KGV2ZW50KSkpO1xuICAgICAgdGhpcy5kcmFnc1N1Yi5hZGQoZnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2RyYWdlbmQnKS5zdWJzY3JpYmUoZXZlbnQgPT4gdGhpcy5kcmFnRW5kKGV2ZW50KSkpO1xuICAgIH0pO1xuICB9XG5cbiAgZHJvcFN1YnNjcmlwdGlvbigpIHtcbiAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5uZXdTdWJzY3JpcHRpb24oKS5hZGQoXG4gICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcm9wRXZlbnQuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLm1vdXNlT3ZlckVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmRyYWdPdmVyQ2xhc3MpO1xuICAgICAgICB0aGlzLmRyb3BFbmRFdmVudC5lbWl0KGV2ZW50KTtcbiAgICAgICAgLy8g5YW85a656Jma5ouf5rua5Yqo5ZCO6KKr6ZSA5q+BXG4gICAgICAgIGlmICh0aGlzLmlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZHJvcEVuZEV2ZW50LnNjaGVkdWxlckZucyAmJiB0aGlzLmRyb3BFbmRFdmVudC5zY2hlZHVsZXJGbnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZHJvcEVuZEV2ZW50LmZvcmNlQ2FsbGJhY2soZXZlbnQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ09yaWdpblBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3JpZ2luUGxhY2Vob2xkZXIgJiYgdGhpcy5vcmlnaW5QbGFjZWhvbGRlci5yZW1vdmVEZWxheSA+IDBcbiAgICAgICAgICAgICYmICF0aGlzLmRyYWdEcm9wU2VydmljZS5kcm9wT25PcmlnaW4pIHsgLy8g6Z2eZHJvcOWIsOiHquW3seeahOaDheWGtVxuICAgICAgICAgICAgdGhpcy5kZWxheVJlbW92ZU9yaWdpblBsYWNlaG9sZGVyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlT3JpZ2luUGxhY2Vob2xkZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ2dlZEVsSWRlbnRpdHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2Uuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9KSkuYWRkKFxuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0VsU2hvd0hpZGVFdmVudC5zdWJzY3JpYmUodGhpcy5kcmFnRWxTaG93SGlkZUV2ZW50KVxuICAgICk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5hcHBseURyYWdIYW5kbGVDbGFzcygpO1xuICAgIGlmICh0aGlzLmRyYWdJZGVudGl0eSkge1xuICAgICAgaWYgKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdnZWRFbCAmJiB0aGlzLmRyYWdJZGVudGl0eSA9PT0gdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ2dlZEVsSWRlbnRpdHkpIHtcbiAgICAgICAgaWYgKHRoaXMub3JpZ2luUGxhY2Vob2xkZXIgJiYgdGhpcy5vcmlnaW5QbGFjZWhvbGRlci5zaG93ICE9PSBmYWxzZSkge1xuICAgICAgICAgIHRoaXMuaW5zZXJ0T3JpZ2luUGxhY2Vob2xkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnZ2VkRWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAvLyByZWNvdmVyeSBkb24ndCBuZWVkIHRvIGVtaXQgZXZlbnRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyDlhbzlrrnomZrmi5/mu5rliqjlkI7ooqvplIDmr4FcbiAgICB0aGlzLmlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ2dlZEVsID09PSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZGVzdHJveURyYWdFbmRTdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICB0aGlzLmRlc3Ryb3lEcmFnRW5kU3ViLmFkZChmcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZHJhZ2VuZCcpLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgIHRoaXMuZHJhZ0VuZChldmVudCk7XG4gICAgICAgIGlmICh0aGlzLmRyb3BFbmRFdmVudC5zY2hlZHVsZXJGbnMgJiYgdGhpcy5kcm9wRW5kRXZlbnQuc2NoZWR1bGVyRm5zLnNpemUgPiAwKSB7XG4gICAgICAgICAgdGhpcy5kcm9wRW5kRXZlbnQuZm9yY2VDYWxsYmFjayhldmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0cm95RHJhZ0VuZFN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lEcmFnRW5kU3ViID0gdW5kZWZpbmVkO1xuICAgICAgfSkpO1xuICAgICAgaWYgKHRoaXMub3JpZ2luUGxhY2Vob2xkZXIgJiYgdGhpcy5vcmlnaW5QbGFjZWhvbGRlci5zaG93ICE9PSBmYWxzZVxuICAgICAgICAmJiB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnT3JpZ2luUGxhY2Vob2xkZXIgJiYgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ2dlZEVsSWRlbnRpdHkpIHtcbiAgICAgICAgLy8g5aaC5p6c5pyJb3JpZ2luUGxhY2Vob2xkZXIg5YiZ6ZSA5q+BXG4gICAgICAgIHRoaXMucmVtb3ZlT3JpZ2luUGxhY2Vob2xkZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kcmFnc1N1Yi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgZHJhZ1N0YXJ0KGUpIHtcbiAgICBpZiAodGhpcy5hbGxvd0RyYWcoZSkpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmRyYWdPdmVyQ2xhc3MpO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0RhdGEgPSB0aGlzLmRyYWdEYXRhO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2Uuc2NvcGUgPSB0aGlzLmRyYWdTY29wZTtcbiAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdnZWRFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdnZWRFbElkZW50aXR5ID0gdGhpcy5kcmFnSWRlbnRpdHk7XG4gICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnRm9sbG93ID0gdGhpcy5lbmFibGVEcmFnRm9sbG93O1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0ZvbGxvd09wdGlvbnMgPSB0aGlzLmRyYWdGb2xsb3dPcHRpb25zO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0l0ZW1QYXJlbnROYW1lID0gdGhpcy5kcmFnSXRlbVBhcmVudE5hbWU7XG4gICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnSXRlbUNoaWxkcmVuTmFtZSA9IHRoaXMuZHJhZ0l0ZW1DaGlsZHJlbk5hbWU7XG4gICAgICB0aGlzLmJlZm9yZURyYWdTdGFydEV2ZW50Lm5leHQoKTtcbiAgICAgIGlmICh0aGlzLmRyYWdQcmV2aWV3RGlyZWN0aXZlICYmIHRoaXMuZHJhZ1ByZXZpZXdEaXJlY3RpdmUuZHJhZ1ByZXZpZXdUZW1wbGF0ZSkge1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnRm9sbG93ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ1ByZXZpZXdEaXJlY3RpdmUgPSB0aGlzLmRyYWdQcmV2aWV3RGlyZWN0aXZlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYmF0Y2hEcmFnZ2FibGUpIHtcbiAgICAgICAgaWYgKHRoaXMuYmF0Y2hEcmFnZ2FibGUuZHJhZ0RhdGEpIHtcbiAgICAgICAgICAvLyDmnIlkcmFnRGF0YeivgeaYjuiiq+WKoOWFpeWIsOS6hmdyb3Vw6YeMXG4gICAgICAgICAgaWYgKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmJhdGNoRHJhZ0RhdGEgJiYgdGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmJhdGNoRHJhZ1N0eWxlID0gdGhpcy5iYXRjaERyYWdnYWJsZS5iYXRjaERyYWdTdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5iYXRjaERyYWdnYWJsZS5iYXRjaERyYWdMYXN0T25lQXV0b0FjdGl2ZUV2ZW50S2V5cykge1xuICAgICAgICAgIGNvbnN0IGJhdGNoQWN0aXZlQWJsZSA9IHRoaXMuYmF0Y2hEcmFnZ2FibGUuYmF0Y2hEcmFnTGFzdE9uZUF1dG9BY3RpdmVFdmVudEtleXNcbiAgICAgICAgICAgIC5tYXAoa2V5ID0+IGVba2V5XSlcbiAgICAgICAgICAgIC5zb21lKGV2ZW50S2V5ID0+IGV2ZW50S2V5ID09PSB0cnVlKTtcbiAgICAgICAgICBpZiAoYmF0Y2hBY3RpdmVBYmxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YSAmJiB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5iYXRjaERyYWdnYWJsZS5hY3RpdmUoKTtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLmJhdGNoRHJhZ2dhYmxlLmRyYWdEYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8g5aaC5p6c55So5oi35rKh5YGa5Lu75L2V5aSE55CG5oqK6aG555uu5Yqg5Yiw57uE6YeM5YiZ5Yqg5Yiw57uE6YeMXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaERyYWdnYWJsZS5hZGRUb0JhdGNoR3JvdXAoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YS5zb21lKGRyYWdEYXRhID0+IGRyYWdEYXRhLmRyYWdnYWJsZSA9PT0gdGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdTdHlsZSA9IHRoaXMuYmF0Y2hEcmFnZ2FibGUuYmF0Y2hEcmFnU3R5bGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhcmdldE9mZnNldCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmICh0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnRm9sbG93KSB7XG4gICAgICAgIGNvbnN0IG1vdXNlUG9zaXRpb25YWSA9IHRoaXMubW91c2VQb3NpdGlvbihlKTtcbiAgICAgICAgLy8g55So5LqO5Ye6546wdHJhbnNmb3Jt55qE5Zy65pmvcG9zaXRpb246Zml4ZWTnm7jlr7nkvY3nva7lj5jmm7RcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtT2Zmc2V0ID0gdGhpcy5jaGVja0FuZEdldFZpZXdQb2ludENoYW5nZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnT2Zmc2V0ID0ge1xuICAgICAgICAgIGxlZnQ6IHRhcmdldE9mZnNldC5sZWZ0LFxuICAgICAgICAgIHRvcDogdGFyZ2V0T2Zmc2V0LnRvcCxcbiAgICAgICAgICBvZmZzZXRMZWZ0OiBtb3VzZVBvc2l0aW9uWFkueCAtIHRhcmdldE9mZnNldC5sZWZ0ICsgdHJhbnNmb3JtT2Zmc2V0Lm9mZnNldFgsXG4gICAgICAgICAgb2Zmc2V0VG9wOiBtb3VzZVBvc2l0aW9uWFkueSAtIHRhcmdldE9mZnNldC50b3AgKyB0cmFuc2Zvcm1PZmZzZXQub2Zmc2V0WSxcbiAgICAgICAgICB3aWR0aDogdGFyZ2V0T2Zmc2V0LndpZHRoLFxuICAgICAgICAgIGhlaWdodDogdGFyZ2V0T2Zmc2V0LmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5lbmFibGVEcmFnZ2VkQ2xvbmVOb2RlRm9sbG93TW91c2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdPZmZzZXQgPSB7XG4gICAgICAgICAgbGVmdDogdGFyZ2V0T2Zmc2V0LmxlZnQsXG4gICAgICAgICAgdG9wOiB0YXJnZXRPZmZzZXQudG9wLFxuICAgICAgICAgIG9mZnNldExlZnQ6IG51bGwsXG4gICAgICAgICAgb2Zmc2V0VG9wOiBudWxsLFxuICAgICAgICAgIHdpZHRoOiB0YXJnZXRPZmZzZXQud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB0YXJnZXRPZmZzZXQuaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcmlnaW5QbGFjZWhvbGRlciAmJiB0aGlzLm9yaWdpblBsYWNlaG9sZGVyLnNob3cgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0T3JpZ2luUGxhY2Vob2xkZXIoZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmJhdGNoRHJhZ2dpbmdcbiAgICAgICAgJiYgdGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YSAmJiB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdEYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YS5tYXAoZHJhZ0RhdGEgPT4gZHJhZ0RhdGEuZHJhZ2dhYmxlKVxuICAgICAgICAgIC5maWx0ZXIoZHJhZ2dhYmxlID0+IGRyYWdnYWJsZSAmJiBkcmFnZ2FibGUgIT09IHRoaXMpXG4gICAgICAgICAgLmZvckVhY2goKGRyYWdnYWJsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRyYWdnYWJsZS5vcmlnaW5QbGFjZWhvbGRlciAmJiBkcmFnZ2FibGUub3JpZ2luUGxhY2Vob2xkZXIuc2hvdyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgZHJhZ2dhYmxlLmluc2VydE9yaWdpblBsYWNlaG9sZGVyKHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgZHJhZ2dhYmxlLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge2RyYWdnYWJsZS5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gRmlyZWZveCByZXF1aXJlcyBzZXREYXRhKCkgdG8gYmUgY2FsbGVkIG90aGVyd2lzZSB0aGUgZHJhZyBkb2VzIG5vdCB3b3JrLlxuICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyICE9PSBudWxsKSB7XG4gICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQnLCAnJyk7XG4gICAgICB9XG4gICAgICBlLmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gdGhpcy5kcmFnRWZmZWN0O1xuICAgICAgdGhpcy5kcm9wU3Vic2NyaXB0aW9uKCk7XG4gICAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0ZvbGxvdykge1xuICAgICAgICBpZiAodHlwZW9mIERhdGFUcmFuc2Zlci5wcm90b3R5cGUuc2V0RHJhZ0ltYWdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RHJhZ0ltYWdlKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdFbXB0eUltYWdlLCAwICwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZS5zcmNFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0VsU2hvd0hpZGVFdmVudC5uZXh0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuZHJhZ1N0YXJ0RXZlbnQuZW1pdChlKTtcbiAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdTdGFydEV2ZW50Lm5leHQoZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBkcmFnRW5kKGUpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5kcmFnT3ZlckNsYXNzKTtcbiAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnRW5kRXZlbnQubmV4dChlKTtcbiAgICB0aGlzLm1vdXNlT3ZlckVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdnZWRFbCkge1xuICAgICAgLy8g5b2TZG9t6KKr5riF6Zmk55qE55qE5pe25YCZ5LiN5Lya6Kem5Y+RZHJhZ2VuZO+8jOaJgOS7pea4heeQhuW3peS9nOmDqOWIhuS6pOe7meS6hmRyb3DvvIzkvYbmmK/lhoXpg6jmjpLluo/nmoTml7blgJlkb23kuI3kvJrooqvmuIXnkIbvvIxkcmFnZW5k6Ziy5q2i5ZKMZHJvcOmHjeWkjeaTjeS9nOa4heeQhuWKqOS9nFxuICAgICAgaWYgKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdGb2xsb3cpIHtcbiAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZGlzYWJsZURyYWdnZWRDbG9uZU5vZGVGb2xsb3dNb3VzZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdPcmlnaW5QbGFjZWhvbGRlcikge1xuICAgICAgICB0aGlzLnJlbW92ZU9yaWdpblBsYWNlaG9sZGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnZ2luZyAmJiB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdEYXRhICYmIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmJhdGNoRHJhZ0RhdGEubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdEYXRhLm1hcChkcmFnRGF0YSA9PiBkcmFnRGF0YS5kcmFnZ2FibGUpXG4gICAgICAgICAgLmZpbHRlcihkcmFnZ2FibGUgPT4gZHJhZ2dhYmxlICYmIGRyYWdnYWJsZSAhPT0gdGhpcylcbiAgICAgICAgICAuZm9yRWFjaCgoZHJhZ2dhYmxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZHJhZ2dhYmxlLm9yaWdpblBsYWNlaG9sZGVyICYmIGRyYWdnYWJsZS5vcmlnaW5QbGFjZWhvbGRlci5zaG93ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBkcmFnZ2FibGUuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICAgIGRyYWdnYWJsZS5yZW1vdmVPcmlnaW5QbGFjZWhvbGRlcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZHJhZ2dhYmxlLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYmF0Y2hEcmFnZ2FibGUgJiYgIXRoaXMuYmF0Y2hEcmFnZ2FibGUuYmF0Y2hEcmFnQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuYmF0Y2hEcmFnZ2FibGUucmVtb3ZlRnJvbUJhdGNoR3JvdXAoKTtcbiAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdTdHlsZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRyYWdEcm9wU2VydmljZS5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2Uuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLnNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ2dlZEVsID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0ZvbGxvdyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdGb2xsb3dPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ09mZnNldCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdnZWRFbElkZW50aXR5ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ1ByZXZpZXdEaXJlY3RpdmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuZHJhZ0VuZEV2ZW50LmVtaXQoZSk7XG4gIH1cblxuICBtb3VzZW92ZXIoZSkge1xuICAgIHRoaXMubW91c2VPdmVyRWxlbWVudCA9IGUudGFyZ2V0O1xuICB9XG5cbiAgcHJpdmF0ZSBhbGxvd0RyYWcoZSkge1xuICAgIGlmICghdGhpcy5kcmFnZ2FibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYmF0Y2hEcmFnZ2FibGUgJiYgIXRoaXMuYmF0Y2hEcmFnZ2FibGUuYWxsb3dBZGRUb0JhdGNoR3JvdXAoKSkgeyAgLy8g5om56YeP5ouW5ou95Yik5patZ3JvdXDmmK/lkKbnm7jlkIxcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZHJhZ0hhbmRsZSkge1xuICAgICAgaWYgKGUgJiYgZS5mcm9tVG91Y2gpIHtyZXR1cm4gdHJ1ZTsgfSAvLyBmcm9tIHRvdWNoc3RhcnQgZGlzcGF0Y2ggZXZlbnRcbiAgICAgIGlmICghdGhpcy5tb3VzZU92ZXJFbGVtZW50KSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgcmV0dXJuIFV0aWxzLm1hdGNoZXModGhpcy5tb3VzZU92ZXJFbGVtZW50LCB0aGlzLmRyYWdIYW5kbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFwcGx5RHJhZ0hhbmRsZUNsYXNzKCkge1xuICAgIGNvbnN0IGRyYWdFbGVtZW50ID0gdGhpcy5nZXREcmFnSGFuZGxlRWxlbWVudCgpO1xuICAgIGlmICghZHJhZ0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZHJhZ2dhYmxlKSB7XG4gICAgICBVdGlscy5hZGRDbGFzcyhkcmFnRWxlbWVudCwgdGhpcy5kcmFnSGFuZGxlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBVdGlscy5yZW1vdmVDbGFzcyh0aGlzLmVsLCB0aGlzLmRyYWdIYW5kbGVDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXREcmFnSGFuZGxlRWxlbWVudCgpIHtcbiAgICBsZXQgZHJhZ0VsZW1lbnQgPSB0aGlzLmVsO1xuICAgIGlmICh0aGlzLmRyYWdIYW5kbGUpIHtcbiAgICAgIGRyYWdFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5kcmFnSGFuZGxlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRyYWdFbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBtb3VzZVBvc2l0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgaW5zZXJ0T3JpZ2luUGxhY2Vob2xkZXIgPSAoZGlyZWN0U2hvdyA9IHRydWUsIHVwZGF0ZVNlcnZpY2UgPSB0cnVlKSA9PiB7XG4gICAgaWYgKHRoaXMuZGVsYXlSZW1vdmVPcmlnaW5QbGFjZWhvbGRlclRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVJlbW92ZU9yaWdpblBsYWNlaG9sZGVyVGltZXIpO1xuICAgICAgdGhpcy5kZWxheVJlbW92ZU9yaWdpblBsYWNlaG9sZGVyVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLm9yaWdpblBsYWNlaG9sZGVyLnRhZyB8fCAnZGl2Jyk7XG4gICAgY29uc3QgcmVjdCA9ICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGRpcmVjdFNob3cpIHtcbiAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLndpZHRoID0gcmVjdC53aWR0aCArICdweCc7XG4gICAgbm9kZS5zdHlsZS5oZWlnaHQgPSByZWN0LmhlaWdodCArICdweCc7XG4gICAgbm9kZS5jbGFzc0xpc3QuYWRkKCdkcmFnLW9yaWdpbi1wbGFjZWhvbGRlcicpO1xuICAgIGlmICh0aGlzLm9yaWdpblBsYWNlaG9sZGVyLnRleHQpIHtcbiAgICAgIG5vZGUuaW5uZXJUZXh0ID0gdGhpcy5vcmlnaW5QbGFjZWhvbGRlci50ZXh0O1xuICAgIH1cbiAgICBpZiAodGhpcy5vcmlnaW5QbGFjZWhvbGRlci5zdHlsZSkge1xuICAgICAgVXRpbHMuYWRkRWxTdHlsZXMobm9kZSwgdGhpcy5vcmlnaW5QbGFjZWhvbGRlci5zdHlsZSk7XG4gICAgfVxuICAgIGlmICh1cGRhdGVTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnT3JpZ2luUGxhY2Vob2xkZXIgPSBub2RlO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ09yaWdpblBsYWNlaG9sZGVyTmV4dFNpYmxpbmcgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgnc2lkZS1kcmFnLW9yaWdpbi1wbGFjZWhvbGRlcicpO1xuICAgICAgY29uc3Qgb3JpZ2luQ2xvbmVOb2RlID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIG9yaWdpbkNsb25lTm9kZS5zdHlsZS5tYXJnaW4gPSAwO1xuICAgICAgb3JpZ2luQ2xvbmVOb2RlLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICBvcmlnaW5DbG9uZU5vZGUuc3R5bGUub3BhY2l0eSA9ICcwLjMnO1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZChvcmlnaW5DbG9uZU5vZGUpO1xuICAgIH1cbiAgICB0aGlzLmRyYWdPcmlnaW5QbGFjZWhvbGRlciA9IG5vZGU7XG4gICAgdGhpcy5kcmFnT3JpZ2luUGxhY2Vob2xkZXJOZXh0U2libGluZyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5uZXh0U2libGluZztcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUobm9kZSwgdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm5leHRTaWJsaW5nKTtcbiAgfTtcblxuICBwdWJsaWMgcmVtb3ZlT3JpZ2luUGxhY2Vob2xkZXIgPSAodXBkYXRlU2VydmljZSA9IHRydWUpID0+IHtcbiAgICBpZiAodGhpcy5kcmFnT3JpZ2luUGxhY2Vob2xkZXIpIHtcbiAgICAgIHRoaXMuZHJhZ09yaWdpblBsYWNlaG9sZGVyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5kcmFnT3JpZ2luUGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlU2VydmljZSkge1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ09yaWdpblBsYWNlaG9sZGVyID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ09yaWdpblBsYWNlaG9sZGVyTmV4dFNpYmxpbmcgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMuZHJhZ09yaWdpblBsYWNlaG9sZGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZHJhZ09yaWdpblBsYWNlaG9sZGVyTmV4dFNpYmxpbmcgPSB1bmRlZmluZWQ7XG4gIH07XG4gIHB1YmxpYyBkZWxheVJlbW92ZU9yaWdpblBsYWNlaG9sZGVyID0gKHVwZGF0ZVNlcnZpY2UgPSB0cnVlKSA9PiB7XG4gICAgY29uc3QgdGltZW91dCA9IHRoaXMub3JpZ2luUGxhY2Vob2xkZXIucmVtb3ZlRGVsYXk7XG4gICAgY29uc3QgZGVsYXlPcmlnaW5QbGFjZWhvbGRlciA9IHRoaXMuZHJhZ09yaWdpblBsYWNlaG9sZGVyO1xuICAgIGNvbnN0IGRyYWdPcmlnaW5QbGFjZWhvbGRlck5leHRTaWJsaW5nID0gdGhpcy5maW5kTmV4dFNpYmxpbmcodGhpcy5kcmFnT3JpZ2luUGxhY2Vob2xkZXJOZXh0U2libGluZyk7XG5cbiAgICAvLyDpnIDopoHkuLTml7bnp7vliqjkvY3nva7vvIzkv53or4HooqtuZ0ZvcuWIt+aWsOS5i+WQjuS9jee9ruaYr+ato+ehrueahFxuICAgIC8vIG5nRm9y5Yi35paw55qE5Y6f55CG5piv5pyJ5Y+Y5YyW55qE6YOo5YiG6YO95Yi35paw77yM5aS55Zyo5Y+Y5YyW6YOo5YiG5Lit6Ze055qE5YaF5a655bCG6KKr5Yi35Yiw5Y+Y5YyW6YOo5YiG5LmL5ZCO55qE5L2N572u77yM5omA5Lul6ZyA6KaB5oGi5aSN5L2N572uXG4gICAgLy8gc2V0VGltZW91dOaYr+etiW5nRm9y55qEVmlld+WIt+aWsCwg5ZCO57ut6ZyA6KaB6K6i6ZiFc29ydENvbnRhaW5lcueahHZpZXfnmoTmm7TmlrDmiY3pnIDopoHph43mlrDmgaLlpI3kvY3nva5cbiAgICBpZiAoZGVsYXlPcmlnaW5QbGFjZWhvbGRlci5wYXJlbnRFbGVtZW50LmNvbnRhaW5zKGRyYWdPcmlnaW5QbGFjZWhvbGRlck5leHRTaWJsaW5nKSkge1xuICAgICAgZGVsYXlPcmlnaW5QbGFjZWhvbGRlci5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShcbiAgICAgICAgZGVsYXlPcmlnaW5QbGFjZWhvbGRlcixcbiAgICAgICAgZHJhZ09yaWdpblBsYWNlaG9sZGVyTmV4dFNpYmxpbmdcbiAgICAgICk7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGRlbGF5T3JpZ2luUGxhY2Vob2xkZXIucGFyZW50RWxlbWVudC5jb250YWlucyhkcmFnT3JpZ2luUGxhY2Vob2xkZXJOZXh0U2libGluZykpIHtcbiAgICAgICAgZGVsYXlPcmlnaW5QbGFjZWhvbGRlci5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShcbiAgICAgICAgICBkZWxheU9yaWdpblBsYWNlaG9sZGVyLFxuICAgICAgICAgIGRyYWdPcmlnaW5QbGFjZWhvbGRlck5leHRTaWJsaW5nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWxheU9yaWdpblBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQoJ2RlbGF5LWRlbGV0aW9uJyk7XG4gICAgICB0aGlzLmRlbGF5UmVtb3ZlT3JpZ2luUGxhY2Vob2xkZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBkZWxheU9yaWdpblBsYWNlaG9sZGVyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZGVsYXlPcmlnaW5QbGFjZWhvbGRlcik7XG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5lbC5uYXRpdmVFbGVtZW50KSkge1xuICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0VsU2hvd0hpZGVFdmVudC5uZXh0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGltZW91dCk7XG4gICAgICBpZiAodXBkYXRlU2VydmljZSkge1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnT3JpZ2luUGxhY2Vob2xkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdPcmlnaW5QbGFjZWhvbGRlck5leHRTaWJsaW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdGhpcy5kcmFnT3JpZ2luUGxhY2Vob2xkZXIgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRyYWdPcmlnaW5QbGFjZWhvbGRlck5leHRTaWJsaW5nID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9O1xuICBmaW5kTmV4dFNpYmxpbmcoY3VycmVudE5leHRTaWJsaW5nKSB7XG4gICAgaWYgKCF0aGlzLmRyYWdEcm9wU2VydmljZS5iYXRjaERyYWdEYXRhKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5leHRTaWJsaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YVxuICAgICAgICAubWFwKGRyYWdEYXRhID0+IGRyYWdEYXRhLmRyYWdnYWJsZSAmJiBkcmFnRGF0YS5kcmFnZ2FibGUuZWwubmF0aXZlRWxlbWVudClcbiAgICAgICAgLmluZGV4T2YoY3VycmVudE5leHRTaWJsaW5nKSA+IC0xKSB7XG4gICAgICAgIGN1cnJlbnROZXh0U2libGluZyA9IGN1cnJlbnROZXh0U2libGluZy5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50TmV4dFNpYmxpbmc7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0FuZEdldFZpZXdQb2ludENoYW5nZShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudC5wYXJlbnROb2RlKSB7IHJldHVybiBudWxsOyB9XG4gICAgLy8g5qih5ouf5LiA5Liq5YWD57Sg5rWL6aKE5rWL5L2N572u5ZKM5pyA57uI5L2N572u5piv5ZCm56ym5ZCI77yM5aaC5p6c5LiN56ym5ZCI5YiZ5piv5pyJdHJhbnNmb3Jt562J6YCg5oiQ55qE5YGP56e7XG4gICAgY29uc3QgZWxlbWVudFBvc2l0aW9uID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB0ZXN0RWwgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIFV0aWxzLmFkZEVsU3R5bGVzKHRlc3RFbCwge1xuICAgICAgb3BhY2l0eTogJzAnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IGVsZW1lbnRQb3NpdGlvbi50b3AgKyAncHgnLFxuICAgICAgbGVmdDogZWxlbWVudFBvc2l0aW9uLmxlZnQgKyAncHgnLFxuICAgICAgd2lkdGg6ICcxcHgnLFxuICAgICAgaGVpZ2h0OiAnMXB4JyxcbiAgICAgIHpJbmRleDogJy05OTk5OTknLFxuICAgIH0pO1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0ZXN0RWwpO1xuICAgIGNvbnN0IHRlc3RFbFBvc2l0aW9uID0gdGVzdEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZXN0RWwpO1xuICAgIHJldHVybiB7XG4gICAgICBvZmZzZXRYOiB0ZXN0RWxQb3NpdGlvbi5sZWZ0IC0gZWxlbWVudFBvc2l0aW9uLmxlZnQsXG4gICAgICBvZmZzZXRZOiB0ZXN0RWxQb3NpdGlvbi50b3AgLSBlbGVtZW50UG9zaXRpb24udG9wXG4gICAgfTtcbiAgfVxufVxuIl19