import { Directive, EventEmitter, Input, Output, Self } from '@angular/core';
import { DragDropService } from '../services/drag-drop.service';
import { DraggableDirective } from './draggable.directive';
import * as i0 from "@angular/core";
import * as i1 from "./draggable.directive";
import * as i2 from "../services/drag-drop.service";
export class BatchDraggableDirective {
    constructor(draggable, dragDropService) {
        this.draggable = draggable;
        this.dragDropService = dragDropService;
        this.batchDragGroup = 'default';
        this.batchDragActive = false;
        this.batchDragLastOneAutoActiveEventKeys = ['ctrlKey'];
        this.batchDragActiveEvent = new EventEmitter();
        this.needToRestore = false;
        this.batchDragStyle = ['badge', 'stack'];
        this.draggable.batchDraggable = this;
    }
    ngOnInit() {
        this.initDragDataByIdentity();
    }
    ngOnDestroy() {
        this.draggable.batchDraggable = undefined;
        if (this.dragData) {
            if (this.dragData.draggable === this.draggable) {
                this.dragData.draggable = undefined;
                if (!this.dragData.identity) {
                    this.removeFromBatchGroup();
                }
            }
        }
    }
    ngOnChanges(changes) {
        if (changes['batchDragActive']) {
            if (!this.initDragDataByIdentity()) {
                if (this.batchDragActive) {
                    if (!this.dragData && this.allowAddToBatchGroup()) {
                        this.addToBatchGroup();
                    }
                }
                else {
                    this.removeFromBatchGroup();
                }
            }
        }
    }
    ngAfterViewInit() {
        if (this.needToRestore) {
            this.restoreDragDataViewAfterViewInit();
            this.needToRestore = false;
        }
    }
    initDragDataByIdentity() {
        const dragData = this.findInBatchDragDataByIdentities();
        if (dragData) {
            if (this.batchDragActive) {
                if (!this.dragData) {
                    this.addToBatchGroup(dragData);
                    this.registerRestoreDragDataViewAfterViewInitWhiteDragging();
                }
            }
            else {
                this.removeFromBatchGroup(dragData);
            }
        }
        return dragData;
    }
    registerRestoreDragDataViewAfterViewInitWhiteDragging() {
        if (this.dragDropService.draggedEl && this.dragDropService.draggedElIdentity &&
            this.dragDropService.draggedEl !== this.draggable.el.nativeElement) {
            this.needToRestore = true;
        }
    }
    restoreDragDataViewAfterViewInit() {
        const draggable = this.draggable;
        if (draggable.originPlaceholder && draggable.originPlaceholder.show !== false) {
            draggable.insertOriginPlaceholder(true, false);
        }
        draggable.el.nativeElement.style.display = 'none';
    }
    allowAddToBatchGroup() {
        if (!this.dragDropService.batchDragGroup) {
            return true;
        }
        else {
            return this.batchDragGroup === this.dragDropService.batchDragGroup;
        }
    }
    addToBatchGroup(dragData) {
        this.dragDropService.batchDragGroup = this.dragDropService.batchDragGroup || this.batchDragGroup;
        if (dragData) {
            dragData.draggable = this.draggable;
            dragData.dragData = this.draggable.dragData;
            this.dragData = dragData;
        }
        else {
            this.dragData = this.dragData || {
                identity: this.draggable.dragIdentity || undefined,
                draggable: this.draggable,
                dragData: this.draggable.dragData
            };
            this.dragDropService.batchDragData = this.addToArrayIfNotExist(this.dragDropService.batchDragData, this.dragData);
        }
    }
    removeFromBatchGroup(dragData) {
        this.deleteFromArrayIfExist(this.dragDropService.batchDragData, dragData || this.dragData);
        this.dragData = undefined;
        if (!(this.dragDropService.batchDragData && this.dragDropService.batchDragData.length)) {
            this.dragDropService.batchDragGroup = undefined;
        }
    }
    addToArrayIfNotExist(array, target) {
        array = array || [];
        if (array.indexOf(target) === -1) {
            array.push(target);
        }
        return array;
    }
    deleteFromArrayIfExist(array, target) {
        if (!array) {
            return;
        }
        if (array.length > 0) {
            const index = array.indexOf(target);
            if (index > -1) {
                array.splice(index, 1);
            }
        }
        return array;
    }
    findInBatchDragDataByIdentities() {
        if (!this.draggable.dragIdentity) {
            return null;
        }
        else if (!this.dragDropService.batchDragData) {
            return undefined;
        }
        else {
            return this.dragDropService.batchDragData.filter(dragData => dragData.identity === this.draggable.dragIdentity).pop();
        }
    }
    active() {
        this.batchDragActiveEvent.emit({ el: this.draggable.el.nativeElement, data: this.draggable.dragData });
    }
    updateDragData() {
        // 选中状态才更新
        if (!this.dragData) {
            return;
        }
        // 需要维持内存地址不变
        Object.assign(this.dragData, {
            identity: this.draggable.dragIdentity || undefined,
            draggable: this.draggable,
            dragData: this.draggable.dragData
        });
    }
}
BatchDraggableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BatchDraggableDirective, deps: [{ token: i1.DraggableDirective, self: true }, { token: i2.DragDropService }], target: i0.ɵɵFactoryTarget.Directive });
BatchDraggableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: BatchDraggableDirective, selector: "[dDraggable][batchDrag]", inputs: { batchDragGroup: "batchDragGroup", batchDragActive: "batchDragActive", batchDragLastOneAutoActiveEventKeys: "batchDragLastOneAutoActiveEventKeys", batchDragStyle: "batchDragStyle" }, outputs: { batchDragActiveEvent: "batchDragActiveEvent" }, exportAs: ["dBatchDraggable"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BatchDraggableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDraggable][batchDrag]',
                    exportAs: 'dBatchDraggable'
                }]
        }], ctorParameters: function () { return [{ type: i1.DraggableDirective, decorators: [{
                    type: Self
                }] }, { type: i2.DragDropService }]; }, propDecorators: { batchDragGroup: [{
                type: Input
            }], batchDragActive: [{
                type: Input
            }], batchDragLastOneAutoActiveEventKeys: [{
                type: Input
            }], batchDragActiveEvent: [{
                type: Output
            }], batchDragStyle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,