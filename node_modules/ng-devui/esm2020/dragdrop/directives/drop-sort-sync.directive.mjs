import { Directive, ElementRef, Input, Optional, Self } from '@angular/core';
import { Subscription } from 'rxjs';
import { DescendantChildren } from '../services/drag-drop-desc-reg.service';
import { DropSortSyncDescendantRegisterService } from '../services/drag-drop-descendant-sync.service';
import { DragDropSyncService } from '../services/drag-drop-sync.service';
import { Utils } from '../shared/utils';
import { DroppableDirective } from './droppable.directive';
import * as i0 from "@angular/core";
import * as i1 from "./droppable.directive";
import * as i2 from "../services/drag-drop-sync.service";
import * as i3 from "../services/drag-drop-descendant-sync.service";
export class DropSortSyncDirective extends DescendantChildren {
    constructor(el, droppable, dragDropSyncService, dropSortSyncDrs) {
        super(dropSortSyncDrs);
        this.el = el;
        this.droppable = droppable;
        this.dragDropSyncService = dragDropSyncService;
        this.dropSortSyncDrs = dropSortSyncDrs;
        this.dropSyncGroup = '';
        this.direction = 'v'; // 与sortContainer正交的方向
        this.subscription = new Subscription();
        this.subRenderEvent = (nativeStyle) => {
            this.syncGroupDirectives = this.dragDropSyncService.getDropSyncByGroup(this.dropSyncGroup).filter(directive => directive !== this);
            this.syncGroupDirectives.forEach(dir => {
                dir.renderPlaceholder(nativeStyle, this.droppable);
            });
        };
        this.subInsertionEvent = (cmd) => {
            this.syncGroupDirectives = this.dragDropSyncService.getDropSyncByGroup(this.dropSyncGroup).filter(directive => directive !== this);
            this.syncGroupDirectives.forEach(dir => {
                dir.insertPlaceholderCommand({
                    command: cmd.command,
                    container: dir.sortContainer,
                    relatedEl: dir.getChildrenElByIndex(dir.sortContainer, cmd.index)
                });
            });
        };
        this.descendantItem = this;
    }
    ngOnInit() {
        this.sortContainer = this.el.nativeElement;
        if (this.droppable) {
            this.sortContainer = this.droppable.getSortContainer();
            this.subscription.add(this.droppable.placeholderInsertionEvent.subscribe(this.subInsertionEvent)).add(this.droppable.placeholderRenderEvent.subscribe(this.subRenderEvent));
        }
        super.ngOnInit();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        super.ngOnDestroy();
    }
    getChildrenElByIndex(target, index) {
        if (index === undefined || target && target.children && target.children.length < index || index < 0) {
            return null;
        }
        return this.sortContainer.children.item(index);
    }
    renderPlaceholder(nativeStyle, droppable) {
        if (!this.placeholder) {
            this.placeholder = document.createElement(droppable.placeholderTag);
            this.placeholder.className = 'drag-placeholder';
            this.placeholder.classList.add('drag-sync-placeholder');
            this.placeholder.innerText = droppable.placeholderText;
        }
        const { width, height } = nativeStyle;
        if (this.direction === 'v') {
            this.placeholder.style.width = width + 'px';
            this.placeholder.style.height = this.sortContainer.getBoundingClientRect().height + 'px';
        }
        else {
            this.placeholder.style.height = height + 'px';
            this.placeholder.style.width = this.sortContainer.getBoundingClientRect().width + 'px';
        }
        Utils.addElStyles(this.placeholder, droppable.placeholderStyle);
    }
    insertPlaceholderCommand(cmd) {
        if (cmd.command === 'insertBefore' && cmd.container) {
            cmd.container.insertBefore(this.placeholder, cmd.relatedEl);
            return;
        }
        if (cmd.command === 'append' && cmd.container) {
            cmd.container.appendChild(this.placeholder);
            return;
        }
        if (cmd.command === 'remove' && cmd.container) {
            if (cmd.container.contains(this.placeholder)) {
                cmd.container.removeChild(this.placeholder);
            }
            return;
        }
    }
}
DropSortSyncDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DropSortSyncDirective, deps: [{ token: i0.ElementRef }, { token: i1.DroppableDirective, optional: true, self: true }, { token: i2.DragDropSyncService }, { token: i3.DropSortSyncDescendantRegisterService }], target: i0.ɵɵFactoryTarget.Directive });
DropSortSyncDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DropSortSyncDirective, selector: "[dDropSortSync]", inputs: { dropSyncGroup: ["dDropSortSync", "dropSyncGroup"], direction: ["dropSyncDirection", "direction"] }, exportAs: ["dDropSortSync"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DropSortSyncDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDropSortSync]',
                    exportAs: 'dDropSortSync'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DroppableDirective, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.DragDropSyncService }, { type: i3.DropSortSyncDescendantRegisterService }]; }, propDecorators: { dropSyncGroup: [{
                type: Input,
                args: ['dDropSortSync']
            }], direction: [{
                type: Input,
                args: ['dropSyncDirection']
            }] } });
//# sourceMappingURL=data:application/json;base64,