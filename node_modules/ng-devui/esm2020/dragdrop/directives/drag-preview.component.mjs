import { ChangeDetectorRef, Component, ElementRef } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class DragPreviewComponent {
    constructor(el, cdr) {
        this.el = el;
        this.cdr = cdr;
        this.element = el.nativeElement;
    }
    updateTemplate() {
        this.cdr.detectChanges();
    }
}
DragPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragPreviewComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
DragPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DragPreviewComponent, selector: "d-drag-preview", ngImport: i0, template: "<ng-template\n  [ngTemplateOutlet]=\"templateRef\"\n  [ngTemplateOutletContext]=\"{\n    data: data,\n    draggedEl: draggedEl,\n    dragData: dragData,\n    batchDragData: batchDragData,\n    dragSyncDOMElements: dragSyncDOMElements\n  }\"\n>\n</ng-template>\n", directives: [{ type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-drag-preview', preserveWhitespaces: false, template: "<ng-template\n  [ngTemplateOutlet]=\"templateRef\"\n  [ngTemplateOutletContext]=\"{\n    data: data,\n    draggedEl: draggedEl,\n    dragData: dragData,\n    batchDragData: batchDragData,\n    dragSyncDOMElements: dragSyncDOMElements\n  }\"\n>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1wcmV2aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL2RyYWdkcm9wL2RpcmVjdGl2ZXMvZHJhZy1wcmV2aWV3LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uL2RldnVpL2RyYWdkcm9wL2RpcmVjdGl2ZXMvZHJhZy1wcmV2aWV3LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRyxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDOzs7QUFRdkYsTUFBTSxPQUFPLG9CQUFvQjtJQVEvQixZQUFvQixFQUFjLEVBQVUsR0FBc0I7UUFBOUMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ2hFLElBQUksQ0FBQyxPQUFPLEdBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUNuQyxDQUFDO0lBQ00sY0FBYztRQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzNCLENBQUM7O2lIQWJVLG9CQUFvQjtxR0FBcEIsb0JBQW9CLHNEQ1JqQyx1UUFXQTsyRkRIYSxvQkFBb0I7a0JBTmhDLFNBQVM7K0JBQ0UsZ0JBQWdCLHVCQUVMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZC1kcmFnLXByZXZpZXcnLFxuICB0ZW1wbGF0ZVVybDogJy4vZHJhZy1wcmV2aWV3LmNvbXBvbmVudC5odG1sJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuXG5leHBvcnQgY2xhc3MgRHJhZ1ByZXZpZXdDb21wb25lbnQge1xuICBlbGVtZW50O1xuICBkYXRhO1xuICBkcmFnZ2VkRWw7XG4gIGRyYWdEYXRhO1xuICBiYXRjaERyYWdEYXRhO1xuICBkcmFnU3luY0RPTUVsZW1lbnRzO1xuICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gIGVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVRlbXBsYXRlKCkge1xuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG59XG4iLCI8bmctdGVtcGxhdGVcbiAgW25nVGVtcGxhdGVPdXRsZXRdPVwidGVtcGxhdGVSZWZcIlxuICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie1xuICAgIGRhdGE6IGRhdGEsXG4gICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWwsXG4gICAgZHJhZ0RhdGE6IGRyYWdEYXRhLFxuICAgIGJhdGNoRHJhZ0RhdGE6IGJhdGNoRHJhZ0RhdGEsXG4gICAgZHJhZ1N5bmNET01FbGVtZW50czogZHJhZ1N5bmNET01FbGVtZW50c1xuICB9XCJcbj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=