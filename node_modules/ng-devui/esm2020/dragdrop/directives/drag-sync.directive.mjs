import { Directive, ElementRef, Input, Optional, Self } from '@angular/core';
import { Subscription } from 'rxjs';
import { DescendantChildren } from '../services/drag-drop-desc-reg.service';
import { DragSyncDescendantRegisterService } from '../services/drag-drop-descendant-sync.service';
import { DragDropSyncService } from '../services/drag-drop-sync.service';
import { DragDropService } from '../services/drag-drop.service';
import { DraggableDirective } from './draggable.directive';
import * as i0 from "@angular/core";
import * as i1 from "./draggable.directive";
import * as i2 from "../services/drag-drop-sync.service";
import * as i3 from "../services/drag-drop.service";
import * as i4 from "../services/drag-drop-descendant-sync.service";
export class DragSyncDirective extends DescendantChildren {
    constructor(el, draggable, dragDropSyncService, dragDropService, dragSyncDrs) {
        super(dragSyncDrs);
        this.el = el;
        this.draggable = draggable;
        this.dragDropSyncService = dragDropSyncService;
        this.dragDropService = dragDropService;
        this.dragSyncDrs = dragSyncDrs;
        this.dragSyncGroup = '';
        this.subscription = new Subscription();
        this.subDragElEvent = (bool) => {
            this.syncGroupDirectives.forEach(dir => this.renderDisplay(dir.el.nativeElement, bool));
        };
        this.descendantItem = this;
    }
    ngOnInit() {
        if (this.draggable) {
            this.subscription.add(this.draggable.dragElShowHideEvent.subscribe(this.subDragElEvent));
            this.subscription.add(this.draggable.beforeDragStartEvent.subscribe(() => {
                this.syncGroupDirectives = this.dragDropSyncService.getDragSyncByGroup(this.dragSyncGroup).filter(directive => directive !== this);
                this.dragDropService.dragSyncGroupDirectives = this.syncGroupDirectives;
            }));
            this.subscription.add(this.draggable.dropEndEvent.subscribe(() => {
                this.dragDropService.dragSyncGroupDirectives = undefined;
                this.syncGroupDirectives = undefined;
            }));
        }
        super.ngOnInit();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        super.ngOnDestroy();
    }
    renderDisplay(nativeEl, bool) {
        nativeEl.style.display = bool ? '' : 'none';
    }
}
DragSyncDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragSyncDirective, deps: [{ token: i0.ElementRef }, { token: i1.DraggableDirective, optional: true, self: true }, { token: i2.DragDropSyncService }, { token: i3.DragDropService }, { token: i4.DragSyncDescendantRegisterService }], target: i0.ɵɵFactoryTarget.Directive });
DragSyncDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DragSyncDirective, selector: "[dDragSync]", inputs: { dragSyncGroup: ["dDragSync", "dragSyncGroup"] }, exportAs: ["dDragSync"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragSyncDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDragSync]',
                    exportAs: 'dDragSync'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DraggableDirective, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.DragDropSyncService }, { type: i3.DragDropService }, { type: i4.DragSyncDescendantRegisterService }]; }, propDecorators: { dragSyncGroup: [{
                type: Input,
                args: ['dDragSync']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1zeW5jLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL2RyYWdkcm9wL2RpcmVjdGl2ZXMvZHJhZy1zeW5jLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxLQUFLLEVBQXFCLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNsRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQU0zRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsa0JBQXFDO0lBSzFFLFlBQ1MsRUFBYyxFQUNPLFNBQTZCLEVBQ2pELG1CQUF3QyxFQUN4QyxlQUFnQyxFQUNoQyxXQUE4QztRQUV0RCxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFOWixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ08sY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFDakQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsZ0JBQVcsR0FBWCxXQUFXLENBQW1DO1FBVHBDLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLGlCQUFZLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFvQ2hELG1CQUFjLEdBQUcsQ0FBQyxJQUFhLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQztRQTNCQSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN6RixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3ZFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQztnQkFDbkksSUFBSSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDMUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQy9ELElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxDQUFDO2dCQUN6RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDTDtRQUNELEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO1FBQ0QsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFNRCxhQUFhLENBQUMsUUFBcUIsRUFBRSxJQUFhO1FBQ2hELFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDOUMsQ0FBQzs7OEdBNUNVLGlCQUFpQjtrR0FBakIsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBSjdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxXQUFXO2lCQUN0Qjs7MEJBUUksUUFBUTs7MEJBQUksSUFBSTs0SkFOQyxhQUFhO3NCQUFoQyxLQUFLO3VCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEZXNjZW5kYW50Q2hpbGRyZW4gfSBmcm9tICcuLi9zZXJ2aWNlcy9kcmFnLWRyb3AtZGVzYy1yZWcuc2VydmljZSc7XG5pbXBvcnQgeyBEcmFnU3luY0Rlc2NlbmRhbnRSZWdpc3RlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kcmFnLWRyb3AtZGVzY2VuZGFudC1zeW5jLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BTeW5jU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2RyYWctZHJvcC1zeW5jLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZHJhZy1kcm9wLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ2dhYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi9kcmFnZ2FibGUuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2REcmFnU3luY10nLFxuICBleHBvcnRBczogJ2REcmFnU3luYydcbn0pXG5leHBvcnQgY2xhc3MgRHJhZ1N5bmNEaXJlY3RpdmUgZXh0ZW5kcyBEZXNjZW5kYW50Q2hpbGRyZW48RHJhZ1N5bmNEaXJlY3RpdmU+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoJ2REcmFnU3luYycpIGRyYWdTeW5jR3JvdXAgPSAnJztcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIHN5bmNHcm91cERpcmVjdGl2ZXM6IEFycmF5PERyYWdTeW5jRGlyZWN0aXZlPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWw6IEVsZW1lbnRSZWYsXG4gICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIGRyYWdnYWJsZTogRHJhZ2dhYmxlRGlyZWN0aXZlLFxuICAgIHByaXZhdGUgZHJhZ0Ryb3BTeW5jU2VydmljZTogRHJhZ0Ryb3BTeW5jU2VydmljZSxcbiAgICBwcml2YXRlIGRyYWdEcm9wU2VydmljZTogRHJhZ0Ryb3BTZXJ2aWNlLFxuICAgIHByaXZhdGUgZHJhZ1N5bmNEcnM6IERyYWdTeW5jRGVzY2VuZGFudFJlZ2lzdGVyU2VydmljZSxcbiAgKSB7XG4gICAgc3VwZXIoZHJhZ1N5bmNEcnMpO1xuICAgIHRoaXMuZGVzY2VuZGFudEl0ZW0gPSB0aGlzO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQodGhpcy5kcmFnZ2FibGUuZHJhZ0VsU2hvd0hpZGVFdmVudC5zdWJzY3JpYmUodGhpcy5zdWJEcmFnRWxFdmVudCkpO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHRoaXMuZHJhZ2dhYmxlLmJlZm9yZURyYWdTdGFydEV2ZW50LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3luY0dyb3VwRGlyZWN0aXZlcyA9IHRoaXMuZHJhZ0Ryb3BTeW5jU2VydmljZS5nZXREcmFnU3luY0J5R3JvdXAodGhpcy5kcmFnU3luY0dyb3VwKS5maWx0ZXIoZGlyZWN0aXZlID0+IGRpcmVjdGl2ZSAhPT0gdGhpcyk7XG4gICAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdTeW5jR3JvdXBEaXJlY3RpdmVzID0gdGhpcy5zeW5jR3JvdXBEaXJlY3RpdmVzO1xuICAgICAgfSkpO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHRoaXMuZHJhZ2dhYmxlLmRyb3BFbmRFdmVudC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnU3luY0dyb3VwRGlyZWN0aXZlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zeW5jR3JvdXBEaXJlY3RpdmVzID0gdW5kZWZpbmVkO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICB9XG5cbiAgc3ViRHJhZ0VsRXZlbnQgPSAoYm9vbDogYm9vbGVhbikgPT4ge1xuICAgIHRoaXMuc3luY0dyb3VwRGlyZWN0aXZlcy5mb3JFYWNoKGRpciA9PiB0aGlzLnJlbmRlckRpc3BsYXkoZGlyLmVsLm5hdGl2ZUVsZW1lbnQsIGJvb2wpKTtcbiAgfTtcblxuICByZW5kZXJEaXNwbGF5KG5hdGl2ZUVsOiBIVE1MRWxlbWVudCwgYm9vbDogYm9vbGVhbikge1xuICAgIG5hdGl2ZUVsLnN0eWxlLmRpc3BsYXkgPSBib29sID8gJycgOiAnbm9uZSc7XG4gIH1cblxufVxuIl19