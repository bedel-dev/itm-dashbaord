import { Directive } from '@angular/core';
import { Subscription } from 'rxjs';
import { DescendantRoot } from '../services/drag-drop-desc-reg.service';
import { DragSyncDescendantRegisterService, DropSortSyncDescendantRegisterService } from '../services/drag-drop-descendant-sync.service';
import { DragDropSyncService } from '../services/drag-drop-sync.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/drag-drop-sync.service";
import * as i2 from "../services/drag-drop-descendant-sync.service";
export class DragDropSyncBoxDirective {
    constructor(dragDropSyncService, dragSyncDrs, dropSortSyncDrs) {
        this.dragDropSyncService = dragDropSyncService;
        this.dragSyncDrs = dragSyncDrs;
        this.dropSortSyncDrs = dropSortSyncDrs;
        this.sub = new Subscription();
    }
    ngOnInit() {
        this.dragSyncList = new DescendantRoot(this.dragSyncDrs);
        this.dropSyncList = new DescendantRoot(this.dropSortSyncDrs);
    }
    ngAfterViewInit() {
        this.dragSyncList.on();
        this.dropSyncList.on();
        this.dragDropSyncService.updateDragSyncList(this.dragSyncList);
        this.dragDropSyncService.updateDropSyncList(this.dropSyncList);
        this.sub.add(this.dragSyncList.changes.subscribe(list => this.dragDropSyncService.updateDragSyncList(list))).add(this.dropSyncList.changes.subscribe(list => this.dragDropSyncService.updateDropSyncList(list)));
    }
    ngOnDestroy() {
        if (this.sub) {
            this.sub.unsubscribe();
        }
        this.dragSyncList.off();
        this.dropSyncList.off();
    }
}
DragDropSyncBoxDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragDropSyncBoxDirective, deps: [{ token: i1.DragDropSyncService }, { token: i2.DragSyncDescendantRegisterService }, { token: i2.DropSortSyncDescendantRegisterService }], target: i0.ɵɵFactoryTarget.Directive });
DragDropSyncBoxDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DragDropSyncBoxDirective, selector: "[dDragDropSyncBox]", providers: [
        DragDropSyncService,
        DragSyncDescendantRegisterService,
        DropSortSyncDescendantRegisterService,
    ], exportAs: ["dDragDropSyncBox"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragDropSyncBoxDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDragDropSyncBox]',
                    exportAs: 'dDragDropSyncBox',
                    providers: [
                        DragDropSyncService,
                        DragSyncDescendantRegisterService,
                        DropSortSyncDescendantRegisterService,
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.DragDropSyncService }, { type: i2.DragSyncDescendantRegisterService }, { type: i2.DropSortSyncDescendantRegisterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2Ryb3Atc3luYy1ib3guZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2dWkvZHJhZ2Ryb3AvZGlyZWN0aXZlcy9kcmFnZHJvcC1zeW5jLWJveC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3pJLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7O0FBYXpFLE1BQU0sT0FBTyx3QkFBd0I7SUFNbkMsWUFBb0IsbUJBQXdDLEVBQ3hDLFdBQThDLEVBQzlDLGVBQXNEO1FBRnRELHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsZ0JBQVcsR0FBWCxXQUFXLENBQW1DO1FBQzlDLG9CQUFlLEdBQWYsZUFBZSxDQUF1QztRQVAxRSxRQUFHLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQVF6QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQW9CLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksY0FBYyxDQUF3QixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUNELGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUNWLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FDakMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQzFELENBQ0YsQ0FBQyxHQUFHLENBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUNqQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FDMUQsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUM7O3FIQXBDVSx3QkFBd0I7eUdBQXhCLHdCQUF3Qiw2Q0FOeEI7UUFDVCxtQkFBbUI7UUFDbkIsaUNBQWlDO1FBQ2pDLHFDQUFxQztLQUN0QzsyRkFFVSx3QkFBd0I7a0JBVHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFO3dCQUNULG1CQUFtQjt3QkFDbkIsaUNBQWlDO3dCQUNqQyxxQ0FBcUM7cUJBQ3RDO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEZXNjZW5kYW50Um9vdCB9IGZyb20gJy4uL3NlcnZpY2VzL2RyYWctZHJvcC1kZXNjLXJlZy5zZXJ2aWNlJztcbmltcG9ydCB7IERyYWdTeW5jRGVzY2VuZGFudFJlZ2lzdGVyU2VydmljZSwgRHJvcFNvcnRTeW5jRGVzY2VuZGFudFJlZ2lzdGVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2RyYWctZHJvcC1kZXNjZW5kYW50LXN5bmMuc2VydmljZSc7XG5pbXBvcnQgeyBEcmFnRHJvcFN5bmNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZHJhZy1kcm9wLXN5bmMuc2VydmljZSc7XG5pbXBvcnQgeyBEcmFnU3luY0RpcmVjdGl2ZSB9IGZyb20gJy4vZHJhZy1zeW5jLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEcm9wU29ydFN5bmNEaXJlY3RpdmUgfSBmcm9tICcuL2Ryb3Atc29ydC1zeW5jLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkRHJhZ0Ryb3BTeW5jQm94XScsXG4gIGV4cG9ydEFzOiAnZERyYWdEcm9wU3luY0JveCcsXG4gIHByb3ZpZGVyczogW1xuICAgIERyYWdEcm9wU3luY1NlcnZpY2UsXG4gICAgRHJhZ1N5bmNEZXNjZW5kYW50UmVnaXN0ZXJTZXJ2aWNlLFxuICAgIERyb3BTb3J0U3luY0Rlc2NlbmRhbnRSZWdpc3RlclNlcnZpY2UsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRHJhZ0Ryb3BTeW5jQm94RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIC8vIEBDb250ZW50Q2hpbGRyZW4oRHJhZ1N5bmNEaXJlY3RpdmUsIHtkZXNjZW5kYW50czogdHJ1ZX0pXG4gIGRyYWdTeW5jTGlzdDogRGVzY2VuZGFudFJvb3Q8RHJhZ1N5bmNEaXJlY3RpdmU+O1xuICAvLyBAQ29udGVudENoaWxkcmVuKERyb3BTb3J0U3luY0RpcmVjdGl2ZSwge2Rlc2NlbmRhbnRzOiB0cnVlfSlcbiAgZHJvcFN5bmNMaXN0OiBEZXNjZW5kYW50Um9vdDxEcm9wU29ydFN5bmNEaXJlY3RpdmU+O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRyYWdEcm9wU3luY1NlcnZpY2U6IERyYWdEcm9wU3luY1NlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgZHJhZ1N5bmNEcnM6IERyYWdTeW5jRGVzY2VuZGFudFJlZ2lzdGVyU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBkcm9wU29ydFN5bmNEcnM6IERyb3BTb3J0U3luY0Rlc2NlbmRhbnRSZWdpc3RlclNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZHJhZ1N5bmNMaXN0ID0gbmV3IERlc2NlbmRhbnRSb290PERyYWdTeW5jRGlyZWN0aXZlPih0aGlzLmRyYWdTeW5jRHJzKTtcbiAgICB0aGlzLmRyb3BTeW5jTGlzdCA9IG5ldyBEZXNjZW5kYW50Um9vdDxEcm9wU29ydFN5bmNEaXJlY3RpdmU+KHRoaXMuZHJvcFNvcnRTeW5jRHJzKTtcbiAgfVxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5kcmFnU3luY0xpc3Qub24oKTtcbiAgICB0aGlzLmRyb3BTeW5jTGlzdC5vbigpO1xuICAgIHRoaXMuZHJhZ0Ryb3BTeW5jU2VydmljZS51cGRhdGVEcmFnU3luY0xpc3QodGhpcy5kcmFnU3luY0xpc3QpO1xuICAgIHRoaXMuZHJhZ0Ryb3BTeW5jU2VydmljZS51cGRhdGVEcm9wU3luY0xpc3QodGhpcy5kcm9wU3luY0xpc3QpO1xuICAgIHRoaXMuc3ViLmFkZChcbiAgICAgIHRoaXMuZHJhZ1N5bmNMaXN0LmNoYW5nZXMuc3Vic2NyaWJlKFxuICAgICAgICBsaXN0ID0+IHRoaXMuZHJhZ0Ryb3BTeW5jU2VydmljZS51cGRhdGVEcmFnU3luY0xpc3QobGlzdClcbiAgICAgIClcbiAgICApLmFkZChcbiAgICAgIHRoaXMuZHJvcFN5bmNMaXN0LmNoYW5nZXMuc3Vic2NyaWJlKFxuICAgICAgICBsaXN0ID0+IHRoaXMuZHJhZ0Ryb3BTeW5jU2VydmljZS51cGRhdGVEcm9wU3luY0xpc3QobGlzdClcbiAgICAgIClcbiAgICApO1xuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1Yikge1xuICAgICAgdGhpcy5zdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgdGhpcy5kcmFnU3luY0xpc3Qub2ZmKCk7XG4gICAgdGhpcy5kcm9wU3luY0xpc3Qub2ZmKCk7XG4gIH1cblxufVxuIl19