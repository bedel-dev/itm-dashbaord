import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Makes an element draggable by adding the draggable html attribute
 */
export class SortableDirective {
    constructor(el) {
        this.el = el;
        this.dSortDirection = 'v';
        this.dSortableZMode = false;
        this.dSortable = true;
    }
}
SortableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SortableDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
SortableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: SortableDirective, selector: "[dSortable]", inputs: { dSortDirection: ["dSortable", "dSortDirection"], dSortableZMode: "dSortableZMode" }, host: { properties: { "attr.dsortable": "this.dSortDirection", "attr.d-sortable-zmode": "this.dSortableZMode", "attr.d-sortable": "this.dSortable" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SortableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dSortable]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { dSortDirection: [{
                type: HostBinding,
                args: ['attr.dsortable']
            }, {
                type: Input,
                args: ['dSortable']
            }], dSortableZMode: [{
                type: HostBinding,
                args: ['attr.d-sortable-zmode']
            }, {
                type: Input
            }], dSortable: [{
                type: HostBinding,
                args: ['attr.d-sortable']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGFibGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2dWkvZHJhZ2Ryb3AvZGlyZWN0aXZlcy9zb3J0YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLMUU7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBTTVCLFlBQW1CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSlosbUJBQWMsR0FBRyxHQUFHLENBQUM7UUFFakMsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFDQSxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ2IsQ0FBQzs7OEdBTjFCLGlCQUFpQjtrR0FBakIsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBTjdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCO2lHQU1zQixjQUFjO3NCQURsQyxXQUFXO3VCQUFDLGdCQUFnQjs7c0JBQzVCLEtBQUs7dUJBQUMsV0FBVztnQkFFVCxjQUFjO3NCQUR0QixXQUFXO3VCQUFDLHVCQUF1Qjs7c0JBQ25DLEtBQUs7Z0JBQzBCLFNBQVM7c0JBQXhDLFdBQVc7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2RTb3J0YWJsZV0nXG59KVxuLyoqXG4gKiBNYWtlcyBhbiBlbGVtZW50IGRyYWdnYWJsZSBieSBhZGRpbmcgdGhlIGRyYWdnYWJsZSBodG1sIGF0dHJpYnV0ZVxuICovXG5leHBvcnQgY2xhc3MgU29ydGFibGVEaXJlY3RpdmUge1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuZHNvcnRhYmxlJylcbiAgQElucHV0KCdkU29ydGFibGUnKSAgZFNvcnREaXJlY3Rpb24gPSAndic7XG4gIEBIb3N0QmluZGluZygnYXR0ci5kLXNvcnRhYmxlLXptb2RlJylcbiAgQElucHV0KCkgZFNvcnRhYmxlWk1vZGUgPSBmYWxzZTtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmQtc29ydGFibGUnKSBkU29ydGFibGUgPSB0cnVlO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWw6IEVsZW1lbnRSZWYpIHt9XG59XG4iXX0=