import { ComponentFactoryResolver, Directive, Input, TemplateRef } from '@angular/core';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { DragDropService } from '../services/drag-drop.service';
import { DragPreviewComponent } from './drag-preview.component';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/overlay-container";
import * as i2 from "../services/drag-drop.service";
export class DragPreviewDirective {
    constructor(componentFactoryResolver, overlayContainerRef, dragDropService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayContainerRef = overlayContainerRef;
        this.dragDropService = dragDropService;
        this.dragPreviewOptions = {
            skipBatchPreview: false
        };
    }
    createPreview() {
        const finalComponentFactoryResolver = this.componentFactoryResolver;
        const previewRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(DragPreviewComponent));
        this.previewRef = previewRef;
        this.updateData();
        return this.previewRef;
    }
    updateData() {
        Object.assign(this.previewRef.instance, {
            templateRef: this.dragPreviewTemplate,
            data: this.dragPreviewData,
            draggedEl: this.dragDropService.draggedEl,
            dragData: this.dragDropService.dragData,
            batchDragData: this.dragDropService.batchDragData && this.dragDropService.getBatchDragData(),
            dragSyncDOMElements: this.dragDropService.dragSyncGroupDirectives && this.getDragSyncDOMElements()
        });
        this.previewRef.instance.updateTemplate();
    }
    destroyPreview() {
        if (this.previewRef) {
            this.previewRef.hostView.destroy();
        }
    }
    getPreviewElement() {
        return this.previewRef && this.previewRef.instance.element;
    }
    getDragSyncDOMElements() {
        return this.dragDropService.dragSyncGroupDirectives.map(dir => dir.el.nativeElement);
    }
}
DragPreviewDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragPreviewDirective, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1.OverlayContainerRef }, { token: i2.DragDropService }], target: i0.ɵɵFactoryTarget.Directive });
DragPreviewDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DragPreviewDirective, selector: "[dDraggable][dDragPreview]", inputs: { dragPreviewTemplate: ["dDragPreview", "dragPreviewTemplate"], dragPreviewData: "dragPreviewData", dragPreviewOptions: "dragPreviewOptions" }, exportAs: ["dDragPreview"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragPreviewDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDraggable][dDragPreview]',
                    exportAs: 'dDragPreview'
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1.OverlayContainerRef }, { type: i2.DragDropService }]; }, propDecorators: { dragPreviewTemplate: [{
                type: Input,
                args: ['dDragPreview']
            }], dragPreviewData: [{
                type: Input
            }], dragPreviewOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1wcmV2aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL2RyYWdkcm9wL2RpcmVjdGl2ZXMvZHJhZy1wcmV2aWV3LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7O0FBT2hFLE1BQU0sT0FBTyxvQkFBb0I7SUFPL0IsWUFBb0Isd0JBQWtELEVBQ2xELG1CQUF3QyxFQUFVLGVBQWdDO1FBRGxGLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUw3Rix1QkFBa0IsR0FBRztZQUM1QixnQkFBZ0IsRUFBRSxLQUFLO1NBQ3hCLENBQUM7SUFJRixDQUFDO0lBRU0sYUFBYTtRQUNsQixNQUFNLDZCQUE2QixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUVwRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUN6RCw2QkFBNkIsQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUM1RSxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRU0sVUFBVTtRQUNmLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDdEMsV0FBVyxFQUFFLElBQUksQ0FBQyxtQkFBbUI7WUFDckMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQzFCLFNBQVMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVM7WUFDekMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUTtZQUN2QyxhQUFhLEVBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3RixtQkFBbUIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtTQUNuRyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBRU0saUJBQWlCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7SUFDN0QsQ0FBQztJQUNPLHNCQUFzQjtRQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2RixDQUFDOztpSEE3Q1Usb0JBQW9CO3FHQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFMaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxRQUFRLEVBQUUsY0FBYztpQkFDekI7K0tBR3dCLG1CQUFtQjtzQkFBekMsS0FBSzt1QkFBQyxjQUFjO2dCQUNaLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csa0JBQWtCO3NCQUExQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheUNvbnRhaW5lclJlZiB9IGZyb20gJ25nLWRldnVpL292ZXJsYXktY29udGFpbmVyJztcbmltcG9ydCB7IERyYWdEcm9wU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2RyYWctZHJvcC5zZXJ2aWNlJztcbmltcG9ydCB7IERyYWdQcmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi9kcmFnLXByZXZpZXcuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2REcmFnZ2FibGVdW2REcmFnUHJldmlld10nLFxuICBleHBvcnRBczogJ2REcmFnUHJldmlldydcbn0pXG5cbmV4cG9ydCBjbGFzcyBEcmFnUHJldmlld0RpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnZERyYWdQcmV2aWV3JykgZHJhZ1ByZXZpZXdUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KCkgZHJhZ1ByZXZpZXdEYXRhO1xuICBASW5wdXQoKSBkcmFnUHJldmlld09wdGlvbnMgPSB7XG4gICAgc2tpcEJhdGNoUHJldmlldzogZmFsc2VcbiAgfTtcbiAgcHVibGljIHByZXZpZXdSZWY7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgb3ZlcmxheUNvbnRhaW5lclJlZjogT3ZlcmxheUNvbnRhaW5lclJlZiwgcHJpdmF0ZSBkcmFnRHJvcFNlcnZpY2U6IERyYWdEcm9wU2VydmljZSkge1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVByZXZpZXcoKSB7XG4gICAgY29uc3QgZmluYWxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcblxuICAgIGNvbnN0IHByZXZpZXdSZWYgPSB0aGlzLm92ZXJsYXlDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KFxuICAgICAgZmluYWxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoRHJhZ1ByZXZpZXdDb21wb25lbnQpXG4gICAgKTtcbiAgICB0aGlzLnByZXZpZXdSZWYgPSBwcmV2aWV3UmVmO1xuICAgIHRoaXMudXBkYXRlRGF0YSgpO1xuICAgIHJldHVybiB0aGlzLnByZXZpZXdSZWY7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlRGF0YSgpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMucHJldmlld1JlZi5pbnN0YW5jZSwge1xuICAgICAgdGVtcGxhdGVSZWY6IHRoaXMuZHJhZ1ByZXZpZXdUZW1wbGF0ZSxcbiAgICAgIGRhdGE6IHRoaXMuZHJhZ1ByZXZpZXdEYXRhLFxuICAgICAgZHJhZ2dlZEVsOiB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnZ2VkRWwsXG4gICAgICBkcmFnRGF0YTogdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0RhdGEsXG4gICAgICBiYXRjaERyYWdEYXRhOiAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuYmF0Y2hEcmFnRGF0YSAmJiB0aGlzLmRyYWdEcm9wU2VydmljZS5nZXRCYXRjaERyYWdEYXRhKCksXG4gICAgICBkcmFnU3luY0RPTUVsZW1lbnRzOiB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnU3luY0dyb3VwRGlyZWN0aXZlcyAmJiB0aGlzLmdldERyYWdTeW5jRE9NRWxlbWVudHMoKVxuICAgIH0pO1xuICAgIHRoaXMucHJldmlld1JlZi5pbnN0YW5jZS51cGRhdGVUZW1wbGF0ZSgpO1xuICB9XG5cbiAgcHVibGljIGRlc3Ryb3lQcmV2aWV3KCkge1xuICAgIGlmICh0aGlzLnByZXZpZXdSZWYpIHtcbiAgICAgIHRoaXMucHJldmlld1JlZi5ob3N0Vmlldy5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFByZXZpZXdFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLnByZXZpZXdSZWYgJiYgdGhpcy5wcmV2aWV3UmVmLmluc3RhbmNlLmVsZW1lbnQ7XG4gIH1cbiAgcHJpdmF0ZSBnZXREcmFnU3luY0RPTUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnU3luY0dyb3VwRGlyZWN0aXZlcy5tYXAoZGlyID0+IGRpci5lbC5uYXRpdmVFbGVtZW50KTtcbiAgfVxufVxuIl19