import { ChangeDetectorRef, Component, ElementRef, Input } from '@angular/core';
import { DragDropService } from '../services/drag-drop.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/drag-drop.service";
export class DragPreviewCloneDomRefComponent {
    constructor(el, cdr, dragDropService) {
        this.el = el;
        this.cdr = cdr;
        this.dragDropService = dragDropService;
        this.copyStyle = true;
    }
    ngAfterViewInit() {
        if (!this.cloneNode) {
            this.createView();
        }
    }
    ngOnChanges(changes) {
        if (changes['domRef']) {
            if (this.cloneNode) {
                this.destroyView();
                this.createView();
            }
            else {
                this.createView();
            }
        }
    }
    ngOnDestroy() {
        if (this.cloneNode) {
            this.destroyView();
        }
    }
    createView() {
        if (this.domRef) {
            this.cloneNode = this.domRef.cloneNode(true);
            if (this.copyStyle) {
                this.dragDropService.copyStyle(this.domRef, this.cloneNode);
            }
            this.el.nativeElement.appendChild(this.cloneNode);
        }
    }
    destroyView() {
        if (this.cloneNode) {
            if (this.el.nativeElement.contains(this.cloneNode)) {
                this.el.nativeElement.removeChild(this.cloneNode);
            }
            this.cloneNode = undefined;
        }
    }
    updateTemplate() {
        this.cdr.detectChanges();
    }
}
DragPreviewCloneDomRefComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragPreviewCloneDomRefComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.DragDropService }], target: i0.ɵɵFactoryTarget.Component });
DragPreviewCloneDomRefComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DragPreviewCloneDomRefComponent, selector: "d-drag-preview-clone-dom-ref", inputs: { domRef: "domRef", copyStyle: "copyStyle" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DragPreviewCloneDomRefComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-drag-preview-clone-dom-ref',
                    template: '',
                    preserveWhitespaces: false,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.DragDropService }]; }, propDecorators: { domRef: [{
                type: Input
            }], copyStyle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1wcmVpdmV3LWNsb25lLWZyb20tZG9tUmVmLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldnVpL2RyYWdkcm9wL2RpcmVjdGl2ZXMvZHJhZy1wcmVpdmV3LWNsb25lLWZyb20tZG9tUmVmLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWtCLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUF1QyxNQUFNLGVBQWUsQ0FBQztBQUNySSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7OztBQVFoRSxNQUFNLE9BQU8sK0JBQStCO0lBSTFDLFlBQW9CLEVBQWMsRUFBVSxHQUFzQixFQUFVLGVBQWdDO1FBQXhGLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUZuRyxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBRzFCLENBQUM7SUFDRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUNELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNyQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ25CO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNuQjtTQUNGO0lBQ0gsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO0lBRUgsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDN0Q7WUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNsRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBQ00sY0FBYztRQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzNCLENBQUM7OzRIQS9DVSwrQkFBK0I7Z0hBQS9CLCtCQUErQiwrSUFKaEMsRUFBRTsyRkFJRCwrQkFBK0I7a0JBTjNDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsUUFBUSxFQUFFLEVBQUU7b0JBQ1osbUJBQW1CLEVBQUUsS0FBSztpQkFDM0I7K0pBR1UsTUFBTTtzQkFBZCxLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEcmFnRHJvcFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kcmFnLWRyb3Auc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2QtZHJhZy1wcmV2aWV3LWNsb25lLWRvbS1yZWYnLFxuICB0ZW1wbGF0ZTogJycsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxufSlcblxuZXhwb3J0IGNsYXNzIERyYWdQcmV2aWV3Q2xvbmVEb21SZWZDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGRvbVJlZjogSFRNTEVsZW1lbnQ7XG4gIEBJbnB1dCgpIGNvcHlTdHlsZSA9IHRydWU7XG4gIGNsb25lTm9kZTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGRyYWdEcm9wU2VydmljZTogRHJhZ0Ryb3BTZXJ2aWNlKSB7XG4gIH1cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5jbG9uZU5vZGUpIHtcbiAgICAgIHRoaXMuY3JlYXRlVmlldygpO1xuICAgIH1cbiAgfVxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXNbJ2RvbVJlZiddKSB7XG4gICAgICBpZiAodGhpcy5jbG9uZU5vZGUpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95VmlldygpO1xuICAgICAgICB0aGlzLmNyZWF0ZVZpZXcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3JlYXRlVmlldygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jbG9uZU5vZGUpIHtcbiAgICAgIHRoaXMuZGVzdHJveVZpZXcoKTtcbiAgICB9XG5cbiAgfVxuXG4gIGNyZWF0ZVZpZXcoKSB7XG4gICAgaWYgKHRoaXMuZG9tUmVmKSB7XG4gICAgICB0aGlzLmNsb25lTm9kZSA9IHRoaXMuZG9tUmVmLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIGlmICh0aGlzLmNvcHlTdHlsZSkge1xuICAgICAgICB0aGlzLmRyYWdEcm9wU2VydmljZS5jb3B5U3R5bGUodGhpcy5kb21SZWYsIHRoaXMuY2xvbmVOb2RlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNsb25lTm9kZSk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3lWaWV3KCkge1xuICAgIGlmICh0aGlzLmNsb25lTm9kZSkge1xuICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5jb250YWlucyh0aGlzLmNsb25lTm9kZSkpIHtcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuY2xvbmVOb2RlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvbmVOb2RlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgdXBkYXRlVGVtcGxhdGUoKSB7XG4gICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbn1cbiJdfQ==