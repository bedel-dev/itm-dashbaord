import { ChangeDetectionStrategy, Component, Directive, ElementRef, Host, HostBinding, Input, Optional, Renderer2 } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { FormDirective } from './form.directive';
import * as i0 from "@angular/core";
import * as i1 from "./form.directive";
export class FormOperationComponent {
    constructor(elementRef, renderer) {
        renderer.addClass(elementRef.nativeElement, 'devui-form-operation');
    }
    ngOnInit() { }
}
FormOperationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FormOperationComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
FormOperationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: FormOperationComponent, selector: "d-form-operation", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [".devui-form-horizontal :host.devui-form-operation{display:block;margin-left:96px}.devui-form-vertical :host.devui-form-operation{display:block}.devui-form-columns :host.devui-form-operation{display:block;padding:8px 0}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FormOperationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-form-operation',
                    template: '<ng-content></ng-content>',
                    styles: [
                        `
      .devui-form-horizontal :host.devui-form-operation {
        display: block;
        margin-left: 96px;
      }
      .devui-form-vertical :host.devui-form-operation {
        display: block;
      }
      .devui-form-columns :host.devui-form-operation {
        display: block;
        padding: 8px 0;
      }
    `,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; } });
export class DFormSubmitDirective {
    // TODO：这里是否需要接管如果所关联的表单校验不通过，切换到disabled状态
    constructor(elementRef, _dForm) {
        this.elementRef = elementRef;
        this._dForm = _dForm;
        this.default = true;
        this._eventName = 'click';
        this.destroy$ = new Subject();
    }
    set eventName(eventName) {
        if (eventName) {
            this._eventName = eventName;
            this.registerEvent();
        }
    }
    ngAfterViewInit() {
        this.registerEvent();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    registerEvent() {
        this.destroy$.next();
        fromEvent(this.elementRef.nativeElement, this._eventName)
            .pipe(takeUntil(this.destroy$))
            .subscribe(($event) => {
            if (this._dForm) {
                this._dForm.updateOnSubmit($event, this.data);
            }
        });
    }
}
DFormSubmitDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormSubmitDirective, deps: [{ token: i0.ElementRef }, { token: i1.FormDirective, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
DFormSubmitDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DFormSubmitDirective, selector: "[dFormSubmit]", inputs: { eventName: ["dFormSubmit", "eventName"], data: ["dFormSubmitData", "data"] }, host: { properties: { "class.devui-form-submit": "this.default" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormSubmitDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dFormSubmit]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FormDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { default: [{
                type: HostBinding,
                args: ['class.devui-form-submit']
            }], eventName: [{
                type: Input,
                args: ['dFormSubmit']
            }], data: [{
                type: Input,
                args: ['dFormSubmitData']
            }] } });
export class DFormResetDirective {
    constructor(elementRef, _dForm) {
        this.elementRef = elementRef;
        this._dForm = _dForm;
        this.default = true;
        // TODO: emit now form
        // TODO: Abstract a parent class
        this._eventName = 'click';
        this.destroy$ = new Subject();
    }
    set eventName(eventName) {
        if (eventName) {
            this._eventName = eventName;
            this.registerEvent();
        }
    }
    ngAfterViewInit() {
        this.registerEvent();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    registerEvent() {
        this.destroy$.next();
        fromEvent(this.elementRef.nativeElement, this._eventName)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            if (this._dForm) {
                this._dForm.updateOnReset();
            }
        });
    }
}
DFormResetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormResetDirective, deps: [{ token: i0.ElementRef }, { token: i1.FormDirective, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
DFormResetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DFormResetDirective, selector: "[dFormReset]", inputs: { eventName: ["dFormReset", "eventName"] }, host: { properties: { "class.devui-form-reset": "this.default" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormResetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dFormReset]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FormDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { default: [{
                type: HostBinding,
                args: ['class.devui-form-reset']
            }], eventName: [{
                type: Input,
                args: ['dFormReset']
            }] } });
//# sourceMappingURL=data:application/json;base64,