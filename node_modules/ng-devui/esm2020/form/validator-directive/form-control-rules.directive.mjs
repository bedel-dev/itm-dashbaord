import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Host, Input, Optional, Output, Self, SkipSelf } from '@angular/core';
import { AbstractControlDirective, ControlContainer, NgControl } from '@angular/forms';
import { I18nService } from 'ng-devui/i18n';
import { OverlayContainerRef } from 'ng-devui/overlay-container';
import { PopoverComponent } from 'ng-devui/popover';
import { fromEvent, merge, Subject, timer } from 'rxjs';
import { map, switchMap, takeUntil } from 'rxjs/operators';
import { FormItemComponent } from '../form-item.component';
import { dDefaultValidators, ruleReservedWords } from './validate.type';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "ng-devui/i18n";
import * as i3 from "../form-item.component";
import * as i4 from "ng-devui/overlay-container";
export class DAbstractControlRuleDirective {
    constructor(cd, parent) {
        /* 统一设置错误抛出策略 */
        this._errorStrategy = 'dirty'; // 统一设置错误抛出策略
        /* 是否已经注册监听 */
        this._registered = false;
        this._errorMessage = null;
        this.dRulesStatusChange = new EventEmitter();
        this._cd = cd;
        this._parent = parent;
    }
    set locale(key) {
        this._locale = key;
        this._parseErrors(this._cd.control.errors);
        this.updateStatusAndMessageToView(this._cd.control.status);
    }
    get locale() {
        return this._locale;
    }
    get errorMessage() {
        return this._cd && this._cd.control.invalid
            ? this._errorMessage || (this._rules && this._rules.message)
            : null;
    }
    set errorMessage(msg) {
        if (this._cd && this._cd.control.invalid) {
            this._errorMessage = msg;
        }
        else {
            this._errorMessage = null;
        }
    }
    get isReady() {
        return this._cd.control ? !(this._cd.control.invalid || this._cd.control.pending) : true;
    }
    get pending() {
        return this._cd.control ? this._cd.control.pending : true;
    }
    /* 包含继承自父级的rule */
    get fullRules() {
        const keysCanInherit = ['messageShowType', 'errorStrategy', 'messageToView', 'popPosition', 'asyncDebounceTime'];
        const resRules = { ...this._rules };
        keysCanInherit.forEach((key) => {
            if (this._parent && this._parent.fullRules) {
                resRules[key] = resRules[key] !== undefined ? resRules[key] : this._parent.fullRules[key];
            }
        });
        return resRules;
    }
    get asyncValidatorDebounceTime() {
        const time = this.fullRules.asyncDebounceTime;
        return time === undefined ? 300 : time;
    }
    ngOnChanges(changes) {
        if ('rules' in changes && !this._rules) {
            // TODO：提供外部调用可手动更新rule方法
            this._rules = { ...this._originRules, ...this._translateRulesToObject(changes['rules'].currentValue) };
            this.setupOrUpdateRules();
        }
        if (!this._registered) {
            this._registerOnStatusChange();
        }
    }
    updateRules(rules) {
        this._rules = { ...this._originRules, ...this._translateRulesToObject(rules) };
        this.setupOrUpdateRules();
    }
    setOriginRules(rules) {
        this._originRules = this._translateRulesToObject(rules);
    }
    setupOrUpdateRules() {
        // TODO：校验rules规则是否合法
        this._transformRulesAndUpdateToModel();
        this._setUpdateStrategy();
    }
    _transformRulesAndUpdateToModel() {
        this._messageOpts = {};
        if (!Array.isArray(this._rules)) {
            if (this._rules.validators) {
                const validators = this._transformValidatorsToFnArray(this._rules.validators);
                this._updateValidators(validators);
            }
            if (this._rules.asyncValidators) {
                const asyncValidators = this._transformValidatorsToFnArray(this._rules.asyncValidators, true);
                this._updateAsyncValidators(asyncValidators);
            }
        }
        else {
            const validators = this._transformValidatorsToFnArray(this._rules);
            this._updateValidators(validators);
        }
        this._updateValueAndValidity();
    }
    _transformValidatorsToFnArray(validators, async = false) {
        const resultFns = [];
        validators.forEach((validatorRule) => {
            // TODO: 提供可全局统一注册方法
            const validatorId = this._autoGetIdFromRule(validatorRule);
            let validator = null;
            if (!validatorId) {
                // TODO：抛出错误
            }
            if (validatorId in dDefaultValidators) {
                validator = this._generateValidatorFnFromDefault(validatorId, validatorRule[validatorId]);
            }
            else {
                if (typeof validatorRule[validatorId] === 'string') {
                    validator = validatorRule.validator;
                }
                else {
                    validator = validatorRule[validatorId];
                }
                if (!validatorRule.isNgValidator) {
                    if (!async) {
                        validator = this._transformRuleToNgValidator(validatorId, validator, validatorRule.message);
                    }
                    else {
                        validator = this._transformRuleToNgAsyncValidator(validatorId, validator, validatorRule.message);
                    }
                }
            }
            if (validator) {
                if (async && this.asyncValidatorDebounceTime) {
                    const oldValidator = validator;
                    validator = (control) => {
                        return timer(this.asyncValidatorDebounceTime).pipe(switchMap(() => {
                            return oldValidator(control);
                        }));
                    };
                }
                resultFns.push(validator);
                this._messageOpts[validatorId] = validatorRule;
            }
            // else {
            //   // TODO: 抛出错误
            // }
        });
        return resultFns;
    }
    _translateRulesToObject(rules) {
        if (Array.isArray(rules)) {
            return {
                validators: rules,
            };
        }
        return rules;
    }
    _findNgValidatorInDefault(validatorRule) {
        for (const key in dDefaultValidators) {
            if (Object.prototype.hasOwnProperty.call(validatorRule, key)) {
                return { id: key, ngValidator: this._generateValidatorFnFromDefault(key, validatorRule[key]) };
            }
        }
        return null;
    }
    _generateValidatorFnFromDefault(key, value) {
        if (typeof value === 'boolean' && value) {
            // boolean无需再执行函数进行传值
            return dDefaultValidators[key];
        }
        else if (typeof value !== 'boolean') {
            return dDefaultValidators[key](value);
        }
        return null;
    }
    _transformRuleToNgValidator(id, validatorFn, message) {
        return (control) => {
            const res = validatorFn(control.value);
            return this._transValidatorResultToNgError(id, res, message);
        };
    }
    _transformRuleToNgAsyncValidator(id, validator, message) {
        return (control) => {
            return validator(control.value).pipe(map((res) => {
                return this._transValidatorResultToNgError(id, res, message);
            }));
        };
    }
    _transValidatorResultToNgError(id, res, message) {
        let error = null;
        if (typeof res === 'boolean' && !res) {
            error = {};
            error[id] = message;
        }
        else if (typeof res === 'string' || (res && typeof res === 'object')) {
            // 兼容国际化词条
            error = {};
            error[id] = res;
        }
        return error;
    }
    _autoGetIdFromRule(rule) {
        for (const key in rule) {
            if (!(key in ruleReservedWords)) {
                return key;
            }
        }
        return rule.id || null;
    }
    // TODO: 考虑自定义函数返回多种key场景
    get dClassError() {
        if (this._errorStrategy === 'dirty') {
            return this._cd.control ? this._cd.control.invalid && this._cd.control.dirty : false;
        }
        else {
            return this._cd.control ? this._cd.control.invalid : false;
        }
    }
    get showError() {
        return this.dClassError;
    }
    get showStatus() {
        if (this._errorStrategy === 'dirty') {
            return this._cd.control ? this._cd.control.dirty : false;
        }
        else {
            return true;
        }
    }
    get dClassSuccess() {
        // COMMENT: 暂不默认提供
        if (this._rules['errorStrategy'] === 'dirty') {
            return this._cd.control ? this._cd.control.valid && this._cd.control.dirty : false;
        }
        else if (!this._rules['errorStrategy']) {
            return false;
        }
        else {
            return this._cd.control ? this._cd.control.valid : false;
        }
    }
    get dClassWarning() {
        return this._warning ? true : false;
    }
    get invalid() {
        return this._cd.control ? this._cd.control.invalid : false;
    }
    _registerOnStatusChange() {
        if (this._cd && this._cd.control) {
            this._cd.control.statusChanges.subscribe((status) => {
                this._parseErrors(this._cd.control.errors);
                this._updateParent(); // update error message to parent directive
                this.updateStatusAndMessageToView(status);
            });
            this._registered = true;
        }
    }
    _parseErrors(errors) {
        if (!errors) {
            this._errorMessage = null;
        }
        else {
            /* if a rule did not have a message, we will try to get a message from errors by id */
            const { resId, resRule } = this._getARuleByErrors(errors);
            this._errorStrategy = this._getErrorStrategy(resRule);
            this._errorMessage =
                resRule &&
                    (resRule.message ||
                        this._getMessageFormErrorsById(errors, resId) ||
                        this._getDefaultErrorMessage(resRule, resId) ||
                        this._rules.message);
        }
        this.dRulesStatusChange.emit({
            showError: this.showError,
            errorMessage: this._errorMessage,
            errors: errors,
        });
    }
    _getDefaultErrorMessage(rule, id) {
        return rule && rule[id] && this.i18nFormText[id] && this.i18nFormText[id](rule[id]);
    }
    _getErrorStrategy(rule) {
        return (rule && rule.errorStrategy) || this._rules['errorStrategy'] || 'dirty';
    }
    _getMessageFormErrorsById(errors, id) {
        if (errors[id] && typeof errors[id] === 'string') {
            return errors[id];
        }
        else if (errors[id] && typeof errors[id] === 'object' && (errors[id][this.locale] || errors[id]['default'])) {
            return errors[id];
        }
        else {
            return null;
        }
    }
    _getARuleByErrors(errors) {
        // TODO：处理errors为null
        let resId;
        let resRule = null;
        for (const key of Object.keys(errors)) {
            if (this._messageOpts[key]) {
                if (resRule) {
                    const priority = resRule.priority || 0;
                    if (this._messageOpts[key].priority && this._messageOpts[key].priority > priority) {
                        resId = key;
                        resRule = this._messageOpts[key];
                    }
                }
                else {
                    resId = key;
                    resRule = this._messageOpts[key];
                }
            }
        }
        return { resId: resId, resRule: resRule };
    }
    _updateParent() {
        if (this._parent) {
            // TODO
        }
    }
    _setUpdateStrategy() {
        if (!Array.isArray(this._rules) && typeof this._rules === 'object' && this._rules.updateOn) {
            this._cd.control._updateOn = this._rules.updateOn;
        }
    }
    _updateValueAndValidity() {
        if (this._cd && this._cd.control) {
            this._cd.control.updateValueAndValidity();
        }
    }
    _updateValidators(newValidator) {
        if (this._cd && this._cd.control) {
            this._cd.control.setValidators(newValidator);
        }
    }
    _updateAsyncValidators(newValidator) {
        if (this._cd && this._cd.control) {
            this._cd.control.setAsyncValidators(newValidator);
        }
    }
}
DAbstractControlRuleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DAbstractControlRuleDirective, deps: [{ token: i1.AbstractControlDirective }, { token: DAbstractControlRuleDirective }], target: i0.ɵɵFactoryTarget.Directive });
DAbstractControlRuleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DAbstractControlRuleDirective, outputs: { dRulesStatusChange: "dRulesStatusChange" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DAbstractControlRuleDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.AbstractControlDirective }, { type: DAbstractControlRuleDirective }]; }, propDecorators: { dRulesStatusChange: [{
                type: Output
            }] } });
const dControlErrorStatusHost = {
    '[class.devui-error]': 'dClassError',
    '[class.devui-success]': 'dClassSuccess',
    '[class.devui-warning]': 'dClassWarning',
};
export class DFormGroupRuleDirective extends DAbstractControlRuleDirective {
    constructor(cd, parentDir, i18n) {
        super(cd, parentDir);
        this.i18n = i18n;
        this.dRulesStatusChange = new EventEmitter();
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.i18nFormText = this.i18n.getI18nText().form;
        this.locale = this.i18n.getI18nText().locale;
        this.i18n
            .langChange()
            .pipe(takeUntil(this.destroy$))
            .subscribe((data) => {
            this.i18nFormText = data.form;
            this.locale = data.locale;
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setErrorMessageByChild(msg) {
        if (!this.errorMessage) {
            this.errorMessage = msg;
        }
    }
    updateStatusAndMessageToView(status) {
        // do nothing
    }
}
DFormGroupRuleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormGroupRuleDirective, deps: [{ token: i1.ControlContainer, self: true }, { token: DFormGroupRuleDirective, host: true, optional: true, skipSelf: true }, { token: i2.I18nService }], target: i0.ɵɵFactoryTarget.Directive });
DFormGroupRuleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DFormGroupRuleDirective, selector: "[dValidateRules][formGroupName],[dValidateRules][formArrayName],[dValidateRules][ngModelGroup],\n          [dValidateRules][formGroup],[dValidateRules]form:not([ngNoForm]),[dValidateRules][ngForm]", inputs: { rules: ["dValidateRules", "rules"] }, outputs: { dRulesStatusChange: "dRulesStatusChange" }, host: { properties: { "class.devui-error": "dClassError", "class.devui-success": "dClassSuccess", "class.devui-warning": "dClassWarning" } }, exportAs: ["dValidateRules"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormGroupRuleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[dValidateRules][formGroupName],[dValidateRules][formArrayName],[dValidateRules][ngModelGroup],
          [dValidateRules][formGroup],[dValidateRules]form:not([ngNoForm]),[dValidateRules][ngForm]`,
                    /* eslint-disable-next-line @angular-eslint/no-host-metadata-property*/
                    host: dControlErrorStatusHost,
                    exportAs: 'dValidateRules',
                }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer, decorators: [{
                    type: Self
                }] }, { type: DFormGroupRuleDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: SkipSelf
                }] }, { type: i2.I18nService }]; }, propDecorators: { rules: [{
                type: Input,
                args: ['dValidateRules']
            }], dRulesStatusChange: [{
                type: Output
            }] } });
export class DFormControlRuleDirective extends DAbstractControlRuleDirective {
    constructor(cd, dFormItem, parentDir, i18n, triggerElementRef, overlayContainerRef, componentFactoryResolver) {
        super(cd, parentDir);
        this.dFormItem = dFormItem;
        this.i18n = i18n;
        this.triggerElementRef = triggerElementRef;
        this.overlayContainerRef = overlayContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.dRulesStatusChange = new EventEmitter();
        this.destroy$ = new Subject();
    }
    get showType() {
        return this.fullRules.messageShowType || 'popover';
    }
    get popPosition() {
        return this.fullRules.popPosition || ['right', 'bottom'];
    }
    ngOnInit() {
        this.setI18nText();
        this._registerFocusChange();
    }
    setI18nText() {
        this.i18nFormText = this.i18n.getI18nText().form;
        this.locale = this.i18n.getI18nText().locale;
        this.i18n
            .langChange()
            .pipe(takeUntil(this.destroy$))
            .subscribe((data) => {
            this.i18nFormText = data.form;
            this.locale = data.locale;
        });
    }
    _registerFocusChange() {
        merge(fromEvent(this.triggerElementRef.nativeElement, 'focusin'), fromEvent(this.triggerElementRef.nativeElement, 'focusout'))
            .pipe(takeUntil(this.destroy$))
            .subscribe((event) => {
            if (event.type === 'focusin') {
                this.showPopMessage();
            }
            if (event.type === 'focusout') {
                this.hidePopMessage();
            }
        });
    }
    _updateFormContainer(status, message) {
        if (this.dFormItem) {
            this.dFormItem.updateFeedback(status, message);
        }
    }
    _updatePopMessage(status, message) {
        this.popMessage = status === 'error' ? message : null; // 暂不提供除errorMessage外提示
        if (this.popoverComponentRef) {
            this.hidePopMessage();
            this.showPopMessage();
        }
    }
    updateStatusAndMessageToView(status) {
        let controlStatus = null;
        let message = null;
        if (this.showStatus) {
            [controlStatus, message] = this.getFormControlStatusAndMessage(status);
        }
        /* 国际化适配 */
        if (message && typeof message === 'object') {
            message = message[this.locale] || message['default'] || null;
        }
        if (this.showType === 'popover') {
            this._updatePopMessage(controlStatus, message);
            this._updateFormContainer(controlStatus, null);
        }
        else if (this.showType === 'text') {
            this._updateFormContainer(controlStatus, message);
        }
    }
    getFormControlStatusAndMessage(ngStatus) {
        let status = null;
        let message = null;
        if (ngStatus === 'INVALID') {
            status = 'error';
            message = this.errorMessage;
        }
        else if (ngStatus === 'PENDING') {
            status = 'pending';
        }
        else if (ngStatus === 'VALID') {
            status = 'success';
        }
        return [status, message];
    }
    createPopover(type, content) {
        this.popoverComponentRef = this.overlayContainerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(PopoverComponent));
        Object.assign(this.popoverComponentRef.instance, {
            content: content,
            triggerElementRef: this.triggerElementRef,
            position: this.popPosition,
            popType: type,
            popMaxWidth: this.popConfig?.popMaxWidth || 200,
            appendToBody: true,
            zIndex: this.popConfig?.zIndex || 1060,
        });
    }
    showPopMessage() {
        this.showPop('error', this.popMessage);
        if (this.popMessage) {
            this._updateFormContainer(null, null);
        }
    }
    hidePopMessage() {
        this.hidePop();
        if (this.popMessage) {
            this._updateFormContainer(this.showError ? 'error' : null, null);
        }
    }
    showPop(type, message) {
        this.hidePop();
        this.createPopover(type, message);
    }
    hidePop() {
        if (this.popoverComponentRef) {
            this.destroyPop();
        }
    }
    destroyPop() {
        if (this.popoverComponentRef) {
            this.popoverComponentRef.destroy();
            this.popoverComponentRef = null;
        }
    }
    ngOnDestroy() {
        this.destroyPop();
        this.destroy$.next();
        this.destroy$.complete();
    }
}
DFormControlRuleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormControlRuleDirective, deps: [{ token: i1.NgControl, self: true }, { token: i3.FormItemComponent, host: true, optional: true }, { token: DFormGroupRuleDirective, host: true, optional: true, skipSelf: true }, { token: i2.I18nService }, { token: i0.ElementRef }, { token: i4.OverlayContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });
DFormControlRuleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DFormControlRuleDirective, selector: "[dValidateRules][formControlName],[dValidateRules][ngModel],[dValidateRules][formControl]", inputs: { rules: ["dValidateRules", "rules"], popConfig: ["dValidatePopConfig", "popConfig"] }, outputs: { dRulesStatusChange: "dRulesStatusChange" }, host: { properties: { "class.devui-error": "dClassError", "class.devui-success": "dClassSuccess", "class.devui-warning": "dClassWarning" } }, exportAs: ["dValidateRules"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DFormControlRuleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dValidateRules][formControlName],[dValidateRules][ngModel],[dValidateRules][formControl]',
                    /* eslint-disable-next-line @angular-eslint/no-host-metadata-property*/
                    host: dControlErrorStatusHost,
                    exportAs: 'dValidateRules',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Self
                }] }, { type: i3.FormItemComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: DFormGroupRuleDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: SkipSelf
                }] }, { type: i2.I18nService }, { type: i0.ElementRef }, { type: i4.OverlayContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { rules: [{
                type: Input,
                args: ['dValidateRules']
            }], dRulesStatusChange: [{
                type: Output
            }], popConfig: [{
                type: Input,
                args: ['dValidatePopConfig']
            }] } });
//# sourceMappingURL=data:application/json;base64,