import { ContentChildren, Directive, EventEmitter, HostBinding, Input, Optional, Output, QueryList, Self } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { filter, startWith, take } from 'rxjs/operators';
import { DFormControlRuleDirective, DFormGroupRuleDirective } from './validator-directive/form-control-rules.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./validator-directive/form-control-rules.directive";
export var FormLayout;
(function (FormLayout) {
    FormLayout["Horizontal"] = "horizontal";
    FormLayout["Vertical"] = "vertical";
    FormLayout["Columns"] = "columns";
})(FormLayout || (FormLayout = {}));
export class FormDirective {
    constructor(cd, dValidateRuleDir) {
        this.layout = FormLayout.Horizontal;
        this.labelSize = '';
        this.labelAlign = 'start';
        this.dHasFeedback = false;
        this.dSubmit = new EventEmitter();
        this._cd = cd;
        this._dValidateRuleDir = dValidateRuleDir;
    }
    get layoutHorizontal() {
        return this.layout === FormLayout.Horizontal;
    }
    get layoutVertical() {
        return this.layout === FormLayout.Vertical;
    }
    get layoutColumns() {
        return this.layout === FormLayout.Columns;
    }
    get labelSizeLg() {
        return this.labelSize === 'lg';
    }
    get labelSizeSm() {
        return this.labelSize === 'sm';
    }
    get labelAlignStart() {
        return this.labelAlign === 'start';
    }
    get labelAlignCenter() {
        return this.labelAlign === 'center';
    }
    get labelAlignEnd() {
        return this.labelAlign === 'end';
    }
    updateOnSubmit($event, data) {
        this._operateAllControl(this._cd.control, (cd) => {
            cd.markAsDirty();
            cd.updateValueAndValidity();
        });
        /* emit event should after validate */
        this._cd.control.statusChanges
            .pipe(startWith(this._cd.control.status), filter((status) => {
            return status !== 'PENDING';
        }), take(1))
            .subscribe(() => {
            if (this._cd) {
                this._cd.onSubmit($event); // TODO: 需触发原生form表单的submit方法
                if (this._dValidateRuleDir) {
                    this.dSubmit.emit({
                        valid: this._dValidateRuleDir.isReady,
                        directive: this._dValidateRuleDir,
                        data: data,
                        errors: this._getAllErrors(this._cd.control)
                    });
                }
                else {
                    this.dSubmit.emit({
                        valid: this._cd.valid,
                        directive: this._cd,
                        data: data,
                        errors: this._getAllErrors(this._cd.control)
                    });
                }
            }
            if (this.childrenCtrDirs) {
                for (const validateDir of this.childrenCtrDirs) {
                    if (validateDir.invalid && validateDir.showType === 'popover') {
                        validateDir.showPopMessage(); // TODO: 表单类组件需要实现focus方法，若无focus，将无法正常blur
                        break;
                    }
                }
            }
        });
    }
    updateOnReset() {
        if (this._cd) {
            this._cd.onReset(); // TODO: 需触发原生form表单的reset方法
        }
        this._operateAllControl(this._cd.control, (cd) => {
            cd.markAsPristine();
            cd.updateValueAndValidity();
        });
    }
    _operateAllControl(control, operatorFn) {
        if (control) {
            operatorFn(control);
            const controls = control.controls;
            if (controls) {
                for (const key of Object.keys(controls)) {
                    this._operateAllControl(controls[key], operatorFn);
                }
            }
        }
    }
    _getAllErrors(control) {
        const res = {};
        if (control) {
            res.errors = control.errors;
            const controls = control.controls;
            if (controls) {
                for (const key of Object.keys(controls)) {
                    res[key] = this._getAllErrors(controls[key]);
                }
            }
        }
        return res;
    }
}
FormDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FormDirective, deps: [{ token: i1.ControlContainer, optional: true, self: true }, { token: i2.DFormGroupRuleDirective, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });
FormDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: FormDirective, selector: "[dForm]", inputs: { layout: "layout", labelSize: "labelSize", labelAlign: "labelAlign", dFeedbackType: "dFeedbackType", dHasFeedback: "dHasFeedback" }, outputs: { dSubmit: "dSubmit" }, host: { properties: { "class.devui-form-horizontal": "this.layoutHorizontal", "class.devui-form-vertical": "this.layoutVertical", "class.devui-form-columns": "this.layoutColumns", "class.devui-form-lg": "this.labelSizeLg", "class.devui-form-sm": "this.labelSizeSm", "class.devui-form-label-align-start": "this.labelAlignStart", "class.devui-form-label-align-center": "this.labelAlignCenter", "class.devui-form-label-align-end": "this.labelAlignEnd" } }, queries: [{ propertyName: "childrenCtrDirs", predicate: DFormControlRuleDirective, descendants: true }], exportAs: ["dForm"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FormDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dForm]',
                    exportAs: 'dForm',
                }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i2.DFormGroupRuleDirective, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { layout: [{
                type: Input
            }], labelSize: [{
                type: Input
            }], labelAlign: [{
                type: Input
            }], dFeedbackType: [{
                type: Input
            }], dHasFeedback: [{
                type: Input
            }], dSubmit: [{
                type: Output
            }], childrenCtrDirs: [{
                type: ContentChildren,
                args: [DFormControlRuleDirective, { descendants: true }]
            }], layoutHorizontal: [{
                type: HostBinding,
                args: ['class.devui-form-horizontal']
            }], layoutVertical: [{
                type: HostBinding,
                args: ['class.devui-form-vertical']
            }], layoutColumns: [{
                type: HostBinding,
                args: ['class.devui-form-columns']
            }], labelSizeLg: [{
                type: HostBinding,
                args: ['class.devui-form-lg']
            }], labelSizeSm: [{
                type: HostBinding,
                args: ['class.devui-form-sm']
            }], labelAlignStart: [{
                type: HostBinding,
                args: ['class.devui-form-label-align-start']
            }], labelAlignCenter: [{
                type: HostBinding,
                args: ['class.devui-form-label-align-center']
            }], labelAlignEnd: [{
                type: HostBinding,
                args: ['class.devui-form-label-align-end']
            }] } });
//# sourceMappingURL=data:application/json;base64,