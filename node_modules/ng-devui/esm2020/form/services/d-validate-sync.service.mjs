import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
function resolvedPromiseFunc() { return Promise.resolve(null); }
const resolvedPromise = resolvedPromiseFunc();
export class DValidateSyncService {
    constructor() {
        this.controlsMap = new Map();
        this.controlsSubMap = new Map();
    }
    addControl(key, cd) {
        if (!this.controlsMap.get(key)) {
            this.controlsMap.set(key, []);
        }
        this.controlsMap.get(key).push(cd);
        this._addControlSubscription(key, cd);
    }
    removeControl(key, cd) {
        if (this.controlsMap.get(key)) {
            const controls = this.controlsMap.get(key);
            const index = controls.indexOf(cd);
            if (index !== -1) {
                controls.splice(index, 1);
            }
        }
        this._removeControlSubscription(cd);
    }
    validateControlsSync(key, cd) {
        const controls = this.controlsMap.get(key);
        if (controls) {
            controls.forEach(control => {
                this._removeControlSubscription(control);
            });
            controls.forEach(control => {
                if (control !== cd) {
                    resolvedPromise.then(() => {
                        control.updateValueAndValidity();
                    });
                }
            });
            controls.forEach(control => {
                resolvedPromise.then(() => {
                    this._addControlSubscription(key, control);
                });
            });
        }
    }
    _addControlSubscription(key, cd) {
        this._removeControlSubscription(cd);
        const sub = cd.valueChanges.subscribe(() => {
            this.validateControlsSync(key, cd);
        });
        this.controlsSubMap.set(cd, sub);
    }
    _removeControlSubscription(cd) {
        if (this.controlsSubMap.get(cd)) {
            this.controlsSubMap.get(cd).unsubscribe();
            this.controlsSubMap.delete(cd);
        }
    }
}
DValidateSyncService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DValidateSyncService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DValidateSyncService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DValidateSyncService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DValidateSyncService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZC12YWxpZGF0ZS1zeW5jLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZ1aS9mb3JtL3NlcnZpY2VzL2QtdmFsaWRhdGUtc3luYy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTNDLFNBQVMsbUJBQW1CLEtBQUssT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxNQUFNLGVBQWUsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0FBRTlDLE1BQU0sT0FBTyxvQkFBb0I7SUFLL0I7UUFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBVyxFQUFFLEVBQW1CO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0I7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQVcsRUFBRSxFQUFtQjtRQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hCLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzNCO1NBQ0Y7UUFDRCxJQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELG9CQUFvQixDQUFDLEdBQVcsRUFBRSxFQUFtQjtRQUNuRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUzQyxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQztZQUVILFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksT0FBTyxLQUFLLEVBQUUsRUFBRTtvQkFDbEIsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7d0JBQ3hCLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO29CQUNuQyxDQUFDLENBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDekIsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzdDLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxHQUFXLEVBQUUsRUFBbUI7UUFDdEQsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN6QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxFQUFtQjtRQUM1QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7aUhBbEVVLG9CQUFvQjtxSEFBcEIsb0JBQW9CLGNBRFAsTUFBTTsyRkFDbkIsb0JBQW9CO2tCQURoQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5mdW5jdGlvbiByZXNvbHZlZFByb21pc2VGdW5jKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpOyB9XG5jb25zdCByZXNvbHZlZFByb21pc2UgPSByZXNvbHZlZFByb21pc2VGdW5jKCk7XG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIERWYWxpZGF0ZVN5bmNTZXJ2aWNlIHtcblxuICBjb250cm9sc01hcDogTWFwPHN0cmluZywgQWJzdHJhY3RDb250cm9sW10+O1xuICBjb250cm9sc1N1Yk1hcDogTWFwPEFic3RyYWN0Q29udHJvbCwgU3Vic2NyaXB0aW9uPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRyb2xzTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuY29udHJvbHNTdWJNYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBhZGRDb250cm9sKGtleTogc3RyaW5nLCBjZDogQWJzdHJhY3RDb250cm9sKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2xzTWFwLmdldChrZXkpKSB7XG4gICAgICB0aGlzLmNvbnRyb2xzTWFwLnNldChrZXksIFtdKTtcbiAgICB9XG4gICAgdGhpcy5jb250cm9sc01hcC5nZXQoa2V5KS5wdXNoKGNkKTtcbiAgICB0aGlzLl9hZGRDb250cm9sU3Vic2NyaXB0aW9uKGtleSwgY2QpO1xuICB9XG5cbiAgcmVtb3ZlQ29udHJvbChrZXk6IHN0cmluZywgY2Q6IEFic3RyYWN0Q29udHJvbCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbnRyb2xzTWFwLmdldChrZXkpKSB7XG4gICAgICBjb25zdCBjb250cm9scyA9IHRoaXMuY29udHJvbHNNYXAuZ2V0KGtleSk7XG4gICAgICBjb25zdCBpbmRleCA9IGNvbnRyb2xzLmluZGV4T2YoY2QpO1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBjb250cm9scy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9yZW1vdmVDb250cm9sU3Vic2NyaXB0aW9uKGNkKTtcbiAgfVxuXG4gIHZhbGlkYXRlQ29udHJvbHNTeW5jKGtleTogc3RyaW5nLCBjZDogQWJzdHJhY3RDb250cm9sKTogdm9pZCB7XG4gICAgY29uc3QgY29udHJvbHMgPSB0aGlzLmNvbnRyb2xzTWFwLmdldChrZXkpO1xuXG4gICAgaWYgKGNvbnRyb2xzKSB7XG4gICAgICBjb250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4geyAvLyDpppblhYjmuIXpmaTlvZPliY3lkajmnJ/nm5HlkKzvvIzpgb/lhY3lvqrnjq/nm5HlkKxcbiAgICAgICAgdGhpcy5fcmVtb3ZlQ29udHJvbFN1YnNjcmlwdGlvbihjb250cm9sKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4ge1xuICAgICAgICBpZiAoY29udHJvbCAhPT0gY2QpIHtcbiAgICAgICAgICByZXNvbHZlZFByb21pc2UudGhlbigoKSA9PiB7IC8vIOWcqOS4i+S4gOS4quinhuWbvuabtOaWsOWRqOacn+aJp+ihjFxuICAgICAgICAgICAgY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4ge1xuICAgICAgICByZXNvbHZlZFByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fYWRkQ29udHJvbFN1YnNjcmlwdGlvbihrZXksIGNvbnRyb2wpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRDb250cm9sU3Vic2NyaXB0aW9uKGtleTogc3RyaW5nLCBjZDogQWJzdHJhY3RDb250cm9sKTogdm9pZCB7XG4gICAgdGhpcy5fcmVtb3ZlQ29udHJvbFN1YnNjcmlwdGlvbihjZCk7XG4gICAgY29uc3Qgc3ViID0gY2QudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlQ29udHJvbHNTeW5jKGtleSwgY2QpO1xuICAgIH0pO1xuICAgIHRoaXMuY29udHJvbHNTdWJNYXAuc2V0KGNkLCBzdWIpO1xuICB9XG5cbiAgX3JlbW92ZUNvbnRyb2xTdWJzY3JpcHRpb24oY2Q6IEFic3RyYWN0Q29udHJvbCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbnRyb2xzU3ViTWFwLmdldChjZCkpIHtcbiAgICAgIHRoaXMuY29udHJvbHNTdWJNYXAuZ2V0KGNkKS51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5jb250cm9sc1N1Yk1hcC5kZWxldGUoY2QpO1xuICAgIH1cbiAgfVxufVxuIl19