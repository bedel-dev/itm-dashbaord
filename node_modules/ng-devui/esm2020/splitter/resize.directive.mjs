import { Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class ResizeDirective {
    constructor(el, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        // 是否允许拖动
        this.enableResize = true;
        // 按下事件，mousedown，touchstart等
        this.pressEvent = new EventEmitter();
        // 拖动中事件，mousemove，touchmove等
        this.dragEvent = new EventEmitter();
        // 释放事件，mouseup，touchend等
        this.releaseEvent = new EventEmitter();
        this.bind = (el, event, callback) => el.addEventListener && el.addEventListener(event, callback);
        this.unbind = (el, event, callback) => el && el.removeEventListener && el.removeEventListener(event, callback);
        this.mousedown = (e) => {
            this.bind(document, 'mousemove', this.mousemove);
            this.bind(document, 'mouseup', this.mouseup);
            this.pressEvent.emit(this.normalizeEvent(e));
        };
        this.mousemove = (e) => {
            this.dragEvent.emit(this.normalizeEvent(e));
        };
        this.mouseup = (e) => {
            this.unbind(document, 'mousemove', this.mousemove);
            this.unbind(document, 'mouseup', this.mouseup);
            this.releaseEvent.emit(this.normalizeEvent(e));
        };
        this.touchstart = (e) => {
            this.bind(document, 'touchmove', this.touchmove);
            this.bind(document, 'touchend', this.touchend);
            if (e.touches.length === 1) {
                this.pressEvent.emit(this.normalizeEvent(e));
            }
        };
        this.touchmove = (e) => {
            if (e.touches.length === 1) {
                this.dragEvent.emit(this.normalizeEvent(e));
            }
        };
        this.touchend = (e) => {
            this.unbind(document, 'touchmove', this.touchmove);
            this.unbind(document, 'touchend', this.touchend);
            if (e.touches.length === 0) {
                this.releaseEvent.emit(this.normalizeEvent(e));
            }
        };
    }
    ngOnInit() {
        if (this.enableResize) {
            this.ngZone.runOutsideAngular(() => {
                this.bindEvent();
            });
        }
    }
    ngOnDestroy() {
        if (this.enableResize) {
            this.unbind(this.el.nativeElement, 'mousedown', this.mousedown);
            this.unbind(this.el.nativeElement, 'touchstart', this.touchstart);
        }
    }
    bindEvent() {
        const element = this.el.nativeElement;
        // 绑定mousedown事件
        this.bind(element, 'mousedown', this.mousedown);
        // 绑定触屏事件
        this.bind(element, 'touchstart', this.touchstart);
    }
    // 返回常用位置信息
    normalizeEvent(e) {
        // 判断事件类型，用于计算位置坐标
        if (e.type.match(/touch/)) {
            return {
                pageX: e.changedTouches[0].pageX,
                pageY: e.changedTouches[0].pageY,
                clientX: e.changedTouches[0].clientX,
                clientY: e.changedTouches[0].clientY,
                type: e.type,
                originalEvent: e,
                isTouch: true
            };
        }
        return {
            pageX: e.pageX,
            pageY: e.pageY,
            clientX: e.clientX,
            clientY: e.clientY,
            offsetX: e.offsetX,
            offsetY: e.offsetY,
            type: e.type,
            originalEvent: e
        };
    }
}
ResizeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResizeDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
ResizeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ResizeDirective, selector: "[dResize]", inputs: { enableResize: "enableResize" }, outputs: { pressEvent: "pressEvent", dragEvent: "dragEvent", releaseEvent: "releaseEvent" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dResize]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { enableResize: [{
                type: Input
            }], pressEvent: [{
                type: Output
            }], dragEvent: [{
                type: Output
            }], releaseEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,