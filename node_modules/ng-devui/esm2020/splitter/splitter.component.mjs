import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, HostBinding, Input, QueryList } from '@angular/core';
import { SplitterPaneComponent } from './splitter-pane.component';
import { SplitterService } from './splitter.service';
import * as i0 from "@angular/core";
import * as i1 from "./splitter.service";
import * as i2 from "./splitter-bar.component";
import * as i3 from "@angular/common";
import * as i4 from "./resize.directive";
export class SplitterComponent {
    constructor(el, splitter, cdr) {
        this.el = el;
        this.splitter = splitter;
        this.cdr = cdr;
        // 指定Splitter中窗格的方向，默认水平分割。
        this.orientation = 'horizontal';
        // 分隔条大小
        this.splitBarSize = '2px';
        // pane设置为不可调整大小时，生效
        this.disabledBarSize = '1px';
        // 是否显示展开/收缩按钮
        this.showCollapseButton = true;
    }
    get class() {
        return 'devui-splitter devui-splitter-' + this.orientation;
    }
    ngOnChanges(changes) {
        if (changes.orientation && !changes.orientation.isFirstChange()) {
            this.reconfigure();
        }
    }
    ngAfterContentInit() {
        this.reconfigure();
        // contentChildren 变化时，触发重新设置pane
        this.paneChangesSubscription = this.panes.changes.subscribe((panes) => {
            this.reconfigure();
            this.cdr.detectChanges();
        });
    }
    ngOnDestroy() {
        if (this.paneChangesSubscription) {
            this.paneChangesSubscription.unsubscribe();
        }
    }
    // 配置pane
    reconfigure() {
        this.splitter.configPane({
            panes: this.panes.toArray(),
            orientation: this.orientation,
            // 内容投影进组件之后，组件还没有渲染出dom，此时获取不到宽度，此处设置一个回调函数
            containerSize: () => {
                if (this.orientation === 'vertical') {
                    return this.el.nativeElement.clientHeight;
                }
                else {
                    return this.el.nativeElement.clientWidth;
                }
            }
        });
    }
}
SplitterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SplitterComponent, deps: [{ token: i0.ElementRef }, { token: i1.SplitterService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
SplitterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SplitterComponent, selector: "d-splitter", inputs: { orientation: "orientation", splitBarSize: "splitBarSize", disabledBarSize: "disabledBarSize", showCollapseButton: "showCollapseButton", collapsePosLeft: "collapsePosLeft", collapsePosTop: "collapsePosTop" }, host: { properties: { "class": "this.class" } }, providers: [
        SplitterService
    ], queries: [{ propertyName: "panes", predicate: SplitterPaneComponent }], exportAs: ["dSplitter"], usesOnChanges: true, ngImport: i0, template: "<ng-content select=\"d-splitter-pane\"></ng-content>\n<ng-container *ngFor=\"let pane of panes; let index = index; let last = last\">\n  <d-splitter-bar\n    dResize\n    [style.order]=\"index * 2 + 1\"\n    *ngIf=\"!last\"\n    [index]=\"index\"\n    [splitBarSize]=\"splitBarSize\"\n    [disabledBarSize]=\"disabledBarSize\"\n    [orientation]=\"orientation\"\n    [showCollapseButton]=\"showCollapseButton\"\n    [collapsePosLeft]=\"collapsePosLeft\"\n    [collapsePosTop]=\"collapsePosTop\"\n  >\n  </d-splitter-bar>\n</ng-container>\n", styles: [":host{display:flex;width:100%;height:auto;position:relative;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}:host.devui-splitter-horizontal{flex-direction:row}:host.devui-splitter-vertical{flex-direction:column}\n"], components: [{ type: i2.SplitterBarComponent, selector: "d-splitter-bar", inputs: ["index", "orientation", "showCollapseButton", "collapsePosLeft", "collapsePosTop", "splitBarSize", "disabledBarSize"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ResizeDirective, selector: "[dResize]", inputs: ["enableResize"], outputs: ["pressEvent", "dragEvent", "releaseEvent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SplitterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-splitter', exportAs: 'dSplitter', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        SplitterService
                    ], preserveWhitespaces: false, template: "<ng-content select=\"d-splitter-pane\"></ng-content>\n<ng-container *ngFor=\"let pane of panes; let index = index; let last = last\">\n  <d-splitter-bar\n    dResize\n    [style.order]=\"index * 2 + 1\"\n    *ngIf=\"!last\"\n    [index]=\"index\"\n    [splitBarSize]=\"splitBarSize\"\n    [disabledBarSize]=\"disabledBarSize\"\n    [orientation]=\"orientation\"\n    [showCollapseButton]=\"showCollapseButton\"\n    [collapsePosLeft]=\"collapsePosLeft\"\n    [collapsePosTop]=\"collapsePosTop\"\n  >\n  </d-splitter-bar>\n</ng-container>\n", styles: [":host{display:flex;width:100%;height:auto;position:relative;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}:host.devui-splitter-horizontal{flex-direction:row}:host.devui-splitter-vertical{flex-direction:column}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.SplitterService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { orientation: [{
                type: Input
            }], splitBarSize: [{
                type: Input
            }], disabledBarSize: [{
                type: Input
            }], showCollapseButton: [{
                type: Input
            }], collapsePosLeft: [{
                type: Input
            }], collapsePosTop: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], panes: [{
                type: ContentChildren,
                args: [SplitterPaneComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvc3BsaXR0ZXIvc3BsaXR0ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZGV2dWkvc3BsaXR0ZXIvc3BsaXR0ZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNhLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUNwRyxXQUFXLEVBQUUsS0FBSyxFQUF3QixTQUFTLEVBQ3BELE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7O0FBY3JELE1BQU0sT0FBTyxpQkFBaUI7SUFtQjVCLFlBQW9CLEVBQWMsRUFBVSxRQUF5QixFQUFVLEdBQXNCO1FBQWpGLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBbEJyRywyQkFBMkI7UUFDbEIsZ0JBQVcsR0FBd0IsWUFBWSxDQUFDO1FBQ3pELFFBQVE7UUFDQyxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUM5QixvQkFBb0I7UUFDWCxvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUNqQyxjQUFjO1FBQ0wsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0lBYW5DLENBQUM7SUFURCxJQUEwQixLQUFLO1FBQzdCLE9BQU8sZ0NBQWdDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM3RCxDQUFDO0lBU0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDL0QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNwRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDaEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVELFNBQVM7SUFDVCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFDdkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQzNCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3Qiw0Q0FBNEM7WUFDNUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtnQkFDbEIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFVBQVUsRUFBRTtvQkFDbkMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7aUJBQzNDO3FCQUFNO29CQUNMLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO2lCQUMxQztZQUNILENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs4R0ExRFUsaUJBQWlCO2tHQUFqQixpQkFBaUIsZ1RBTmpCO1FBQ1QsZUFBZTtLQUNoQixnREFvQmdCLHFCQUFxQiwyRUNwQ3hDLDZoQkFnQkE7MkZESWEsaUJBQWlCO2tCQVo3QixTQUFTOytCQUNFLFlBQVksWUFDWixXQUFXLG1CQUdKLHVCQUF1QixDQUFDLE1BQU0sYUFDcEM7d0JBQ1QsZUFBZTtxQkFDaEIsdUJBQ29CLEtBQUs7K0pBS2pCLFdBQVc7c0JBQW5CLEtBQUs7Z0JBRUcsWUFBWTtzQkFBcEIsS0FBSztnQkFFRyxlQUFlO3NCQUF2QixLQUFLO2dCQUVHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFDRyxlQUFlO3NCQUF2QixLQUFLO2dCQUNHLGNBQWM7c0JBQXRCLEtBQUs7Z0JBRW9CLEtBQUs7c0JBQTlCLFdBQVc7dUJBQUMsT0FBTztnQkFJb0IsS0FBSztzQkFBNUMsZUFBZTt1QkFBQyxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZywgSW5wdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBRdWVyeUxpc3QsIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNwbGl0dGVyUGFuZUNvbXBvbmVudCB9IGZyb20gJy4vc3BsaXR0ZXItcGFuZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BsaXR0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9zcGxpdHRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFNwbGl0dGVyT3JpZW50YXRpb24gfSBmcm9tICcuL3NwbGl0dGVyLnR5cGVzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Qtc3BsaXR0ZXInLFxuICBleHBvcnRBczogJ2RTcGxpdHRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zcGxpdHRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NwbGl0dGVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICBTcGxpdHRlclNlcnZpY2VcbiAgXSxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuXG5leHBvcnQgY2xhc3MgU3BsaXR0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIC8vIOaMh+WumlNwbGl0dGVy5Lit56qX5qC855qE5pa55ZCR77yM6buY6K6k5rC05bmz5YiG5Ymy44CCXG4gIEBJbnB1dCgpIG9yaWVudGF0aW9uOiBTcGxpdHRlck9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnO1xuICAvLyDliIbpmpTmnaHlpKflsI9cbiAgQElucHV0KCkgc3BsaXRCYXJTaXplID0gJzJweCc7XG4gIC8vIHBhbmXorr7nva7kuLrkuI3lj6/osIPmlbTlpKflsI/ml7bvvIznlJ/mlYhcbiAgQElucHV0KCkgZGlzYWJsZWRCYXJTaXplID0gJzFweCc7XG4gIC8vIOaYr+WQpuaYvuekuuWxleW8gC/mlLbnvKnmjInpkq5cbiAgQElucHV0KCkgc2hvd0NvbGxhcHNlQnV0dG9uID0gdHJ1ZTtcbiAgQElucHV0KCkgY29sbGFwc2VQb3NMZWZ0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbGxhcHNlUG9zVG9wOiBzdHJpbmc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGdldCBjbGFzcygpIHtcbiAgICByZXR1cm4gJ2RldnVpLXNwbGl0dGVyIGRldnVpLXNwbGl0dGVyLScgKyB0aGlzLm9yaWVudGF0aW9uO1xuICB9XG4gIC8vIOWGheW1jOmdouadv1xuICBAQ29udGVudENoaWxkcmVuKFNwbGl0dGVyUGFuZUNvbXBvbmVudCkgcGFuZXM6IFF1ZXJ5TGlzdDxTcGxpdHRlclBhbmVDb21wb25lbnQ+O1xuICBwYW5lQ2hhbmdlc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgc3BsaXR0ZXI6IFNwbGl0dGVyU2VydmljZSwgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG5cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5vcmllbnRhdGlvbiAmJiAhY2hhbmdlcy5vcmllbnRhdGlvbi5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIHRoaXMucmVjb25maWd1cmUoKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5yZWNvbmZpZ3VyZSgpO1xuICAgIC8vIGNvbnRlbnRDaGlsZHJlbiDlj5jljJbml7bvvIzop6blj5Hph43mlrDorr7nva5wYW5lXG4gICAgdGhpcy5wYW5lQ2hhbmdlc1N1YnNjcmlwdGlvbiA9IHRoaXMucGFuZXMuY2hhbmdlcy5zdWJzY3JpYmUoKHBhbmVzKSA9PiB7XG4gICAgICB0aGlzLnJlY29uZmlndXJlKCk7XG4gICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wYW5lQ2hhbmdlc1N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5wYW5lQ2hhbmdlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOmFjee9rnBhbmVcbiAgcmVjb25maWd1cmUoKSB7XG4gICAgdGhpcy5zcGxpdHRlci5jb25maWdQYW5lKHtcbiAgICAgIHBhbmVzOiB0aGlzLnBhbmVzLnRvQXJyYXkoKSxcbiAgICAgIG9yaWVudGF0aW9uOiB0aGlzLm9yaWVudGF0aW9uLFxuICAgICAgLy8g5YaF5a655oqV5b2x6L+b57uE5Lu25LmL5ZCO77yM57uE5Lu26L+Y5rKh5pyJ5riy5p+T5Ye6ZG9t77yM5q2k5pe26I635Y+W5LiN5Yiw5a695bqm77yM5q2k5aSE6K6+572u5LiA5Liq5Zue6LCD5Ye95pWwXG4gICAgICBjb250YWluZXJTaXplOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCI8bmctY29udGVudCBzZWxlY3Q9XCJkLXNwbGl0dGVyLXBhbmVcIj48L25nLWNvbnRlbnQ+XG48bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBwYW5lIG9mIHBhbmVzOyBsZXQgaW5kZXggPSBpbmRleDsgbGV0IGxhc3QgPSBsYXN0XCI+XG4gIDxkLXNwbGl0dGVyLWJhclxuICAgIGRSZXNpemVcbiAgICBbc3R5bGUub3JkZXJdPVwiaW5kZXggKiAyICsgMVwiXG4gICAgKm5nSWY9XCIhbGFzdFwiXG4gICAgW2luZGV4XT1cImluZGV4XCJcbiAgICBbc3BsaXRCYXJTaXplXT1cInNwbGl0QmFyU2l6ZVwiXG4gICAgW2Rpc2FibGVkQmFyU2l6ZV09XCJkaXNhYmxlZEJhclNpemVcIlxuICAgIFtvcmllbnRhdGlvbl09XCJvcmllbnRhdGlvblwiXG4gICAgW3Nob3dDb2xsYXBzZUJ1dHRvbl09XCJzaG93Q29sbGFwc2VCdXR0b25cIlxuICAgIFtjb2xsYXBzZVBvc0xlZnRdPVwiY29sbGFwc2VQb3NMZWZ0XCJcbiAgICBbY29sbGFwc2VQb3NUb3BdPVwiY29sbGFwc2VQb3NUb3BcIlxuICA+XG4gIDwvZC1zcGxpdHRlci1iYXI+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==