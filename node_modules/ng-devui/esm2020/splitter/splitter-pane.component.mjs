import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2 } from '@angular/core';
import { SplitterService } from './splitter.service';
import * as i0 from "@angular/core";
import * as i1 from "./splitter.service";
export class SplitterPaneComponent {
    constructor(splitter, el, renderer) {
        this.splitter = splitter;
        this.el = el;
        this.renderer = renderer;
        // 当前panel是否可调整大小
        this.resizable = true;
        // 面板是否可折叠
        this.collapsible = false;
        // 是否折叠收缩
        this.shrink = false;
        // 折叠收缩后宽度
        this.shrinkWidth = 36;
        // 面板初始化是否折叠，默认不折叠
        this._collapsed = false;
        // 非边缘面板折叠方向，before只生成向前折叠的按钮，after生成向后折叠按钮，both生成两个
        this.collapseDirection = 'both';
        // 大小改变事件
        this.sizeChange = new EventEmitter();
        // 收起和展开事件
        this.collapsedChange = new EventEmitter();
        // 收缩和展开事件
        this.shrinkStatusChange = new EventEmitter();
        this.paneClass = true;
        this._order = 0; // flex布局下pane位置
        this.element = this.el.nativeElement;
    }
    set collapsed(newCollapsed) {
        if (this._collapsed !== newCollapsed) {
            this._collapsed = newCollapsed;
            this.splitter.paneChangeSubject.next(true);
        }
    }
    get collapsed() {
        return this._collapsed;
    }
    set size(newSize) {
        this._size = newSize;
        this.widthBeforeShrink = newSize;
        this.renderer.setStyle(this.element, 'flex-basis', newSize);
        const paneFixedClass = 'devui-splitter-pane-fixed';
        if (this.size) {
            // 设置 flex-grow 和 flex-shrink
            this.renderer.addClass(this.element, paneFixedClass);
        }
        else {
            this.renderer.removeClass(this.element, paneFixedClass);
        }
    }
    get size() {
        return this._size;
    }
    set order(paneOrder) {
        this._order = paneOrder;
        this.setOrderStyles();
    }
    get order() {
        return this._order;
    }
    ngOnChanges(changes) {
        if ((changes.collapsible && !changes.collapsible.isFirstChange()) || (changes.resizable && !changes.resizable.isFirstChange())) {
            this.splitter.paneChangeSubject.next(true);
        }
    }
    // 设置order
    setOrderStyles() {
        this.renderer.setStyle(this.element, 'order', this.order);
    }
    // 获取当前pane大小
    get computedSize() {
        if (this.orientation === 'vertical') {
            return this.element.offsetHeight;
        }
        else {
            return this.element.offsetWidth;
        }
    }
    // 收起时隐藏当前pane
    toggleCollapseClass() {
        const paneHiddenClass = 'devui-splitter-pane-hidden';
        if (!this._collapsed) {
            this.renderer.removeClass(this.element, paneHiddenClass);
        }
        else {
            this.renderer.addClass(this.element, paneHiddenClass);
        }
        if (this._collapsed && this.shrink) {
            this.renderer.removeClass(this.element, paneHiddenClass);
            this.renderer.setStyle(this.element, 'flex-basis', `${this.shrinkWidth}px`);
            this.shrinkStatusChange.emit(true);
        }
        else {
            this.renderer.setStyle(this.element, 'flex-basis', this.widthBeforeShrink);
            this.shrinkStatusChange.emit(false);
        }
    }
    // 收起时用于改变相邻pane的flex-grow属性来改变非自适应pane的size
    toggleNearPaneFlexGrow(collapsed) {
        const flexGrowClass = 'devui-splitter-pane-grow';
        const hasFlexGrowClass = this.element.classList.contains(flexGrowClass);
        if (hasFlexGrowClass) {
            this.renderer.removeClass(this.element, flexGrowClass);
        }
        else if (collapsed) {
            this.renderer.addClass(this.element, flexGrowClass);
        }
    }
    ngAfterViewChecked() {
        // 视图检查完对resizeable pane设置flex属性
        if (!this.size && !this.resizable) {
            this.renderer.addClass(this.element, 'devui-splitter-pane-fixed');
        }
    }
}
SplitterPaneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SplitterPaneComponent, deps: [{ token: i1.SplitterService }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
SplitterPaneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SplitterPaneComponent, selector: "d-splitter-pane", inputs: { minSize: "minSize", maxSize: "maxSize", resizable: "resizable", collapsible: "collapsible", shrink: "shrink", shrinkWidth: "shrinkWidth", collapsed: "collapsed", collapseDirection: "collapseDirection", size: "size" }, outputs: { sizeChange: "sizeChange", collapsedChange: "collapsedChange", shrinkStatusChange: "shrinkStatusChange" }, host: { properties: { "class.devui-splitter-pane": "this.paneClass" } }, usesOnChanges: true, ngImport: i0, template: "<ng-content></ng-content>\n", styles: [":host.devui-splitter-pane{position:relative;flex:1 1 auto;display:block;min-width:0;max-width:100%;min-height:0;max-height:100%}:host.devui-splitter-pane-fixed{flex-grow:0;flex-shrink:0}:host.devui-splitter-pane-hidden{flex:0!important;overflow:hidden!important}:host.devui-splitter-pane-grow{flex-grow:1!important}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SplitterPaneComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-splitter-pane', changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, template: "<ng-content></ng-content>\n", styles: [":host.devui-splitter-pane{position:relative;flex:1 1 auto;display:block;min-width:0;max-width:100%;min-height:0;max-height:100%}:host.devui-splitter-pane-fixed{flex-grow:0;flex-shrink:0}:host.devui-splitter-pane-hidden{flex:0!important;overflow:hidden!important}:host.devui-splitter-pane-grow{flex-grow:1!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.SplitterService }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { minSize: [{
                type: Input
            }], maxSize: [{
                type: Input
            }], resizable: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], shrink: [{
                type: Input
            }], shrinkWidth: [{
                type: Input
            }], collapsed: [{
                type: Input
            }], collapseDirection: [{
                type: Input
            }], size: [{
                type: Input
            }], sizeChange: [{
                type: Output
            }], collapsedChange: [{
                type: Output
            }], shrinkStatusChange: [{
                type: Output
            }], paneClass: [{
                type: HostBinding,
                args: ['class.devui-splitter-pane']
            }] } });
//# sourceMappingURL=data:application/json;base64,