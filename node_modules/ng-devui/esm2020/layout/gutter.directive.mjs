import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DBreakpoints } from './layout.types';
import { DScreenMediaQueryService } from './screen-media-query.service';
import * as i0 from "@angular/core";
import * as i1 from "./screen-media-query.service";
export class DGutterDirective {
    constructor(elementRef, renderer, screenQueryService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.screenQueryService = screenQueryService;
        this.destroy$ = new Subject();
        this.executedGutter = [null, null];
    }
    ngOnInit() {
        this.screenQueryService.getPoint()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ currentPoint }) => {
            this.updateGutter(currentPoint);
        });
    }
    getCurrentGutter(currentPoint) {
        let finalGutter = [null, null];
        if (Array.isArray(this.dGutter) || typeof this.dGutter === 'number') {
            finalGutter = this._transGutterToArray(this.dGutter);
        }
        else {
            for (const point of DBreakpoints) {
                if (this.dGutter[point] !== undefined) {
                    finalGutter = this._transGutterToArray(this.dGutter[point]);
                }
                if (currentPoint === point) {
                    break;
                }
            }
        }
        return finalGutter;
    }
    _transGutterToArray(gutter) {
        let finalGutter = gutter;
        if (typeof gutter === 'number') {
            finalGutter = [gutter, null];
        }
        if (this.dGutterDirection === 'vertical') {
            finalGutter = finalGutter.reverse();
        }
        return finalGutter;
    }
    updateGutter(currentPoint) {
        const finalGutter = this.getCurrentGutter(currentPoint);
        this.updateChildrenGutter(finalGutter);
        this.updateParentGutter(finalGutter);
        this.executedGutter = finalGutter;
    }
    updateChildrenGutter(gutter) {
        const items = this.elementRef.nativeElement.children;
        for (let i = 0; i < items.length; i++) {
            if (gutter[0] !== null) {
                this.renderer.setStyle(items[i], 'padding-left', gutter[0] / 2 + 'px');
                this.renderer.setStyle(items[i], 'padding-right', gutter[0] / 2 + 'px');
            }
            else if (this.executedGutter[0] !== null) {
                this.renderer.removeStyle(items[i], 'padding-left');
                this.renderer.removeStyle(items[i], 'padding-right');
            }
            if (gutter[1] !== null) {
                this.renderer.setStyle(items[i], 'padding-top', gutter[1] / 2 + 'px');
                this.renderer.setStyle(items[i], 'padding-bottom', gutter[1] / 2 + 'px');
            }
            else if (this.executedGutter[1] !== null) {
                this.renderer.removeStyle(items[i], 'padding-top');
                this.renderer.removeStyle(items[i], 'padding-bottom');
            }
        }
    }
    updateParentGutter(gutter) {
        if (this.dGutterNoOuter) {
            const element = this.elementRef.nativeElement;
            if (gutter[0] !== null) {
                this.renderer.setStyle(element, 'margin-left', -gutter[0] / 2 + 'px');
                this.renderer.setStyle(element, 'margin-right', -gutter[0] / 2 + 'px');
            }
            else if (this.executedGutter[0] !== null) {
                this.renderer.removeStyle(element, 'margin-left');
                this.renderer.removeStyle(element, 'margin-right');
            }
            if (gutter[1] !== null) {
                this.renderer.setStyle(element, 'margin-top', -gutter[1] / 2 + 'px');
                this.renderer.setStyle(element, 'margin-bottom', -gutter[1] / 2 + 'px');
            }
            else if (this.executedGutter[1] !== null) {
                this.renderer.removeStyle(element, 'margin-top');
                this.renderer.removeStyle(element, 'margin-bottom');
            }
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
DGutterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DGutterDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DScreenMediaQueryService }], target: i0.ɵɵFactoryTarget.Directive });
DGutterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DGutterDirective, selector: "[dGutter]", inputs: { dGutter: "dGutter", dGutterDirection: "dGutterDirection", dGutterNoOuter: "dGutterNoOuter" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DGutterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[dGutter]`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DScreenMediaQueryService }]; }, propDecorators: { dGutter: [{
                type: Input
            }], dGutterDirection: [{
                type: Input
            }], dGutterNoOuter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,