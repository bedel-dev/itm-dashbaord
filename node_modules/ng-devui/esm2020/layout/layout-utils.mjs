import { DBreakpoints } from './layout.types';
function isResponseValue(value) {
    let flag = false;
    if (typeof value === 'object') {
        DBreakpoints.forEach(point => {
            if (value[point]) {
                flag = true;
            }
        });
    }
    return flag;
}
function runResponse(value, func) {
    if (value) {
        if (isResponseValue(value)) {
            DBreakpoints.forEach(point => {
                if (value[point]) {
                    func(point, value[point]);
                }
            });
        }
        else {
            func(null, value);
        }
    }
}
function getDSpanClass(point, value) {
    const classType = value === 0 ? 'd' : 'col';
    const classValue = value === 0 ? 'none' : value;
    return point ? `dl-${classType}-${point}-${classValue}` : `dl-${classType}-${classValue}`;
}
/* 如果是ss 则表示全局生效 */
function transPoint(point) {
    if (point === 'ss') {
        return null;
    }
    return point;
}
function pointAndValueMapToClassName(paramName, classList, point, value) {
    const finalPonit = transPoint(point);
    const classPrefixMap = {
        dOffset: 'dl-offset-',
        dAlign: 'dl-align-items-',
        dJustify: 'dl-justify-content-',
        dAlignSelf: 'dl-align-self-',
        dOrder: 'dl-order-',
        // dFlexWrap: '',
        dSpan: getDSpanClass,
        dCols: 'dl-row-cols-',
    };
    if (typeof classPrefixMap[paramName] === 'string') {
        classList.push(finalPonit ? `${classPrefixMap[paramName]}${finalPonit}-${value}` : `${classPrefixMap[paramName]}${value}`);
    }
    else if (typeof classPrefixMap[paramName] === 'function') {
        classList.push(classPrefixMap[paramName](finalPonit, value));
    }
}
/**
 *
 * 此函数用以绑定当前类中可能需要绑定的Class，并识别响应式Object
 *
 */
export function updateClassList(context, elementRef, renderer) {
    const classParamsName = ['dSpan', 'dOffset', 'dAlign', 'dJustify', 'dAlignSelf', 'dOrder', 'dCols'];
    const tempClassList = [];
    classParamsName.forEach(paramName => {
        if (context[paramName]) {
            runResponse(context[paramName], pointAndValueMapToClassName.bind(this, paramName, tempClassList));
        }
    });
    if (context.classList) {
        context.classList.forEach(className => {
            renderer.removeClass(elementRef.nativeElement, className);
        });
    }
    context.classList = tempClassList;
    context.classList.forEach(className => {
        renderer.addClass(elementRef.nativeElement, className);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvbGF5b3V0L2xheW91dC11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWUsWUFBWSxFQUFzQixNQUFNLGdCQUFnQixDQUFDO0FBRS9FLFNBQVMsZUFBZSxDQUFDLEtBQThCO0lBQ3JELElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztJQUNqQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsS0FBOEIsRUFBRSxJQUE4QztJQUNqRyxJQUFJLEtBQUssRUFBRTtRQUNULElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNoQixJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUMzQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDbkI7S0FDRjtBQUNILENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxLQUFrQixFQUFFLEtBQVU7SUFDbkQsTUFBTSxTQUFTLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDNUMsTUFBTSxVQUFVLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFaEQsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sU0FBUyxJQUFJLEtBQUssSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxTQUFTLElBQUksVUFBVSxFQUFFLENBQUM7QUFDNUYsQ0FBQztBQUVELG1CQUFtQjtBQUNuQixTQUFTLFVBQVUsQ0FBQyxLQUFrQjtJQUNwQyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsMkJBQTJCLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSztJQUNyRSxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckMsTUFBTSxjQUFjLEdBQTJCO1FBQzdDLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLE1BQU0sRUFBRSxpQkFBaUI7UUFDekIsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQixVQUFVLEVBQUUsZ0JBQWdCO1FBQzVCLE1BQU0sRUFBRSxXQUFXO1FBQ25CLGlCQUFpQjtRQUNqQixLQUFLLEVBQUUsYUFBYTtRQUNwQixLQUFLLEVBQUUsY0FBYztLQUN0QixDQUFDO0lBRUYsSUFBSSxPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDakQsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFVBQVUsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM1SDtTQUFNLElBQUksT0FBTyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssVUFBVSxFQUFFO1FBQzFELFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQVksRUFBRSxVQUFzQixFQUFFLFFBQW1CO0lBQ3ZGLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEcsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDbEMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdEIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ25HO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7UUFDckIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDcEMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQztJQUNsQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUNwQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEQnJlYWtwb2ludCwgREJyZWFrcG9pbnRzLCBEUmVzcG9uc2VQYXJhbWV0ZXIgfSBmcm9tICcuL2xheW91dC50eXBlcyc7XG5cbmZ1bmN0aW9uIGlzUmVzcG9uc2VWYWx1ZSh2YWx1ZTogRFJlc3BvbnNlUGFyYW1ldGVyPGFueT4pIHtcbiAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBEQnJlYWtwb2ludHMuZm9yRWFjaChwb2ludCA9PiB7XG4gICAgICBpZiAodmFsdWVbcG9pbnRdKSB7XG4gICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBmbGFnO1xufVxuXG5mdW5jdGlvbiBydW5SZXNwb25zZSh2YWx1ZTogRFJlc3BvbnNlUGFyYW1ldGVyPGFueT4sIGZ1bmM6IChwb2ludDogREJyZWFrcG9pbnQsIHZhbHVlOiBhbnkpID0+IHZvaWQpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKGlzUmVzcG9uc2VWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIERCcmVha3BvaW50cy5mb3JFYWNoKHBvaW50ID0+IHtcbiAgICAgICAgaWYgKHZhbHVlW3BvaW50XSkge1xuICAgICAgICAgIGZ1bmMocG9pbnQsIHZhbHVlW3BvaW50XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdW5jKG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RFNwYW5DbGFzcyhwb2ludDogREJyZWFrcG9pbnQsIHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICBjb25zdCBjbGFzc1R5cGUgPSB2YWx1ZSA9PT0gMCA/ICdkJyA6ICdjb2wnO1xuICBjb25zdCBjbGFzc1ZhbHVlID0gdmFsdWUgPT09IDAgPyAnbm9uZScgOiB2YWx1ZTtcblxuICByZXR1cm4gcG9pbnQgPyBgZGwtJHtjbGFzc1R5cGV9LSR7cG9pbnR9LSR7Y2xhc3NWYWx1ZX1gIDogYGRsLSR7Y2xhc3NUeXBlfS0ke2NsYXNzVmFsdWV9YDtcbn1cblxuLyog5aaC5p6c5pivc3Mg5YiZ6KGo56S65YWo5bGA55Sf5pWIICovXG5mdW5jdGlvbiB0cmFuc1BvaW50KHBvaW50OiBEQnJlYWtwb2ludCkge1xuICBpZiAocG9pbnQgPT09ICdzcycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwb2ludDtcbn1cblxuZnVuY3Rpb24gcG9pbnRBbmRWYWx1ZU1hcFRvQ2xhc3NOYW1lKHBhcmFtTmFtZSwgY2xhc3NMaXN0LCBwb2ludCwgdmFsdWUpIHtcbiAgY29uc3QgZmluYWxQb25pdCA9IHRyYW5zUG9pbnQocG9pbnQpO1xuXG4gIGNvbnN0IGNsYXNzUHJlZml4TWFwOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge1xuICAgIGRPZmZzZXQ6ICdkbC1vZmZzZXQtJyxcbiAgICBkQWxpZ246ICdkbC1hbGlnbi1pdGVtcy0nLFxuICAgIGRKdXN0aWZ5OiAnZGwtanVzdGlmeS1jb250ZW50LScsXG4gICAgZEFsaWduU2VsZjogJ2RsLWFsaWduLXNlbGYtJyxcbiAgICBkT3JkZXI6ICdkbC1vcmRlci0nLFxuICAgIC8vIGRGbGV4V3JhcDogJycsXG4gICAgZFNwYW46IGdldERTcGFuQ2xhc3MsXG4gICAgZENvbHM6ICdkbC1yb3ctY29scy0nLFxuICB9O1xuXG4gIGlmICh0eXBlb2YgY2xhc3NQcmVmaXhNYXBbcGFyYW1OYW1lXSA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc0xpc3QucHVzaChmaW5hbFBvbml0ID8gYCR7Y2xhc3NQcmVmaXhNYXBbcGFyYW1OYW1lXX0ke2ZpbmFsUG9uaXR9LSR7dmFsdWV9YCA6IGAke2NsYXNzUHJlZml4TWFwW3BhcmFtTmFtZV19JHt2YWx1ZX1gKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2xhc3NQcmVmaXhNYXBbcGFyYW1OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNsYXNzTGlzdC5wdXNoKGNsYXNzUHJlZml4TWFwW3BhcmFtTmFtZV0oZmluYWxQb25pdCwgdmFsdWUpKTtcbiAgfVxufVxuXG4vKipcbiAqXG4gKiDmraTlh73mlbDnlKjku6Xnu5HlrprlvZPliY3nsbvkuK3lj6/og73pnIDopoHnu5HlrprnmoRDbGFzc++8jOW5tuivhuWIq+WTjeW6lOW8j09iamVjdFxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNsYXNzTGlzdChjb250ZXh0OiBhbnksIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgY29uc3QgY2xhc3NQYXJhbXNOYW1lID0gWydkU3BhbicsICdkT2Zmc2V0JywgJ2RBbGlnbicsICdkSnVzdGlmeScsICdkQWxpZ25TZWxmJywgJ2RPcmRlcicsICdkQ29scyddO1xuXG4gIGNvbnN0IHRlbXBDbGFzc0xpc3QgPSBbXTtcbiAgY2xhc3NQYXJhbXNOYW1lLmZvckVhY2gocGFyYW1OYW1lID0+IHtcbiAgICBpZiAoY29udGV4dFtwYXJhbU5hbWVdKSB7XG4gICAgICBydW5SZXNwb25zZShjb250ZXh0W3BhcmFtTmFtZV0sIHBvaW50QW5kVmFsdWVNYXBUb0NsYXNzTmFtZS5iaW5kKHRoaXMsIHBhcmFtTmFtZSwgdGVtcENsYXNzTGlzdCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGNvbnRleHQuY2xhc3NMaXN0KSB7XG4gICAgY29udGV4dC5jbGFzc0xpc3QuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgY29udGV4dC5jbGFzc0xpc3QgPSB0ZW1wQ2xhc3NMaXN0O1xuICBjb250ZXh0LmNsYXNzTGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgcmVuZGVyZXIuYWRkQ2xhc3MoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICB9KTtcbn1cbiJdfQ==