import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DBreakpoints } from './layout.types';
import { DScreenMediaQueryService } from './screen-media-query.service';
import * as i0 from "@angular/core";
import * as i1 from "./screen-media-query.service";
export class DClassDirective {
    constructor(elementRef, renderer, screenQueryService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.screenQueryService = screenQueryService;
        this.destroy$ = new Subject();
        this.executedClassList = [];
    }
    ngOnInit() {
        this.screenQueryService.getPoint()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ currentPoint }) => {
            this.updateClass(currentPoint);
        });
    }
    /* TODO: 参数需要优化，不仅可以设置断点，还可以设置通用 */
    updateClass(currentPoint) {
        let finalClassList = [];
        if (!Array.isArray(this.dClass)) {
            for (const point of DBreakpoints) {
                if (this.dClass[point]) {
                    finalClassList = [...finalClassList, ...this.dClass[point]];
                }
                if (currentPoint === point) {
                    break;
                }
            }
        }
        else if (this.dClass) {
            finalClassList = [...this.dClass];
        }
        this.executedClassList.forEach(className => {
            this.renderer.removeClass(this.elementRef.nativeElement, className);
        });
        finalClassList.forEach(className => {
            this.renderer.addClass(this.elementRef.nativeElement, className);
        });
        this.executedClassList = finalClassList;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
DClassDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DClassDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DScreenMediaQueryService }], target: i0.ɵɵFactoryTarget.Directive });
DClassDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DClassDirective, selector: "[dClass]", inputs: { dClass: "dClass" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DClassDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[dClass]`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DScreenMediaQueryService }]; }, propDecorators: { dClass: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvbGF5b3V0L2NsYXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFzQixNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFNeEUsTUFBTSxPQUFPLGVBQWU7SUFNMUIsWUFDVSxVQUFzQixFQUN0QixRQUFtQixFQUNuQixrQkFBNEM7UUFGNUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMEI7UUFOOUMsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekIsc0JBQWlCLEdBQWEsRUFBRSxDQUFDO0lBTXJDLENBQUM7SUFFTCxRQUFRO1FBQ04sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRTthQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM5QixTQUFTLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxtQ0FBbUM7SUFDbkMsV0FBVyxDQUFDLFlBQVk7UUFDdEIsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixLQUFLLE1BQU0sS0FBSyxJQUFJLFlBQVksRUFBRTtnQkFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN0QixjQUFjLEdBQUcsQ0FBQyxHQUFHLGNBQWMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDN0Q7Z0JBQ0QsSUFBSSxZQUFZLEtBQUssS0FBSyxFQUFFO29CQUMxQixNQUFNO2lCQUNQO2FBQ0Y7U0FDRjthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN0QixjQUFjLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGNBQWMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs0R0FuRFUsZUFBZTtnR0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBSjNCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7aUJBQ3JCO2dLQUdVLE1BQU07c0JBQWQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERCcmVha3BvaW50cywgRFJlc3BvbnNlUGFyYW1ldGVyIH0gZnJvbSAnLi9sYXlvdXQudHlwZXMnO1xuaW1wb3J0IHsgRFNjcmVlbk1lZGlhUXVlcnlTZXJ2aWNlIH0gZnJvbSAnLi9zY3JlZW4tbWVkaWEtcXVlcnkuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogYFtkQ2xhc3NdYCxcbn0pXG5cbmV4cG9ydCBjbGFzcyBEQ2xhc3NEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGRDbGFzczogRFJlc3BvbnNlUGFyYW1ldGVyPHN0cmluZ1tdPjtcblxuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3QoKTtcbiAgcHJpdmF0ZSBleGVjdXRlZENsYXNzTGlzdDogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgc2NyZWVuUXVlcnlTZXJ2aWNlOiBEU2NyZWVuTWVkaWFRdWVyeVNlcnZpY2VcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNjcmVlblF1ZXJ5U2VydmljZS5nZXRQb2ludCgpXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpXG4gICAgICAuc3Vic2NyaWJlKCh7IGN1cnJlbnRQb2ludCB9KSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xhc3MoY3VycmVudFBvaW50KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyogVE9ETzog5Y+C5pWw6ZyA6KaB5LyY5YyW77yM5LiN5LuF5Y+v5Lul6K6+572u5pat54K577yM6L+Y5Y+v5Lul6K6+572u6YCa55SoICovXG4gIHVwZGF0ZUNsYXNzKGN1cnJlbnRQb2ludCkge1xuICAgIGxldCBmaW5hbENsYXNzTGlzdCA9IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuZENsYXNzKSkge1xuICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBEQnJlYWtwb2ludHMpIHtcbiAgICAgICAgaWYgKHRoaXMuZENsYXNzW3BvaW50XSkge1xuICAgICAgICAgIGZpbmFsQ2xhc3NMaXN0ID0gWy4uLmZpbmFsQ2xhc3NMaXN0LCAuLi50aGlzLmRDbGFzc1twb2ludF1dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50UG9pbnQgPT09IHBvaW50KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZENsYXNzKSB7XG4gICAgICBmaW5hbENsYXNzTGlzdCA9IFsuLi50aGlzLmRDbGFzc107XG4gICAgfVxuXG4gICAgdGhpcy5leGVjdXRlZENsYXNzTGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgIH0pO1xuXG4gICAgZmluYWxDbGFzc0xpc3QuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZXhlY3V0ZWRDbGFzc0xpc3QgPSBmaW5hbENsYXNzTGlzdDtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19