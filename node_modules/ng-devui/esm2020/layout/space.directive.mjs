import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DBreakpoints } from './layout.types';
import { DScreenMediaQueryService } from './screen-media-query.service';
import * as i0 from "@angular/core";
import * as i1 from "./screen-media-query.service";
export class DSpaceDirective {
    constructor(elementRef, renderer, screenQueryService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.screenQueryService = screenQueryService;
        this.destroy$ = new Subject();
        this.executedSpace = [null, null];
    }
    ngOnInit() {
        this.screenQueryService.getPoint()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ currentPoint }) => {
            this.updateSpace(currentPoint);
        });
    }
    getCurrentSpace(currentPoint) {
        let finalSpace = [null, null];
        if (Array.isArray(this.dSpace) || typeof this.dSpace === 'number') {
            finalSpace = this._transSpaceToArray(this.dSpace);
        }
        else {
            for (const point of DBreakpoints) {
                if (this.dSpace[point] !== undefined) {
                    finalSpace = this._transSpaceToArray(this.dSpace[point]);
                }
                if (currentPoint === point) {
                    break;
                }
            }
        }
        return finalSpace;
    }
    _transSpaceToArray(space) {
        let finalSpace = space;
        if (typeof space === 'number') {
            finalSpace = [space, null];
        }
        if (this.dSpaceDirection === 'horizontal') {
            finalSpace = finalSpace.reverse();
        }
        return finalSpace;
    }
    updateSpace(currentPoint) {
        const finalSpace = this.getCurrentSpace(currentPoint);
        const items = this.elementRef.nativeElement.children;
        for (let i = 0; i < items.length - 1; i++) {
            if (finalSpace[0] !== null) {
                this.renderer.setStyle(items[i], 'margin-bottom', finalSpace[0] + 'px');
            }
            else if (this.executedSpace[0] !== null) {
                this.renderer.removeStyle(items[i], 'margin-bottom');
            }
            if (finalSpace[1] !== null) {
                this.renderer.setStyle(items[i], 'margin-right', finalSpace[1] + 'px');
            }
            else if (this.executedSpace[1] !== null) {
                this.renderer.removeStyle(items[i], 'margin-right');
            }
        }
        this.executedSpace = finalSpace;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
DSpaceDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DSpaceDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.DScreenMediaQueryService }], target: i0.ɵɵFactoryTarget.Directive });
DSpaceDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DSpaceDirective, selector: "[dSpace]", inputs: { dSpace: "dSpace", dSpaceDirection: "dSpaceDirection" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DSpaceDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[dSpace]`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.DScreenMediaQueryService }]; }, propDecorators: { dSpace: [{
                type: Input
            }], dSpaceDirection: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2dWkvbGF5b3V0L3NwYWNlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFzQixNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFNeEUsTUFBTSxPQUFPLGVBQWU7SUFPMUIsWUFDVSxVQUFzQixFQUN0QixRQUFtQixFQUNuQixrQkFBNEM7UUFGNUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMEI7UUFUOUMsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekIsa0JBQWEsR0FBcUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFTbkQsQ0FBQztJQUVMLFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFO2FBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzlCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGVBQWUsQ0FBQyxZQUFZO1FBQ2xDLElBQUksVUFBVSxHQUFxQixDQUFDLElBQUksRUFBRSxJQUFJ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QUFlO3NCQUF2QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgREJyZWFrcG9pbnRzLCBEUmVzcG9uc2VQYXJhbWV0ZXIgfSBmcm9tICcuL2xheW91dC50eXBlcyc7XG5pbXBvcnQgeyBEU2NyZWVuTWVkaWFRdWVyeVNlcnZpY2UgfSBmcm9tICcuL3NjcmVlbi1tZWRpYS1xdWVyeS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBgW2RTcGFjZV1gLFxufSlcblxuZXhwb3J0IGNsYXNzIERTcGFjZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XG4gIHByaXZhdGUgZXhlY3V0ZWRTcGFjZTogW251bWJlciwgbnVtYmVyXSA9IFtudWxsLCBudWxsXTtcblxuICBASW5wdXQoKSBkU3BhY2U6IERSZXNwb25zZVBhcmFtZXRlcjxudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdPjtcbiAgQElucHV0KCkgZFNwYWNlRGlyZWN0aW9uOiBEUmVzcG9uc2VQYXJhbWV0ZXI8J3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJz47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHNjcmVlblF1ZXJ5U2VydmljZTogRFNjcmVlbk1lZGlhUXVlcnlTZXJ2aWNlXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zY3JlZW5RdWVyeVNlcnZpY2UuZ2V0UG9pbnQoKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoeyBjdXJyZW50UG9pbnQgfSkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVNwYWNlKGN1cnJlbnRQb2ludCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3VycmVudFNwYWNlKGN1cnJlbnRQb2ludCk6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgIGxldCBmaW5hbFNwYWNlOiBbbnVtYmVyLCBudW1iZXJdID0gW251bGwsIG51bGxdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZFNwYWNlKSB8fCB0eXBlb2YgdGhpcy5kU3BhY2UgPT09ICdudW1iZXInKSB7XG4gICAgICBmaW5hbFNwYWNlID0gdGhpcy5fdHJhbnNTcGFjZVRvQXJyYXkodGhpcy5kU3BhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IHBvaW50IG9mIERCcmVha3BvaW50cykge1xuICAgICAgICBpZiAodGhpcy5kU3BhY2VbcG9pbnRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmaW5hbFNwYWNlID0gdGhpcy5fdHJhbnNTcGFjZVRvQXJyYXkodGhpcy5kU3BhY2VbcG9pbnRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFBvaW50ID09PSBwb2ludCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmFsU3BhY2U7XG4gIH1cblxuICBwcml2YXRlIF90cmFuc1NwYWNlVG9BcnJheShzcGFjZSk6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgIGxldCBmaW5hbFNwYWNlID0gc3BhY2U7XG4gICAgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGZpbmFsU3BhY2UgPSBbc3BhY2UsIG51bGxdO1xuICAgIH1cbiAgICBpZiAodGhpcy5kU3BhY2VEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgZmluYWxTcGFjZSA9IGZpbmFsU3BhY2UucmV2ZXJzZSgpIGFzIFtudW1iZXIsIG51bWJlcl07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmFsU3BhY2U7XG4gIH1cblxuICB1cGRhdGVTcGFjZShjdXJyZW50UG9pbnQpIHtcbiAgICBjb25zdCBmaW5hbFNwYWNlID0gdGhpcy5nZXRDdXJyZW50U3BhY2UoY3VycmVudFBvaW50KTtcblxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgaWYgKGZpbmFsU3BhY2VbMF0gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShpdGVtc1tpXSwgJ21hcmdpbi1ib3R0b20nLCBmaW5hbFNwYWNlWzBdICsgJ3B4Jyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZXhlY3V0ZWRTcGFjZVswXSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKGl0ZW1zW2ldLCAnbWFyZ2luLWJvdHRvbScpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbmFsU3BhY2VbMV0gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShpdGVtc1tpXSwgJ21hcmdpbi1yaWdodCcsIGZpbmFsU3BhY2VbMV0gKyAncHgnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5leGVjdXRlZFNwYWNlWzFdICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUoaXRlbXNbaV0sICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmV4ZWN1dGVkU3BhY2UgPSBmaW5hbFNwYWNlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=