import { Injectable } from '@angular/core';
import { fromEvent, ReplaySubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DBreakpoints, DBreakpointsMap } from './layout.types';
import * as i0 from "@angular/core";
export class DScreenMediaQueryService {
    constructor() {
        this.pointChangeSub = new ReplaySubject(1);
        this.destroy$ = new Subject();
    }
    // 可以传入一个基准point，返回数据结构{ currentPoint, 变大or变小or没变，比基准point大or小or一样 }
    getPoint() {
        if (!this.currentPoint) {
            this.currentPoint = this.getCurrentPoint();
            this.pointChangeSub.next({
                currentPoint: this.currentPoint,
                change: 0,
                compare: this.comparePoints(this.currentPoint),
            });
            fromEvent(window, 'resize')
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                const tempPoint = this.getCurrentPoint();
                if (this.currentPoint !== tempPoint) {
                    const change = this.comparePoints(tempPoint, this.currentPoint);
                    this.currentPoint = tempPoint;
                    this.pointChangeSub.next({
                        currentPoint: this.currentPoint,
                        change: change,
                        compare: this.comparePoints(tempPoint),
                    });
                }
            });
        }
        return this.pointChangeSub;
    }
    // 无p2，则全量对比
    comparePoints(p1, p2) {
        let index1;
        let index2;
        for (let i = 0; i < DBreakpoints.length; i++) {
            if (p1 === DBreakpoints[i]) {
                index1 = i;
            }
            if (p2 === DBreakpoints[i]) {
                index2 = i;
            }
        }
        if (!p2) {
            const res = {};
            DBreakpoints.forEach((point, index) => {
                res[point] = index1 - index;
            });
            return res;
        }
        return index1 - index2;
    }
    getCurrentPoint() {
        const currentScreenWidth = window.innerWidth;
        for (let i = 0; i < DBreakpoints.length; i++) {
            if (DBreakpointsMap[DBreakpoints[i]] >= currentScreenWidth || i === DBreakpoints.length - 1) {
                return DBreakpoints[i];
            }
        }
        return;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
DScreenMediaQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DScreenMediaQueryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DScreenMediaQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DScreenMediaQueryService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DScreenMediaQueryService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuLW1lZGlhLXF1ZXJ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS9sYXlvdXQvc2NyZWVuLW1lZGlhLXF1ZXJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBZSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzVFLE1BQU0sT0FBTyx3QkFBd0I7SUFEckM7UUFHVSxtQkFBYyxHQUN0QixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0tBdUVsQztJQXJFQyxvRUFBb0U7SUFDN0QsUUFBUTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO2dCQUN2QixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQy9CLE1BQU0sRUFBRSxDQUFDO2dCQUNULE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDL0MsQ0FBQyxDQUFDO1lBRUgsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7aUJBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUM5QixTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNkLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDekMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtvQkFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBVyxDQUFDO29CQUMxRSxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztvQkFFOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7d0JBQ3ZCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTt3QkFDL0IsTUFBTSxFQUFFLE1BQU07d0JBQ2QsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO3FCQUN2QyxDQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNOO1FBRUQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZO0lBQ0osYUFBYSxDQUFDLEVBQWUsRUFBRSxFQUFnQjtRQUNyRCxJQUFJLE1BQVcsQ0FBQztRQUNoQixJQUFJLE1BQVcsQ0FBQztRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLEVBQUUsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzFCLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDWjtZQUNELElBQUksRUFBRSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDMUIsTUFBTSxHQUFHLENBQUMsQ0FBQzthQUNaO1NBQ0Y7UUFFRCxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1lBQ3BCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1lBRUgsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUVELE9BQU8sTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRUQsZUFBZTtRQUNiLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUM3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxrQkFBa0IsSUFBSSxDQUFDLEtBQUssWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzNGLE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBZ0IsQ0FBQzthQUN2QztTQUNGO1FBQ0QsT0FBTztJQUNULENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7O3FIQTFFVSx3QkFBd0I7eUhBQXhCLHdCQUF3QixjQURYLE1BQU07MkZBQ25CLHdCQUF3QjtrQkFEcEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb21FdmVudCwgUmVwbGF5U3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgREJyZWFrcG9pbnQsIERCcmVha3BvaW50cywgREJyZWFrcG9pbnRzTWFwIH0gZnJvbSAnLi9sYXlvdXQudHlwZXMnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIERTY3JlZW5NZWRpYVF1ZXJ5U2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY3VycmVudFBvaW50OiBEQnJlYWtwb2ludDtcbiAgcHJpdmF0ZSBwb2ludENoYW5nZVN1YjogUmVwbGF5U3ViamVjdDx7IGN1cnJlbnRQb2ludDogREJyZWFrcG9pbnQ7IGNoYW5nZTogbnVtYmVyOyBjb21wYXJlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IH0+ID1cbiAgbmV3IFJlcGxheVN1YmplY3QoMSk7XG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIC8vIOWPr+S7peS8oOWFpeS4gOS4quWfuuWHhnBvaW5077yM6L+U5Zue5pWw5o2u57uT5p6EeyBjdXJyZW50UG9pbnQsIOWPmOWkp29y5Y+Y5bCPb3LmsqHlj5jvvIzmr5Tln7rlh4Zwb2ludOWkp29y5bCPb3LkuIDmoLcgfVxuICBwdWJsaWMgZ2V0UG9pbnQoKTogUmVwbGF5U3ViamVjdDx7IGN1cnJlbnRQb2ludDogREJyZWFrcG9pbnQ7IGNoYW5nZTogbnVtYmVyOyBjb21wYXJlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IH0+IHtcbiAgICBpZiAoIXRoaXMuY3VycmVudFBvaW50KSB7XG4gICAgICB0aGlzLmN1cnJlbnRQb2ludCA9IHRoaXMuZ2V0Q3VycmVudFBvaW50KCk7XG4gICAgICB0aGlzLnBvaW50Q2hhbmdlU3ViLm5leHQoe1xuICAgICAgICBjdXJyZW50UG9pbnQ6IHRoaXMuY3VycmVudFBvaW50LFxuICAgICAgICBjaGFuZ2U6IDAsXG4gICAgICAgIGNvbXBhcmU6IHRoaXMuY29tcGFyZVBvaW50cyh0aGlzLmN1cnJlbnRQb2ludCksXG4gICAgICB9KTtcblxuICAgICAgZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpXG4gICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgdGVtcFBvaW50ID0gdGhpcy5nZXRDdXJyZW50UG9pbnQoKTtcbiAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UG9pbnQgIT09IHRlbXBQb2ludCkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gdGhpcy5jb21wYXJlUG9pbnRzKHRlbXBQb2ludCwgdGhpcy5jdXJyZW50UG9pbnQpIGFzIG51bWJlcjtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBvaW50ID0gdGVtcFBvaW50O1xuXG4gICAgICAgICAgICB0aGlzLnBvaW50Q2hhbmdlU3ViLm5leHQoe1xuICAgICAgICAgICAgICBjdXJyZW50UG9pbnQ6IHRoaXMuY3VycmVudFBvaW50LFxuICAgICAgICAgICAgICBjaGFuZ2U6IGNoYW5nZSxcbiAgICAgICAgICAgICAgY29tcGFyZTogdGhpcy5jb21wYXJlUG9pbnRzKHRlbXBQb2ludCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBvaW50Q2hhbmdlU3ViO1xuICB9XG5cbiAgLy8g5pegcDLvvIzliJnlhajph4/lr7nmr5RcbiAgcHJpdmF0ZSBjb21wYXJlUG9pbnRzKHAxOiBEQnJlYWtwb2ludCwgcDI/OiBEQnJlYWtwb2ludCkge1xuICAgIGxldCBpbmRleDE6IGFueTtcbiAgICBsZXQgaW5kZXgyOiBhbnk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBEQnJlYWtwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwMSA9PT0gREJyZWFrcG9pbnRzW2ldKSB7XG4gICAgICAgIGluZGV4MSA9IGk7XG4gICAgICB9XG4gICAgICBpZiAocDIgPT09IERCcmVha3BvaW50c1tpXSkge1xuICAgICAgICBpbmRleDIgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcDIpIHtcbiAgICAgIGNvbnN0IHJlczogYW55ID0ge307XG4gICAgICBEQnJlYWtwb2ludHMuZm9yRWFjaCgocG9pbnQsIGluZGV4KSA9PiB7XG4gICAgICAgIHJlc1twb2ludF0gPSBpbmRleDEgLSBpbmRleDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDEgLSBpbmRleDI7XG4gIH1cblxuICBnZXRDdXJyZW50UG9pbnQoKTogREJyZWFrcG9pbnQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGN1cnJlbnRTY3JlZW5XaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgREJyZWFrcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoREJyZWFrcG9pbnRzTWFwW0RCcmVha3BvaW50c1tpXV0gPj0gY3VycmVudFNjcmVlbldpZHRoIHx8IGkgPT09IERCcmVha3BvaW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBEQnJlYWtwb2ludHNbaV0gYXMgREJyZWFrcG9pbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19