import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { distinctUntilChanged, map, pluck, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ng-devui/popover";
const SLIDER_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SliderComponent),
    multi: true
};
export class SliderComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.isDragging = false;
        this.isHovering = false;
        this.showValuePopover = false;
        this.max = 100;
        this.min = 0;
        this.step = 1;
        this.disabled = false;
        this.afterChange = new EventEmitter();
        this.tipsRenderer = (value) => `${value}`;
        this.onTouchedCallback = () => {
        };
        this.onChangeCallback = (v) => {
        };
    }
    ngOnInit() {
        this.checkRangeValues(this.min, this.max);
        this.checkStepValue();
        this.toggleDisabled(this.disabled);
        if (this.value === null) {
            this.setValue(this.ensureValueInRange(null));
        }
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'min')
            || Object.prototype.hasOwnProperty.call(changes, 'max')
            || Object.prototype.hasOwnProperty.call(changes, 'step')) {
            this.checkRangeValues(this.min, this.max);
            this.checkStepValue();
        }
    }
    ngAfterViewInit() {
        this.registerMouseEventsListeners();
        this.registerHandleHoverPopoverListener();
        this.toggleDisabled(this.disabled);
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.toggleDisabled(isDisabled);
    }
    writeValue(newValue) {
        this.setValue(this.ensureValueInRange(newValue), false);
    }
    checkRangeValues(minValue, maxValue) {
        if (maxValue <= minValue) {
            throw new Error(`max value must be greater than min value`);
        }
    }
    checkStepValue() {
        if (this.step < 0 || !this.step) {
            throw new Error('step value must be greater than 0.');
        }
        else if ((this.max - this.min) % this.step) {
            throw new Error('(max - min) must be divisible by step.');
        }
    }
    ratioToValue(ratio, min, max, step) {
        let value = (max - min) * ratio + min;
        if (step > 0) {
            value = Math.round(value / step) * step;
        }
        return this.clamp(min, value, max);
    }
    convertHandlePositionToRatio(handleX, startX, totalLength) {
        return this.clamp(0, (handleX - startX) / totalLength, 1);
    }
    clamp(min, n, max) {
        return Math.max(min, Math.min(n, max));
    }
    updateStyle(percentage) {
        percentage = Math.min(1, Math.max(0, percentage));
        this.sliderTrack.nativeElement.style.width = `${percentage * 100}%`;
        this.sliderHandle.nativeElement.style.left = `calc(${percentage * 100}% - 7px)`;
    }
    registerMouseEventsListeners() {
        this.dragStartListener = fromEvent(this.slider.nativeElement, 'mousedown').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'), map((position) => this.mousePositionToAdaptiveValue(position)));
        this.dragEndListener = fromEvent(document, 'mouseup');
        this.dragMoveListener = fromEvent(document, 'mousemove').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'), distinctUntilChanged(), map((position) => this.mousePositionToAdaptiveValue(position)), distinctUntilChanged(), takeUntil(this.dragEndListener));
    }
    getSliderPagePosition() {
        const rect = this.slider.nativeElement.getBoundingClientRect();
        const window = this.slider.nativeElement.ownerDocument.defaultView;
        return rect.left + window.pageXOffset;
    }
    getRailLength() {
        return this.sliderRail.nativeElement.clientWidth;
    }
    mousePositionToAdaptiveValue(handleX) {
        const sliderStartX = this.getSliderPagePosition();
        const sliderLength = this.getRailLength();
        const ratio = this.convertHandlePositionToRatio(handleX, sliderStartX, sliderLength);
        const value = this.ratioToValue(ratio, this.min, this.max, this.step);
        return parseFloat(value.toFixed(this.getDecimals(this.step)));
    }
    getDecimals(value) {
        const valueString = value.toString();
        const integerLength = valueString.indexOf('.') + 1;
        return integerLength >= 0 ? valueString.length - integerLength : 0;
    }
    mouseStartMoving(value) {
        this.handleController(true);
        this.setValue(value);
    }
    mouseMoving(value) {
        this.setValue(value);
        this.cdr.markForCheck();
    }
    mouseStopMoving() {
        this.afterChange.emit(this.value);
        this.handleController(false);
        this.onTouchedCallback();
        this.cdr.markForCheck();
    }
    subscribeMouseActions(mouseActions = ['start', 'move', 'end']) {
        if (mouseActions.indexOf('start') !== -1 && this.dragStartListener && !this.dragStartHandler) {
            this.dragStartHandler = this.dragStartListener.subscribe(this.mouseStartMoving.bind(this));
        }
        if (mouseActions.indexOf('move') !== -1 && this.dragMoveListener && !this.dragMoveHandler) {
            this.dragMoveHandler = this.dragMoveListener.subscribe(this.mouseMoving.bind(this));
        }
        if (mouseActions.indexOf('end') !== -1 && this.dragEndListener && !this.dragEndHandler) {
            this.dragEndHandler = this.dragEndListener.subscribe(this.mouseStopMoving.bind(this));
        }
    }
    unsubscribeMouseActions(dragStages = ['start', 'move', 'end']) {
        if (dragStages.indexOf('start') !== -1 && this.dragStartHandler) {
            this.dragStartHandler.unsubscribe();
            this.dragStartHandler = null;
        }
        if (dragStages.indexOf('move') !== -1 && this.dragMoveHandler) {
            this.dragMoveHandler.unsubscribe();
            this.dragMoveHandler = null;
        }
        if (dragStages.indexOf('end') !== -1 && this.dragEndHandler) {
            this.dragEndHandler.unsubscribe();
            this.dragEndHandler = null;
        }
    }
    handleController(movable) {
        if (movable) {
            this.isDragging = true;
            this.showValuePopover = this.showValuePopoverController();
            this.subscribeMouseActions(['move', 'end']);
        }
        else {
            this.isDragging = false;
            this.showValuePopover = this.showValuePopoverController();
            this.unsubscribeMouseActions(['move', 'end']);
        }
    }
    toggleDisabled(disabled) {
        if (disabled) {
            this.unsubscribeMouseActions();
        }
        else {
            this.subscribeMouseActions(['start']);
        }
    }
    setValue(value, triggerOnChanges = true) {
        if (this.value !== value) {
            this.value = value;
            this.updateTrackAndHandle();
        }
        if (triggerOnChanges) {
            this.onChangeCallback(this.value);
        }
    }
    ensureValueInRange(value) {
        let safeValue;
        if (!this.valueMustBeValid(value)) {
            safeValue = this.min;
        }
        else {
            safeValue = this.clamp(this.min, value, this.max);
        }
        return safeValue;
    }
    updateTrackAndHandle() {
        const value = this.value;
        const offset = this.valueToOffset(value);
        this.updateStyle(offset / 100);
        this.cdr.markForCheck();
    }
    valueMustBeValid(value) {
        return !isNaN(typeof value !== 'number' ? parseFloat(value) : value);
    }
    valueToOffset(value) {
        return ((value - this.min) / (this.max - this.min)) * 100;
    }
    registerHandleHoverPopoverListener() {
        const mouseOverListener = fromEvent(this.sliderHandle.nativeElement, 'mouseover');
        const mouseLeaveListener = fromEvent(this.sliderHandle.nativeElement, 'mouseout');
        this.mouseOverHandler = mouseOverListener.subscribe(this.sliderHandlePopoverOnMouseHover.bind(this));
        this.mouseLeaveHandler = mouseLeaveListener.subscribe(this.sliderHandlePopoverOnMouseLeave.bind(this));
    }
    sliderHandlePopoverOnMouseHover() {
        this.isHovering = true;
        this.showValuePopover = this.showValuePopoverController();
        this.cdr.markForCheck();
    }
    sliderHandlePopoverOnMouseLeave() {
        this.isHovering = false;
        this.showValuePopover = this.showValuePopoverController();
        this.cdr.markForCheck();
    }
    unregisterHandleHoverTooltip() {
        this.mouseOverHandler.unsubscribe();
        this.mouseLeaveHandler.unsubscribe();
    }
    showValuePopoverController() {
        return this.isDragging || this.isHovering;
    }
    ngOnDestroy() {
        this.unsubscribeMouseActions();
        this.unregisterHandleHoverTooltip();
    }
}
SliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SliderComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
SliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SliderComponent, selector: "d-slider", inputs: { max: "max", min: "min", step: "step", disabled: "disabled", tipsRenderer: "tipsRenderer" }, outputs: { afterChange: "afterChange" }, providers: [SLIDER_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: "slider", first: true, predicate: ["slider"], descendants: true, static: true }, { propertyName: "sliderHandle", first: true, predicate: ["sliderHandle"], descendants: true, static: true }, { propertyName: "sliderTrack", first: true, predicate: ["sliderTrack"], descendants: true, static: true }, { propertyName: "sliderRail", first: true, predicate: ["sliderRail"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-slider\" #slider [ngClass]=\"{ disabled: disabled }\">\n  <div class=\"devui-slider-rail\" #sliderRail [ngClass]=\"{ disabled: disabled }\"></div>\n  <div class=\"devui-slider-track\" #sliderTrack [ngClass]=\"{ disabled: disabled }\"></div>\n  <div\n    class=\"devui-slider-handle\"\n    #sliderHandle\n    [ngClass]=\"{ disabled: disabled }\"\n    dPopover\n    position=\"top\"\n    [content]=\"showValuePopover && tipsRenderer ? tipsRenderer(value) : ''\"\n    [showAnimation]=\"false\"\n    [visible]=\"tipsRenderer && showValuePopover\"\n  ></div>\n</div>\n", styles: [":host{display:block}.devui-slider{position:relative;width:100%;padding:4px 0;margin:4px 0;cursor:pointer;box-sizing:border-box;height:14px;display:flex;align-items:center}.devui-slider .devui-slider-rail{position:absolute;background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5);height:5px;width:100%;transition:background-color .2s cubic-bezier(.645,.045,.355,1);transition:background-color var(--devui-animation-duration-base, .2s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));border-radius:100px;border-radius:var(--devui-border-radius-full, 100px)}.devui-slider .devui-slider-rail.disabled{background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.devui-slider:hover .devui-slider-rail:not(.disabled){background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.devui-slider:hover .devui-slider-track:not(.disabled){background-color:#7693f5;background-color:var(--devui-brand-hover, #7693f5)}.devui-slider:hover .devui-slider-handle:not(.disabled){border-color:#7693f5;border-color:var(--devui-brand-hover, #7693f5)}.devui-slider .devui-slider-track{position:absolute;background-color:#5e7ce0;background-color:var(--devui-brand, #5e7ce0);height:5px;width:0;border-radius:100px;border-radius:var(--devui-border-radius-full, 100px)}.devui-slider .devui-slider-handle{position:absolute;background-color:#fff;background-color:var(--devui-base-bg, #ffffff);width:14px;height:14px;border-radius:50%;left:0;transition:transform .2s ease-in-out;border:2px solid #5e7ce0;border:2px solid var(--devui-brand, #5e7ce0)}.devui-slider .devui-slider-handle:not(.disabled):hover,.devui-slider .devui-slider-handle:not(.disabled):active{transform:scale(1.3)}.devui-slider.disabled{cursor:not-allowed}.devui-slider.disabled .devui-slider-rail{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-slider.disabled .devui-slider-track{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-slider.disabled .devui-slider-handle{border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6)}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.PopoverDirective, selector: "[dPopover]", inputs: ["content", "controlled", "position", "showAnimation", "showAnimate", "scrollElement", "appendToBody", "zIndex", "popType", "popMaxWidth", "trigger", "hoverToContent", "hoverDelayTime", "popoverStyle", "mouseEnterDelay", "mouseLeaveDelay", "visible"], exportAs: ["dPopover"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SliderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-slider', providers: [SLIDER_CONTROL_VALUE_ACCESSOR], changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, template: "<div class=\"devui-slider\" #slider [ngClass]=\"{ disabled: disabled }\">\n  <div class=\"devui-slider-rail\" #sliderRail [ngClass]=\"{ disabled: disabled }\"></div>\n  <div class=\"devui-slider-track\" #sliderTrack [ngClass]=\"{ disabled: disabled }\"></div>\n  <div\n    class=\"devui-slider-handle\"\n    #sliderHandle\n    [ngClass]=\"{ disabled: disabled }\"\n    dPopover\n    position=\"top\"\n    [content]=\"showValuePopover && tipsRenderer ? tipsRenderer(value) : ''\"\n    [showAnimation]=\"false\"\n    [visible]=\"tipsRenderer && showValuePopover\"\n  ></div>\n</div>\n", styles: [":host{display:block}.devui-slider{position:relative;width:100%;padding:4px 0;margin:4px 0;cursor:pointer;box-sizing:border-box;height:14px;display:flex;align-items:center}.devui-slider .devui-slider-rail{position:absolute;background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5);height:5px;width:100%;transition:background-color .2s cubic-bezier(.645,.045,.355,1);transition:background-color var(--devui-animation-duration-base, .2s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));border-radius:100px;border-radius:var(--devui-border-radius-full, 100px)}.devui-slider .devui-slider-rail.disabled{background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.devui-slider:hover .devui-slider-rail:not(.disabled){background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.devui-slider:hover .devui-slider-track:not(.disabled){background-color:#7693f5;background-color:var(--devui-brand-hover, #7693f5)}.devui-slider:hover .devui-slider-handle:not(.disabled){border-color:#7693f5;border-color:var(--devui-brand-hover, #7693f5)}.devui-slider .devui-slider-track{position:absolute;background-color:#5e7ce0;background-color:var(--devui-brand, #5e7ce0);height:5px;width:0;border-radius:100px;border-radius:var(--devui-border-radius-full, 100px)}.devui-slider .devui-slider-handle{position:absolute;background-color:#fff;background-color:var(--devui-base-bg, #ffffff);width:14px;height:14px;border-radius:50%;left:0;transition:transform .2s ease-in-out;border:2px solid #5e7ce0;border:2px solid var(--devui-brand, #5e7ce0)}.devui-slider .devui-slider-handle:not(.disabled):hover,.devui-slider .devui-slider-handle:not(.disabled):active{transform:scale(1.3)}.devui-slider.disabled{cursor:not-allowed}.devui-slider.disabled .devui-slider-rail{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-slider.disabled .devui-slider-track{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-slider.disabled .devui-slider-handle{border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { slider: [{
                type: ViewChild,
                args: ['slider', { static: true }]
            }], sliderHandle: [{
                type: ViewChild,
                args: ['sliderHandle', { static: true }]
            }], sliderTrack: [{
                type: ViewChild,
                args: ['sliderTrack', { static: true }]
            }], sliderRail: [{
                type: ViewChild,
                args: ['sliderRail', { static: true }]
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], step: [{
                type: Input
            }], disabled: [{
                type: Input
            }], afterChange: [{
                type: Output
            }], tipsRenderer: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldnVpL3NsaWRlci9zbGlkZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZGV2dWkvc2xpZGVyL3NsaWRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUlMLE1BQU0sRUFFTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQTRCLE1BQU0sTUFBTSxDQUFDO0FBQzNELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUVsRixNQUFNLDZCQUE2QixHQUFRO0lBQ3pDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUM7SUFDOUMsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDO0FBV0YsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFBb0IsR0FBc0I7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFRbEMsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXBCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQVF2QixRQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ1YsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUNSLFNBQUksR0FBRyxDQUFDLENBQUM7UUFDVCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUMx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RyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDSSxXQUFXO3NCQUFwQixNQUFNO2dCQUNFLFlBQVk7c0JBQXBCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgcGx1Y2ssIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBTTElERVJfQ09OVFJPTF9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU2xpZGVyQ29tcG9uZW50KSxcbiAgbXVsdGk6IHRydWVcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Qtc2xpZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NsaWRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NsaWRlci5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtTTElERVJfQ09OVFJPTF9WQUxVRV9BQ0NFU1NPUl0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbn0pXG5cbmV4cG9ydCBjbGFzcyBTbGlkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICB9XG4gIHByaXZhdGUgZHJhZ1N0YXJ0TGlzdGVuZXI6IE9ic2VydmFibGU8bnVtYmVyPjtcbiAgcHJpdmF0ZSBkcmFnTW92ZUxpc3RlbmVyOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gIHByaXZhdGUgZHJhZ0VuZExpc3RlbmVyOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgcHJpdmF0ZSBkcmFnU3RhcnRIYW5kbGVyOiBTdWJzY3JpcHRpb24gfCBudWxsO1xuICBwcml2YXRlIGRyYWdNb3ZlSGFuZGxlcjogU3Vic2NyaXB0aW9uIHwgbnVsbDtcbiAgcHJpdmF0ZSBkcmFnRW5kSGFuZGxlcjogU3Vic2NyaXB0aW9uIHwgbnVsbDtcbiAgcHJpdmF0ZSBpc0RyYWdnaW5nID0gZmFsc2U7XG4gIHByaXZhdGUgaXNIb3ZlcmluZyA9IGZhbHNlO1xuICBwdWJsaWMgdmFsdWU7XG4gIHB1YmxpYyBzaG93VmFsdWVQb3BvdmVyID0gZmFsc2U7XG4gIHByaXZhdGUgbW91c2VPdmVySGFuZGxlcjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIG1vdXNlTGVhdmVIYW5kbGVyOiBTdWJzY3JpcHRpb247XG5cbiAgQFZpZXdDaGlsZCgnc2xpZGVyJywgeyBzdGF0aWM6IHRydWUgfSkgc2xpZGVyOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdzbGlkZXJIYW5kbGUnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzbGlkZXJIYW5kbGU6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ3NsaWRlclRyYWNrJywgeyBzdGF0aWM6IHRydWUgfSkgc2xpZGVyVHJhY2s6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ3NsaWRlclJhaWwnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzbGlkZXJSYWlsOiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBtYXggPSAxMDA7XG4gIEBJbnB1dCgpIG1pbiA9IDA7XG4gIEBJbnB1dCgpIHN0ZXAgPSAxO1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICBAT3V0cHV0KCkgYWZ0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcbiAgQElucHV0KCkgdGlwc1JlbmRlcmVyOiAodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nID0gKHZhbHVlKSA9PiBgJHt2YWx1ZX1gO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY2hlY2tSYW5nZVZhbHVlcyh0aGlzLm1pbiwgdGhpcy5tYXgpO1xuICAgIHRoaXMuY2hlY2tTdGVwVmFsdWUoKTtcbiAgICB0aGlzLnRvZ2dsZURpc2FibGVkKHRoaXMuZGlzYWJsZWQpO1xuICAgIGlmICh0aGlzLnZhbHVlID09PSBudWxsKSB7XG4gICAgICB0aGlzLnNldFZhbHVlKHRoaXMuZW5zdXJlVmFsdWVJblJhbmdlKG51bGwpKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjaGFuZ2VzLCAnbWluJylcbiAgICAgIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjaGFuZ2VzLCAnbWF4JylcbiAgICAgIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjaGFuZ2VzLCAnc3RlcCcpKSB7XG4gICAgICB0aGlzLmNoZWNrUmFuZ2VWYWx1ZXModGhpcy5taW4sIHRoaXMubWF4KTtcbiAgICAgIHRoaXMuY2hlY2tTdGVwVmFsdWUoKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yZWdpc3Rlck1vdXNlRXZlbnRzTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5yZWdpc3RlckhhbmRsZUhvdmVyUG9wb3Zlckxpc3RlbmVyKCk7XG4gICAgdGhpcy50b2dnbGVEaXNhYmxlZCh0aGlzLmRpc2FibGVkKTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgIHRoaXMudG9nZ2xlRGlzYWJsZWQoaXNEaXNhYmxlZCk7XG4gIH1cblxuICB3cml0ZVZhbHVlKG5ld1ZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNldFZhbHVlKHRoaXMuZW5zdXJlVmFsdWVJblJhbmdlKG5ld1ZhbHVlKSwgZmFsc2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjayA9ICgpID0+IHtcbiAgfTtcblxuICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2sgPSAodjogYW55KSA9PiB7XG4gIH07XG5cbiAgcHJpdmF0ZSBjaGVja1JhbmdlVmFsdWVzKG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgIGlmIChtYXhWYWx1ZSA8PSBtaW5WYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBtYXggdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gbWluIHZhbHVlYCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1N0ZXBWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5zdGVwIDwgMCB8fCAhdGhpcy5zdGVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0ZXAgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4nKTtcbiAgICB9IGVsc2UgaWYgKCh0aGlzLm1heCAtIHRoaXMubWluKSAlIHRoaXMuc3RlcCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCcobWF4IC0gbWluKSBtdXN0IGJlIGRpdmlzaWJsZSBieSBzdGVwLicpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmF0aW9Ub1ZhbHVlKFxuICAgIHJhdGlvOiBudW1iZXIsXG4gICAgbWluOiBudW1iZXIsXG4gICAgbWF4OiBudW1iZXIsXG4gICAgc3RlcDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgbGV0IHZhbHVlID0gKG1heCAtIG1pbikgKiByYXRpbyArIG1pbjtcbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAvIHN0ZXApICogc3RlcDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xhbXAobWluLCB2YWx1ZSwgbWF4KTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydEhhbmRsZVBvc2l0aW9uVG9SYXRpbyhoYW5kbGVYOiBudW1iZXIsIHN0YXJ0WDogbnVtYmVyLCB0b3RhbExlbmd0aDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jbGFtcCgwLCAoaGFuZGxlWCAtIHN0YXJ0WCkgLyB0b3RhbExlbmd0aCwgMSk7XG4gIH1cblxuICBwcml2YXRlIGNsYW1wKG1pbjogbnVtYmVyLCBuOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obiwgbWF4KSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN0eWxlKHBlcmNlbnRhZ2UpIHtcbiAgICBwZXJjZW50YWdlID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgcGVyY2VudGFnZSkpO1xuICAgIHRoaXMuc2xpZGVyVHJhY2submF0aXZlRWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3BlcmNlbnRhZ2UgKiAxMDB9JWA7XG4gICAgdGhpcy5zbGlkZXJIYW5kbGUubmF0aXZlRWxlbWVudC5zdHlsZS5sZWZ0ID0gYGNhbGMoJHtwZXJjZW50YWdlICogMTAwfSUgLSA3cHgpYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJNb3VzZUV2ZW50c0xpc3RlbmVycygpOiB2b2lkIHtcbiAgICB0aGlzLmRyYWdTdGFydExpc3RlbmVyID0gZnJvbUV2ZW50KHRoaXMuc2xpZGVyLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWRvd24nKS5waXBlKFxuICAgICAgdGFwKChlOiBFdmVudCkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KSxcbiAgICAgIHBsdWNrPEV2ZW50LCBudW1iZXI+KCdwYWdlWCcpLFxuICAgICAgbWFwKChwb3NpdGlvbjogbnVtYmVyKSA9PiB0aGlzLm1vdXNlUG9zaXRpb25Ub0FkYXB0aXZlVmFsdWUocG9zaXRpb24pKVxuICAgICk7XG4gICAgdGhpcy5kcmFnRW5kTGlzdGVuZXIgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZXVwJyk7XG4gICAgdGhpcy5kcmFnTW92ZUxpc3RlbmVyID0gZnJvbUV2ZW50KGRvY3VtZW50LCAnbW91c2Vtb3ZlJykucGlwZShcbiAgICAgIHRhcCgoZTogRXZlbnQpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSksXG4gICAgICBwbHVjazxFdmVudCwgbnVtYmVyPigncGFnZVgnKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICBtYXAoKHBvc2l0aW9uOiBudW1iZXIpID0+IHRoaXMubW91c2VQb3NpdGlvblRvQWRhcHRpdmVWYWx1ZShwb3NpdGlvbikpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIHRha2VVbnRpbCh0aGlzLmRyYWdFbmRMaXN0ZW5lcilcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTbGlkZXJQYWdlUG9zaXRpb24oKTogbnVtYmVyIHtcbiAgICBjb25zdCByZWN0ID0gdGhpcy5zbGlkZXIubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB3aW5kb3cgPSB0aGlzLnNsaWRlci5uYXRpdmVFbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgcmV0dXJuIHJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmFpbExlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNsaWRlclJhaWwubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHByaXZhdGUgbW91c2VQb3NpdGlvblRvQWRhcHRpdmVWYWx1ZShoYW5kbGVYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNsaWRlclN0YXJ0WCA9IHRoaXMuZ2V0U2xpZGVyUGFnZVBvc2l0aW9uKCk7XG4gICAgY29uc3Qgc2xpZGVyTGVuZ3RoID0gdGhpcy5nZXRSYWlsTGVuZ3RoKCk7XG4gICAgY29uc3QgcmF0aW8gPSB0aGlzLmNvbnZlcnRIYW5kbGVQb3NpdGlvblRvUmF0aW8oaGFuZGxlWCwgc2xpZGVyU3RhcnRYLCBzbGlkZXJMZW5ndGgpO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5yYXRpb1RvVmFsdWUocmF0aW8sIHRoaXMubWluLCB0aGlzLm1heCwgdGhpcy5zdGVwKTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZS50b0ZpeGVkKHRoaXMuZ2V0RGVjaW1hbHModGhpcy5zdGVwKSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWNpbWFscyh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCB2YWx1ZVN0cmluZyA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgaW50ZWdlckxlbmd0aCA9IHZhbHVlU3RyaW5nLmluZGV4T2YoJy4nKSArIDE7XG4gICAgcmV0dXJuIGludGVnZXJMZW5ndGggPj0gMCA/IHZhbHVlU3RyaW5nLmxlbmd0aCAtIGludGVnZXJMZW5ndGggOiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBtb3VzZVN0YXJ0TW92aW5nKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZUNvbnRyb2xsZXIodHJ1ZSk7XG4gICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIG1vdXNlTW92aW5nKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByaXZhdGUgbW91c2VTdG9wTW92aW5nKCk6IHZvaWQge1xuICAgIHRoaXMuYWZ0ZXJDaGFuZ2UuZW1pdCh0aGlzLnZhbHVlKTtcbiAgICB0aGlzLmhhbmRsZUNvbnRyb2xsZXIoZmFsc2UpO1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlTW91c2VBY3Rpb25zKG1vdXNlQWN0aW9uczogc3RyaW5nW10gPSBbJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10pOiB2b2lkIHtcbiAgICBpZiAobW91c2VBY3Rpb25zLmluZGV4T2YoJ3N0YXJ0JykgIT09IC0xICYmIHRoaXMuZHJhZ1N0YXJ0TGlzdGVuZXIgJiYgIXRoaXMuZHJhZ1N0YXJ0SGFuZGxlcikge1xuICAgICAgdGhpcy5kcmFnU3RhcnRIYW5kbGVyID0gdGhpcy5kcmFnU3RhcnRMaXN0ZW5lci5zdWJzY3JpYmUodGhpcy5tb3VzZVN0YXJ0TW92aW5nLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGlmIChtb3VzZUFjdGlvbnMuaW5kZXhPZignbW92ZScpICE9PSAtMSAmJiB0aGlzLmRyYWdNb3ZlTGlzdGVuZXIgJiYgIXRoaXMuZHJhZ01vdmVIYW5kbGVyKSB7XG4gICAgICB0aGlzLmRyYWdNb3ZlSGFuZGxlciA9IHRoaXMuZHJhZ01vdmVMaXN0ZW5lci5zdWJzY3JpYmUodGhpcy5tb3VzZU1vdmluZy5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBpZiAobW91c2VBY3Rpb25zLmluZGV4T2YoJ2VuZCcpICE9PSAtMSAmJiB0aGlzLmRyYWdFbmRMaXN0ZW5lciAmJiAhdGhpcy5kcmFnRW5kSGFuZGxlcikge1xuICAgICAgdGhpcy5kcmFnRW5kSGFuZGxlciA9IHRoaXMuZHJhZ0VuZExpc3RlbmVyLnN1YnNjcmliZSh0aGlzLm1vdXNlU3RvcE1vdmluZy5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVuc3Vic2NyaWJlTW91c2VBY3Rpb25zKGRyYWdTdGFnZXM6IHN0cmluZ1tdID0gWydzdGFydCcsICdtb3ZlJywgJ2VuZCddKTogdm9pZCB7XG4gICAgaWYgKGRyYWdTdGFnZXMuaW5kZXhPZignc3RhcnQnKSAhPT0gLTEgJiYgdGhpcy5kcmFnU3RhcnRIYW5kbGVyKSB7XG4gICAgICB0aGlzLmRyYWdTdGFydEhhbmRsZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuZHJhZ1N0YXJ0SGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGRyYWdTdGFnZXMuaW5kZXhPZignbW92ZScpICE9PSAtMSAmJiB0aGlzLmRyYWdNb3ZlSGFuZGxlcikge1xuICAgICAgdGhpcy5kcmFnTW92ZUhhbmRsZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuZHJhZ01vdmVIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoZHJhZ1N0YWdlcy5pbmRleE9mKCdlbmQnKSAhPT0gLTEgJiYgdGhpcy5kcmFnRW5kSGFuZGxlcikge1xuICAgICAgdGhpcy5kcmFnRW5kSGFuZGxlci51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5kcmFnRW5kSGFuZGxlciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDb250cm9sbGVyKG1vdmFibGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAobW92YWJsZSkge1xuICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2hvd1ZhbHVlUG9wb3ZlciA9IHRoaXMuc2hvd1ZhbHVlUG9wb3ZlckNvbnRyb2xsZXIoKTtcbiAgICAgIHRoaXMuc3Vic2NyaWJlTW91c2VBY3Rpb25zKFsnbW92ZScsICdlbmQnXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy5zaG93VmFsdWVQb3BvdmVyID0gdGhpcy5zaG93VmFsdWVQb3BvdmVyQ29udHJvbGxlcigpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZU1vdXNlQWN0aW9ucyhbJ21vdmUnLCAnZW5kJ10pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlRGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmVNb3VzZUFjdGlvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdWJzY3JpYmVNb3VzZUFjdGlvbnMoWydzdGFydCddKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldFZhbHVlKHZhbHVlOiBudW1iZXIgfCBudWxsLCB0cmlnZ2VyT25DaGFuZ2VzID0gdHJ1ZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVUcmFja0FuZEhhbmRsZSgpO1xuICAgIH1cbiAgICBpZiAodHJpZ2dlck9uQ2hhbmdlcykge1xuICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW5zdXJlVmFsdWVJblJhbmdlKHZhbHVlOiBudW1iZXIgfCBudWxsKTogbnVtYmVyIHtcbiAgICBsZXQgc2FmZVZhbHVlO1xuICAgIGlmICghdGhpcy52YWx1ZU11c3RCZVZhbGlkKHZhbHVlKSkge1xuICAgICAgc2FmZVZhbHVlID0gdGhpcy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHNhZmVWYWx1ZSA9IHRoaXMuY2xhbXAodGhpcy5taW4sIHZhbHVlIGFzIG51bWJlciwgdGhpcy5tYXgpO1xuICAgIH1cbiAgICByZXR1cm4gc2FmZVZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVUcmFja0FuZEhhbmRsZSgpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy52YWx1ZVRvT2Zmc2V0KHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZVN0eWxlKG9mZnNldCAvIDEwMCk7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwcml2YXRlIHZhbHVlTXVzdEJlVmFsaWQodmFsdWU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhaXNOYU4odHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyA/IHBhcnNlRmxvYXQodmFsdWUpIDogdmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWx1ZVRvT2Zmc2V0KHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAoKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKSAqIDEwMDtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJIYW5kbGVIb3ZlclBvcG92ZXJMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBtb3VzZU92ZXJMaXN0ZW5lciA9IGZyb21FdmVudCh0aGlzLnNsaWRlckhhbmRsZS5uYXRpdmVFbGVtZW50LCAnbW91c2VvdmVyJyk7XG4gICAgY29uc3QgbW91c2VMZWF2ZUxpc3RlbmVyID0gZnJvbUV2ZW50KHRoaXMuc2xpZGVySGFuZGxlLm5hdGl2ZUVsZW1lbnQsICdtb3VzZW91dCcpO1xuICAgIHRoaXMubW91c2VPdmVySGFuZGxlciA9IG1vdXNlT3Zlckxpc3RlbmVyLnN1YnNjcmliZSh0aGlzLnNsaWRlckhhbmRsZVBvcG92ZXJPbk1vdXNlSG92ZXIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5tb3VzZUxlYXZlSGFuZGxlciA9IG1vdXNlTGVhdmVMaXN0ZW5lci5zdWJzY3JpYmUodGhpcy5zbGlkZXJIYW5kbGVQb3BvdmVyT25Nb3VzZUxlYXZlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBzbGlkZXJIYW5kbGVQb3BvdmVyT25Nb3VzZUhvdmVyKCkge1xuICAgIHRoaXMuaXNIb3ZlcmluZyA9IHRydWU7XG4gICAgdGhpcy5zaG93VmFsdWVQb3BvdmVyID0gdGhpcy5zaG93VmFsdWVQb3BvdmVyQ29udHJvbGxlcigpO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcHJpdmF0ZSBzbGlkZXJIYW5kbGVQb3BvdmVyT25Nb3VzZUxlYXZlKCkge1xuICAgIHRoaXMuaXNIb3ZlcmluZyA9IGZhbHNlO1xuICAgIHRoaXMuc2hvd1ZhbHVlUG9wb3ZlciA9IHRoaXMuc2hvd1ZhbHVlUG9wb3ZlckNvbnRyb2xsZXIoKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByaXZhdGUgdW5yZWdpc3RlckhhbmRsZUhvdmVyVG9vbHRpcCgpIHtcbiAgICB0aGlzLm1vdXNlT3ZlckhhbmRsZXIudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLm1vdXNlTGVhdmVIYW5kbGVyLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBwcml2YXRlIHNob3dWYWx1ZVBvcG92ZXJDb250cm9sbGVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzRHJhZ2dpbmcgfHwgdGhpcy5pc0hvdmVyaW5nO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZU1vdXNlQWN0aW9ucygpO1xuICAgIHRoaXMudW5yZWdpc3RlckhhbmRsZUhvdmVyVG9vbHRpcCgpO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiZGV2dWktc2xpZGVyXCIgI3NsaWRlciBbbmdDbGFzc109XCJ7IGRpc2FibGVkOiBkaXNhYmxlZCB9XCI+XG4gIDxkaXYgY2xhc3M9XCJkZXZ1aS1zbGlkZXItcmFpbFwiICNzbGlkZXJSYWlsIFtuZ0NsYXNzXT1cInsgZGlzYWJsZWQ6IGRpc2FibGVkIH1cIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImRldnVpLXNsaWRlci10cmFja1wiICNzbGlkZXJUcmFjayBbbmdDbGFzc109XCJ7IGRpc2FibGVkOiBkaXNhYmxlZCB9XCI+PC9kaXY+XG4gIDxkaXZcbiAgICBjbGFzcz1cImRldnVpLXNsaWRlci1oYW5kbGVcIlxuICAgICNzbGlkZXJIYW5kbGVcbiAgICBbbmdDbGFzc109XCJ7IGRpc2FibGVkOiBkaXNhYmxlZCB9XCJcbiAgICBkUG9wb3ZlclxuICAgIHBvc2l0aW9uPVwidG9wXCJcbiAgICBbY29udGVudF09XCJzaG93VmFsdWVQb3BvdmVyICYmIHRpcHNSZW5kZXJlciA/IHRpcHNSZW5kZXJlcih2YWx1ZSkgOiAnJ1wiXG4gICAgW3Nob3dBbmltYXRpb25dPVwiZmFsc2VcIlxuICAgIFt2aXNpYmxlXT1cInRpcHNSZW5kZXJlciAmJiBzaG93VmFsdWVQb3BvdmVyXCJcbiAgPjwvZGl2PlxuPC9kaXY+XG4iXX0=