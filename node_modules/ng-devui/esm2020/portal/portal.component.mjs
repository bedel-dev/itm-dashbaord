import { DOCUMENT } from '@angular/common';
import { ApplicationRef, Component, Inject, TemplateRef, ViewChild } from '@angular/core';
import { forEach } from 'lodash-es';
import * as i0 from "@angular/core";
export class PortalComponent {
    constructor(appRef, doc) {
        this.appRef = appRef;
        this.doc = doc;
        this.document = this.doc;
    }
    addContent() {
        this.portalContainer = this.document.createElement('div');
        this.viewRef = this.templateRef.createEmbeddedView(this);
        forEach(this.viewRef.rootNodes, (node) => {
            this.portalContainer.appendChild(node);
        });
        this.appRef.attachView(this.viewRef);
        this.document.body.appendChild(this.portalContainer);
    }
    open() {
        this.close();
        this.addContent();
    }
    close() {
        if (this.viewRef && this.portalContainer) {
            this.document.body.removeChild(this.portalContainer);
            this.viewRef.destroy();
            this.viewRef = null;
            this.portalContainer = null;
        }
    }
}
PortalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PortalComponent, deps: [{ token: i0.ApplicationRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
PortalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: PortalComponent, selector: "d-portal", viewQueries: [{ propertyName: "templateRef", first: true, predicate: ["templateRef"], descendants: true, static: true }], ngImport: i0, template: `
                   <ng-template #templateRef>
                        <ng-content></ng-content>
                    </ng-template>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: PortalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-portal',
                    template: `
                   <ng-template #templateRef>
                        <ng-content></ng-content>
                    </ng-template>`,
                    preserveWhitespaces: false,
                }]
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { templateRef: [{
                type: ViewChild,
                args: ['templateRef', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2RldnVpL3BvcnRhbC9wb3J0YWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsY0FBYyxFQUNkLFNBQVMsRUFFVCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDOztBQVVwQyxNQUFNLE9BQU8sZUFBZTtJQU0xQixZQUFvQixNQUFzQixFQUE0QixHQUFRO1FBQTFELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQTRCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFDNUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzNCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztTQUM3QjtJQUNILENBQUM7OzRHQWhDVSxlQUFlLGdEQU0wQixRQUFRO2dHQU5qRCxlQUFlLDBLQU5oQjs7O21DQUd1QjsyRkFHdEIsZUFBZTtrQkFSM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFOzs7bUNBR3VCO29CQUNqQyxtQkFBbUIsRUFBRSxLQUFLO2lCQUMzQjs7MEJBTzhDLE1BQU07MkJBQUMsUUFBUTs0Q0FIaEIsV0FBVztzQkFBdEQsU0FBUzt1QkFBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQXBwbGljYXRpb25SZWYsXG4gIENvbXBvbmVudCxcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBJbmplY3QsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZC1wb3J0YWwnLFxuICB0ZW1wbGF0ZTogYFxuICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVSZWY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+YCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFBvcnRhbENvbXBvbmVudCB7XG4gIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwb3J0YWxDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZVJlZicsIHsgc3RhdGljOiB0cnVlIH0pIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvYzogYW55KSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IHRoaXMuZG9jO1xuICB9XG5cbiAgYWRkQ29udGVudCgpIHtcbiAgICB0aGlzLnBvcnRhbENvbnRhaW5lciA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy52aWV3UmVmID0gdGhpcy50ZW1wbGF0ZVJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcyk7XG4gICAgZm9yRWFjaCh0aGlzLnZpZXdSZWYucm9vdE5vZGVzLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5wb3J0YWxDb250YWluZXIuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfSk7XG4gICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyh0aGlzLnZpZXdSZWYpO1xuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnBvcnRhbENvbnRhaW5lcik7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgICB0aGlzLmFkZENvbnRlbnQoKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIGlmICh0aGlzLnZpZXdSZWYgJiYgdGhpcy5wb3J0YWxDb250YWluZXIpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLnBvcnRhbENvbnRhaW5lcik7XG4gICAgICB0aGlzLnZpZXdSZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgICAgIHRoaXMucG9ydGFsQ29udGFpbmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==