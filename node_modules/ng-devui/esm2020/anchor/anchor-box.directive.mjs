import { ContentChildren, Directive, Input, QueryList } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { AnchorDirective } from './anchor.directive';
import * as i0 from "@angular/core";
export class AnchorBoxDirective {
    constructor() {
        this.isScrollingToTarget = false;
        this.activeChangeSubject = new Subject();
        this.activeChange = this.activeChangeSubject.asObservable();
        this.refreshAnchorMap = new Subject();
    }
    set anchorList(list) {
        if (this.sub) {
            this.sub.unsubscribe();
        }
        this.sub = new Subscription();
        this.anchorMap = {};
        this._anchorList = list;
        this._anchorList.toArray().forEach(targetAnchor => {
            this.anchorMap[targetAnchor.anchor] = targetAnchor;
            targetAnchor.boxElement = this;
            this.sub.add(targetAnchor.activeChangeSubject.pipe(filter(bool => !!bool)).subscribe(() => {
                this.activeChangeSubject.next(targetAnchor);
            }));
        });
        this.refreshAnchorMap.next();
    }
    get anchorList() {
        return this._anchorList;
    }
    forceActiveAnchor(anchorName, forceActiveSource = 'scroll', deactivateOtherAnchor = true) {
        this.anchorMap[anchorName].activeChangeBy = forceActiveSource;
        this.anchorMap[anchorName].isActive = true;
        if (deactivateOtherAnchor) {
            Object.keys(this.anchorMap)
                .filter(name => name !== anchorName)
                .map(name => this.anchorMap[name])
                .forEach(anchor => {
                anchor.activeChangeBy = forceActiveSource;
                anchor.isActive = false;
            });
        }
    }
    ngOnDestroy() {
        this.activeChangeSubject.complete();
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }
}
AnchorBoxDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AnchorBoxDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AnchorBoxDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: AnchorBoxDirective, selector: "[dAnchorBox]", inputs: { view: "view", defaultAnchor: "defaultAnchor", scrollTarget: "scrollTarget" }, queries: [{ propertyName: "anchorList", predicate: AnchorDirective, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AnchorBoxDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dAnchorBox]'
                }]
        }], propDecorators: { view: [{
                type: Input
            }], defaultAnchor: [{
                type: Input
            }], scrollTarget: [{
                type: Input
            }], anchorList: [{
                type: ContentChildren,
                args: [AnchorDirective, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5jaG9yLWJveC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZ1aS9hbmNob3IvYW5jaG9yLWJveC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFNckQsTUFBTSxPQUFPLGtCQUFrQjtJQUgvQjtRQUlTLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUMzQix3QkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLGlCQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBUTlELHFCQUFnQixHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO0tBK0NyRDtJQXpDQyxJQUNJLFVBQVUsQ0FBQyxJQUFnQztRQUM3QyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2hELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFlBQVksQ0FBQztZQUNuRCxZQUFZLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDVixZQUFZLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQzNFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDOUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNSLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELGlCQUFpQixDQUFDLFVBQWtCLEVBQUUsb0JBQThDLFFBQVEsRUFBRSxxQkFBcUIsR0FBRyxJQUFJO1FBQ3hILElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxHQUFHLGlCQUFpQixDQUFDO1FBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUMzQyxJQUFJLHFCQUFxQixFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztpQkFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztpQkFDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDakMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNoQixNQUFNLENBQUMsY0FBYyxHQUFHLGlCQUFpQixDQUFDO2dCQUMxQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0gsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7OytHQXpEVSxrQkFBa0I7bUdBQWxCLGtCQUFrQix1S0FpQlosZUFBZTsyRkFqQnJCLGtCQUFrQjtrQkFIOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztpQkFDekI7OEJBTVUsSUFBSTtzQkFBWixLQUFLO2dCQUlHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFRRixVQUFVO3NCQURiLGVBQWU7dUJBQUMsZUFBZSxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRDaGlsZHJlbiwgRGlyZWN0aXZlLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFuY2hvckRpcmVjdGl2ZSB9IGZyb20gJy4vYW5jaG9yLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbmNob3JBY3RpdmVDaGFuZ2VTb3VyY2UsIElBbmNob3JCb3ggfSBmcm9tICcuL2FuY2hvci50eXBlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2RBbmNob3JCb3hdJ1xufSlcbmV4cG9ydCBjbGFzcyBBbmNob3JCb3hEaXJlY3RpdmUgaW1wbGVtZW50cyBJQW5jaG9yQm94LCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgaXNTY3JvbGxpbmdUb1RhcmdldCA9IGZhbHNlO1xuICBwcml2YXRlIGFjdGl2ZUNoYW5nZVN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xuICBwdWJsaWMgYWN0aXZlQ2hhbmdlID0gdGhpcy5hY3RpdmVDaGFuZ2VTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICBzdWI6IFN1YnNjcmlwdGlvbjtcbiAgQElucHV0KCkgdmlldzoge1xuICAgIHRvcD86IG51bWJlcjtcbiAgICBib3R0b20/OiBudW1iZXI7XG4gIH07XG4gIEBJbnB1dCgpIGRlZmF1bHRBbmNob3I6IHN0cmluZztcbiAgQElucHV0KCkgc2Nyb2xsVGFyZ2V0OiBIVE1MRWxlbWVudDtcbiAgcmVmcmVzaEFuY2hvck1hcDogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICBhbmNob3JNYXA6IHtcbiAgICBbYW5jaG9yOiBzdHJpbmddOiBBbmNob3JEaXJlY3RpdmU7XG4gIH07XG5cbiAgX2FuY2hvckxpc3Q6IFF1ZXJ5TGlzdDxBbmNob3JEaXJlY3RpdmU+O1xuICBAQ29udGVudENoaWxkcmVuKEFuY2hvckRpcmVjdGl2ZSwge2Rlc2NlbmRhbnRzOiB0cnVlfSlcbiAgc2V0IGFuY2hvckxpc3QobGlzdDogUXVlcnlMaXN0PEFuY2hvckRpcmVjdGl2ZT4pIHtcbiAgICBpZiAodGhpcy5zdWIpIHtcbiAgICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIHRoaXMuc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgIHRoaXMuYW5jaG9yTWFwID0ge307XG4gICAgdGhpcy5fYW5jaG9yTGlzdCA9IGxpc3Q7XG4gICAgdGhpcy5fYW5jaG9yTGlzdC50b0FycmF5KCkuZm9yRWFjaCh0YXJnZXRBbmNob3IgPT4ge1xuICAgICAgdGhpcy5hbmNob3JNYXBbdGFyZ2V0QW5jaG9yLmFuY2hvcl0gPSB0YXJnZXRBbmNob3I7XG4gICAgICB0YXJnZXRBbmNob3IuYm94RWxlbWVudCA9IHRoaXM7XG4gICAgICB0aGlzLnN1Yi5hZGQoXG4gICAgICAgIHRhcmdldEFuY2hvci5hY3RpdmVDaGFuZ2VTdWJqZWN0LnBpcGUoZmlsdGVyKGJvb2wgPT4gISFib29sKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZUNoYW5nZVN1YmplY3QubmV4dCh0YXJnZXRBbmNob3IpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWZyZXNoQW5jaG9yTWFwLm5leHQoKTtcbiAgfVxuICBnZXQgYW5jaG9yTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYW5jaG9yTGlzdDtcbiAgfVxuXG4gIGZvcmNlQWN0aXZlQW5jaG9yKGFuY2hvck5hbWU6IHN0cmluZywgZm9yY2VBY3RpdmVTb3VyY2U6IEFuY2hvckFjdGl2ZUNoYW5nZVNvdXJjZSA9ICdzY3JvbGwnLCBkZWFjdGl2YXRlT3RoZXJBbmNob3IgPSB0cnVlKSB7XG4gICAgdGhpcy5hbmNob3JNYXBbYW5jaG9yTmFtZV0uYWN0aXZlQ2hhbmdlQnkgPSBmb3JjZUFjdGl2ZVNvdXJjZTtcbiAgICB0aGlzLmFuY2hvck1hcFthbmNob3JOYW1lXS5pc0FjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGRlYWN0aXZhdGVPdGhlckFuY2hvcikge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5hbmNob3JNYXApXG4gICAgICAgIC5maWx0ZXIobmFtZSA9PiBuYW1lICE9PSBhbmNob3JOYW1lKVxuICAgICAgICAubWFwKG5hbWUgPT4gdGhpcy5hbmNob3JNYXBbbmFtZV0pXG4gICAgICAgIC5mb3JFYWNoKGFuY2hvciA9PiB7XG4gICAgICAgICAgYW5jaG9yLmFjdGl2ZUNoYW5nZUJ5ID0gZm9yY2VBY3RpdmVTb3VyY2U7XG4gICAgICAgICAgYW5jaG9yLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmFjdGl2ZUNoYW5nZVN1YmplY3QuY29tcGxldGUoKTtcbiAgICBpZiAodGhpcy5zdWIpIHtcbiAgICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=