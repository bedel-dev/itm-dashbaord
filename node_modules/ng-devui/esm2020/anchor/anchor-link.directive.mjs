import { Directive, forwardRef, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { scrollAnimate } from 'ng-devui/utils';
import { AnchorBoxDirective } from './anchor-box.directive';
import * as i0 from "@angular/core";
import * as i1 from "./anchor-box.directive";
export class AnchorLinkDirective {
    constructor(box) {
        this.bindAnchorAfterBoxReady = () => {
            if (this.boxElement.anchorMap) {
                setTimeout(() => {
                    this.anchorBlock = this.boxElement.anchorMap[this.anchorName];
                }, 0);
            }
            else {
                this.bindingAnchorTimer = setTimeout(this.bindAnchorAfterBoxReady, 500);
            }
        };
        this.boxElement = box;
    }
    get anchorActiveClass() {
        return this.anchorBlock && this.anchorBlock.isActive ? this.anchorActive || '' : '';
    }
    set anchorName(anchor) {
        this._anchorName = anchor;
        this.bindAnchorAfterBoxReady();
    }
    get anchorName() {
        return this._anchorName;
    }
    ngOnInit() {
        this.subscribeAnchorMapChange();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    subscribeAnchorMapChange() {
        if (this.boxElement) {
            this.subscription = this.boxElement.refreshAnchorMap.subscribe(() => {
                if (this.bindingAnchorTimer) {
                    clearTimeout(this.bindingAnchorTimer);
                    this.bindingAnchorTimer = undefined;
                }
                this.bindAnchorAfterBoxReady();
            });
        }
    }
    scrollToAnchor(activeChangeBy) {
        if (typeof document === 'undefined') {
            return;
        }
        if (!this.anchorBlock) {
            return;
        }
        const callback = () => {
            setTimeout(() => {
                this.boxElement.forceActiveAnchor(this.anchorName, activeChangeBy || 'anchor-link');
                this.boxElement.isScrollingToTarget = false;
            }, 120);
        };
        ((container, anchor) => {
            let containerScrollTop = container.scrollTop;
            let containerOffsetTop = container.getBoundingClientRect().top;
            if (container === document.documentElement) {
                containerScrollTop += document.body.scrollTop; // scrollTop兼容性问题
                containerOffsetTop = 0; // offsettop抵消
            }
            scrollAnimate(container, containerScrollTop, containerScrollTop +
                anchor.getBoundingClientRect().top -
                containerOffsetTop -
                ((this.boxElement.view && this.boxElement.view.top) || 0), undefined, undefined, callback);
        })(this.boxElement.scrollTarget || document.documentElement, this.anchorBlock.element);
        this.boxElement.isScrollingToTarget = true;
    }
}
AnchorLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AnchorLinkDirective, deps: [{ token: forwardRef(() => AnchorBoxDirective) }], target: i0.ɵɵFactoryTarget.Directive });
AnchorLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: AnchorLinkDirective, selector: "[dAnchorLink]", inputs: { anchorName: ["dAnchorLink", "anchorName"], anchorActive: "anchorActive" }, host: { listeners: { "click": "scrollToAnchor()" }, properties: { "class": "this.anchorActiveClass" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AnchorLinkDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dAnchorLink]',
                }]
        }], ctorParameters: function () { return [{ type: i1.AnchorBoxDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => AnchorBoxDirective)]
                }] }]; }, propDecorators: { anchorActiveClass: [{
                type: HostBinding,
                args: ['class']
            }], anchorName: [{
                type: Input,
                args: ['dAnchorLink']
            }], anchorActive: [{
                type: Input
            }], scrollToAnchor: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,