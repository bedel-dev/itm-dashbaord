import { Directive, ElementRef, HostListener, Input } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export class AnchorDirective {
    constructor(el) {
        this.el = el;
        this.anchorActive = 'active';
        this.activeChangeSubject = new ReplaySubject(1);
        this.REACH_TOP_VISION_OFFSET = 50;
        this.THROTTLE_DELAY = 100;
        this.THROTTLE_TRIGGER = 600;
        this.throttle = () => {
            const fn = this.checkActiveStatus;
            const time = Date.now();
            if (this.scrollTimer) {
                clearTimeout(this.scrollTimer);
            }
            if (!this.scrollPreStart) {
                this.scrollPreStart = time;
            }
            if (time - this.scrollPreStart > this.THROTTLE_TRIGGER) {
                fn();
                this.scrollPreStart = null;
                this.scrollTimer = null;
            }
            else {
                this.scrollTimer = setTimeout(() => {
                    fn();
                    this.scrollPreStart = null;
                    this.scrollTimer = null;
                }, this.THROTTLE_DELAY);
            }
        };
        this.checkActiveStatus = (activeChangeBy) => {
            if (this.boxElement.isScrollingToTarget) {
                return;
            }
            const top = this.element.getBoundingClientRect().top - ((this.boxElement.view && this.boxElement.view.top) || 0);
            const bottom = this.element.getBoundingClientRect().bottom - ((this.boxElement.view && this.boxElement.view.top) || 0);
            // 首个个特殊处理
            if (this.anchor === this.boxElement.defaultAnchor) {
                this.activeChangeBy = activeChangeBy || 'scroll';
                this.isActive = bottom > this.REACH_TOP_VISION_OFFSET;
                return;
            }
            // 默认处理
            this.activeChangeBy = activeChangeBy || 'scroll';
            this.isActive = bottom > this.REACH_TOP_VISION_OFFSET && top < this.REACH_TOP_VISION_OFFSET;
        };
        this.element = this.el.nativeElement;
    }
    set isActive(active) {
        this._isActive = active;
        this.activeChangeSubject.next(active);
    }
    get isActive() {
        return this._isActive;
    }
    set boxElement(box) {
        this._boxElement = box;
        this.updateScrollListenTarget();
    }
    get boxElement() {
        return this._boxElement;
    }
    ngAfterViewInit() {
        this.activeChangeSubscription = this.activeChangeSubject.asObservable().subscribe((active) => {
            if (this.lastActiveBy) {
                this.element.classList.remove(this.lastActiveBy);
            }
            if (active) {
                this.element.classList.add(this.anchorActive);
                this.lastActiveBy = 'anchor-active-by-' + this.activeChangeBy;
                // setTimeout是为了this.lastActiveBy每次都能被再次触发
                setTimeout(() => {
                    this.element.classList.add(this.lastActiveBy);
                }, 0);
            }
            else {
                this.element.classList.remove(this.anchorActive);
            }
        });
        setTimeout(() => {
            this.checkActiveStatus('initial');
        });
    }
    ngOnDestroy() {
        this.scrollListenTarget.removeEventListener('scroll', this.throttle);
        if (this.activeChangeSubscription) {
            this.activeChangeSubscription.unsubscribe();
        }
    }
    beFocused() {
        this.boxElement.forceActiveAnchor(this.anchor, 'click-inside');
        this.boxElement.isScrollingToTarget = false;
    }
    updateScrollListenTarget() {
        if (this.scrollListenTarget) {
            return;
        }
        if (this.boxElement && typeof window !== 'undefined') {
            this.scrollListenTarget = this.boxElement.scrollTarget || window; // window有scroll事件，document.documentElement没有scroll事件
        }
        this.scrollListenTarget.addEventListener('scroll', this.throttle, { passive: true });
    }
}
AnchorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AnchorDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
AnchorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: AnchorDirective, selector: "[dAnchor]", inputs: { anchor: ["dAnchor", "anchor"], anchorActive: "anchorActive" }, host: { listeners: { "click": "beFocused()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AnchorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dAnchor]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { anchor: [{
                type: Input,
                args: ['dAnchor']
            }], anchorActive: [{
                type: Input
            }], beFocused: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,