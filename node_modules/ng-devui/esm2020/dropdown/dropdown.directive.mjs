import { __decorate, __metadata } from "tslib";
import { CdkOverlayOrigin } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Inject, Input, Optional, Output, QueryList, SkipSelf } from '@angular/core';
import { addClassToOrigin, DevConfigService, formWithDropDown, removeClassFromOrigin, WithConfig } from 'ng-devui/utils';
import { fromEvent, merge, ReplaySubject } from 'rxjs';
import { debounceTime, delay, filter, mapTo, tap } from 'rxjs/operators';
import { DropDownService } from './dropdown.service';
import * as i0 from "@angular/core";
import * as i1 from "./dropdown.service";
import * as i2 from "ng-devui/utils";
export class DropDownDirective {
    constructor(dropdownService, cdr, el, devConfigService, parentDropdown, doc) {
        this.dropdownService = dropdownService;
        this.cdr = cdr;
        this.el = el;
        this.devConfigService = devConfigService;
        this.parentDropdown = parentDropdown;
        this.doc = doc;
        this.mouseenterFlag = false;
        this.startAnimation = false;
        this.addClass = true;
        this.disabled = false;
        this.showAnimation = true;
        /**
         * dropdown触发方式
         */
        this.trigger = 'click';
        /**
         * 关闭区域，默认点击菜单链接也会关闭，blank点击其他空白区域才关闭
         */
        this.closeScope = 'all';
        this.closeOnMouseLeaveMenu = false;
        this.toggleEvent = new EventEmitter();
        this.visibleSubject = new ReplaySubject(1);
        this._isOpen = false;
        this.document = this.doc;
    }
    /**
     * 控制是否打开dropdown，绑定一个devui-dropdown-open class
     */
    set isOpen(value) {
        this._isOpen = !!value;
        if (this.disabled) {
            return;
        }
        if (this.isOpen) {
            this.visibleSubject.next(true);
            this.focusToggleElement();
            this.dropdownService.open(this);
            addClassToOrigin(this.toggleEl);
            setTimeout(() => {
                this.startAnimation = true;
                this.cdr.detectChanges();
            });
        }
        else {
            this.startAnimation = false;
            this.visibleSubject.next(false);
            this.dropdownService.close(this);
            removeClassFromOrigin(this.toggleEl);
        }
        this.toggleEvent.emit(this.isOpen);
    }
    get isOpen() {
        return this._isOpen;
    }
    set appendToBody(bool) {
        this._appendToBody = bool === true;
        this.updateCdkConnectedOverlayOrigin();
    }
    get appendToBody() {
        return this._appendToBody;
    }
    set dropDownMenu(dropdownMenu) {
        // init drop down menu
        this.menuEl = dropdownMenu.el;
    }
    set dropDownToggle(dropdownToggle) {
        // init toggle element
        this.toggleEl = dropdownToggle.el;
        this.updateCdkConnectedOverlayOrigin();
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'trigger')) {
            this.handleHoverSubscriptionIfTriggerIsHover();
        }
    }
    ngOnDestroy() {
        this.dropdownService.close(this);
        this.unsubscribeHoverAction();
    }
    ngAfterContentInit() {
        this.handleHoverSubscriptionIfTriggerIsHover();
    }
    toggle() {
        this.isOpen = !this.isOpen;
        return this.isOpen;
    }
    focusToggleElement() {
        if (this.toggleEl) {
            this.toggleEl.nativeElement.focus();
        }
    }
    updateCdkConnectedOverlayOrigin() {
        if (this.toggleEl && this.appendToBody === true) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(formWithDropDown(this.toggleEl) || this.toggleEl.nativeElement);
        }
        else {
            this.cdkConnectedOverlayOrigin = undefined;
        }
    }
    subscribeHoverAction(observable) {
        if (!this.hoverSubscription) {
            this.hoverSubscription = observable.pipe(debounceTime(50)).subscribe((isOpen) => {
                if (this.mouseenterFlag) {
                    this.mouseenterFlag = false;
                    return;
                }
                if (!this.disabled && this.isOpen !== isOpen) {
                    this.isOpen = isOpen;
                }
            });
        }
    }
    unsubscribeHoverAction() {
        if (this.hoverSubscription) {
            this.hoverSubscription.unsubscribe();
            this.hoverSubscription = null;
        }
    }
    handleHoverSubscriptionIfTriggerIsHover() {
        if (this.trigger === 'hover') {
            const states = merge(fromEvent(this.el.nativeElement, 'mouseenter').pipe(mapTo(true)), fromEvent(this.el.nativeElement, 'mouseleave').pipe(delay(200), filter((event) => {
                if (this.isOpen && this.appendToBody === true) {
                    // 冒泡模拟的relatedTarget， 和作用于dropdown本身event.relatedTarget
                    // menu（子） -> toggle（父） 冒泡模拟的用于离开菜单的时候判断不判断overlay的div层，即只判断menuEl.nativeElement
                    // toggle（父） -> menu（子） 离开元素本身的需要判断是否落入了overlay的div层，即只判断menuEl.nativeElement.parentElement
                    const relatedTarget = event.relatedTarget || (event['originEvent'] && event['originEvent'].relatedTarget);
                    return !(this.menuEl?.nativeElement && relatedTarget &&
                        (this.menuEl?.nativeElement.parentElement?.contains(event.relatedTarget)
                            || this.menuEl?.nativeElement.parentElement?.parentElement?.contains(event.relatedTarget) // 套了两层div增加判断
                            || this.menuEl?.nativeElement.contains(relatedTarget)
                            || this.dropdownChildren.some(children => children !== this
                                // appendToBody的时候可能会没有实例化不在document上需要做判断有没有parentElement
                                && (children.menuEl?.nativeElement.parentElement?.contains(event.relatedTarget)
                                    || children.menuEl?.nativeElement.contains(relatedTarget)))));
                }
                else {
                    return true;
                }
            }), tap((event) => {
                if (this.parentDropdown) {
                    this.simulateEventDispatch(event, this.parentDropdown.el.nativeElement);
                }
            }), mapTo(false)));
            this.subscribeHoverAction(states);
        }
        else {
            this.unsubscribeHoverAction();
        }
    }
    simulateEventDispatch($event, target) {
        const event = this.document.createEvent('MouseEvents');
        event.initEvent($event.type, true, true);
        event['originEvent'] = $event['originEvent'] || $event;
        if (!target) {
            target = this.el.nativeElement;
        }
        target.dispatchEvent(event);
    }
}
DropDownDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DropDownDirective, deps: [{ token: i1.DropDownService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i2.DevConfigService }, { token: DropDownDirective, optional: true, skipSelf: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
DropDownDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DropDownDirective, selector: "[dDropDown]", inputs: { isOpen: "isOpen", disabled: "disabled", showAnimation: "showAnimation", trigger: "trigger", closeScope: "closeScope", closeOnMouseLeaveMenu: "closeOnMouseLeaveMenu" }, outputs: { toggleEvent: "toggleEvent" }, host: { properties: { "class.devui-dropdown-open": "this.isOpen", "class.devui-dropdown": "this.addClass", "class.devui-dropdown-animation": "this.showAnimation" } }, providers: [DropDownService], queries: [{ propertyName: "dropdownChildren", predicate: DropDownDirective, descendants: true }], exportAs: ["d-dropdown"], usesOnChanges: true, ngImport: i0 });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], DropDownDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DropDownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDropDown]',
                    exportAs: 'd-dropdown',
                    providers: [DropDownService],
                }]
        }], ctorParameters: function () { return [{ type: i1.DropDownService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i2.DevConfigService }, { type: DropDownDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { dropdownChildren: [{
                type: ContentChildren,
                args: [DropDownDirective, { descendants: true }]
            }], isOpen: [{
                type: HostBinding,
                args: ['class.devui-dropdown-open']
            }, {
                type: Input
            }], addClass: [{
                type: HostBinding,
                args: ['class.devui-dropdown']
            }], disabled: [{
                type: Input
            }], showAnimation: [{
                type: HostBinding,
                args: ['class.devui-dropdown-animation']
            }, {
                type: Input
            }], trigger: [{
                type: Input
            }], closeScope: [{
                type: Input
            }], closeOnMouseLeaveMenu: [{
                type: Input
            }], toggleEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,