import { animate, AnimationBuilder, style } from '@angular/animations';
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Host, HostBinding, HostListener, Inject, Renderer2 } from '@angular/core';
import { AnimationCurves, AnimationDuration } from 'ng-devui/utils';
import { WindowRef } from 'ng-devui/window-ref';
import { fromEvent } from 'rxjs';
import { filter } from 'rxjs/operators';
import { DropDownDirective } from './dropdown.directive';
import * as i0 from "@angular/core";
import * as i1 from "./dropdown.directive";
import * as i2 from "ng-devui/window-ref";
import * as i3 from "@angular/animations";
export class DropDownMenuDirective {
    constructor(dropdown, el, render, windowRef, builder, doc) {
        this.dropdown = dropdown;
        this.el = el;
        this.render = render;
        this.windowRef = windowRef;
        this.builder = builder;
        this.doc = doc;
        this.display = 'none';
        this.tabIndex = -1;
        this.addClass = true;
        this.currentValue = false;
        this.hide = (event) => {
            this.dropdown.toggle();
        };
        this.keydownEscapeEvent$ = fromEvent(this.doc.body, 'keydown').pipe(
        // chrome 为 Escape , ie 11为Esc
        filter(event => event.key === 'Escape' || event.key === 'Esc'));
    }
    ngOnInit() {
        this.dropdown.dropDownMenu = this;
        this.subscription = this.dropdown.visibleSubject.subscribe(value => {
            if (value !== this.currentValue) {
                this.currentValue = value;
                if (this.keydownEscapeSub) {
                    this.keydownEscapeSub.unsubscribe();
                }
                if (value) {
                    this.keydownEscapeSub = this.keydownEscapeEvent$.subscribe(event => {
                        if (event.defaultPrevented) {
                            return;
                        }
                        this.hide(event);
                    });
                }
                if (this.dropdown.appendToBody) {
                    this.render.setStyle(this.el.nativeElement, 'display', 'block'); // 立马生效不等host binding绑定
                    this.display = 'block';
                    return;
                }
                if (this.player) { // 此处保留一个防止点击过快
                    this.player.finish();
                }
                if (this.dropdown.showAnimation) {
                    const direction = this.calcPopDirection(value);
                    const metadata = value ? this.fadeIn(direction) : this.fadeOut(direction);
                    const factory = this.builder.build(metadata);
                    this.player = factory.create(this.el.nativeElement);
                    const player = this.player;
                    this.player.onDone(() => {
                        if (!value) {
                            this.render.setStyle(this.el.nativeElement, 'display', 'none');
                            this.display = 'none';
                        }
                        player.destroy();
                        if (this.player === player) {
                            this.player = undefined;
                        }
                    });
                    this.player.onStart(() => {
                        if (value) {
                            this.render.setStyle(this.el.nativeElement, 'display', 'block');
                            this.display = 'block';
                        }
                    });
                    this.player.play();
                }
                else {
                    this.render.setStyle(this.el.nativeElement, 'display', value ? 'block' : 'none');
                    this.display = value ? 'block' : 'none';
                }
            }
        });
    }
    ngOnDestroy() {
        if (this.keydownEscapeSub) {
            this.keydownEscapeSub.unsubscribe();
        }
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    calcPopDirection(value) {
        const dropdownMenuElement = this.el.nativeElement;
        const elementHeight = dropdownMenuElement.offsetHeight;
        const bottomDistance = this.windowRef.innerHeight - this.dropdown.el.nativeElement.getBoundingClientRect().bottom;
        const isBottomEnough = bottomDistance >= elementHeight;
        if (!value) {
            return this.popDirectionCache;
        }
        else {
            if (!isBottomEnough) {
                this.render.setStyle(dropdownMenuElement, 'bottom', '100%');
                this.render.setStyle(dropdownMenuElement, 'top', 'auto');
                this.popDirectionCache = 'top';
                return 'top';
            }
            else {
                this.render.removeStyle(dropdownMenuElement, 'bottom');
                this.render.removeStyle(dropdownMenuElement, 'top');
                this.popDirectionCache = 'bottom';
                return 'bottom';
            }
        }
    }
    mouseEnter(event) {
        this.dropdown.mouseenterFlag = true;
    }
    mouseLeave(event) {
        event.stopPropagation();
        this.dropdown.mouseenterFlag = false;
        if ((this.dropdown.appendToBody && this.dropdown.trigger === 'hover')
            || (this.dropdown.trigger === 'click' && this.dropdown.closeOnMouseLeaveMenu)) {
            if (this.dropdown.toggleEl?.nativeElement.contains(event.relatedTarget)
                || this.dropdown.dropdownChildren.some(children => children.menuEl !== this.el
                    && children.menuEl?.nativeElement.parentElement?.contains(event.relatedTarget))) {
                return;
            }
            else {
                if (this.dropdown.trigger === 'hover') {
                    this.dropdown.simulateEventDispatch(event);
                }
                else {
                    const relatedTarget = event['originEvent'] && event['originEvent'].relatedTarget;
                    if (relatedTarget && (this.dropdown.toggleEl?.nativeElement.contains(relatedTarget)
                        || this.dropdown.dropdownChildren.some(children => children.menuEl?.nativeElement.contains(relatedTarget)))) {
                        return;
                    }
                    this.dropdown.isOpen = false;
                }
            }
        }
        return false;
    }
    fadeIn(direction) {
        switch (direction) {
            case 'top':
                return [
                    style({ transform: 'scaleY(0.8) translateY(4px)', opacity: 0.8, transformOrigin: '0% 100%' }),
                    animate(`200ms ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.9999) translateY(0)', opacity: 1, transformOrigin: '0% 100%' })),
                ];
            case 'bottom':
            default:
                return [
                    style({ transform: 'scaleY(0.8)  translateY(-4px)', opacity: 0.8, transformOrigin: '0% 0%' }),
                    animate(`200ms ${AnimationCurves.EASE_OUT}`, style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 0%' })),
                ];
        }
    }
    fadeOut(direction) {
        switch (direction) {
            case 'top':
                return [
                    style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 100%' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.8)  translateY(4px)', opacity: 0.8, transformOrigin: '0% 100%' }))
                ];
            case 'bottom':
            default:
                return [
                    style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 0%' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.8)  translateY(-4px)', opacity: 0.8, transformOrigin: '0% 0%' }))
                ];
        }
    }
}
DropDownMenuDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DropDownMenuDirective, deps: [{ token: i1.DropDownDirective, host: true }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i2.WindowRef }, { token: i3.AnimationBuilder }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
DropDownMenuDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DropDownMenuDirective, selector: "[dDropDownMenu]", host: { listeners: { "mouseenter": "mouseEnter($event)", "mouseleave": "mouseLeave($event)" }, properties: { "style.display": "this.display", "attr.tabIndex": "this.tabIndex", "class.devui-dropdown-menu": "this.addClass" } }, exportAs: ["d-dropdown-menu"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DropDownMenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDropDownMenu]',
                    exportAs: 'd-dropdown-menu',
                }]
        }], ctorParameters: function () { return [{ type: i1.DropDownDirective, decorators: [{
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.WindowRef }, { type: i3.AnimationBuilder }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { display: [{
                type: HostBinding,
                args: ['style.display']
            }], tabIndex: [{
                type: HostBinding,
                args: ['attr.tabIndex']
            }], addClass: [{
                type: HostBinding,
                args: ['class.devui-dropdown-menu']
            }], mouseEnter: [{
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }], mouseLeave: [{
                type: HostListener,
                args: ['mouseleave', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,