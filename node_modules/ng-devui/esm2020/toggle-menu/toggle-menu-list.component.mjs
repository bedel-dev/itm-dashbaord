import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { I18nService } from 'ng-devui/i18n';
import { fadeInOut } from 'ng-devui/utils';
import * as i0 from "@angular/core";
import * as i1 from "ng-devui/i18n";
import * as i2 from "@angular/cdk/scrolling";
import * as i3 from "ng-devui/checkbox";
import * as i4 from "ng-devui/loading";
import * as i5 from "@angular/common";
import * as i6 from "ng-devui/utils";
import * as i7 from "@angular/forms";
export class ToggleMenuListComponent {
    constructor(changeDetectorRef, i18n) {
        this.changeDetectorRef = changeDetectorRef;
        this.i18n = i18n;
        /**
         * 【必选】下拉选项资源，支持Array<string>, Array<{key: value}>
         */
        this.options = [];
        /**
         * 【当传入资源（options）类型为Array<{key: value}，必选】针对传入资源options的每项对应字段做禁用操作的key
         */
        this.optionDisabledKey = '';
        /**
         * 【当传入资源（options）类型为Array<{key: value}，必选】针对传入资源options的每项对应字段禁止变更的key
         */
        this.optionImmutableKey = '';
        /**
         * 【当传入资源（options）类型为Array<{key: value}，可选】如使用分组需设置
         */
        this.optionGroupKey = '';
        /**
         * 【可选】是否在搜索过滤状态中
         */
        this.isFiltering = false;
        /**
         *  【可选】启用数据懒加载，默认不启用
         */
        this.enableLazyLoad = false;
        /**
         * 【可选】是否虚拟滚动
         */
        this.virtualScroll = false;
        /**
         * customViewTemplate的方向，支持下方和右方
         */
        this.customViewDirection = 'bottom';
        this.selectIndex = -1;
        this.multiItems = [];
        /**
         * 【可选】是否支持全选
         */
        this.isSelectAll = false;
        /**
         * 【可选】配置多选的时候是否维持原数组排序还是用户选择的顺序排序，默认是用户顺序
         */
        this.keepMultipleOrder = 'user-select';
        this.closeScope = 'all';
        /**
         * select下拉toggle事件，值为true或false
         */
        this.toggleChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.loadMore = new EventEmitter();
        this._scrollHeight = '300px';
        this.availableOptions = [];
        this.activeIndex = -1;
        this.allChecked = false;
        this.halfChecked = false;
        this.showLoading = false;
        this.virtualScrollViewportSizeMightChange = false;
        this.virtualScrollItemSize = {
            sm: 30,
            normal: 36,
            lg: 50,
            space: 4,
        };
        this.choose = ({ option, index, event }) => {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            if (typeof option === 'object' && Object.keys(option).length === 0) {
                this.toggleChange.emit(false);
                return;
            }
            if (this.optionDisabledKey && option[this.optionDisabledKey]) {
                return;
            }
            if (this.optionImmutableKey && option[this.optionImmutableKey]) {
                return;
            }
            if (this.optionGroupKey && option[this.optionGroupKey]) {
                return;
            }
            if (this.multiple) {
                const indexOfOption = this.multiItems.findIndex((item) => JSON.stringify(item.option) === JSON.stringify(option));
                if (indexOfOption === -1) {
                    this.multiItems.push({ id: index, option });
                }
                else {
                    this.multiItems.splice(indexOfOption, 1);
                }
                if (this.keepMultipleOrder === 'origin') {
                    this.multiItems.sort((a, b) => a.id - b.id);
                }
                this.value = this.multiItems.map((item) => item.option);
            }
            else {
                this.value = option;
                this.activeIndex = index;
                this.selectIndex = index;
                if (this.closeScope === 'all') {
                    this.toggleChange.emit(false);
                }
                if (this.virtualScrollViewportSizeMightChange) {
                    // 解决虚拟滚动更新options长度展开前无法获取正确高度影响
                    setTimeout(() => {
                        if (this.virtualScrollViewportSizeMightChange && this.virtualScrollViewport) {
                            this.virtualScrollViewportSizeMightChange = false;
                            this.virtualScrollViewport.checkViewportSize();
                        }
                    }, 0);
                }
            }
            this.valueChange.emit({ value: this.value, multiItems: this.multiItems, option, event, index });
            this.setAvailableOptions();
            this.setChecked(this.value);
        };
    }
    /**
     * 【可选】下拉菜单高度，建议使用px作为高度单位
     */
    set scrollHeight(value) {
        this._scrollHeight = `${parseInt(value, 10)}px`;
    }
    get scrollHeight() {
        return this._scrollHeight;
    }
    get realVirtualScrollItemSize() {
        const itemSize = (this.templateItemSize || this.virtualScrollItemSize[this.size || 'normal']) + this.virtualScrollItemSize.space;
        const num = Math.round(this.scrollHeightNum / itemSize) || 10;
        this.minBuffer = num * 1.5 * itemSize;
        this.maxBuffer = num * 2.5 * itemSize;
        return itemSize;
    }
    ngOnInit() {
        this.setI18nText();
    }
    ngOnChanges(changes) {
        if (changes.options) {
            this.availableOptions = this.options;
            this.setAvailableOptions();
            // 显示数据变更，需要判断全选半选状态
            if (this.isSelectAll) {
                const selectedItemForFilterOptions = [];
                this.multiItems.forEach((item) => {
                    this.availableOptions.forEach((option) => {
                        if (item['id'] === option['id']) {
                            selectedItemForFilterOptions.push(item);
                        }
                    });
                });
                this.setChecked(selectedItemForFilterOptions);
            }
            if (!this.hasSelectIndex &&
                !this.multiple &&
                (!this.value || (this.availableOptions && !this.availableOptions.find((option) => option.option === this.value)))) {
                this.selectIndex = this.isFiltering && this.availableOptions && this.availableOptions.length > 0 ? 0 : -1;
            }
            if (this.virtualScroll && this.virtualScrollViewport) {
                this.virtualScrollViewportSizeMightChange = true;
                this.virtualScrollViewport.checkViewportSize();
            }
            this.changeDetectorRef.markForCheck();
        }
        if (changes.value) {
            this.setAvailableOptions();
        }
        if (changes.eventHandle && changes.eventHandle.currentValue) {
            const evt = changes['eventHandle'].currentValue;
            const { event, type } = evt;
            switch (type) {
                case 'keydown.esc':
                    this.onEscKeyup(event);
                    break;
                case 'keydown.ArrowUp':
                    this.handleKeyUpEvent(event);
                    break;
                case 'keydown.ArrowDown':
                    this.handleKeyDownEvent(event);
                    break;
                case 'keydown.enter':
                    this.handleKeyEnterEvent(event);
                    break;
            }
        }
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
    setI18nText() {
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nCommonText = data.common;
        });
    }
    setAvailableOptions() {
        if (!Array.isArray(this.availableOptions)) {
            return;
        }
        const _value = this.value ? (this.multiple ? this.value : [this.value]) : [];
        this.availableOptions = this.availableOptions.map((item, index) => item.id >= 0 && item.option
            ? {
                isChecked: _value.findIndex((i) => JSON.stringify(i) === JSON.stringify(item.option)) > -1,
                id: item.id,
                option: item.option,
            }
            : { isChecked: _value.findIndex((i) => JSON.stringify(i) === JSON.stringify(item)) > -1, id: index, option: item });
    }
    setChecked(selectedItem) {
        if (!selectedItem) {
            return;
        }
        if (!this.isSelectAll) {
            return;
        }
        this.halfChecked = false;
        if (selectedItem.length === this.availableOptions.length) {
            this.allChecked = true;
        }
        else if (selectedItem.length === 0) {
            this.allChecked = false;
        }
        else {
            this.halfChecked = true;
        }
    }
    selectAll() {
        const mutableOption = this.optionImmutableKey
            ? this.availableOptions.filter((item) => !item.option[this.optionImmutableKey])
            : this.availableOptions;
        const selectedImmutableOption = this.optionImmutableKey ? this.multiItems.filter((item) => item.option[this.optionImmutableKey]) : [];
        if (mutableOption && mutableOption.length > this.multiItems.length - selectedImmutableOption.length) {
            mutableOption.forEach((item) => {
                const indexOfOption = this.multiItems.findIndex((i) => JSON.stringify(i.option) === JSON.stringify(item.option));
                if (indexOfOption === -1) {
                    this.multiItems.push({ id: item.id, option: item.option });
                }
            });
        }
        else {
            this.multiItems = [...selectedImmutableOption];
        }
        this.value = this.multiItems.map((item) => item.option);
        this.valueChange.emit({ value: this.value, multiItems: this.multiItems });
        this.setChecked(this.value);
    }
    trackByFn(index, item) {
        return index;
    }
    onEscKeyup(event) {
        if (event) {
            event.stopPropagation();
        }
        this.toggleChange.emit(false);
    }
    handleKeyUpEvent(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.selectIndex = this.selectIndex === 0 || this.selectIndex === -1 ? this.availableOptions.length - 1 : this.selectIndex - 1;
        this.scrollToActive();
    }
    handleKeyDownEvent(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.selectIndex = this.selectIndex === this.availableOptions.length - 1 ? 0 : this.selectIndex + 1;
        this.scrollToActive();
    }
    handleKeyEnterEvent(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        const item = this.availableOptions[this.selectIndex];
        if (item) {
            this.choose({ option: item.option, index: item.id, event: null });
        }
        else if (this.closeScope === 'all') {
            this.toggleChange.emit(false);
        }
    }
    scrollToActive() {
        const that = this;
        setTimeout(() => {
            try {
                const selectIndex = that.selectIndex + (that.isSelectAll ? 1 : 0); // 多了个全选会导致问题，index需要加1
                const scrollPane = that.dropdownUl.nativeElement.children[selectIndex];
                if (scrollPane.scrollIntoViewIfNeeded) {
                    scrollPane.scrollIntoViewIfNeeded(false);
                }
                else {
                    const containerInfo = that.dropdownUl.nativeElement.getBoundingClientRect();
                    const elementInfo = scrollPane.getBoundingClientRect();
                    if (elementInfo.bottom > containerInfo.bottom || elementInfo.top < containerInfo.top) {
                        scrollPane.scrollIntoView(false);
                    }
                }
            }
            catch (e) { }
        });
    }
    resetIndex(resetSelectIndex = true) {
        this.selectIndex = resetSelectIndex ? -1 : 0;
        this.activeIndex = -1;
        this.changeDetectorRef.markForCheck();
    }
    showSelectAll() {
        return this.isSelectAll && this.multiple && this.availableOptions.length > 0;
    }
    getVirtualScrollHeight(len, size) {
        if (len > 0) {
            let height = (this.templateItemSize || this.virtualScrollItemSize[size || 'normal']) * len + this.virtualScrollItemSize.space * (len - 1);
            if (this.isSelectAll && this.multiple) {
                height += this.virtualScrollItemSize[size ? size : 'normal'] + this.virtualScrollItemSize.space;
            }
            const scrollHeight = parseInt(this.scrollHeight, 10);
            this.scrollHeightNum = height > scrollHeight ? scrollHeight : height;
            return `${this.scrollHeightNum}px`;
        }
    }
    loadMoreEvent(event) {
        this.showLoading = true;
        this.loadMore.emit({ instance: this, event });
    }
    loadStart() {
        this.showLoading = true;
        this.changeDetectorRef.detectChanges();
    }
    loadFinish() {
        this.showLoading = false;
        this.changeDetectorRef.detectChanges();
    }
}
ToggleMenuListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuListComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuListComponent, selector: "d-toggle-menu-list", inputs: { options: "options", optionDisabledKey: "optionDisabledKey", optionImmutableKey: "optionImmutableKey", optionGroupKey: "optionGroupKey", size: "size", keyword: "keyword", isFiltering: "isFiltering", enableLazyLoad: "enableLazyLoad", virtualScroll: "virtualScroll", listItemTemplate: "listItemTemplate", loadingTemplateRef: "loadingTemplateRef", noResultItemTemplate: "noResultItemTemplate", customViewTemplate: "customViewTemplate", customViewDirection: "customViewDirection", templateItemSize: "templateItemSize", scrollHeight: "scrollHeight", selectIndex: "selectIndex", hasSelectIndex: "hasSelectIndex", multiple: "multiple", multiItems: "multiItems", value: "value", isSelectAll: "isSelectAll", keepMultipleOrder: "keepMultipleOrder", eventHandle: "eventHandle", closeScope: "closeScope" }, outputs: { toggleChange: "toggleChange", valueChange: "valueChange", loadMore: "loadMore" }, viewQueries: [{ propertyName: "dropdownUl", first: true, predicate: ["dropdownUl"], descendants: true }, { propertyName: "virtualScrollViewport", first: true, predicate: CdkVirtualScrollViewport, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ul\n  class=\"devui-dropdown-menu-wrap {{ size ? 'devui-dropdown-menu-' + size : '' }}\"\n  dLoading\n  positionType=\"relative\"\n  [showLoading]=\"showLoading\"\n  [message]=\"i18nCommonText?.loading\"\n  [loadingTemplateRef]=\"loadingTemplateRef\"\n  [backdrop]=\"true\"\n  (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n>\n  <ng-content></ng-content>\n  <ul\n    #dropdownUl\n    *ngIf=\"!virtualScroll || enableLazyLoad; else scrollViewTpl\"\n    class=\"devui-select-list-unstyled devui-scrollbar\"\n    [ngStyle]=\"{ 'max-height': scrollHeight, width: '100%' }\"\n    dLazyLoad\n    [enableLazyLoad]=\"enableLazyLoad\"\n    (loadMore)=\"loadMoreEvent($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *ngFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <!--list-item \u5355\u4E2A\u9009\u9879\u6A21\u677F-->\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n    <div *ngIf=\"availableOptions?.length === 0\" class=\"devui-no-data-tip\">\n      <ng-container *ngIf=\"noResultItemTemplate; else noResultDefaultTpl\">\n        <ng-template [ngTemplateOutlet]=\"noResultItemTemplate\" [ngTemplateOutletContext]=\"{ options: options }\"></ng-template>\n      </ng-container>\n    </div>\n  </ul>\n</ul>\n<ng-container *ngIf=\"customViewTemplate\">\n  <div class=\"devui-select-custom-area\">\n    <ng-template [ngTemplateOutlet]=\"customViewTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this, choose: choose }\"></ng-template>\n  </div>\n</ng-container>\n\n<!--\u865A\u62DF\u6EDA\u52A8\u6A21\u677F-->\n<ng-template #scrollViewTpl>\n  <cdk-virtual-scroll-viewport\n    [ngStyle]=\"{\n      height: getVirtualScrollHeight(availableOptions.length, size),\n      width: '100%',\n      'max-height': scrollHeight\n    }\"\n    [itemSize]=\"realVirtualScrollItemSize\"\n    [minBufferPx]=\"minBuffer\"\n    [maxBufferPx]=\"maxBuffer\"\n    class=\"viewport-wrapper devui-select-list-unstyled devui-scrollbar\"\n    #dropdownUl\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *cdkVirtualFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<!--\u5168\u9009\u6A21\u677F-->\n<ng-template #selectAllTpl>\n  <li class=\"devui-dropdown-item\" *ngIf=\"showSelectAll()\" (click)=\"selectAll()\">\n    <span>\n      <d-checkbox [label]=\"i18nCommonText.checkAll\" [isShowTitle]=\"false\" [halfchecked]=\"halfChecked\" [(ngModel)]=\"allChecked\"></d-checkbox>\n    </span>\n  </li>\n</ng-template>\n\n<!--\u65E0\u5185\u5BB9\u6A21\u677F-->\n<ng-template #noResultDefaultTpl>{{ isFiltering ? i18nCommonText?.noRecordsFound : i18nCommonText?.noData }}</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host li{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px;padding:8px 12px;width:100%;display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:0;background-color:transparent;color:#252b3a;color:var(--devui-text, #252b3a);cursor:pointer}:host li:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}:host ::ng-deep d-toggle-menu-search .devui-toggle-menu-search>input{background-color:#f2f2f3;background-color:var(--devui-embed-search-bg, #f2f2f3)}\n"], components: [{ type: i2.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: i3.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }], directives: [{ type: i4.LoadingDirective, selector: "[dLoading]", inputs: ["message", "backdrop", "loadingTemplateRef", "positionType", "view", "showLoading", "loading", "zIndex"], exportAs: ["dLoading"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.LazyLoadDirective, selector: "[dLazyLoad]", inputs: ["enableLazyLoad", "contentMode", "target", "imgLoadSrc"], outputs: ["loadMore"] }, { type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], animations: [fadeInOut], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-list', animations: [fadeInOut], changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, template: "<ul\n  class=\"devui-dropdown-menu-wrap {{ size ? 'devui-dropdown-menu-' + size : '' }}\"\n  dLoading\n  positionType=\"relative\"\n  [showLoading]=\"showLoading\"\n  [message]=\"i18nCommonText?.loading\"\n  [loadingTemplateRef]=\"loadingTemplateRef\"\n  [backdrop]=\"true\"\n  (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n>\n  <ng-content></ng-content>\n  <ul\n    #dropdownUl\n    *ngIf=\"!virtualScroll || enableLazyLoad; else scrollViewTpl\"\n    class=\"devui-select-list-unstyled devui-scrollbar\"\n    [ngStyle]=\"{ 'max-height': scrollHeight, width: '100%' }\"\n    dLazyLoad\n    [enableLazyLoad]=\"enableLazyLoad\"\n    (loadMore)=\"loadMoreEvent($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *ngFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <!--list-item \u5355\u4E2A\u9009\u9879\u6A21\u677F-->\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n    <div *ngIf=\"availableOptions?.length === 0\" class=\"devui-no-data-tip\">\n      <ng-container *ngIf=\"noResultItemTemplate; else noResultDefaultTpl\">\n        <ng-template [ngTemplateOutlet]=\"noResultItemTemplate\" [ngTemplateOutletContext]=\"{ options: options }\"></ng-template>\n      </ng-container>\n    </div>\n  </ul>\n</ul>\n<ng-container *ngIf=\"customViewTemplate\">\n  <div class=\"devui-select-custom-area\">\n    <ng-template [ngTemplateOutlet]=\"customViewTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this, choose: choose }\"></ng-template>\n  </div>\n</ng-container>\n\n<!--\u865A\u62DF\u6EDA\u52A8\u6A21\u677F-->\n<ng-template #scrollViewTpl>\n  <cdk-virtual-scroll-viewport\n    [ngStyle]=\"{\n      height: getVirtualScrollHeight(availableOptions.length, size),\n      width: '100%',\n      'max-height': scrollHeight\n    }\"\n    [itemSize]=\"realVirtualScrollItemSize\"\n    [minBufferPx]=\"minBuffer\"\n    [maxBufferPx]=\"maxBuffer\"\n    class=\"viewport-wrapper devui-select-list-unstyled devui-scrollbar\"\n    #dropdownUl\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *cdkVirtualFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<!--\u5168\u9009\u6A21\u677F-->\n<ng-template #selectAllTpl>\n  <li class=\"devui-dropdown-item\" *ngIf=\"showSelectAll()\" (click)=\"selectAll()\">\n    <span>\n      <d-checkbox [label]=\"i18nCommonText.checkAll\" [isShowTitle]=\"false\" [halfchecked]=\"halfChecked\" [(ngModel)]=\"allChecked\"></d-checkbox>\n    </span>\n  </li>\n</ng-template>\n\n<!--\u65E0\u5185\u5BB9\u6A21\u677F-->\n<ng-template #noResultDefaultTpl>{{ isFiltering ? i18nCommonText?.noRecordsFound : i18nCommonText?.noData }}</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host li{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px;padding:8px 12px;width:100%;display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:0;background-color:transparent;color:#252b3a;color:var(--devui-text, #252b3a);cursor:pointer}:host li:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}:host ::ng-deep d-toggle-menu-search .devui-toggle-menu-search>input{background-color:#f2f2f3;background-color:var(--devui-embed-search-bg, #f2f2f3)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.I18nService }]; }, propDecorators: { options: [{
                type: Input
            }], optionDisabledKey: [{
                type: Input
            }], optionImmutableKey: [{
                type: Input
            }], optionGroupKey: [{
                type: Input
            }], size: [{
                type: Input
            }], keyword: [{
                type: Input
            }], isFiltering: [{
                type: Input
            }], enableLazyLoad: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], listItemTemplate: [{
                type: Input
            }], loadingTemplateRef: [{
                type: Input
            }], noResultItemTemplate: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], customViewDirection: [{
                type: Input
            }], templateItemSize: [{
                type: Input
            }], scrollHeight: [{
                type: Input
            }], selectIndex: [{
                type: Input
            }], hasSelectIndex: [{
                type: Input
            }], multiple: [{
                type: Input
            }], multiItems: [{
                type: Input
            }], value: [{
                type: Input
            }], isSelectAll: [{
                type: Input
            }], keepMultipleOrder: [{
                type: Input
            }], eventHandle: [{
                type: Input
            }], closeScope: [{
                type: Input
            }], toggleChange: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }], dropdownUl: [{
                type: ViewChild,
                args: ['dropdownUl']
            }], virtualScrollViewport: [{
                type: ViewChild,
                args: [CdkVirtualScrollViewport]
            }] } });
//# sourceMappingURL=data:application/json;base64,