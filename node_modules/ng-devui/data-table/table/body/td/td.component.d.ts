import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { EditableTip } from '../../../data-table.model';
import { TableTdService } from './td.service';
import * as i0 from "@angular/core";
export declare class TableTdComponent implements OnInit, OnChanges, OnDestroy {
    private elementRef;
    private tdService;
    stickyLeftClass: boolean;
    stickyRightClass: boolean;
    stickyLeftStyle: string;
    stickyRightStyle: string;
    editable: boolean;
    editableTip: EditableTip;
    nestedColumn: boolean;
    nestedLayer: number;
    field: string;
    rowItem: any;
    fixedLeft: string;
    fixedRight: string;
    iconFoldTable: string;
    iconUnFoldTable: string;
    nestedColumnIndent: number;
    beforeEditStart: (rowItem: any, field: any) => boolean | Promise<boolean> | Observable<boolean>;
    beforeEditEnd: (rowItem: any, field: any) => boolean | Promise<boolean> | Observable<boolean>;
    toggleChildTableEvent: EventEmitter<boolean>;
    editing: boolean;
    editStatusEvent: EventEmitter<boolean>;
    /**
     * 编辑状态调整 @deprecated
     */
    editingChange: EventEmitter<boolean>;
    get isEditable(): boolean;
    private documentClickSubscription;
    private tdMousedownSubscription;
    private tdMouseupSubscription;
    private clickInTd;
    private tdClickSubscription;
    private currentEditing;
    constructor(elementRef: ElementRef, tdService: TableTdService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    startEditing(event: any): void;
    bindEditClickEvent(): void;
    removeEditClickEvent(): void;
    finishCellEdit(): void;
    toggleChildTable(rowItem: any): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TableTdComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TableTdComponent, "[dTableCell]", never, { "editable": "editable"; "editableTip": "editableTip"; "nestedColumn": "nestedColumn"; "nestedLayer": "nestedLayer"; "field": "field"; "rowItem": "rowItem"; "fixedLeft": "fixedLeft"; "fixedRight": "fixedRight"; "iconFoldTable": "iconFoldTable"; "iconUnFoldTable": "iconUnFoldTable"; "nestedColumnIndent": "nestedColumnIndent"; "beforeEditStart": "beforeEditStart"; "beforeEditEnd": "beforeEditEnd"; "editing": "editing"; }, { "toggleChildTableEvent": "toggleChildTableEvent"; "editStatusEvent": "editStatusEvent"; "editingChange": "editingChange"; }, never, ["*"]>;
}
