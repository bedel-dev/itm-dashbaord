import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { PositionService } from 'ng-devui/position';
import { Subscription } from 'rxjs';
import { PopoverType, PositionType } from './popover.types';
import * as i0 from "@angular/core";
interface PopoverStyle {
    backgroundColor?: string;
}
export declare class PopoverComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    private renderer;
    private positionService;
    elementRef: ElementRef;
    private cdr;
    triggerElementRef: ElementRef;
    currentPosition: PositionType;
    connectionBias: string;
    _position: PositionType | PositionType[];
    get position(): PositionType | PositionType[];
    set position(pos: PositionType | PositionType[]);
    content: string | HTMLElement | TemplateRef<any>;
    showAnimation: boolean;
    scrollElement: Element;
    appendToBody: boolean;
    zIndex: number;
    popType: PopoverType;
    popMaxWidth: number;
    popoverStyle: PopoverStyle;
    /**
     * @deprecated Use mouseLeaveDelay to replace.
     */
    set hoverDelayTime(delayTime: any);
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    animateState: string;
    get display(): "none" | "block";
    get class(): string;
    get state(): string;
    get disabled(): boolean;
    get template(): TemplateRef<any>;
    subs: Subscription;
    SCROLL_REFRESH_INTERVAL: number;
    constructor(renderer: Renderer2, positionService: PositionService, elementRef: ElementRef, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    show(): void;
    hide(): void;
    onHidden(): void;
    onAnimationEnd(event: any): void;
    ngOnDestroy(): void;
    updatePosition(): void;
    updatePositionAndDetectChange(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PopoverComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PopoverComponent, "d-popover", never, { "triggerElementRef": "triggerElementRef"; "position": "position"; "content": "content"; "showAnimation": "showAnimation"; "scrollElement": "scrollElement"; "appendToBody": "appendToBody"; "zIndex": "zIndex"; "popType": "popType"; "popMaxWidth": "popMaxWidth"; "popoverStyle": "popoverStyle"; "hoverDelayTime": "hoverDelayTime"; "mouseEnterDelay": "mouseEnterDelay"; "mouseLeaveDelay": "mouseLeaveDelay"; }, {}, never, never>;
}
export {};
