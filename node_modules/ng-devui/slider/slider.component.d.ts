import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class SliderComponent implements OnInit, OnChanges, ControlValueAccessor, OnDestroy, AfterViewInit {
    private cdr;
    constructor(cdr: ChangeDetectorRef);
    private dragStartListener;
    private dragMoveListener;
    private dragEndListener;
    private dragStartHandler;
    private dragMoveHandler;
    private dragEndHandler;
    private isDragging;
    private isHovering;
    value: any;
    showValuePopover: boolean;
    private mouseOverHandler;
    private mouseLeaveHandler;
    slider: ElementRef;
    sliderHandle: ElementRef;
    sliderTrack: ElementRef;
    sliderRail: ElementRef;
    max: number;
    min: number;
    step: number;
    disabled: boolean;
    afterChange: EventEmitter<number>;
    tipsRenderer: (value: number) => string;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(newValue: number): void;
    private onTouchedCallback;
    private onChangeCallback;
    private checkRangeValues;
    private checkStepValue;
    private ratioToValue;
    private convertHandlePositionToRatio;
    private clamp;
    private updateStyle;
    private registerMouseEventsListeners;
    private getSliderPagePosition;
    private getRailLength;
    private mousePositionToAdaptiveValue;
    private getDecimals;
    private mouseStartMoving;
    private mouseMoving;
    private mouseStopMoving;
    private subscribeMouseActions;
    private unsubscribeMouseActions;
    private handleController;
    private toggleDisabled;
    private setValue;
    private ensureValueInRange;
    private updateTrackAndHandle;
    private valueMustBeValid;
    private valueToOffset;
    private registerHandleHoverPopoverListener;
    private sliderHandlePopoverOnMouseHover;
    private sliderHandlePopoverOnMouseLeave;
    private unregisterHandleHoverTooltip;
    private showValuePopoverController;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SliderComponent, "d-slider", never, { "max": "max"; "min": "min"; "step": "step"; "disabled": "disabled"; "tipsRenderer": "tipsRenderer"; }, { "afterChange": "afterChange"; }, never, never>;
}
