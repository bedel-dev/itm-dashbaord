import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { QuadrantDiagramService } from './quadrant-diagram.service';
import { IAxisConfigs, ILabelDataConfigs, IQuadrantConfigs, IViewConfigs, labelSize } from './quadrant-diagram.type';
import * as i0 from "@angular/core";
export declare class QuadrantDiagramComponent implements OnInit, OnChanges {
    private quadrantDiagramService;
    static ID_SEED: number;
    axisConfigs: IAxisConfigs;
    quadrantConfigs: Array<IQuadrantConfigs>;
    view: IViewConfigs;
    normalLabelTemplate: TemplateRef<any>;
    largeLabelTemplate: TemplateRef<any>;
    smallLabelTemplate: TemplateRef<any>;
    labelData: Array<ILabelDataConfigs>;
    currentLabelSize: labelSize;
    showQuadrants: boolean;
    diagramId: any;
    dropEvent: EventEmitter<any>;
    zoomInEvent: EventEmitter<any>;
    zoomOutEvent: EventEmitter<any>;
    fullScreenEvent: EventEmitter<any>;
    dropScope: string;
    showToolbar: boolean;
    private originHeight;
    private originWidth;
    isFullScreen: boolean;
    get id(): any;
    constructor(quadrantDiagramService: QuadrantDiagramService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    launchFullscreen({ isFullscreen }: {
        isFullscreen: any;
    }): void;
    onDrop(e: any): void;
    initAxisData(): void;
    zoomOut(size: any): void;
    zoomIn(size: any): void;
    dragOverEvent(e: any): void;
    handleDropOut(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QuadrantDiagramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QuadrantDiagramComponent, "d-quadrant-diagram", never, { "axisConfigs": "axisConfigs"; "quadrantConfigs": "quadrantConfigs"; "view": "view"; "normalLabelTemplate": "normalLabelTemplate"; "largeLabelTemplate": "largeLabelTemplate"; "smallLabelTemplate": "smallLabelTemplate"; "labelData": "labelData"; "currentLabelSize": "currentLabelSize"; "showQuadrants": "showQuadrants"; "diagramId": "diagramId"; "dropScope": "dropScope"; "showToolbar": "showToolbar"; }, { "dropEvent": "dropEvent"; "zoomInEvent": "zoomInEvent"; "zoomOutEvent": "zoomOutEvent"; "fullScreenEvent": "fullScreenEvent"; }, never, never>;
}
