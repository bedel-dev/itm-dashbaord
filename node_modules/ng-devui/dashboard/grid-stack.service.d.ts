import { GridItemHTMLElement, GridStack } from 'gridstack';
import 'gridstack/dist/h5/gridstack-dd-native';
import { GridStackDDNative } from 'gridstack/dist/h5/gridstack-dd-native';
import { DashboardComponent } from './dashboard.component';
import { DashboardLibraryTrashDirective } from './widget-library/library-trash.directive';
import { DashboardLibraryWidgetDirective } from './widget-library/library-widget.directive';
import * as i0 from "@angular/core";
export declare class GridStackService {
    gridStack: GridStack;
    dragInWidget: DashboardLibraryWidgetDirective;
    lastColumn: number;
    lastStyleSheet: CSSStyleSheet;
    getDD(): GridStackDDNative;
    static cleanDragIn(el: HTMLElement): void;
    static isDraggable(el: HTMLElement): boolean;
    static isDroppable(el: HTMLElement): boolean;
    static enableDrag(el: HTMLElement): void;
    static disableDrag(el: HTMLElement): void;
    static enableDrop(el: HTMLElement): void;
    static disableDrop(el: HTMLElement): void;
    _itemRemoving: (el: GridItemHTMLElement, remove: boolean) => void;
    resetAcceptWidget(dashboard: DashboardComponent): void;
    resetRemoveDrop(dashboard: DashboardComponent): void;
    private fixFloat;
    setupDragIn(el: HTMLElement, widget: DashboardLibraryWidgetDirective, helper?: ((event: any) => HTMLElement) | string, notify?: (eventType: string) => (...args: any) => void): void;
    destroyDragIn(el: HTMLElement): void;
    setupRemoveDropArea(trashZone: HTMLElement, dashboard: DashboardComponent, trash?: DashboardLibraryTrashDirective): void;
    destroyRemoveDropAreas(trashZone: HTMLElement): void;
    updateBackgroundGridBlock(): void;
    setBackgroundGridBlockIfColumnChange(): void;
    removeBackgroundGridBlockStyleSheet(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridStackService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GridStackService>;
}
