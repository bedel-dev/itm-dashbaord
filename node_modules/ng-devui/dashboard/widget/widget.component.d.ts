import { ElementRef, EventEmitter, OnChanges, SimpleChanges, AfterViewInit, OnDestroy } from '@angular/core';
import { GridStackNode, GridStackWidget } from 'gridstack';
import { GridStackNodeCompatible } from '../grid-stack.config';
import { GridStackService } from '../grid-stack.service';
import * as i0 from "@angular/core";
export declare type DashboardWidget = GridStackWidget & {
    widgetData?: any;
    [prop: string]: any;
};
export declare class DashboardWidgetComponent implements GridStackNode, OnChanges, AfterViewInit, OnDestroy {
    elem: ElementRef;
    private gridStackService;
    static autoNumberedId: number;
    x: number;
    xChange: EventEmitter<number>;
    y: number;
    yChange: EventEmitter<number>;
    width: number;
    widthChange: EventEmitter<number>;
    height: number;
    heightChange: EventEmitter<number>;
    id: string;
    maxWidth: number;
    maxHeight: number;
    minWidth: number;
    minHeight: number;
    noResize: boolean;
    noMove: boolean;
    autoPosition: boolean;
    locked: boolean;
    widgetData: any;
    widgetInit: EventEmitter<any>;
    widgetResize: EventEmitter<{
        width: number;
        height: number;
    }>;
    widgetDestroy: EventEmitter<any>;
    hostBinding: boolean;
    generatedId: string;
    constructor(elem: ElementRef, gridStackService: GridStackService);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    handleChange({ x, y, width, height }: GridStackNodeCompatible): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardWidgetComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DashboardWidgetComponent, "d-dashboard-widget", ["dDashboardWidget"], { "x": "x"; "y": "y"; "width": "width"; "height": "height"; "id": "id"; "maxWidth": "maxWidth"; "maxHeight": "maxHeight"; "minWidth": "minWidth"; "minHeight": "minHeight"; "noResize": "noResize"; "noMove": "noMove"; "autoPosition": "autoPosition"; "locked": "locked"; "widgetData": "widgetData"; }, { "xChange": "xChange"; "yChange": "yChange"; "widthChange": "widthChange"; "heightChange": "heightChange"; "widgetInit": "widgetInit"; "widgetResize": "widgetResize"; "widgetDestroy": "widgetDestroy"; }, never, ["*"]>;
}
