import { OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class RadioComponent implements OnInit, ControlValueAccessor {
    private _name;
    private _disabled;
    private inputValue;
    id: string;
    get name(): string;
    set name(value: string);
    get disabled(): boolean;
    set disabled(value: boolean);
    get value(): any;
    set value(value: any);
    beforeChange: (value: any) => boolean | Promise<boolean> | Observable<boolean>;
    constructor();
    _value: any;
    handleChange: (event: any, value: any) => void;
    onRadioChange(event: any): void;
    private onChange;
    private onTouched;
    ngOnInit(): void;
    registerHandleChange(fn: any): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    handleModelChange($event: any, value: any): void;
    canChange(): Promise<boolean>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RadioComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RadioComponent, "d-radio", never, { "name": "name"; "disabled": "disabled"; "value": "value"; "beforeChange": "beforeChange"; }, {}, never, ["*"]>;
}
