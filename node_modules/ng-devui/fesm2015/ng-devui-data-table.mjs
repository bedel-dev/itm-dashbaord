import * as i0 from '@angular/core';
import { InjectionToken, Directive, Pipe, Component, Inject, ViewChild, Input, HostBinding, EventEmitter, forwardRef, Output, HostListener, ViewChildren, TemplateRef, ContentChild, ContentChildren, ChangeDetectionStrategy, ElementRef, Injectable, NgModule } from '@angular/core';
import * as i1$1 from 'ng-devui/checkbox';
import { CheckBoxModule } from 'ng-devui/checkbox';
import { InputNumberComponent, InputNumberModule } from 'ng-devui/input-number';
import { SelectComponent, SelectModule } from 'ng-devui/select';
import { TreeSelectComponent, TreeSelectModule } from 'ng-devui/tree-select';
import * as i6 from 'ng-devui/utils';
import { formatDate, stopPropagationIfExist, SafePipeModule, LazyLoadModule } from 'ng-devui/utils';
import { fromEvent, of, BehaviorSubject, merge } from 'rxjs';
import * as i1 from 'ng-devui/datepicker';
import { DatepickerModule } from 'ng-devui/datepicker';
import * as i5 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i4 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i5$1 from 'ng-devui/common';
import { DCommonModule } from 'ng-devui/common';
import * as i4$1 from 'ng-devui/tooltip';
import { TooltipModule } from 'ng-devui/tooltip';
import * as i3 from '@angular/cdk/scrolling';
import { ScrollingModule } from '@angular/cdk/scrolling';
import * as i4$2 from 'ng-devui/dragdrop';
import { DragDropModule } from 'ng-devui/dragdrop';
import { map, debounceTime, switchMap, takeUntil, tap } from 'rxjs/operators';
import * as i1$2 from 'ng-devui/i18n';
import * as i2 from 'ng-devui/dropdown';
import { DropDownModule } from 'ng-devui/dropdown';
import { ButtonModule } from 'ng-devui/button';
import { PaginationModule } from 'ng-devui/pagination';
import { WindowRefModule } from 'ng-devui/window-ref';

const DATA_TABLE = new InjectionToken('DATA_TABLE');

const DATA_TABLE_ROW = new InjectionToken('DATA_TABLE_ROW');

var ForceUpdateReason;
(function (ForceUpdateReason) {
    ForceUpdateReason[ForceUpdateReason["RowUpdate"] = 0] = "RowUpdate";
})(ForceUpdateReason || (ForceUpdateReason = {}));

class EditorDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
}
EditorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: EditorDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
EditorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: EditorDirective, selector: "[dEditorHost]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: EditorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dEditorHost]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });

class DisPlayCellValuePipe {
    constructor() {
        this.datePicker = {
            format: {
                date: 'y/MM/dd',
                time: 'y/MM/dd HH:mm'
            }
        };
    }
    transform(rowItem, rowIndex, column) {
        if (!column || !column.field) {
            return null;
        }
        if (column.field === '$index') {
            return rowIndex + 1;
        }
        const cellItem = rowItem[column.field];
        switch (column.fieldType) {
            case 'date': {
                let pattern;
                if (column.extraOptions && column.extraOptions.dateFormat) {
                    pattern = column.extraOptions.dateFormat;
                }
                else {
                    pattern = column.extraOptions && column.extraOptions.showTime ?
                        this.datePicker.format.time : this.datePicker.format.date;
                }
                return cellItem ? formatDate(new Date(cellItem), pattern) : '';
            }
            case 'select':
            case 'treeSelect':
                if (column.extraOptions && column.extraOptions.multiple) {
                    if (cellItem && cellItem.length > 0) {
                        let displayValue;
                        if (column.extraOptions.filterKey) {
                            displayValue = cellItem.map(item => item[column.extraOptions.filterKey]).join(';');
                        }
                        else {
                            displayValue = cellItem.join(';');
                        }
                        return displayValue;
                    }
                    else {
                        return '--';
                    }
                }
                else {
                    let displayValue;
                    if (column.extraOptions && column.extraOptions.filterKey) {
                        displayValue = cellItem ? cellItem[column.extraOptions.filterKey] : cellItem;
                    }
                    else {
                        displayValue = cellItem;
                    }
                    return displayValue === 0 ? 0 : (displayValue || '--');
                }
            default:
                if (cellItem === null || cellItem === undefined || cellItem === '') {
                    return '--';
                }
                else {
                    return cellItem;
                }
        }
    }
}
DisPlayCellValuePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DisPlayCellValuePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
DisPlayCellValuePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DisPlayCellValuePipe, name: "disPlayCellValuePipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DisPlayCellValuePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'disPlayCellValuePipe' }]
        }], ctorParameters: function () { return []; } });

class DataTableCellComponent {
    constructor(dt, changeDetectorRef, componentFactoryResolver, rowComponent, cellRef, ngZone) {
        this.dt = dt;
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.rowComponent = rowComponent;
        this.cellRef = cellRef;
        this.ngZone = ngZone;
        this.clickCount = 0; // 记录点击次数
    }
    get isEditable() {
        var _a;
        return this.column.editable && !this.isCellEdit && ((_a = this.column.extraOptions) === null || _a === void 0 ? void 0 : _a.editableTip) !== 'btn';
    }
    ngOnInit() {
        this.forceUpdateSubscription = this.rowComponent.forceUpdateEvent.subscribe(_ => this.forceUpdate());
        if (this.column.editable) {
            this.tdMousedownSubscription = fromEvent(this.cellRef.nativeElement, 'mousedown').subscribe(event => {
                this.clickInTd = true;
            });
            this.tdMouseupSubscription = fromEvent(this.cellRef.nativeElement, 'mouseup').subscribe(event => {
                this.clickInTd = false;
            });
        }
        this.ngZone.runOutsideAngular(() => {
            this.cellRef.nativeElement.addEventListener('click', this.onCellClick.bind(this));
            this.cellRef.nativeElement.addEventListener('dblclick', this.onCellDBClick.bind(this));
        });
    }
    ngOnChanges(changes) {
        const rowItem = changes['rowItem'];
        if (rowItem) {
            this.updateEditable(rowItem);
        }
    }
    updateEditable(rowItem) {
        const currentConfig = rowItem.currentValue['$editDeniedConfig'];
        if (!currentConfig) {
            if (this.fieldEditDenied) {
                this.fieldEditDenied = false;
            }
        }
        else {
            const index = currentConfig.findIndex((config) => {
                return config === this.column.field;
            });
            if (index === -1) {
                if (this.fieldEditDenied) {
                    this.fieldEditDenied = false;
                }
            }
            else {
                if (!this.fieldEditDenied) {
                    this.fieldEditDenied = true;
                }
            }
        }
    }
    onCellClick($event) {
        const cellSelectedEventArg = {
            rowIndex: this.rowIndex,
            colIndex: this.colIndex,
            column: this.column,
            rowItem: this.rowItem,
            cellComponent: this,
            rowComponent: this.rowComponent
        };
        this.clickCount++;
        if (this.clickCount === 1) {
            this.timeoutId = setTimeout(() => {
                if (this.clickCount === 1) {
                    this.dt.onCellClick(cellSelectedEventArg);
                }
                this.clickCount = 0;
                clearTimeout(this.timeoutId);
            }, this.timeout);
        }
    }
    onCellDBClick($event) {
        const cellSelectedEventArg = {
            rowIndex: this.rowIndex,
            colIndex: this.colIndex,
            column: this.column,
            rowItem: this.rowItem,
            cellComponent: this,
            rowComponent: this.rowComponent
        };
        this.dt.onCellDBClick(cellSelectedEventArg);
    }
    forceUpdate() {
        this.changeDetectorRef.markForCheck();
    }
    finishCellEdit($event) {
        if (this.editModel !== 'cell') {
            return;
        }
        this.isCellEdit = false;
        this.editorHost.viewContainerRef.clear();
        this.dynamicEditorActive = false;
        this.templateEditorActive = false;
        if (this.documentClickSubscription) {
            this.unSubscription(this.documentClickSubscription);
        }
        if (this.cellEditorClickSubscription) {
            this.unSubscription(this.cellEditorClickSubscription);
        }
        stopPropagationIfExist($event);
        this.dt.onCellEditEnd({
            rowIndex: this.rowIndex,
            colIndex: this.colIndex,
            column: this.column,
            rowItem: this.rowItem,
            cellComponent: this,
            rowComponent: this.rowComponent
        });
    }
    isCellEditEnable(column, rowItem) {
        if (this.editModel === 'cell') {
            return this.isCellEdit;
        }
        return this.isEditRow;
    }
    ngOnDestroy() {
        if (this.forceUpdateSubscription) {
            this.unSubscription(this.forceUpdateSubscription);
        }
        if (this.documentClickSubscription) {
            this.unSubscription(this.documentClickSubscription);
        }
        if (this.cellEditorClickSubscription) {
            this.unSubscription(this.cellEditorClickSubscription);
        }
        if (this.cellActionSubscription) {
            this.unSubscription(this.cellActionSubscription);
        }
        if (this.tdMousedownSubscription) {
            this.unSubscription(this.tdMousedownSubscription);
        }
        if (this.tdMouseupSubscription) {
            this.unSubscription(this.tdMouseupSubscription);
        }
    }
    unSubscription(sbscription) {
        if (sbscription) {
            sbscription.unsubscribe();
            /* eslint-disable-next-line no-param-reassign */
            sbscription = null;
        }
    }
    creatCellEditor() {
        let componentFactory;
        let editorComponent;
        switch (this.column.fieldType) {
            case 'number':
                editorComponent = InputNumberComponent;
                break;
            case 'select':
                editorComponent = SelectComponent;
                break;
            case 'treeSelect':
                editorComponent = TreeSelectComponent;
                break;
            default:
                this.templateEditorActive = true;
                break;
        }
        if (editorComponent) {
            componentFactory = this.componentFactoryResolver.resolveComponentFactory(editorComponent);
            const viewContainerRef = this.editorHost.viewContainerRef;
            viewContainerRef.clear();
            const componentRef = viewContainerRef.createComponent(componentFactory);
            const componentInstance = componentRef.instance;
            if (this.column.extraOptions) {
                componentFactory.inputs.forEach((input) => {
                    if (this.column.extraOptions[input.templateName]) {
                        componentInstance[input.propName] = this.column.extraOptions[input.templateName];
                    }
                });
            }
            componentInstance.writeValue(this.rowItem[this.column.field]);
            componentInstance.registerOnChange((value) => {
                this.rowItem[this.column.field] = value;
                if (this.column.extraOptions && this.column.extraOptions.finishEditingAfterValueChange) {
                    this.finishCellEdit();
                }
            });
            this.dynamicEditorActive = true;
        }
    }
    cellEditing($event) {
        $event.stopPropagation();
        $event.preventDefault();
        let beforeEdit = Promise.resolve(undefined);
        if (this.dt.beforeCellEdit) {
            beforeEdit = this.dt.beforeCellEdit(this.rowItem, this.column);
        }
        beforeEdit.then((extraOptions) => {
            if (extraOptions) {
                this.column.extraOptions = extraOptions;
            }
            this.dt.cellEditorClickEvent.emit($event);
            const cellSelectedEventArg = {
                rowIndex: this.rowIndex,
                colIndex: this.colIndex,
                column: this.column,
                rowItem: this.rowItem,
                cellComponent: this,
                rowComponent: this.rowComponent
            };
            if (this.column.editable && this.editModel === 'cell') {
                this.isCellEdit = true;
                this.creatCellEditor();
                this.documentClickSubscription = this.dt.documentClickEvent.subscribe(event => {
                    if (event === 'cancel' || (!this.cellRef.nativeElement.contains(event.target) && !this.clickInTd)) {
                        this.ngZone.run(() => {
                            this.finishCellEdit();
                        });
                    }
                    this.clickInTd = false;
                });
                this.cellEditorClickSubscription = this.dt.cellEditorClickEvent.subscribe(event => {
                    if (!this.cellRef.nativeElement.contains(event.target)) {
                        this.finishCellEdit();
                    }
                });
                this.dt.onCellEditStart(cellSelectedEventArg);
            }
        });
    }
    toggleChildTable(rowItem) {
        rowItem.$isChildTableOpen = !rowItem.$isChildTableOpen;
        this.dt.setRowChildToggleStatus(rowItem, rowItem.$isChildTableOpen);
    }
}
DataTableCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellComponent, deps: [{ token: DATA_TABLE }, { token: i0.ChangeDetectorRef }, { token: i0.ComponentFactoryResolver }, { token: DATA_TABLE_ROW }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
DataTableCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableCellComponent, selector: "d-data-table-cell,[dDataTableCell]", inputs: { rowIndex: "rowIndex", colIndex: "colIndex", column: "column", rowItem: "rowItem", editModel: "editModel", isEditRow: "isEditRow", timeout: "timeout", tableLevel: "tableLevel" }, host: { properties: { "class.editable-cell": "this.isEditable" } }, viewQueries: [{ propertyName: "editorHost", first: true, predicate: EditorDirective, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-template *ngIf=\"!column.editable || fieldEditDenied\" [ngTemplateOutlet]=\"cellViewTemp\"></ng-template>\n\n<ng-container *ngIf=\"column.editable && !fieldEditDenied\">\n  <div *ngIf=\"!isCellEdit && column.extraOptions?.editableTip === 'btn'\" class=\"cell-container\">\n    <div class=\"cell-container-inner not-break modify-holder\">\n      <ng-template [ngTemplateOutlet]=\"cellViewTemp\"></ng-template>\n      <span class=\"cell-modify\" (click)=\"cellEditing($event)\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16px\" height=\"16px\" version=\"1.1\">\n          <g fill=\"none\" fill-rule=\"evenodd\" stroke=\"none\" stroke-width=\"1\">\n            <path\n              d=\"M 9.48528 3.41421 L 10.8995 2 L 13.7279 4.82843 L 12.3137 6.24264 L 9.48528 3.41421 Z M 5.24264 13.3137 L 2.41421 13.3137 L 2.41421 10.4853 L 8.77817 4.12132 L 11.6066 6.94975 L 5.24264 13.3137 Z\"\n            />\n          </g>\n        </svg>\n      </span>\n    </div>\n  </div>\n  <div *ngIf=\"!isCellEdit && column.extraOptions?.editableTip !== 'btn'\" class=\"cell-editable\" (click)=\"cellEditing($event)\">\n    <ng-template [ngTemplateOutlet]=\"cellViewTemp\"></ng-template>\n  </div>\n  <div [ngClass]=\"{ 'edit-padding-fix': dynamicEditorActive }\">\n    <ng-template dEditorHost></ng-template>\n  </div>\n  <ng-template\n    *ngIf=\"templateEditorActive\"\n    [ngTemplateOutlet]=\"column.cellEditCmp ? column.cellEditCmp.template : column.fieldType === 'date' ? dateEditTempate : textEditTempate\"\n    [ngTemplateOutletContext]=\"{\n      rowIndex: rowIndex,\n      colIndex: colIndex,\n      column: column,\n      rowItem: rowItem,\n      $implicit: this,\n      row: rowComponent\n    }\"\n  >\n  </ng-template>\n</ng-container>\n\n<ng-template #cellViewTemp>\n  <ng-container *ngIf=\"column.nestedColumn\">\n    <span *ngIf=\"tableLevel > 0\" class=\"cell-placeholder\" [ngStyle]=\"{ width: tableLevel * column.nestedColumnIndent + 'px' }\"></span>\n    <span [style.visibility]=\"rowItem.children ? 'visible' : 'hidden'\" class=\"childtable-toggler\" (click)=\"toggleChildTable(rowItem)\">\n      <ng-container *ngIf=\"rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!column.extraOptions?.iconFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-close\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <rect x=\"4\" y=\"7\" width=\"8\" height=\"2\"></rect>\n          </g>\n        </svg>\n\n        <span *ngIf=\"column.extraOptions?.iconFoldTable\" [innerHTML]=\"column.extraOptions?.iconFoldTable | safe: 'html'\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"!rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!column.extraOptions?.iconUnFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-open-folder\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <path\n              d=\"M8.75,4 L8.75,7.25 L12,7.25 L12,8.75 L8.749,8.75 L8.75,12 L7.25,12 L7.249,8.75 L4,8.75 L4,7.25 L7.25,7.25 L7.25,4 L8.75,4 Z\"\n            ></path>\n          </g>\n        </svg>\n        <span *ngIf=\"column.extraOptions?.iconUnFoldTable\" [innerHTML]=\"column.extraOptions?.iconUnFoldTable | safe: 'html'\"></span>\n      </ng-container>\n    </span>\n  </ng-container>\n  <ng-template\n    [ngTemplateOutlet]=\"column.cellCmp ? column.cellCmp.template : textViewTemplate\"\n    [ngTemplateOutletContext]=\"{\n      rowIndex: rowIndex,\n      colIndex: colIndex,\n      column: column,\n      rowItem: rowItem,\n      cellItem: rowItem[column.field],\n      cellValue: rowItem | disPlayCellValuePipe: rowIndex:column,\n      $implicit: this,\n      row: rowComponent,\n      tableLevel: tableLevel\n    }\"\n  >\n  </ng-template>\n</ng-template>\n\n<ng-template let-cellValue=\"cellValue\" #textViewTemplate>\n  <span [attr.title]=\"cellValue\">{{ cellValue }}</span>\n</ng-template>\n\n<ng-template let-rowIndex=\"rowIndex\" let-colIndex=\"colIndex\" let-rowItem=\"rowItem\" let-column=\"column\" let-cell=\"\" #textEditTempate>\n  <form class=\"form-inline edit-padding-fix\">\n    <div class=\"form-group full-width\">\n      <div class=\"input-group full-width\">\n        <input\n          [dAutoFocus]=\"cell && cell.isCellEdit\"\n          [type]=\"column.fieldType\"\n          class=\"devui-form-control\"\n          [name]=\"column.field\"\n          [(ngModel)]=\"rowItem[column.field]\"\n          [attr.maxlength]=\"column.extraOptions?.maxlength\"\n          [attr.minlength]=\"column.extraOptions?.minlength\"\n          [attr.pattern]=\"column.extraOptions?.pattern\"\n          (keydown.enter)=\"cell && cell.finishCellEdit($event)\"\n          [placeholder]=\"column.placeholder || ''\"\n        />\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template let-rowIndex=\"rowIndex\" let-colIndex=\"colIndex\" let-rowItem=\"rowItem\" let-column=\"column\" let-cell=\"\" #dateEditTempate>\n  <form class=\"form-inline edit-padding-fix\">\n    <div class=\"devui-form-group\">\n      <div class=\"devui-input-group devui-dropdown-origin\">\n        <input\n          class=\"devui-form-control search\"\n          [name]=\"column.field\"\n          [(ngModel)]=\"rowItem[column.field]\"\n          dDatepicker\n          appendToBody\n          [dateFormat]=\"column.extraOptions?.dateFormat\"\n          #datePicker=\"datepicker\"\n          (ngModelChange)=\"!column.extraOptions?.showTime && cell && cell.finishCellEdit()\"\n          [maxDate]=\"column.extraOptions?.maxDate\"\n          [minDate]=\"column.extraOptions?.minDate\"\n          [cssClass]=\"column.extraOptions?.cssClass\"\n          [dateConfig]=\"column.extraOptions?.dateConfig\"\n          [locale]=\"column.extraOptions?.locale\"\n          [customViewTemplate]=\"column.extraOptions?.customViewTemplate\"\n          [disabled]=\"column.extraOptions?.disabled\"\n          [placeholder]=\"column.placeholder || ''\"\n          [autoOpen]=\"true\"\n          [showTime]=\"column.extraOptions?.showTime\"\n        />\n        <div class=\"devui-input-group-addon\" (click)=\"datePicker.toggle()\">\n          <i class=\"icon icon-calendar\"></i>\n        </div>\n      </div>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i1.DatePickerAppendToBodyComponent, selector: "[dDatepicker][appendToBody]", inputs: ["appendToBodyDirections", "locale", "cssClass", "disabled", "dateConverter", "customViewTemplate", "autoOpen", "showAnimation", "showTime", "dateConfig", "dateFormat", "maxDate", "minDate"], outputs: ["selectedDateChange"], exportAs: ["datepicker"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: EditorDirective, selector: "[dEditorHost]" }, { type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5$1.AutoFocusDirective, selector: "[dAutoFocus]", inputs: ["dAutoFocus"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i4.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { type: i4.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }], pipes: { "safe": i6.SafePipe, "disPlayCellValuePipe": DisPlayCellValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-data-table-cell,[dDataTableCell]', preserveWhitespaces: false, template: "<ng-template *ngIf=\"!column.editable || fieldEditDenied\" [ngTemplateOutlet]=\"cellViewTemp\"></ng-template>\n\n<ng-container *ngIf=\"column.editable && !fieldEditDenied\">\n  <div *ngIf=\"!isCellEdit && column.extraOptions?.editableTip === 'btn'\" class=\"cell-container\">\n    <div class=\"cell-container-inner not-break modify-holder\">\n      <ng-template [ngTemplateOutlet]=\"cellViewTemp\"></ng-template>\n      <span class=\"cell-modify\" (click)=\"cellEditing($event)\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16px\" height=\"16px\" version=\"1.1\">\n          <g fill=\"none\" fill-rule=\"evenodd\" stroke=\"none\" stroke-width=\"1\">\n            <path\n              d=\"M 9.48528 3.41421 L 10.8995 2 L 13.7279 4.82843 L 12.3137 6.24264 L 9.48528 3.41421 Z M 5.24264 13.3137 L 2.41421 13.3137 L 2.41421 10.4853 L 8.77817 4.12132 L 11.6066 6.94975 L 5.24264 13.3137 Z\"\n            />\n          </g>\n        </svg>\n      </span>\n    </div>\n  </div>\n  <div *ngIf=\"!isCellEdit && column.extraOptions?.editableTip !== 'btn'\" class=\"cell-editable\" (click)=\"cellEditing($event)\">\n    <ng-template [ngTemplateOutlet]=\"cellViewTemp\"></ng-template>\n  </div>\n  <div [ngClass]=\"{ 'edit-padding-fix': dynamicEditorActive }\">\n    <ng-template dEditorHost></ng-template>\n  </div>\n  <ng-template\n    *ngIf=\"templateEditorActive\"\n    [ngTemplateOutlet]=\"column.cellEditCmp ? column.cellEditCmp.template : column.fieldType === 'date' ? dateEditTempate : textEditTempate\"\n    [ngTemplateOutletContext]=\"{\n      rowIndex: rowIndex,\n      colIndex: colIndex,\n      column: column,\n      rowItem: rowItem,\n      $implicit: this,\n      row: rowComponent\n    }\"\n  >\n  </ng-template>\n</ng-container>\n\n<ng-template #cellViewTemp>\n  <ng-container *ngIf=\"column.nestedColumn\">\n    <span *ngIf=\"tableLevel > 0\" class=\"cell-placeholder\" [ngStyle]=\"{ width: tableLevel * column.nestedColumnIndent + 'px' }\"></span>\n    <span [style.visibility]=\"rowItem.children ? 'visible' : 'hidden'\" class=\"childtable-toggler\" (click)=\"toggleChildTable(rowItem)\">\n      <ng-container *ngIf=\"rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!column.extraOptions?.iconFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-close\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <rect x=\"4\" y=\"7\" width=\"8\" height=\"2\"></rect>\n          </g>\n        </svg>\n\n        <span *ngIf=\"column.extraOptions?.iconFoldTable\" [innerHTML]=\"column.extraOptions?.iconFoldTable | safe: 'html'\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"!rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!column.extraOptions?.iconUnFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-open-folder\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <path\n              d=\"M8.75,4 L8.75,7.25 L12,7.25 L12,8.75 L8.749,8.75 L8.75,12 L7.25,12 L7.249,8.75 L4,8.75 L4,7.25 L7.25,7.25 L7.25,4 L8.75,4 Z\"\n            ></path>\n          </g>\n        </svg>\n        <span *ngIf=\"column.extraOptions?.iconUnFoldTable\" [innerHTML]=\"column.extraOptions?.iconUnFoldTable | safe: 'html'\"></span>\n      </ng-container>\n    </span>\n  </ng-container>\n  <ng-template\n    [ngTemplateOutlet]=\"column.cellCmp ? column.cellCmp.template : textViewTemplate\"\n    [ngTemplateOutletContext]=\"{\n      rowIndex: rowIndex,\n      colIndex: colIndex,\n      column: column,\n      rowItem: rowItem,\n      cellItem: rowItem[column.field],\n      cellValue: rowItem | disPlayCellValuePipe: rowIndex:column,\n      $implicit: this,\n      row: rowComponent,\n      tableLevel: tableLevel\n    }\"\n  >\n  </ng-template>\n</ng-template>\n\n<ng-template let-cellValue=\"cellValue\" #textViewTemplate>\n  <span [attr.title]=\"cellValue\">{{ cellValue }}</span>\n</ng-template>\n\n<ng-template let-rowIndex=\"rowIndex\" let-colIndex=\"colIndex\" let-rowItem=\"rowItem\" let-column=\"column\" let-cell=\"\" #textEditTempate>\n  <form class=\"form-inline edit-padding-fix\">\n    <div class=\"form-group full-width\">\n      <div class=\"input-group full-width\">\n        <input\n          [dAutoFocus]=\"cell && cell.isCellEdit\"\n          [type]=\"column.fieldType\"\n          class=\"devui-form-control\"\n          [name]=\"column.field\"\n          [(ngModel)]=\"rowItem[column.field]\"\n          [attr.maxlength]=\"column.extraOptions?.maxlength\"\n          [attr.minlength]=\"column.extraOptions?.minlength\"\n          [attr.pattern]=\"column.extraOptions?.pattern\"\n          (keydown.enter)=\"cell && cell.finishCellEdit($event)\"\n          [placeholder]=\"column.placeholder || ''\"\n        />\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template let-rowIndex=\"rowIndex\" let-colIndex=\"colIndex\" let-rowItem=\"rowItem\" let-column=\"column\" let-cell=\"\" #dateEditTempate>\n  <form class=\"form-inline edit-padding-fix\">\n    <div class=\"devui-form-group\">\n      <div class=\"devui-input-group devui-dropdown-origin\">\n        <input\n          class=\"devui-form-control search\"\n          [name]=\"column.field\"\n          [(ngModel)]=\"rowItem[column.field]\"\n          dDatepicker\n          appendToBody\n          [dateFormat]=\"column.extraOptions?.dateFormat\"\n          #datePicker=\"datepicker\"\n          (ngModelChange)=\"!column.extraOptions?.showTime && cell && cell.finishCellEdit()\"\n          [maxDate]=\"column.extraOptions?.maxDate\"\n          [minDate]=\"column.extraOptions?.minDate\"\n          [cssClass]=\"column.extraOptions?.cssClass\"\n          [dateConfig]=\"column.extraOptions?.dateConfig\"\n          [locale]=\"column.extraOptions?.locale\"\n          [customViewTemplate]=\"column.extraOptions?.customViewTemplate\"\n          [disabled]=\"column.extraOptions?.disabled\"\n          [placeholder]=\"column.placeholder || ''\"\n          [autoOpen]=\"true\"\n          [showTime]=\"column.extraOptions?.showTime\"\n        />\n        <div class=\"devui-input-group-addon\" (click)=\"datePicker.toggle()\">\n          <i class=\"icon icon-calendar\"></i>\n        </div>\n      </div>\n    </div>\n  </form>\n</ng-template>\n" }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_TABLE]
                    }] }, { type: i0.ChangeDetectorRef }, { type: i0.ComponentFactoryResolver }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_TABLE_ROW]
                    }] }, { type: i0.ElementRef }, { type: i0.NgZone }];
    }, propDecorators: { editorHost: [{
                type: ViewChild,
                args: [EditorDirective]
            }], rowIndex: [{
                type: Input
            }], colIndex: [{
                type: Input
            }], column: [{
                type: Input
            }], rowItem: [{
                type: Input
            }], editModel: [{
                type: Input
            }], isEditRow: [{
                type: Input
            }], timeout: [{
                type: Input
            }], tableLevel: [{
                type: Input
            }], isEditable: [{
                type: HostBinding,
                args: ['class.editable-cell']
            }] } });

class DataTableRowComponent {
    constructor(dt, changeDetectorRef, rowRef, ngZone) {
        this.dt = dt;
        this.changeDetectorRef = changeDetectorRef;
        this.rowRef = rowRef;
        this.ngZone = ngZone;
        this.fontWeight = 'normal';
        this.verticalAlign = 'middle';
        this.detailChange = new EventEmitter();
        this.forceUpdateEvent = new EventEmitter();
        this.clickCount = 0; // 记录点击次数
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.rowRef.nativeElement.addEventListener('click', this.onRowClick.bind(this));
            this.rowRef.nativeElement.addEventListener('dblclick', this.onRowDBClick.bind(this));
            if (this.generalRowHoveredData) {
                this.rowRef.nativeElement.addEventListener('mouseenter', this.onRowMouseEnter.bind(this));
                this.rowRef.nativeElement.addEventListener('mouseleave', this.onRowMouseLeave.bind(this));
            }
        });
    }
    forceUpdate() {
        this.changeDetectorRef.markForCheck();
        this.forceUpdateEvent.emit(ForceUpdateReason.RowUpdate);
    }
    onRowClick($event) {
        this.clickCount++;
        if (this.clickCount === 1) {
            this.timeoutId = setTimeout(() => {
                if (this.clickCount === 1) {
                    this.dt.onRowClick({ rowIndex: this.rowIndex, nestedIndex: this.nestedIndex, rowItem: this.rowItem, rowComponent: this });
                }
                this.clickCount = 0;
                clearTimeout(this.timeoutId);
            }, this.timeout);
        }
    }
    onRowDBClick($event) {
        this.dt.onRowDBClick({ rowIndex: this.rowIndex, nestedIndex: this.nestedIndex, rowItem: this.rowItem, rowComponent: this });
    }
    onRowMouseEnter($event) {
        this.ngZone.run(() => {
            this.rowItem.$hovered = true;
        });
    }
    onRowMouseLeave($event) {
        this.ngZone.run(() => {
            this.rowItem.$hovered = false;
        });
    }
    onRowCheckChange($event, rowIndex, nestedIndex, rowItem) {
        rowItem.$checked = $event;
        rowItem.$halfChecked = false;
        this.dt.setRowCheckStatus({ rowItem, rowIndex, nestedIndex, checked: $event });
    }
    toggle() {
        var _a;
        if (this.rowItem['$isDetailOpen'] === undefined) {
            this.rowItem['$isDetailOpen'] = !!((_a = this.rowItem.$expandConfig) === null || _a === void 0 ? void 0 : _a.expand);
        }
        this.rowItem['$isDetailOpen'] = !this.rowItem['$isDetailOpen'];
        if (this.rowItem.$expandConfig) {
            this.rowItem.$expandConfig.expand = !this.rowItem.$expandConfig.expand;
        }
        this.detailChange.emit({ state: this.rowItem['$isDetailOpen'], index: this.rowIndex });
        this.dt.onDetailToggle({ state: this.rowItem['$isDetailOpen'], index: this.rowIndex });
    }
    trackByFn(index, item) {
        return index;
    }
}
DataTableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableRowComponent, deps: [{ token: DATA_TABLE }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
DataTableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableRowComponent, selector: "d-data-table-row, [dDataTableRow]", inputs: { rowItem: "rowItem", selectable: "selectable", checkable: "checkable", showExpandToggle: "showExpandToggle", rowIndex: "rowIndex", allChecked: "allChecked", columns: "columns", editModel: "editModel", editRowItem: "editRowItem", resizeable: "resizeable", timeout: "timeout", tableLevel: "tableLevel", nestedIndex: "nestedIndex", generalRowHoveredData: "generalRowHoveredData" }, outputs: { detailChange: "detailChange" }, host: { properties: { "style.font-weight": "this.fontWeight", "style.vertical-align": "this.verticalAlign" } }, providers: [{
            provide: DATA_TABLE_ROW,
            useExisting: forwardRef(() => DataTableRowComponent)
        }], ngImport: i0, template: "<td *ngIf=\"showExpandToggle\" class=\"devui-detail-cell\" [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\" [style.left]=\"0\">\n  <div *ngIf=\"rowItem.detail || rowItem?.$expandConfig\" (click)=\"toggle()\">\n    <span [style.vertical-align]=\"'middle'\" *ngIf=\"!rowItem['$isDetailOpen'] && !rowItem.$expandConfig?.expand\">\n      <svg\n        class=\"svg-icon-arrow\"\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n        </g>\n      </svg>\n    </span>\n    <span [style.vertical-align]=\"'middle'\" *ngIf=\"(rowItem && rowItem['$isDetailOpen']) || rowItem.$expandConfig?.expand\">\n      <svg\n        class=\"svg-icon-arrow\"\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <polygon points=\"11.5 12 8 8.23076923 4.5 12 3 10.3846154 8 5 13 10.3846154\"></polygon>\n        </g>\n      </svg>\n    </span>\n  </div>\n</td>\n<td\n  *ngIf=\"checkable\"\n  class=\"devui-checkable-cell\"\n  [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n  [style.left]=\"showExpandToggle && columns[0]?.fixedLeft ? '36px' : '0'\"\n>\n  <d-checkbox\n    [ngModelOptions]=\"{ standalone: true }\"\n    (ngModelChange)=\"onRowCheckChange($event, rowIndex, nestedIndex, rowItem)\"\n    [ngModel]=\"rowItem.$checked\"\n    [halfchecked]=\"rowItem.$halfChecked\"\n    [disabled]=\"rowItem.$checkDisabled || rowItem.$disabled\"\n    dTooltip\n    [content]=\"rowItem.$checkBoxTips\"\n    [position]=\"['top', 'right', 'bottom', 'left']\"\n    [showAnimation]=\"false\"\n  >\n  </d-checkbox>\n</td>\n<ng-container *ngFor=\"let column of columns; let colIndex = index; trackBy: trackByFn\">\n  <td\n    dDataTableCell\n    [rowIndex]=\"rowIndex\"\n    [colIndex]=\"colIndex\"\n    [column]=\"column\"\n    [rowItem]=\"rowItem\"\n    [editModel]=\"rowItem.$$editModel || editModel\"\n    [isEditRow]=\"rowItem.$$edit\"\n    [timeout]=\"timeout\"\n    [tableLevel]=\"tableLevel\"\n    class=\"{{ column.cellClass ? column.cellClass : '' }}\"\n    [ngClass]=\"{\n      'devui-sticky-left-cell': column.fixedLeft,\n      'devui-sticky-right-cell': column.fixedRight,\n      'devui-last-sticky-left-cell': column.fixedLeft && !columns[colIndex + 1]?.fixedLeft,\n      'devui-first-sticky-right-cell': column.fixedRight && !columns[colIndex - 1]?.fixedRight\n    }\"\n    [style.left]=\"column.fixedLeft ? column.fixedLeft : null\"\n    [style.right]=\"column.fixedRight ? column.fixedRight : null\"\n  ></td>\n</ng-container>\n", styles: ["svg.svg-icon-arrow>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep d-button button.d-btn.d-btn-icon{padding:0!important}:host ::ng-deep .cell-modify{position:absolute;right:0;cursor:pointer}:host ::ng-deep .cell-modify>svg{vertical-align:middle}:host ::ng-deep .cell-modify:hover>svg>g>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep .cell-placeholder{display:inline-block;height:16px}:host ::ng-deep .cell-container{position:relative;height:24px}:host ::ng-deep .cell-container-inner{position:absolute;max-width:100%;width:100%}:host ::ng-deep .cell-container-inner.modify-holder{padding-right:20px}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify{display:none;cursor:pointer;position:absolute;right:0}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify>svg{vertical-align:middle}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify>svg>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify:hover>svg>g{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}:host ::ng-deep .cell-container-inner.modify-holder:hover .cell-modify{display:inline}:host ::ng-deep .not-break{white-space:nowrap;text-overflow:ellipsis;overflow:hidden;word-spacing:normal;word-wrap:normal}:host ::ng-deep .cell-editable{cursor:pointer;margin-left:-5px;padding-left:5px}:host ::ng-deep .cell-editable:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3)}\n"], components: [{ type: i1$1.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }, { type: DataTableCellComponent, selector: "d-data-table-cell,[dDataTableCell]", inputs: ["rowIndex", "colIndex", "column", "rowItem", "editModel", "isEditRow", "timeout", "tableLevel"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4$1.TooltipDirective, selector: "[dTooltip]", inputs: ["content", "position", "showAnimation", "showAnimate", "mouseEnterDelay", "mouseLeaveDelay"], exportAs: ["dTooltip"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableRowComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-data-table-row, [dDataTableRow]', preserveWhitespaces: false, providers: [{
                            provide: DATA_TABLE_ROW,
                            useExisting: forwardRef(() => DataTableRowComponent)
                        }], template: "<td *ngIf=\"showExpandToggle\" class=\"devui-detail-cell\" [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\" [style.left]=\"0\">\n  <div *ngIf=\"rowItem.detail || rowItem?.$expandConfig\" (click)=\"toggle()\">\n    <span [style.vertical-align]=\"'middle'\" *ngIf=\"!rowItem['$isDetailOpen'] && !rowItem.$expandConfig?.expand\">\n      <svg\n        class=\"svg-icon-arrow\"\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n        </g>\n      </svg>\n    </span>\n    <span [style.vertical-align]=\"'middle'\" *ngIf=\"(rowItem && rowItem['$isDetailOpen']) || rowItem.$expandConfig?.expand\">\n      <svg\n        class=\"svg-icon-arrow\"\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <polygon points=\"11.5 12 8 8.23076923 4.5 12 3 10.3846154 8 5 13 10.3846154\"></polygon>\n        </g>\n      </svg>\n    </span>\n  </div>\n</td>\n<td\n  *ngIf=\"checkable\"\n  class=\"devui-checkable-cell\"\n  [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n  [style.left]=\"showExpandToggle && columns[0]?.fixedLeft ? '36px' : '0'\"\n>\n  <d-checkbox\n    [ngModelOptions]=\"{ standalone: true }\"\n    (ngModelChange)=\"onRowCheckChange($event, rowIndex, nestedIndex, rowItem)\"\n    [ngModel]=\"rowItem.$checked\"\n    [halfchecked]=\"rowItem.$halfChecked\"\n    [disabled]=\"rowItem.$checkDisabled || rowItem.$disabled\"\n    dTooltip\n    [content]=\"rowItem.$checkBoxTips\"\n    [position]=\"['top', 'right', 'bottom', 'left']\"\n    [showAnimation]=\"false\"\n  >\n  </d-checkbox>\n</td>\n<ng-container *ngFor=\"let column of columns; let colIndex = index; trackBy: trackByFn\">\n  <td\n    dDataTableCell\n    [rowIndex]=\"rowIndex\"\n    [colIndex]=\"colIndex\"\n    [column]=\"column\"\n    [rowItem]=\"rowItem\"\n    [editModel]=\"rowItem.$$editModel || editModel\"\n    [isEditRow]=\"rowItem.$$edit\"\n    [timeout]=\"timeout\"\n    [tableLevel]=\"tableLevel\"\n    class=\"{{ column.cellClass ? column.cellClass : '' }}\"\n    [ngClass]=\"{\n      'devui-sticky-left-cell': column.fixedLeft,\n      'devui-sticky-right-cell': column.fixedRight,\n      'devui-last-sticky-left-cell': column.fixedLeft && !columns[colIndex + 1]?.fixedLeft,\n      'devui-first-sticky-right-cell': column.fixedRight && !columns[colIndex - 1]?.fixedRight\n    }\"\n    [style.left]=\"column.fixedLeft ? column.fixedLeft : null\"\n    [style.right]=\"column.fixedRight ? column.fixedRight : null\"\n  ></td>\n</ng-container>\n", styles: ["svg.svg-icon-arrow>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep d-button button.d-btn.d-btn-icon{padding:0!important}:host ::ng-deep .cell-modify{position:absolute;right:0;cursor:pointer}:host ::ng-deep .cell-modify>svg{vertical-align:middle}:host ::ng-deep .cell-modify:hover>svg>g>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep .cell-placeholder{display:inline-block;height:16px}:host ::ng-deep .cell-container{position:relative;height:24px}:host ::ng-deep .cell-container-inner{position:absolute;max-width:100%;width:100%}:host ::ng-deep .cell-container-inner.modify-holder{padding-right:20px}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify{display:none;cursor:pointer;position:absolute;right:0}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify>svg{vertical-align:middle}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify>svg>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep .cell-container-inner.modify-holder .cell-modify:hover>svg>g{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}:host ::ng-deep .cell-container-inner.modify-holder:hover .cell-modify{display:inline}:host ::ng-deep .not-break{white-space:nowrap;text-overflow:ellipsis;overflow:hidden;word-spacing:normal;word-wrap:normal}:host ::ng-deep .cell-editable{cursor:pointer;margin-left:-5px;padding-left:5px}:host ::ng-deep .cell-editable:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_TABLE]
                    }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }];
    }, propDecorators: { rowItem: [{
                type: Input
            }], fontWeight: [{
                type: HostBinding,
                args: ['style.font-weight']
            }], verticalAlign: [{
                type: HostBinding,
                args: ['style.vertical-align']
            }], selectable: [{
                type: Input
            }], checkable: [{
                type: Input
            }], showExpandToggle: [{
                type: Input
            }], rowIndex: [{
                type: Input
            }], allChecked: [{
                type: Input
            }], columns: [{
                type: Input
            }], editModel: [{
                type: Input
            }], editRowItem: [{
                type: Input
            }], resizeable: [{
                type: Input
            }], timeout: [{
                type: Input
            }], tableLevel: [{
                type: Input
            }], nestedIndex: [{
                type: Input
            }], generalRowHoveredData: [{
                type: Input
            }], detailChange: [{
                type: Output
            }] } });

class DataTableBodyComponent {
    constructor(dt) {
        this.dt = dt;
        this.dataSource = [];
        this.nestedIndex = '-1';
    }
    ngOnChanges(changes) {
        if (changes['columns'] && this.columns) {
            let columnSpan = this.columns.length;
            if (this.showExpandToggle) {
                columnSpan += 1;
            }
            if (this.checkable) {
                columnSpan += 1;
            }
            this.childTdColspan = columnSpan;
        }
    }
    trackByFn(index, item) {
        return index;
    }
}
DataTableBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableBodyComponent, deps: [{ token: DATA_TABLE }], target: i0.ɵɵFactoryTarget.Component });
DataTableBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableBodyComponent, selector: "d-data-table-body, [dDataTableBody]", inputs: { checkable: "checkable", showExpandToggle: "showExpandToggle", allChecked: "allChecked", selectable: "selectable", editModel: "editModel", editRowItem: "editRowItem", dataSource: "dataSource", resizeable: "resizeable", columns: "columns", detailTemplateRef: "detailTemplateRef", timeout: "timeout", type: "type", rowHoveredHighlight: "rowHoveredHighlight", tableLevel: "tableLevel", nestedIndex: "nestedIndex", virtualScroll: "virtualScroll", tableWidthConfig: "tableWidthConfig", headerExpandConfig: "headerExpandConfig", generalRowHoveredData: "generalRowHoveredData" }, usesOnChanges: true, ngImport: i0, template: "<tr *ngIf=\"headerExpandConfig?.expand\">\n  <td [attr.colspan]=\"tableWidthConfig.length\">\n    <ng-template\n      [ngTemplateOutlet]=\"headerExpandConfig?.expandTemplateRef || default\"\n      [ngTemplateOutletContext]=\"{ $implicit: this, columns: columns }\"\n    >\n    </ng-template>\n    <ng-template #default>\n      <div>{{ headerExpandConfig?.description }}</div>\n    </ng-template>\n  </td>\n</tr>\n<ng-container *ngIf=\"!virtualScroll; else scrollViewTpl\">\n  <ng-container *ngFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template [ngTemplateOutlet]=\"trTable\" [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex }\"> </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #scrollViewTpl>\n  <ng-container *cdkVirtualFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template [ngTemplateOutlet]=\"trTable\" [ngTemplateOutletContext]=\"{ rowItem: rowItem || {}, rowIndex: rowIndex }\"> </ng-template>\n  </ng-container>\n</ng-template>\n\n<ng-template #trTable let-rowIndex=\"rowIndex\" let-rowItem=\"rowItem\">\n  <tr\n    *ngIf=\"!rowItem?.$draggable\"\n    dDataTableRow\n    [generalRowHoveredData]=\"generalRowHoveredData\"\n    [resizeable]=\"resizeable\"\n    [checkable]=\"checkable\"\n    [rowIndex]=\"rowIndex\"\n    [rowItem]=\"rowItem\"\n    [columns]=\"columns\"\n    [editRowItem]=\"editRowItem\"\n    [editModel]=\"editModel\"\n    [allChecked]=\"allChecked\"\n    [showExpandToggle]=\"showExpandToggle\"\n    [timeout]=\"timeout\"\n    [tableLevel]=\"tableLevel\"\n    [nestedIndex]=\"nestedIndex\"\n    class=\"{{ rowItem.$rowClass ? rowItem.$rowClass : '' }}\"\n    [ngClass]=\"{ 'table-row-selected': rowItem.$checked }\"\n  ></tr>\n  <tr\n    *ngIf=\"rowItem?.$draggable\"\n    dDataTableRow\n    dDraggable\n    [generalRowHoveredData]=\"generalRowHoveredData\"\n    [resizeable]=\"resizeable\"\n    [checkable]=\"checkable\"\n    [rowIndex]=\"rowIndex\"\n    [rowItem]=\"rowItem\"\n    [columns]=\"columns\"\n    [editRowItem]=\"editRowItem\"\n    [editModel]=\"editModel\"\n    [allChecked]=\"allChecked\"\n    [showExpandToggle]=\"showExpandToggle\"\n    [timeout]=\"timeout\"\n    [tableLevel]=\"tableLevel\"\n    [nestedIndex]=\"nestedIndex\"\n    class=\"{{ rowItem.$rowClass ? rowItem.$rowClass : '' }}\"\n    [ngClass]=\"{ 'table-row-selected': rowItem.$checked }\"\n    [dragData]=\"{ data: rowItem }\"\n    [dragScope]=\"rowItem?.$draggable['scope']\"\n    [dragOverClass]=\"rowItem?.$draggable['class']\"\n    [dragHandle]=\"rowItem?.$draggable['handler']\"\n  ></tr>\n  <tr *ngIf=\"rowItem && rowItem['$isDetailOpen'] && rowItem.detail\">\n    <td [attr.colspan]=\"checkable ? 2 : 1\"></td>\n    <td [attr.colspan]=\"columns.length\" class=\"detail-content\" [style.padding]=\"'13px'\">\n      <ng-template\n        [ngTemplateOutlet]=\"detailTemplateRef || default\"\n        [ngTemplateOutletContext]=\"{ $implicit: this, detail: rowItem.detail, rowIndex: rowIndex, rowItem: rowItem }\"\n      >\n      </ng-template>\n      <ng-template #default let-detail=\"detail\" let-rowIndex=\"rowIndex\" let-rowItem=\"rowItem\">\n        <div>{{ detail }}</div>\n      </ng-template>\n    </td>\n  </tr>\n  <tr class=\"expand-row\" *ngIf=\"rowItem?.$expandConfig?.expand\">\n    <td *ngIf=\"checkable\"></td>\n    <td *ngIf=\"showExpandToggle\"></td>\n    <td [attr.colspan]=\"columns.length\">\n      <ng-template\n        [ngTemplateOutlet]=\"rowItem.$expandConfig?.expandTemplateRef || default\"\n        [ngTemplateOutletContext]=\"{ $implicit: this, columns: columns, rowIndex: rowIndex, rowItem: rowItem }\"\n      >\n      </ng-template>\n      <ng-template #default>\n        <div>{{ rowItem.$expandConfig?.description }}</div>\n      </ng-template>\n    </td>\n  </tr>\n  <tr class=\"child-table\" *ngIf=\"rowItem['$isChildTableOpen'] && rowItem['children']\">\n    <td [attr.colspan]=\"childTdColspan\">\n      <table\n        class=\"devui-table {{ type ? 'table-' + type : '' }} {{ rowHoveredHighlight ? 'table-hover' : '' }}\"\n        [style.table-layout]=\"'fixed'\"\n      >\n        <colgroup>\n          <col [style.width]=\"config.width\" *ngFor=\"let config of tableWidthConfig\" />\n        </colgroup>\n        <tbody\n          dDataTableBody\n          [dataSource]=\"rowItem['children']\"\n          [resizeable]=\"resizeable\"\n          [columns]=\"columns\"\n          [checkable]=\"checkable\"\n          [allChecked]=\"allChecked\"\n          [selectable]=\"selectable\"\n          [editModel]=\"editModel\"\n          [editRowItem]=\"editRowItem\"\n          [showExpandToggle]=\"showExpandToggle\"\n          [detailTemplateRef]=\"detailTemplateRef\"\n          [timeout]=\"timeout\"\n          [type]=\"type\"\n          [rowHoveredHighlight]=\"rowHoveredHighlight\"\n          [tableLevel]=\"tableLevel + 1\"\n          [nestedIndex]=\"nestedIndex + ',' + rowIndex\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [generalRowHoveredData]=\"generalRowHoveredData\"\n        ></tbody>\n      </table>\n    </td>\n  </tr>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.detail-content{color:#252b3a;color:var(--devui-text, #252b3a);font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.child-table:hover{background:transparent!important}.child-table .devui-table{background:transparent;margin-bottom:0}.child-table>td{padding:0;border:0}::ng-deep .devui-table tbody>tr.expand-row{background:#f7f8fa;background:var(--devui-table-expand-area-bg, #f7f8fa)}\n"], components: [{ type: DataTableRowComponent, selector: "d-data-table-row, [dDataTableRow]", inputs: ["rowItem", "selectable", "checkable", "showExpandToggle", "rowIndex", "allChecked", "columns", "editModel", "editRowItem", "resizeable", "timeout", "tableLevel", "nestedIndex", "generalRowHoveredData"], outputs: ["detailChange"] }, { type: DataTableBodyComponent, selector: "d-data-table-body, [dDataTableBody]", inputs: ["checkable", "showExpandToggle", "allChecked", "selectable", "editModel", "editRowItem", "dataSource", "resizeable", "columns", "detailTemplateRef", "timeout", "type", "rowHoveredHighlight", "tableLevel", "nestedIndex", "virtualScroll", "tableWidthConfig", "headerExpandConfig", "generalRowHoveredData"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4$2.DraggableDirective, selector: "[dDraggable]", inputs: ["dragData", "dragHandle", "dragEffect", "dragScope", "dragHandleClass", "dragOverClass", "disabled", "enableDragFollow", "dragFollowOptions", "originPlaceholder", "dragIdentity", "dragItemParentName", "dragItemChildrenName"], outputs: ["dragStartEvent", "dragEvent", "dragEndEvent", "dropEndEvent"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-data-table-body, [dDataTableBody]', preserveWhitespaces: false, template: "<tr *ngIf=\"headerExpandConfig?.expand\">\n  <td [attr.colspan]=\"tableWidthConfig.length\">\n    <ng-template\n      [ngTemplateOutlet]=\"headerExpandConfig?.expandTemplateRef || default\"\n      [ngTemplateOutletContext]=\"{ $implicit: this, columns: columns }\"\n    >\n    </ng-template>\n    <ng-template #default>\n      <div>{{ headerExpandConfig?.description }}</div>\n    </ng-template>\n  </td>\n</tr>\n<ng-container *ngIf=\"!virtualScroll; else scrollViewTpl\">\n  <ng-container *ngFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template [ngTemplateOutlet]=\"trTable\" [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex }\"> </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #scrollViewTpl>\n  <ng-container *cdkVirtualFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template [ngTemplateOutlet]=\"trTable\" [ngTemplateOutletContext]=\"{ rowItem: rowItem || {}, rowIndex: rowIndex }\"> </ng-template>\n  </ng-container>\n</ng-template>\n\n<ng-template #trTable let-rowIndex=\"rowIndex\" let-rowItem=\"rowItem\">\n  <tr\n    *ngIf=\"!rowItem?.$draggable\"\n    dDataTableRow\n    [generalRowHoveredData]=\"generalRowHoveredData\"\n    [resizeable]=\"resizeable\"\n    [checkable]=\"checkable\"\n    [rowIndex]=\"rowIndex\"\n    [rowItem]=\"rowItem\"\n    [columns]=\"columns\"\n    [editRowItem]=\"editRowItem\"\n    [editModel]=\"editModel\"\n    [allChecked]=\"allChecked\"\n    [showExpandToggle]=\"showExpandToggle\"\n    [timeout]=\"timeout\"\n    [tableLevel]=\"tableLevel\"\n    [nestedIndex]=\"nestedIndex\"\n    class=\"{{ rowItem.$rowClass ? rowItem.$rowClass : '' }}\"\n    [ngClass]=\"{ 'table-row-selected': rowItem.$checked }\"\n  ></tr>\n  <tr\n    *ngIf=\"rowItem?.$draggable\"\n    dDataTableRow\n    dDraggable\n    [generalRowHoveredData]=\"generalRowHoveredData\"\n    [resizeable]=\"resizeable\"\n    [checkable]=\"checkable\"\n    [rowIndex]=\"rowIndex\"\n    [rowItem]=\"rowItem\"\n    [columns]=\"columns\"\n    [editRowItem]=\"editRowItem\"\n    [editModel]=\"editModel\"\n    [allChecked]=\"allChecked\"\n    [showExpandToggle]=\"showExpandToggle\"\n    [timeout]=\"timeout\"\n    [tableLevel]=\"tableLevel\"\n    [nestedIndex]=\"nestedIndex\"\n    class=\"{{ rowItem.$rowClass ? rowItem.$rowClass : '' }}\"\n    [ngClass]=\"{ 'table-row-selected': rowItem.$checked }\"\n    [dragData]=\"{ data: rowItem }\"\n    [dragScope]=\"rowItem?.$draggable['scope']\"\n    [dragOverClass]=\"rowItem?.$draggable['class']\"\n    [dragHandle]=\"rowItem?.$draggable['handler']\"\n  ></tr>\n  <tr *ngIf=\"rowItem && rowItem['$isDetailOpen'] && rowItem.detail\">\n    <td [attr.colspan]=\"checkable ? 2 : 1\"></td>\n    <td [attr.colspan]=\"columns.length\" class=\"detail-content\" [style.padding]=\"'13px'\">\n      <ng-template\n        [ngTemplateOutlet]=\"detailTemplateRef || default\"\n        [ngTemplateOutletContext]=\"{ $implicit: this, detail: rowItem.detail, rowIndex: rowIndex, rowItem: rowItem }\"\n      >\n      </ng-template>\n      <ng-template #default let-detail=\"detail\" let-rowIndex=\"rowIndex\" let-rowItem=\"rowItem\">\n        <div>{{ detail }}</div>\n      </ng-template>\n    </td>\n  </tr>\n  <tr class=\"expand-row\" *ngIf=\"rowItem?.$expandConfig?.expand\">\n    <td *ngIf=\"checkable\"></td>\n    <td *ngIf=\"showExpandToggle\"></td>\n    <td [attr.colspan]=\"columns.length\">\n      <ng-template\n        [ngTemplateOutlet]=\"rowItem.$expandConfig?.expandTemplateRef || default\"\n        [ngTemplateOutletContext]=\"{ $implicit: this, columns: columns, rowIndex: rowIndex, rowItem: rowItem }\"\n      >\n      </ng-template>\n      <ng-template #default>\n        <div>{{ rowItem.$expandConfig?.description }}</div>\n      </ng-template>\n    </td>\n  </tr>\n  <tr class=\"child-table\" *ngIf=\"rowItem['$isChildTableOpen'] && rowItem['children']\">\n    <td [attr.colspan]=\"childTdColspan\">\n      <table\n        class=\"devui-table {{ type ? 'table-' + type : '' }} {{ rowHoveredHighlight ? 'table-hover' : '' }}\"\n        [style.table-layout]=\"'fixed'\"\n      >\n        <colgroup>\n          <col [style.width]=\"config.width\" *ngFor=\"let config of tableWidthConfig\" />\n        </colgroup>\n        <tbody\n          dDataTableBody\n          [dataSource]=\"rowItem['children']\"\n          [resizeable]=\"resizeable\"\n          [columns]=\"columns\"\n          [checkable]=\"checkable\"\n          [allChecked]=\"allChecked\"\n          [selectable]=\"selectable\"\n          [editModel]=\"editModel\"\n          [editRowItem]=\"editRowItem\"\n          [showExpandToggle]=\"showExpandToggle\"\n          [detailTemplateRef]=\"detailTemplateRef\"\n          [timeout]=\"timeout\"\n          [type]=\"type\"\n          [rowHoveredHighlight]=\"rowHoveredHighlight\"\n          [tableLevel]=\"tableLevel + 1\"\n          [nestedIndex]=\"nestedIndex + ',' + rowIndex\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [generalRowHoveredData]=\"generalRowHoveredData\"\n        ></tbody>\n      </table>\n    </td>\n  </tr>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.detail-content{color:#252b3a;color:var(--devui-text, #252b3a);font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.child-table:hover{background:transparent!important}.child-table .devui-table{background:transparent;margin-bottom:0}.child-table>td{padding:0;border:0}::ng-deep .devui-table tbody>tr.expand-row{background:#f7f8fa;background:var(--devui-table-expand-area-bg, #f7f8fa)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_TABLE]
                    }] }];
    }, propDecorators: { checkable: [{
                type: Input
            }], showExpandToggle: [{
                type: Input
            }], allChecked: [{
                type: Input
            }], selectable: [{
                type: Input
            }], editModel: [{
                type: Input
            }], editRowItem: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], resizeable: [{
                type: Input
            }], columns: [{
                type: Input
            }], detailTemplateRef: [{
                type: Input
            }], timeout: [{
                type: Input
            }], type: [{
                type: Input
            }], rowHoveredHighlight: [{
                type: Input
            }], tableLevel: [{
                type: Input
            }], nestedIndex: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], tableWidthConfig: [{
                type: Input
            }], headerExpandConfig: [{
                type: Input
            }], generalRowHoveredData: [{
                type: Input
            }] } });

var SortDirection;
(function (SortDirection) {
    SortDirection["ASC"] = "ASC";
    SortDirection["DESC"] = "DESC";
    SortDirection["default"] = "";
})(SortDirection || (SortDirection = {}));
var ColumnAdjustStrategy;
(function (ColumnAdjustStrategy) {
    ColumnAdjustStrategy[ColumnAdjustStrategy["disable"] = 0] = "disable";
    ColumnAdjustStrategy[ColumnAdjustStrategy["mouseup"] = 1] = "mouseup";
    ColumnAdjustStrategy[ColumnAdjustStrategy["mousemove"] = 2] = "mousemove"; // 列宽随着鼠标移动变化
})(ColumnAdjustStrategy || (ColumnAdjustStrategy = {}));
var EditableTip;
(function (EditableTip) {
    EditableTip["hover"] = "hover";
    EditableTip["btn"] = "btn";
})(EditableTip || (EditableTip = {}));

const TABLE_TH = new InjectionToken('TABLE_TH');

class SortComponent {
    constructor() {
        this.showSortIcon = false;
        this.sortEvent = new EventEmitter();
    }
    get canShow() {
        return this.showSortIcon || (this.sortDirection === 'ASC') || (this.sortDirection === 'DESC');
    }
    ngOnInit() {
    }
    sort() {
        switch (this.sortDirection) {
            case SortDirection.ASC:
                this.sortDirection = SortDirection.DESC;
                break;
            case 'DESC':
                this.sortDirection = SortDirection.default;
                break;
            case SortDirection.default:
            default:
                this.sortDirection = SortDirection.ASC;
        }
        this.sortEvent.emit({ direction: this.sortDirection });
    }
}
SortComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SortComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SortComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SortComponent, selector: "d-table-sort", inputs: { sortDirection: "sortDirection", showSortIcon: "showSortIcon" }, outputs: { sortEvent: "sortEvent" }, host: { properties: { "class.devui-icon-show": "this.canShow" } }, ngImport: i0, template: "<span (click)=\"sort()\" class=\"sort-clickable\">\n  <i\n    class=\"datatable-svg\"\n    [ngClass]=\"{\n      'sort-icon-default': !sortDirection,\n      'sort-icon-asc': sortDirection === 'ASC',\n      'sort-icon-desc': sortDirection === 'DESC',\n      'sort-icon-default-visible': showSortIcon\n    }\"\n  >\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <defs>\n        <circle id=\"sort-svg-path-1\" cx=\"8\" cy=\"8\" r=\"8\"></circle>\n        <filter x=\"-34.4%\" y=\"-21.9%\" width=\"168.8%\" height=\"168.8%\" filterUnits=\"objectBoundingBox\" id=\"filter-2\">\n          <feOffset dx=\"0\" dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n          <feGaussianBlur stdDeviation=\"1.5\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n          <feColorMatrix\n            values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.085309222 0\"\n            type=\"matrix\"\n            in=\"shadowBlurOuter1\"\n          ></feColorMatrix>\n        </filter>\n      </defs>\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <use fill-rule=\"evenodd\" xlink:href=\"#sort-svg-path-1\"></use>\n        <polygon points=\"8 4 11 7 5 7\"></polygon>\n        <polygon points=\"8 12 5 9 11 9\"></polygon>\n      </g>\n    </svg>\n  </i>\n</span>\n", styles: [".sort-clickable{cursor:pointer;vertical-align:-.55em}:host{height:20px;line-height:20px;margin-right:4px;margin-left:8px;flex:1;display:none}:host.devui-icon-show{display:block}.sort-icon-default{visibility:hidden}.sort-icon-default>svg g use{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.sort-icon-default>svg g polygon{fill:#fff;fill:var(--devui-icon-bg, #ffffff)}.sort-icon-default:hover>svg g use{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.sort-icon-default-visible{visibility:visible}.sort-icon-asc>svg g use,.sort-icon-desc>svg g use{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}.sort-icon-asc>svg g polygon,.sort-icon-desc>svg g polygon{fill:#fff;fill:var(--devui-icon-bg, #ffffff)}.sort-icon-asc:hover>svg g use,.sort-icon-desc:hover>svg g use{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}.sort-icon-asc>svg g polygon:last-of-type{opacity:.3}.sort-icon-desc>svg g polygon:first-of-type{opacity:.5}\n"], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SortComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-table-sort', template: "<span (click)=\"sort()\" class=\"sort-clickable\">\n  <i\n    class=\"datatable-svg\"\n    [ngClass]=\"{\n      'sort-icon-default': !sortDirection,\n      'sort-icon-asc': sortDirection === 'ASC',\n      'sort-icon-desc': sortDirection === 'DESC',\n      'sort-icon-default-visible': showSortIcon\n    }\"\n  >\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <defs>\n        <circle id=\"sort-svg-path-1\" cx=\"8\" cy=\"8\" r=\"8\"></circle>\n        <filter x=\"-34.4%\" y=\"-21.9%\" width=\"168.8%\" height=\"168.8%\" filterUnits=\"objectBoundingBox\" id=\"filter-2\">\n          <feOffset dx=\"0\" dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n          <feGaussianBlur stdDeviation=\"1.5\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n          <feColorMatrix\n            values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.085309222 0\"\n            type=\"matrix\"\n            in=\"shadowBlurOuter1\"\n          ></feColorMatrix>\n        </filter>\n      </defs>\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <use fill-rule=\"evenodd\" xlink:href=\"#sort-svg-path-1\"></use>\n        <polygon points=\"8 4 11 7 5 7\"></polygon>\n        <polygon points=\"8 12 5 9 11 9\"></polygon>\n      </g>\n    </svg>\n  </i>\n</span>\n", styles: [".sort-clickable{cursor:pointer;vertical-align:-.55em}:host{height:20px;line-height:20px;margin-right:4px;margin-left:8px;flex:1;display:none}:host.devui-icon-show{display:block}.sort-icon-default{visibility:hidden}.sort-icon-default>svg g use{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.sort-icon-default>svg g polygon{fill:#fff;fill:var(--devui-icon-bg, #ffffff)}.sort-icon-default:hover>svg g use{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.sort-icon-default-visible{visibility:visible}.sort-icon-asc>svg g use,.sort-icon-desc>svg g use{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}.sort-icon-asc>svg g polygon,.sort-icon-desc>svg g polygon{fill:#fff;fill:var(--devui-icon-bg, #ffffff)}.sort-icon-asc:hover>svg g use,.sort-icon-desc:hover>svg g use{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}.sort-icon-asc>svg g polygon:last-of-type{opacity:.3}.sort-icon-desc>svg g polygon:first-of-type{opacity:.5}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { sortDirection: [{
                type: Input
            }], showSortIcon: [{
                type: HostBinding,
                args: ['class.devui-icon-show']
            }, {
                type: Input
            }], sortEvent: [{
                type: Output
            }], canShow: [{
                type: HostBinding,
                args: ['class.devui-icon-show']
            }] } });

class FilterComponent {
    constructor(ref, i18n, thComponent, doc) {
        this.ref = ref;
        this.i18n = i18n;
        this.thComponent = thComponent;
        this.doc = doc;
        this.filterMultiple = true;
        this.showFilterIcon = false;
        this.filterIconActiveChange = new EventEmitter(true);
        this.filterChange = new EventEmitter();
        this.filterToggle = new EventEmitter();
        this.checkedListForFilter = [];
        this.filterListDisplay = [];
        this.searchText = '';
        this.isFilterHidden = false;
        this.DEBONCE_TIME = 300;
        this.onContainerScroll = () => {
            this.closeFilter(this.filterDropdown);
        };
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.document = this.doc;
    }
    get canShow() {
        return this.showFilterIcon || this.filterIconActive || this.filterIconActiveInner;
    }
    ngOnInit() {
        if (!this.searchFn) {
            this.searchFn = (item) => {
                return of((this.filterList ? this.filterList : [])
                    .filter(value => value.name.toLowerCase().includes(item.toLowerCase())));
            };
        }
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nCommonText = data.common;
        });
    }
    ngOnChanges(changes) {
        if (changes['filterList'] || changes['filterMultiple'] || changes['filterIconActive']) {
            if (this.filterIconActive !== undefined) {
                return;
            }
            if (this.filterList) {
                if (!this.filterMultiple) {
                    this.selectedItem = this.filterList.filter(item => item.selected)[0];
                    this.filterIconActiveInner = (this.selectedItem !== undefined && !!Object.keys(this.selectedItem).length);
                }
                else {
                    const checkedList = this.filterList.filter(item => item.checked);
                    if (checkedList.length) {
                        this.filterIconActiveInner = true;
                    }
                    else {
                        this.filterIconActiveInner = false;
                    }
                }
            }
            this.filterIconActiveChange.emit(this.filterIconActiveInner);
        }
    }
    closeFilter(dropdown) {
        dropdown.toggle();
    }
    getFilterDataMultiple() {
        // 兼容当前当用户未传入id时，使用name做重名判断
        const keyValue = this.checkedListForFilter.length
            ? Object.prototype.hasOwnProperty.call(this.checkedListForFilter[0], 'id') ? 'id' : 'name' : '';
        const checkedList = this.removeDuplication(this.checkedListForFilter, keyValue).filter(item => item.checked);
        this.setFilterIconActive(checkedList);
        this.filterChange.emit(checkedList);
    }
    removeDuplication(array, key) {
        const hash = {};
        return array.reduceRight((item, next) => {
            if (!hash[next[key]]) {
                hash[next[key]] = true;
                item.push(next);
            }
            return item;
        }, []);
    }
    setFilterIconActive(checkedData) {
        if (Array.isArray(checkedData) ? checkedData.length : checkedData) {
            this.filterIconActiveInner = true;
        }
        else {
            this.filterIconActiveInner = false;
        }
        this.filterIconActiveChange.emit(this.filterIconActiveInner);
    }
    getFilterDataRadio(item) {
        this.selectedItem = item;
        this.setFilterIconActive(item);
        this.filterChange.emit(item);
    }
    canFilter(isOpen) {
        let changeResult = Promise.resolve(true);
        if (this.beforeFilter) {
            const result = this.beforeFilter(isOpen);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    changeResult = result;
                }
                else if (result.subscribe) {
                    changeResult = result.toPromise();
                }
                else {
                    changeResult = Promise.resolve(result);
                }
            }
        }
        return changeResult;
    }
    resetSources() {
        this.checkedListForFilter = [];
        if (this.sourceSubscription) {
            this.sourceSubscription.unsubscribe();
        }
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
    }
    showFilterContent($event) {
        if (this.closeWhenScroll) {
            const tableViewElement = this.thComponent.tableViewRefElement.nativeElement.querySelector('.devui-scrollbar.scroll-view');
            if ($event) {
                this.document.addEventListener('scroll', this.onContainerScroll);
                if (tableViewElement) {
                    tableViewElement.addEventListener('scroll', this.onContainerScroll);
                }
            }
            else {
                this.document.removeEventListener('scroll', this.onContainerScroll);
                if (tableViewElement) {
                    tableViewElement.removeEventListener('scroll', this.onContainerScroll);
                }
            }
        }
        this.searchText = '';
        this.canFilter(!$event).then((change) => {
            if (!$event) {
                this.resetSources();
                return;
            }
            if (!change) {
                this.isFilterHidden = true;
                return;
            }
            this.isFilterHidden = false;
            if (!this.customFilterTemplate) {
                this.registerFilterChange();
            }
        });
        const keyValue = this.checkedListForFilter.length
            ? Object.prototype.hasOwnProperty.call(this.checkedListForFilter[0], 'id') ? 'id' : 'name' : '';
        const checkedList = this.removeDuplication(this.checkedListForFilter, keyValue).filter(item => item.checked);
        this.filterToggle.emit({
            isOpen: $event,
            checklist: checkedList
        });
    }
    filterCheckAll($event) {
        this.filterHalfChecked = false;
        // 全选时只针对当前面板操作，全不选时针对所有数据
        if ($event) {
            this.filterListDisplay.forEach(item => {
                item.checked = $event;
                this.checkedListForFilter.push(item);
            });
        }
        else {
            this.filterList.forEach(item => {
                item.checked = $event;
                this.checkedListForFilter.push(item);
            });
        }
    }
    setHalfChecked() {
        this.filterHalfChecked = false;
        const checked = this.filterListDisplay.filter(item => item.checked);
        if (checked.length === this.filterListDisplay.length) {
            this.filterAllChecked = true;
        }
        else if (checked.length > 0) {
            this.filterHalfChecked = true;
        }
        else {
            this.filterAllChecked = false;
            this.filterHalfChecked = false;
        }
    }
    checkboxChange($event, item) {
        this.checkedListForFilter.push(item);
        this.setHalfChecked();
    }
    searchInputValueChangeEvent() {
        this.filterSubscription = fromEvent(this.searchElement, 'input')
            .pipe(map((e) => e.target.value), debounceTime(this.DEBONCE_TIME) // hard code need refactory
        )
            .subscribe(term => {
            return this.sourceSubject.next(term);
        });
    }
    registerFilterChange() {
        this.sourceSubject = new BehaviorSubject('');
        setTimeout(() => {
            this.searchElement = this.document.querySelector('.data-table-column-filter-content input');
            this.searchInputValueChangeEvent();
        });
        this.sourceSubscription = this.sourceSubject.pipe(switchMap(term => this.searchFn(term))).subscribe(options => {
            this.filterListDisplay = options;
            this.checkedListForFilter.push(...options.filter(item => item.checked));
            this.setHalfChecked();
            this.ref.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        this.resetSources();
    }
}
FilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FilterComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$2.I18nService }, { token: TABLE_TH }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
FilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: FilterComponent, selector: "d-table-filter", inputs: { beforeFilter: "beforeFilter", customFilterTemplate: "customFilterTemplate", extraFilterTemplate: "extraFilterTemplate", searchFn: "searchFn", filterList: "filterList", filterIconActive: "filterIconActive", filterMultiple: "filterMultiple", filterBoxWidth: "filterBoxWidth", filterBoxHeight: "filterBoxHeight", column: "column", closeWhenScroll: "closeWhenScroll", showFilterIcon: "showFilterIcon" }, outputs: { filterIconActiveChange: "filterIconActiveChange", filterChange: "filterChange", filterToggle: "filterToggle" }, host: { properties: { "class.devui-icon-show": "this.canShow" } }, viewQueries: [{ propertyName: "filterDropdown", first: true, predicate: ["filterDropdown"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<span\n  dDropDown\n  appendToBody\n  [appendToBodyDirections]=\"['centerDown', 'centerUp', 'rightDown', 'leftDown', 'rightUp', 'leftUp']\"\n  [closeScope]=\"'blank'\"\n  (toggleEvent)=\"showFilterContent($event)\"\n  #filterDropdown=\"d-dropdown\"\n>\n  <span dDropDownToggle>\n    <i\n      class=\"filter-icon\"\n      [ngClass]=\"{\n        'filter-icon-active': filterIconActive || filterIconActiveInner,\n        'filter-icon-visiable': showFilterIcon\n      }\"\n    >\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g>\n            <polygon points=\"10.0085775 7 10.0085775 15 6 13 6 7 2 3 2 1 14 1 14 3\"></polygon>\n          </g>\n        </g>\n      </svg>\n    </i>\n  </span>\n  <div\n    dDropDownMenu\n    class=\"devui-dropdown-menu\"\n    [ngClass]=\"{ 'filter-content-hidden': isFilterHidden }\"\n    [style.width]=\"filterBoxWidth || '250px'\"\n    [ngStyle]=\"{ 'min-height': filterBoxHeight ? filterBoxHeight : '60px' }\"\n  >\n    <ng-template\n      *ngIf=\"filterDropdown.isOpen\"\n      [ngTemplateOutlet]=\"customFilterTemplate || (filterMultiple ? filterContentTmplForMultiple : filterContentTmplForRadio)\"\n      [ngTemplateOutletContext]=\"{\n        $implicit: this,\n        filterListDisplay: filterListDisplay,\n        dropdown: filterDropdown,\n        column: column\n      }\"\n    >\n    </ng-template>\n  </div>\n</span>\n\n<ng-template #filterContentTmplForMultiple let-filterListMultiple=\"filterListDisplay\" let-dropdown=\"dropdown\">\n  <div class=\"data-table-column-filter-content filter-bg filter-font-color\" [style.width]=\"filterBoxWidth\" [style.height]=\"filterBoxHeight\">\n    <div class=\"filter-search-container\">\n      <input\n        name=\"select\"\n        type=\"text\"\n        autocomplete=\"off\"\n        [placeholder]=\"i18nCommonText?.searchPlaceholder\"\n        [(ngModel)]=\"searchText\"\n        class=\"devui-form-control devui-input devui-search-in-dropdown\"\n      />\n    </div>\n    <div class=\"filter-options\">\n      <d-checkbox\n        style=\"display: inline-block\"\n        [label]=\"i18nCommonText?.checkAll\"\n        (change)=\"filterCheckAll($event)\"\n        [halfchecked]=\"filterHalfChecked\"\n        [(ngModel)]=\"filterAllChecked\"\n      >\n      </d-checkbox>\n      <ng-container *ngIf=\"extraFilterTemplate\">\n        <ng-template\n          [ngTemplateOutlet]=\"extraFilterTemplate\"\n          [ngTemplateOutletContext]=\"{ checked: filterAllChecked, halfChecked: filterHalfChecked }\"\n        >\n        </ng-template>\n      </ng-container>\n      <div class=\"line\"></div>\n      <cdk-virtual-scroll-viewport\n        itemSize=\"30\"\n        minBufferPx=\"300\"\n        maxBufferPx=\"500\"\n        class=\"normal-filter-list-container devui-scrollbar\"\n        [style.height]=\"filterBoxHeight ? 'calc(' + filterBoxHeight + ' - 180px)' : 30 * (filterListMultiple?.length || 1) + 'px'\"\n        [style.maxHeight]=\"filterBoxHeight ? 'none' : '250px'\"\n      >\n        <div *cdkVirtualFor=\"let item of filterListMultiple\" class=\"checkbox-group\">\n          <d-checkbox [label]=\"item.name\" [(ngModel)]=\"item.checked\" (change)=\"checkboxChange($event, item)\"> </d-checkbox>\n        </div>\n        <div class=\"no-data-container\" *ngIf=\"!filterListMultiple?.length\">{{ i18nCommonText?.noData }}</div>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <div class=\"line\"></div>\n    <div style=\"text-align: center\">\n      <span class=\"button-style\" (click)=\"getFilterDataMultiple(); closeFilter(dropdown)\">{{ i18nCommonText?.btnOk }}</span>\n    </div>\n  </div>\n</ng-template>\n<ng-template #filterContentTmplForRadio let-filterListRadio=\"filterListDisplay\" let-dropdown=\"dropdown\">\n  <div class=\"data-table-column-filter-content filter-bg filter-font-color\" [style.width]=\"filterBoxWidth\" [style.height]=\"filterBoxHeight\">\n    <div>\n      <input\n        name=\"select\"\n        type=\"text\"\n        autocomplete=\"off\"\n        [placeholder]=\"i18nCommonText?.searchPlaceholder\"\n        [(ngModel)]=\"searchText\"\n        class=\"devui-form-control devui-input devui-search-in-dropdown\"\n      />\n    </div>\n    <div class=\"filter-options\" role=\"menu\">\n      <div class=\"normal-filter-list-container devui-scrollbar\" role=\"menuitem\" [style.maxHeight]=\"filterBoxHeight ? 'none' : '350px'\">\n        <div\n          [title]=\"item.name\"\n          *ngFor=\"let item of filterListRadio\"\n          class=\"drop-down-item\"\n          [ngClass]=\"{ 'filter-item-active': selectedItem === item }\"\n          (click)=\"getFilterDataRadio(item); closeFilter(dropdown)\"\n        >\n          {{ item.name }}\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host{text-align:right}:host.devui-icon-show{display:block}.data-table-column-filter-content{background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.data-table-column-filter-content .drop-down-item{white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.data-table-column-filter-content .line{width:calc(100% - 20px);margin-left:10px}.data-table-column-filter-content>.filter-options>d-checkbox{height:30px;padding:0 10px}.data-table-column-filter-content .checkbox-group{padding:0 10px}.filter-content-hidden{display:none!important}.line{height:1px;background:#f2f2f3;background:var(--devui-dividing-line, #f2f2f3);margin-top:5px;margin-bottom:5px}.checkbox-group{height:30px}.button-style{display:inline-block;width:45%;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a);text-align:center;line-height:20px;cursor:pointer}.button-style:hover{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}::ng-deep .filter-options .normal-filter-list-container .cdk-virtual-scroll-content-wrapper{width:100%}::ng-deep .filter-options .normal-filter-list-container .cdk-virtual-scroll-content-wrapper .no-data-container{padding:0 10px;line-height:30px}.filter-options ::ng-deep .devui-checkbox>label{white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.normal-filter-list-container{overflow-y:auto}.icon-filter-style{color:#f2f2f3;color:var(--devui-dividing-line, #f2f2f3);cursor:pointer;margin-left:20px}.label-style{font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a);letter-spacing:0;margin-left:10px}.email-style{font-size:12px;font-size:var(--devui-font-size, 12px);color:#babbc0;color:var(--devui-placeholder, #babbc0);letter-spacing:0;margin-left:10px}.overlay-mask{position:fixed;top:0;bottom:0;right:0;left:0;z-index:9}.drop-down-item{padding:0 10px;height:30px;line-height:30px;cursor:pointer}.drop-down-item:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}.filter-item-active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.edit-padding-fix{margin-top:-6px;margin-bottom:-6px}.filter-icon{display:inline-block;vertical-align:-3px;visibility:hidden;cursor:pointer;height:16px;margin-top:-1px}.filter-icon>svg g{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.filter-icon:hover>svg g{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.filter-icon-visiable{visibility:visible}.filter-icon-active{visibility:visible!important}.filter-icon-active>svg g{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}.filter-icon-active:hover>svg g{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}\n"], components: [{ type: i2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }, { type: i1$1.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }, { type: i3.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }], directives: [{ type: i2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FilterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-table-filter', template: "<span\n  dDropDown\n  appendToBody\n  [appendToBodyDirections]=\"['centerDown', 'centerUp', 'rightDown', 'leftDown', 'rightUp', 'leftUp']\"\n  [closeScope]=\"'blank'\"\n  (toggleEvent)=\"showFilterContent($event)\"\n  #filterDropdown=\"d-dropdown\"\n>\n  <span dDropDownToggle>\n    <i\n      class=\"filter-icon\"\n      [ngClass]=\"{\n        'filter-icon-active': filterIconActive || filterIconActiveInner,\n        'filter-icon-visiable': showFilterIcon\n      }\"\n    >\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g>\n            <polygon points=\"10.0085775 7 10.0085775 15 6 13 6 7 2 3 2 1 14 1 14 3\"></polygon>\n          </g>\n        </g>\n      </svg>\n    </i>\n  </span>\n  <div\n    dDropDownMenu\n    class=\"devui-dropdown-menu\"\n    [ngClass]=\"{ 'filter-content-hidden': isFilterHidden }\"\n    [style.width]=\"filterBoxWidth || '250px'\"\n    [ngStyle]=\"{ 'min-height': filterBoxHeight ? filterBoxHeight : '60px' }\"\n  >\n    <ng-template\n      *ngIf=\"filterDropdown.isOpen\"\n      [ngTemplateOutlet]=\"customFilterTemplate || (filterMultiple ? filterContentTmplForMultiple : filterContentTmplForRadio)\"\n      [ngTemplateOutletContext]=\"{\n        $implicit: this,\n        filterListDisplay: filterListDisplay,\n        dropdown: filterDropdown,\n        column: column\n      }\"\n    >\n    </ng-template>\n  </div>\n</span>\n\n<ng-template #filterContentTmplForMultiple let-filterListMultiple=\"filterListDisplay\" let-dropdown=\"dropdown\">\n  <div class=\"data-table-column-filter-content filter-bg filter-font-color\" [style.width]=\"filterBoxWidth\" [style.height]=\"filterBoxHeight\">\n    <div class=\"filter-search-container\">\n      <input\n        name=\"select\"\n        type=\"text\"\n        autocomplete=\"off\"\n        [placeholder]=\"i18nCommonText?.searchPlaceholder\"\n        [(ngModel)]=\"searchText\"\n        class=\"devui-form-control devui-input devui-search-in-dropdown\"\n      />\n    </div>\n    <div class=\"filter-options\">\n      <d-checkbox\n        style=\"display: inline-block\"\n        [label]=\"i18nCommonText?.checkAll\"\n        (change)=\"filterCheckAll($event)\"\n        [halfchecked]=\"filterHalfChecked\"\n        [(ngModel)]=\"filterAllChecked\"\n      >\n      </d-checkbox>\n      <ng-container *ngIf=\"extraFilterTemplate\">\n        <ng-template\n          [ngTemplateOutlet]=\"extraFilterTemplate\"\n          [ngTemplateOutletContext]=\"{ checked: filterAllChecked, halfChecked: filterHalfChecked }\"\n        >\n        </ng-template>\n      </ng-container>\n      <div class=\"line\"></div>\n      <cdk-virtual-scroll-viewport\n        itemSize=\"30\"\n        minBufferPx=\"300\"\n        maxBufferPx=\"500\"\n        class=\"normal-filter-list-container devui-scrollbar\"\n        [style.height]=\"filterBoxHeight ? 'calc(' + filterBoxHeight + ' - 180px)' : 30 * (filterListMultiple?.length || 1) + 'px'\"\n        [style.maxHeight]=\"filterBoxHeight ? 'none' : '250px'\"\n      >\n        <div *cdkVirtualFor=\"let item of filterListMultiple\" class=\"checkbox-group\">\n          <d-checkbox [label]=\"item.name\" [(ngModel)]=\"item.checked\" (change)=\"checkboxChange($event, item)\"> </d-checkbox>\n        </div>\n        <div class=\"no-data-container\" *ngIf=\"!filterListMultiple?.length\">{{ i18nCommonText?.noData }}</div>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <div class=\"line\"></div>\n    <div style=\"text-align: center\">\n      <span class=\"button-style\" (click)=\"getFilterDataMultiple(); closeFilter(dropdown)\">{{ i18nCommonText?.btnOk }}</span>\n    </div>\n  </div>\n</ng-template>\n<ng-template #filterContentTmplForRadio let-filterListRadio=\"filterListDisplay\" let-dropdown=\"dropdown\">\n  <div class=\"data-table-column-filter-content filter-bg filter-font-color\" [style.width]=\"filterBoxWidth\" [style.height]=\"filterBoxHeight\">\n    <div>\n      <input\n        name=\"select\"\n        type=\"text\"\n        autocomplete=\"off\"\n        [placeholder]=\"i18nCommonText?.searchPlaceholder\"\n        [(ngModel)]=\"searchText\"\n        class=\"devui-form-control devui-input devui-search-in-dropdown\"\n      />\n    </div>\n    <div class=\"filter-options\" role=\"menu\">\n      <div class=\"normal-filter-list-container devui-scrollbar\" role=\"menuitem\" [style.maxHeight]=\"filterBoxHeight ? 'none' : '350px'\">\n        <div\n          [title]=\"item.name\"\n          *ngFor=\"let item of filterListRadio\"\n          class=\"drop-down-item\"\n          [ngClass]=\"{ 'filter-item-active': selectedItem === item }\"\n          (click)=\"getFilterDataRadio(item); closeFilter(dropdown)\"\n        >\n          {{ item.name }}\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host{text-align:right}:host.devui-icon-show{display:block}.data-table-column-filter-content{background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.data-table-column-filter-content .drop-down-item{white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.data-table-column-filter-content .line{width:calc(100% - 20px);margin-left:10px}.data-table-column-filter-content>.filter-options>d-checkbox{height:30px;padding:0 10px}.data-table-column-filter-content .checkbox-group{padding:0 10px}.filter-content-hidden{display:none!important}.line{height:1px;background:#f2f2f3;background:var(--devui-dividing-line, #f2f2f3);margin-top:5px;margin-bottom:5px}.checkbox-group{height:30px}.button-style{display:inline-block;width:45%;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a);text-align:center;line-height:20px;cursor:pointer}.button-style:hover{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}::ng-deep .filter-options .normal-filter-list-container .cdk-virtual-scroll-content-wrapper{width:100%}::ng-deep .filter-options .normal-filter-list-container .cdk-virtual-scroll-content-wrapper .no-data-container{padding:0 10px;line-height:30px}.filter-options ::ng-deep .devui-checkbox>label{white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.normal-filter-list-container{overflow-y:auto}.icon-filter-style{color:#f2f2f3;color:var(--devui-dividing-line, #f2f2f3);cursor:pointer;margin-left:20px}.label-style{font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a);letter-spacing:0;margin-left:10px}.email-style{font-size:12px;font-size:var(--devui-font-size, 12px);color:#babbc0;color:var(--devui-placeholder, #babbc0);letter-spacing:0;margin-left:10px}.overlay-mask{position:fixed;top:0;bottom:0;right:0;left:0;z-index:9}.drop-down-item{padding:0 10px;height:30px;line-height:30px;cursor:pointer}.drop-down-item:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}.filter-item-active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.edit-padding-fix{margin-top:-6px;margin-bottom:-6px}.filter-icon{display:inline-block;vertical-align:-3px;visibility:hidden;cursor:pointer;height:16px;margin-top:-1px}.filter-icon>svg g{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.filter-icon:hover>svg g{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.filter-icon-visiable{visibility:visible}.filter-icon-active{visibility:visible!important}.filter-icon-active>svg g{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}.filter-icon-active:hover>svg g{fill:#5e7ce0;fill:var(--devui-brand, #5e7ce0)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ChangeDetectorRef }, { type: i1$2.I18nService }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [TABLE_TH]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    }, propDecorators: { beforeFilter: [{
                type: Input
            }], customFilterTemplate: [{
                type: Input
            }], extraFilterTemplate: [{
                type: Input
            }], searchFn: [{
                type: Input
            }], filterList: [{
                type: Input
            }], filterIconActive: [{
                type: Input
            }], filterMultiple: [{
                type: Input
            }], filterBoxWidth: [{
                type: Input
            }], filterBoxHeight: [{
                type: Input
            }], column: [{
                type: Input
            }], closeWhenScroll: [{
                type: Input
            }], showFilterIcon: [{
                type: Input
            }], filterIconActiveChange: [{
                type: Output
            }], filterChange: [{
                type: Output
            }], filterToggle: [{
                type: Output
            }], canShow: [{
                type: HostBinding,
                args: ['class.devui-icon-show']
            }], filterDropdown: [{
                type: ViewChild,
                args: ['filterDropdown']
            }] } });

class TableThComponent {
    constructor(element, renderer2, zone, cdr, doc) {
        this.renderer2 = renderer2;
        this.zone = zone;
        this.cdr = cdr;
        this.doc = doc;
        this.resizeEnabledClass = false;
        this.operableClass = false;
        this.sortActiveClass = false;
        this.filterActiveClass = false;
        this.stickyLeftClass = false;
        this.stickyRightClass = false;
        this.showFilterIcon = false;
        this.filterMultiple = true;
        this.filterChange = new EventEmitter();
        this.filterToggle = new EventEmitter();
        this.showSortIcon = false;
        this.sortDirectionChange = new EventEmitter();
        this.sortChange = new EventEmitter();
        this.resizeEndEvent = new EventEmitter();
        this.resizeStartEvent = new EventEmitter();
        this.resizingEvent = new EventEmitter();
        this.resizing = false;
        this.toggleChildrenTableEvent = new EventEmitter();
        this.tapEvent = new EventEmitter();
        this.bindMousemove = (e) => {
            this.move(e);
        };
        this.element = element.nativeElement;
        this.document = this.doc;
    }
    ngOnChanges(changes) {
        if (changes['resizeEnabled']) {
            if (this.resizeEnabled) {
                this.resizeEnabledClass = true;
                if (!this.resizeHandleElement) {
                    this.resizeHandleElement = this.renderer2.createElement('span');
                    this.renderer2.addClass(this.resizeHandleElement, 'resize-handle');
                    this.renderer2.appendChild(this.element.firstChild, this.resizeHandleElement);
                    this.resizeNodeEvent = this.renderer2.listen(this.resizeHandleElement, 'click', (event) => event.stopPropagation());
                }
            }
            else {
                this.resizeEnabledClass = false;
            }
        }
        if (changes['filterable'] || changes['sortable'] || changes['resizeEnabled'] || changes['colDraggable']) {
            if (this.filterable || this.sortable || this.resizeEnabled || this.colDraggable) {
                this.operableClass = true;
            }
            else {
                this.operableClass = false;
            }
        }
        if (changes['filterIconActive']) {
            if (this.filterIconActive) {
                this.filterActiveClass = true;
            }
            else {
                this.filterActiveClass = false;
            }
        }
        if (changes['sortDirection']) {
            if (this.sortDirection === SortDirection.ASC || this.sortDirection === SortDirection.DESC) {
                this.sortActiveClass = true;
            }
            else {
                this.sortActiveClass = false;
            }
        }
        if (changes['fixedLeft']) {
            if (this.fixedLeft) {
                this.stickyLeftClass = true;
                this.stickyLeftStyle = this.fixedLeft;
            }
            else {
                this.stickyLeftClass = false;
                this.stickyLeftStyle = null;
            }
        }
        if (changes['fixedRight']) {
            if (this.fixedRight) {
                this.stickyRightClass = true;
                this.stickyRightStyle = this.fixedRight;
            }
            else {
                this.stickyRightClass = false;
                this.stickyRightStyle = null;
            }
        }
    }
    ngOnDestroy() {
        this._destroySubscription();
        if (this.resizeNodeEvent) {
            this.resizeNodeEvent();
        }
    }
    onFilterIconActive(active) {
        this.filterActiveClass = active;
    }
    onTap(event) {
        this.tapEvent.emit(event);
    }
    toggleChildrenTable() {
        this.childrenTableOpen = !this.childrenTableOpen;
        this.toggleChildrenTableEvent.emit(this.childrenTableOpen);
    }
    emitFilterData(filterData) {
        this.filterChange.emit(filterData);
    }
    emitFilterToggle(data) {
        this.filterToggle.emit(data);
    }
    onSort(event) {
        this.sortDirection = event.direction;
        if (event.direction === SortDirection.default) {
            this.sortActiveClass = false;
        }
        else {
            this.sortActiveClass = true;
        }
        this.sortDirectionChange.emit(event.direction);
        this.sortChange.emit(Object.assign(Object.assign({}, event), { th: this }));
    }
    clearSortOrder() {
        this.sortDirection = SortDirection.default;
        this.sortActiveClass = false;
    }
    onMousedown(event) {
        const isHandle = event.target.classList.contains('resize-handle');
        if (isHandle) {
            this.resizeStartEvent.emit(event); // emit begin resize event
            this.initialWidth = this.element.clientWidth;
            const initialOffset = this.element.offsetLeft;
            this.mouseDownScreenX = event.clientX;
            event.stopPropagation();
            this.nextElement = this.element.nextElementSibling;
            this.resizing = true;
            this.totalWidth = this.nextElement ? this.initialWidth + this.nextElement.clientWidth : this.initialWidth;
            // create resizeOverlay
            this.resizeOverlay = this.renderer2.createElement('div');
            this.renderer2.appendChild(this.element.firstElementChild, this.resizeOverlay);
            this.renderer2.addClass(this.resizeOverlay, 'resize-overlay');
            this.renderer2.listen(this.resizeOverlay, 'click', (clickEvent) => clickEvent.stopPropagation());
            this.renderer2.addClass(this.tableViewRefElement.nativeElement, 'table-view-selector');
            const resizeBar = this.renderer2.createElement('div');
            this.renderer2.addClass(resizeBar, 'resize-bar');
            this.tableElement = this.tableViewRefElement.nativeElement.querySelector('.devui-scrollbar table');
            if (this.tableElement) {
                this.renderer2.appendChild(this.tableElement, resizeBar);
                this.renderer2.setStyle(resizeBar, 'display', 'block');
                this.renderer2.setStyle(resizeBar, 'left', initialOffset + this.initialWidth + 'px');
                this.resizeBarRefElement = resizeBar;
            }
            this.renderer2.addClass(this.element, 'hover-bg');
            const mouseup = fromEvent(this.document, 'mouseup');
            this.subscription = mouseup.subscribe((ev) => this.onMouseup(ev));
            this.zone.runOutsideAngular(() => {
                this.document.addEventListener('mousemove', this.bindMousemove);
            });
        }
    }
    onMouseup(event) {
        this.zone.run(() => {
            const movementX = event.clientX - this.mouseDownScreenX;
            const newWidth = this.initialWidth + movementX;
            const finalWidth = this.getFinalWidth(newWidth);
            this.resizing = false;
            // destroy overlay
            this.renderer2.removeChild(this.element, this.resizeOverlay);
            this.renderer2.removeClass(this.tableViewRefElement.nativeElement, 'table-view-selector');
            this.renderer2.removeClass(this.element, 'hover-bg');
            if (this.tableElement) {
                this.renderer2.removeChild(this.tableElement, this.resizeBarRefElement);
            }
            this.resizeEndEvent.emit({ width: finalWidth, beforeWidth: this.initialWidth });
        });
        if (this.subscription && !this.subscription.closed) {
            this._destroySubscription();
        }
        this.document.removeEventListener('mousemove', this.bindMousemove);
    }
    move(event) {
        const movementX = event.clientX - this.mouseDownScreenX;
        const newWidth = this.initialWidth + movementX;
        const finalWidth = this.getFinalWidth(newWidth);
        if (this.resizeBarRefElement) {
            this.renderer2.setStyle(this.resizeBarRefElement, 'left', `${finalWidth + this.element.offsetLeft}px`);
        }
        this.resizingEvent.emit({ width: finalWidth });
    }
    getFinalWidth(newWidth) {
        const minWidth = this.handleWidth(this.minWidth);
        const maxWidth = this.handleWidth(this.maxWidth);
        const overMinWidth = !this.minWidth || newWidth >= minWidth;
        const underMaxWidth = !this.maxWidth || newWidth <= maxWidth;
        const finalWidth = !overMinWidth ? minWidth : !underMaxWidth ? maxWidth : newWidth;
        return finalWidth;
    }
    handleWidth(width) {
        if (!width) {
            return;
        }
        if (typeof width === 'number') {
            return width;
        }
        if (width.includes('%')) {
            const tableWidth = this.tableViewRefElement.nativeElement.clientWidth;
            return (tableWidth * parseInt(width, 10)) / 100;
        }
        return parseInt(width.replace(/[^\d]+/, ''), 10);
    }
    _destroySubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = undefined;
        }
    }
}
TableThComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableThComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
TableThComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableThComponent, selector: "[dHeadCell]", inputs: { resizeEnabled: "resizeEnabled", filterable: "filterable", beforeFilter: "beforeFilter", customFilterTemplate: "customFilterTemplate", extraFilterTemplate: "extraFilterTemplate", searchFn: "searchFn", showFilterIcon: "showFilterIcon", filterList: "filterList", filterIconActive: "filterIconActive", filterMultiple: "filterMultiple", closeFilterWhenScroll: "closeFilterWhenScroll", filterBoxWidth: "filterBoxWidth", filterBoxHeight: "filterBoxHeight", sortable: "sortable", sortDirection: "sortDirection", showSortIcon: "showSortIcon", colDraggable: "colDraggable", nestedColumn: "nestedColumn", iconFoldTable: "iconFoldTable", iconUnFoldTable: "iconUnFoldTable", tableViewRefElement: "tableViewRefElement", minWidth: "minWidth", maxWidth: "maxWidth", fixedLeft: "fixedLeft", fixedRight: "fixedRight", isLastFixedLeft: "isLastFixedLeft", isFirstFixedRight: "isFirstFixedRight", childrenTableOpen: "childrenTableOpen", column: "column" }, outputs: { filterChange: "filterChange", filterToggle: "filterToggle", sortDirectionChange: "sortDirectionChange", sortChange: "sortChange", resizeEndEvent: "resizeEndEvent", resizeStartEvent: "resizeStartEvent", resizingEvent: "resizingEvent", toggleChildrenTableEvent: "toggleChildrenTableEvent", tapEvent: "tapEvent" }, host: { listeners: { "mousedown": "onMousedown($event)" }, properties: { "class.resizeable": "this.resizeEnabledClass", "class.operable": "this.operableClass", "class.sort-active": "this.sortActiveClass", "class.filter-active": "this.filterActiveClass", "class.devui-sticky-left-cell": "this.stickyLeftClass", "class.devui-sticky-right-cell": "this.stickyRightClass", "style.left": "this.stickyLeftStyle", "style.right": "this.stickyRightStyle", "class.can-sort": "this.sortable", "class.devui-last-sticky-left-cell": "this.isLastFixedLeft", "class.devui-first-sticky-right-cell": "this.isFirstFixedRight" } }, providers: [{
            provide: TABLE_TH,
            useExisting: forwardRef(() => TableThComponent)
        }], usesOnChanges: true, ngImport: i0, template: "<div class=\"header-container\">\n  <i class=\"drag-icon\" (mousedown)=\"onTap($event)\">\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M4.5,1.5 L5.5,1.5 C6.05228475,1.5 6.5,1.94771525 6.5,2.5 L6.5,3.5 C6.5,4.05228475 6.05228475,4.5 5.5,4.5 L4.5,4.5 C3.94771525,4.5 3.5,4.05228475 3.5,3.5 L3.5,2.5 C3.5,1.94771525 3.94771525,1.5 4.5,1.5 Z M10.5,1.5 L11.5,1.5 C12.0522847,1.5 12.5,1.94771525 12.5,2.5 L12.5,3.5 C12.5,4.05228475 12.0522847,4.5 11.5,4.5 L10.5,4.5 C9.94771525,4.5 9.5,4.05228475 9.5,3.5 L9.5,2.5 C9.5,1.94771525 9.94771525,1.5 10.5,1.5 Z M4.5,6.5 L5.5,6.5 C6.05228475,6.5 6.5,6.94771525 6.5,7.5 L6.5,8.5 C6.5,9.05228475 6.05228475,9.5 5.5,9.5 L4.5,9.5 C3.94771525,9.5 3.5,9.05228475 3.5,8.5 L3.5,7.5 C3.5,6.94771525 3.94771525,6.5 4.5,6.5 Z M10.5,6.5 L11.5,6.5 C12.0522847,6.5 12.5,6.94771525 12.5,7.5 L12.5,8.5 C12.5,9.05228475 12.0522847,9.5 11.5,9.5 L10.5,9.5 C9.94771525,9.5 9.5,9.05228475 9.5,8.5 L9.5,7.5 C9.5,6.94771525 9.94771525,6.5 10.5,6.5 Z M4.5,11.5 L5.5,11.5 C6.05228475,11.5 6.5,11.9477153 6.5,12.5 L6.5,13.5 C6.5,14.0522847 6.05228475,14.5 5.5,14.5 L4.5,14.5 C3.94771525,14.5 3.5,14.0522847 3.5,13.5 L3.5,12.5 C3.5,11.9477153 3.94771525,11.5 4.5,11.5 Z M10.5,11.5 L11.5,11.5 C12.0522847,11.5 12.5,11.9477153 12.5,12.5 L12.5,13.5 C12.5,14.0522847 12.0522847,14.5 11.5,14.5 L10.5,14.5 C9.94771525,14.5 9.5,14.0522847 9.5,13.5 L9.5,12.5 C9.5,11.9477153 9.94771525,11.5 10.5,11.5 Z\"\n          fill=\"#C7CAD0\"\n        ></path>\n      </g>\n    </svg>\n  </i>\n  <ng-container *ngIf=\"nestedColumn\">\n    <span class=\"childtable-toggler\" (click)=\"toggleChildrenTable()\">\n      <ng-container *ngIf=\"childrenTableOpen\">\n        <svg\n          *ngIf=\"!iconFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-close\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <rect x=\"4\" y=\"7\" width=\"8\" height=\"2\"></rect>\n          </g>\n        </svg>\n        <span class=\"customized-icon\" *ngIf=\"iconFoldTable\" [innerHTML]=\"iconFoldTable | safe: 'html'\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"!childrenTableOpen\">\n        <svg\n          *ngIf=\"!iconUnFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-open-folder\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <path\n              d=\"M8.75,4 L8.75,7.25 L12,7.25 L12,8.75 L8.749,8.75 L8.75,12 L7.25,12 L7.249,8.75 L4,8.75 L4,7.25 L7.25,7.25 L7.25,4 L8.75,4 Z\"\n            ></path>\n          </g>\n        </svg>\n        <span class=\"customized-icon\" *ngIf=\"iconUnFoldTable\" [innerHTML]=\"iconUnFoldTable | safe: 'html'\"></span>\n      </ng-container>\n    </span>\n  </ng-container>\n  <span class=\"title\" [ngStyle]=\"{ flex: sortable ? 'inherit' : 1 }\">\n    <ng-content></ng-content>\n  </span>\n  <d-table-sort *ngIf=\"sortable\" [sortDirection]=\"sortDirection\" [showSortIcon]=\"showSortIcon\" (sortEvent)=\"onSort($event)\"></d-table-sort>\n  <d-table-filter\n    *ngIf=\"filterable\"\n    [showFilterIcon]=\"showFilterIcon\"\n    [beforeFilter]=\"beforeFilter\"\n    [customFilterTemplate]=\"customFilterTemplate\"\n    [extraFilterTemplate]=\"extraFilterTemplate\"\n    [column]=\"column\"\n    [searchFn]=\"searchFn\"\n    [filterList]=\"filterList\"\n    [filterIconActive]=\"filterIconActive\"\n    (filterIconActiveChange)=\"onFilterIconActive($event)\"\n    [filterMultiple]=\"filterMultiple\"\n    [closeWhenScroll]=\"closeFilterWhenScroll\"\n    [filterBoxWidth]=\"filterBoxWidth\"\n    [filterBoxHeight]=\"filterBoxHeight\"\n    (filterChange)=\"emitFilterData($event)\"\n    (filterToggle)=\"emitFilterToggle($event)\"\n  ></d-table-filter>\n</div>\n", components: [{ type: SortComponent, selector: "d-table-sort", inputs: ["sortDirection", "showSortIcon"], outputs: ["sortEvent"] }, { type: FilterComponent, selector: "d-table-filter", inputs: ["beforeFilter", "customFilterTemplate", "extraFilterTemplate", "searchFn", "filterList", "filterIconActive", "filterMultiple", "filterBoxWidth", "filterBoxHeight", "column", "closeWhenScroll", "showFilterIcon"], outputs: ["filterIconActiveChange", "filterChange", "filterToggle"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], pipes: { "safe": i6.SafePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableThComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dHeadCell]', providers: [{
                            provide: TABLE_TH,
                            useExisting: forwardRef(() => TableThComponent)
                        }], template: "<div class=\"header-container\">\n  <i class=\"drag-icon\" (mousedown)=\"onTap($event)\">\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M4.5,1.5 L5.5,1.5 C6.05228475,1.5 6.5,1.94771525 6.5,2.5 L6.5,3.5 C6.5,4.05228475 6.05228475,4.5 5.5,4.5 L4.5,4.5 C3.94771525,4.5 3.5,4.05228475 3.5,3.5 L3.5,2.5 C3.5,1.94771525 3.94771525,1.5 4.5,1.5 Z M10.5,1.5 L11.5,1.5 C12.0522847,1.5 12.5,1.94771525 12.5,2.5 L12.5,3.5 C12.5,4.05228475 12.0522847,4.5 11.5,4.5 L10.5,4.5 C9.94771525,4.5 9.5,4.05228475 9.5,3.5 L9.5,2.5 C9.5,1.94771525 9.94771525,1.5 10.5,1.5 Z M4.5,6.5 L5.5,6.5 C6.05228475,6.5 6.5,6.94771525 6.5,7.5 L6.5,8.5 C6.5,9.05228475 6.05228475,9.5 5.5,9.5 L4.5,9.5 C3.94771525,9.5 3.5,9.05228475 3.5,8.5 L3.5,7.5 C3.5,6.94771525 3.94771525,6.5 4.5,6.5 Z M10.5,6.5 L11.5,6.5 C12.0522847,6.5 12.5,6.94771525 12.5,7.5 L12.5,8.5 C12.5,9.05228475 12.0522847,9.5 11.5,9.5 L10.5,9.5 C9.94771525,9.5 9.5,9.05228475 9.5,8.5 L9.5,7.5 C9.5,6.94771525 9.94771525,6.5 10.5,6.5 Z M4.5,11.5 L5.5,11.5 C6.05228475,11.5 6.5,11.9477153 6.5,12.5 L6.5,13.5 C6.5,14.0522847 6.05228475,14.5 5.5,14.5 L4.5,14.5 C3.94771525,14.5 3.5,14.0522847 3.5,13.5 L3.5,12.5 C3.5,11.9477153 3.94771525,11.5 4.5,11.5 Z M10.5,11.5 L11.5,11.5 C12.0522847,11.5 12.5,11.9477153 12.5,12.5 L12.5,13.5 C12.5,14.0522847 12.0522847,14.5 11.5,14.5 L10.5,14.5 C9.94771525,14.5 9.5,14.0522847 9.5,13.5 L9.5,12.5 C9.5,11.9477153 9.94771525,11.5 10.5,11.5 Z\"\n          fill=\"#C7CAD0\"\n        ></path>\n      </g>\n    </svg>\n  </i>\n  <ng-container *ngIf=\"nestedColumn\">\n    <span class=\"childtable-toggler\" (click)=\"toggleChildrenTable()\">\n      <ng-container *ngIf=\"childrenTableOpen\">\n        <svg\n          *ngIf=\"!iconFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-close\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <rect x=\"4\" y=\"7\" width=\"8\" height=\"2\"></rect>\n          </g>\n        </svg>\n        <span class=\"customized-icon\" *ngIf=\"iconFoldTable\" [innerHTML]=\"iconFoldTable | safe: 'html'\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"!childrenTableOpen\">\n        <svg\n          *ngIf=\"!iconUnFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-open-folder\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <path\n              d=\"M8.75,4 L8.75,7.25 L12,7.25 L12,8.75 L8.749,8.75 L8.75,12 L7.25,12 L7.249,8.75 L4,8.75 L4,7.25 L7.25,7.25 L7.25,4 L8.75,4 Z\"\n            ></path>\n          </g>\n        </svg>\n        <span class=\"customized-icon\" *ngIf=\"iconUnFoldTable\" [innerHTML]=\"iconUnFoldTable | safe: 'html'\"></span>\n      </ng-container>\n    </span>\n  </ng-container>\n  <span class=\"title\" [ngStyle]=\"{ flex: sortable ? 'inherit' : 1 }\">\n    <ng-content></ng-content>\n  </span>\n  <d-table-sort *ngIf=\"sortable\" [sortDirection]=\"sortDirection\" [showSortIcon]=\"showSortIcon\" (sortEvent)=\"onSort($event)\"></d-table-sort>\n  <d-table-filter\n    *ngIf=\"filterable\"\n    [showFilterIcon]=\"showFilterIcon\"\n    [beforeFilter]=\"beforeFilter\"\n    [customFilterTemplate]=\"customFilterTemplate\"\n    [extraFilterTemplate]=\"extraFilterTemplate\"\n    [column]=\"column\"\n    [searchFn]=\"searchFn\"\n    [filterList]=\"filterList\"\n    [filterIconActive]=\"filterIconActive\"\n    (filterIconActiveChange)=\"onFilterIconActive($event)\"\n    [filterMultiple]=\"filterMultiple\"\n    [closeWhenScroll]=\"closeFilterWhenScroll\"\n    [filterBoxWidth]=\"filterBoxWidth\"\n    [filterBoxHeight]=\"filterBoxHeight\"\n    (filterChange)=\"emitFilterData($event)\"\n    (filterToggle)=\"emitFilterToggle($event)\"\n  ></d-table-filter>\n</div>\n" }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    }, propDecorators: { resizeEnabledClass: [{
                type: HostBinding,
                args: ['class.resizeable']
            }], operableClass: [{
                type: HostBinding,
                args: ['class.operable']
            }], sortActiveClass: [{
                type: HostBinding,
                args: ['class.sort-active']
            }], filterActiveClass: [{
                type: HostBinding,
                args: ['class.filter-active']
            }], stickyLeftClass: [{
                type: HostBinding,
                args: ['class.devui-sticky-left-cell']
            }], stickyRightClass: [{
                type: HostBinding,
                args: ['class.devui-sticky-right-cell']
            }], stickyLeftStyle: [{
                type: HostBinding,
                args: ['style.left']
            }], stickyRightStyle: [{
                type: HostBinding,
                args: ['style.right']
            }], resizeEnabled: [{
                type: Input
            }], filterable: [{
                type: Input
            }], beforeFilter: [{
                type: Input
            }], customFilterTemplate: [{
                type: Input
            }], extraFilterTemplate: [{
                type: Input
            }], searchFn: [{
                type: Input
            }], showFilterIcon: [{
                type: Input
            }], filterList: [{
                type: Input
            }], filterIconActive: [{
                type: Input
            }], filterMultiple: [{
                type: Input
            }], closeFilterWhenScroll: [{
                type: Input
            }], filterBoxWidth: [{
                type: Input
            }], filterBoxHeight: [{
                type: Input
            }], filterChange: [{
                type: Output
            }], filterToggle: [{
                type: Output
            }], sortable: [{
                type: HostBinding,
                args: ['class.can-sort']
            }, {
                type: Input
            }], sortDirection: [{
                type: Input
            }], showSortIcon: [{
                type: Input
            }], sortDirectionChange: [{
                type: Output
            }], sortChange: [{
                type: Output
            }], colDraggable: [{
                type: Input
            }], nestedColumn: [{
                type: Input
            }], iconFoldTable: [{
                type: Input
            }], iconUnFoldTable: [{
                type: Input
            }], tableViewRefElement: [{
                type: Input
            }], resizeEndEvent: [{
                type: Output
            }], resizeStartEvent: [{
                type: Output
            }], resizingEvent: [{
                type: Output
            }], minWidth: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], fixedLeft: [{
                type: Input
            }], fixedRight: [{
                type: Input
            }], isLastFixedLeft: [{
                type: HostBinding,
                args: ['class.devui-last-sticky-left-cell']
            }, {
                type: Input
            }], isFirstFixedRight: [{
                type: HostBinding,
                args: ['class.devui-first-sticky-right-cell']
            }, {
                type: Input
            }], childrenTableOpen: [{
                type: Input
            }], toggleChildrenTableEvent: [{
                type: Output
            }], tapEvent: [{
                type: Output
            }], column: [{
                type: Input
            }], onMousedown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });

class DataTableHeadComponent {
    constructor(dt, zone, element, differs, iterableDiffers, ref, i18n, doc) {
        this.dt = dt;
        this.zone = zone;
        this.element = element;
        this.differs = differs;
        this.iterableDiffers = iterableDiffers;
        this.ref = ref;
        this.i18n = i18n;
        this.doc = doc;
        this.multiSort = [];
        this.dataSource = [];
        this.headClickSortEvent = new EventEmitter();
        this.resizeHandlerEvent = new EventEmitter();
        this.beginResizeHandlerEvent = new EventEmitter();
        this.resizingHandlerEvent = new EventEmitter();
        this.dragTableEndEvent = new EventEmitter();
        this.searchQuery = {};
        this.multiSortArray = [];
        this.rowItem = undefined;
        this.classes = {
            originTable: 'sindu_origin_table',
            draggableTable: 'sindu_dragger',
            dragging: 'sindu_dragging',
            static: 'sindu_static',
            handle: 'sindu_handle',
        };
        this.oldCoord = 0;
        this.childTables = [];
        this.dataSourceChange = false;
        this.colOffset = 0;
        this.secondHeaderOffset = 0;
        this.cellMapOffset = 0;
        this.cellMap = {};
        this.searchText = '';
        this.filterListDisplay = [];
        this.isFilterHidden = false;
        this.checkedListForFilter = [];
        this.handleMousemove = (e) => {
            e.preventDefault();
            this.documentElement.removeEventListener('mousemove', this.handleMousemove);
            this.documentElement.addEventListener('mousedown', this.grab);
            this.documentElement.addEventListener('mouseup', this.release);
            setTimeout(() => {
                this.dispatchMousedown();
            });
        };
        this.grab = (e) => {
            e.preventDefault();
            this.documentElement.removeEventListener('mousedown', this.grab);
            this.addClass(this.documentElement, 'gu-unselectable');
            const context = this.canStart(e.target);
            this.grabbed = context;
            this.documentElement.addEventListener('mousemove', this.startBecauseMouseMoved);
        };
        this.startBecauseMouseMoved = (e) => {
            e.preventDefault();
            if (!this.grabbed) {
                return;
            }
            this.documentElement.removeEventListener('mousemove', this.startBecauseMouseMoved);
            this.documentElement.addEventListener('mousemove', this.drag);
            this.source = this.grabbed.source;
            this.item = this.grabbed.item;
            this.initialSibling = this.currentSibling = this.nextEl(this.grabbed.item);
            this.addClass(this.item, 'gu-transit');
            this.el.style.display = 'flex';
            this.el.style.position = 'relative';
            this.originTable.style.display = 'none';
            if (this.fixHeader) {
                this.fixTableOffsetTop = this.fixOriginTable.parentNode.parentNode.scrollTop;
                this.fixFakeTableEl.style.display = 'flex';
                this.fixOriginTable.style.display = 'none';
                this.fixFakeTableEl.style.position = 'relative';
            }
            this.offsetX = 15;
            this.offsetY = 15;
            this.renderMirrorImage(this.item);
        };
        this.release = (e) => {
            e.preventDefault();
            this.grabbed = null;
            this.documentElement.removeEventListener('mousemove', this.drag);
            this.documentElement.removeEventListener('mouseup', this.release);
            const to = Array.from(this.el.children).indexOf(this.item);
            this.removeMirrorImage();
            this.el.style.display = 'none';
            this.originTable.style.display = 'table';
            if (this.fixHeader) {
                this.fixFakeTableEl.style.display = 'none';
                this.fixOriginTable.style.display = 'table';
                this.fixFakeTableEl.style.position = 'absolute';
            }
            this.documentElement.style.overflow = this.bodyOverflow;
            this.documentElement.removeEventListener('mouseup', this.release);
            if (this.item) {
                this.rmClass(this.item, 'gu-transit');
            }
            this.sortColumn(this.originCellIndex.x, to);
            cancelAnimationFrame(this.animationRequestId);
        };
        this.sortColumn = (from, to) => {
            if (from === to) {
                return;
            }
            let offset = 0;
            if (this.checkable) {
                offset++;
            }
            if (this.showExpandToggle) {
                offset++;
            }
            from = from - offset;
            to = to - offset;
            let toCell = this.cellMap[to].sortKey[0];
            let fromCell = this.cellMap[from].sortKey[0];
            let loopCount = 1;
            if (this.cellMap[from].isAdvanceHeader) {
                loopCount = this.cellMap[from].headerLength;
                if (from > to) {
                    fromCell = this.cellMap[from].sortKey[this.cellMap[from].headerLength - 1];
                }
            }
            if (this.cellMap[to].isAdvanceHeader && from < to) {
                toCell = this.cellMap[to].sortKey[this.cellMap[to].headerLength - 1];
            }
            for (let i = 0; i < loopCount; i++) {
                this.dragTableEndEvent.emit({ from: fromCell, to: toCell });
            }
        };
        this.sort = ({ list, from, to }) => {
            if (!list[from] && !list[to]) {
                return;
            }
            if (from < to) {
                this.appendSibling({ target: list[from], origin: list[to] });
            }
            else {
                this.insertBeforeSibling({ target: list[from], origin: list[to] });
            }
        };
        this.rerenderTables = () => {
            this.dataSourceChange = true;
            if (this.fixHeader && this.tableBodyEl && this.dataSource.length) {
                this.fixOriginTable = this.tableBodyEl.nativeElement;
                setTimeout(() => {
                    this.renderFixFakeTableEl();
                    this.fixFakeTableEl.style.display = 'none';
                });
            }
            else {
                this.detecteOriginTable();
                setTimeout(() => {
                    this.renderFakeTable();
                    this.el.style.display = 'none';
                });
            }
        };
        this.drag = (e) => {
            e.preventDefault();
            if (!this.mirror) {
                return;
            }
            const clientX = this.getCoord('clientX', e);
            const clientY = this.getCoord('clientY', e);
            if (this.animationRequestId) {
                cancelAnimationFrame(this.animationRequestId);
                this.animationRequestId = null;
            }
            this.handleScroll(clientX, clientY, e);
            this.documentElement.style.overflow = 'hidden';
            const x = clientX - this.offsetX;
            const y = clientY - this.offsetY;
            this.mirror.style.left = x + 'px';
            this.mirror.style.top = y + 'px';
            this.mirror.style.visibility = 'visible';
            const elementBehindCursor = this.getElementBehindPoint(this.mirror, clientX, clientY);
            const dropTarget = this.findDropTarget(elementBehindCursor, clientX, clientY);
            if (!dropTarget) {
                return;
            }
            const immediate = this.getImmediateChild(dropTarget, elementBehindCursor);
            let reference;
            if (immediate) {
                reference = this.getReference(dropTarget, immediate, clientX);
            }
            const changed = dropTarget !== null && dropTarget !== this.lastDropTarget;
            if (changed || dropTarget === null) {
                this.lastDropTarget = dropTarget;
            }
            if ((reference === null && changed) ||
                reference !== this.item &&
                    reference !== this.nextEl(this.item)) {
                let mover;
                const nowCord = e.pageX;
                if (nowCord < this.oldCoord) {
                    mover = reference; // upward or right
                }
                else {
                    mover = reference ? (reference.previousElementSibling ? reference.previousElementSibling : reference) : dropTarget.lastElementChild;
                }
                this.oldCoord = nowCord;
                let from;
                let to;
                let moverIndex;
                let fixItemRect;
                let fixItem;
                let fixMoverRect;
                let fixMover;
                if (this.fixHeader) {
                    from = Array.from(this.el.children).indexOf(this.item);
                    to = Array.from(this.el.children).indexOf(reference);
                    moverIndex = Array.from(this.el.children).indexOf(mover);
                    fixItem = Array.from(this.fixFakeTableEl.children)[from];
                    fixItemRect = fixItem.getBoundingClientRect();
                    fixMover = Array.from(this.fixFakeTableEl.children)[moverIndex];
                    fixMoverRect = moverIndex !== -1 && fixMover.getBoundingClientRect();
                }
                const moverRect = mover && mover.getBoundingClientRect();
                const itemRact = this.item.getBoundingClientRect();
                this.moveTarget(dropTarget, this.item, reference);
                if (this.fixHeader) {
                    this.moveTarget(this.fixFakeTableEl, Array.from(this.fixFakeTableEl.children)[from], Array.from(this.fixFakeTableEl.children)[to]);
                }
                if (mover && moverRect) {
                    this.animate(moverRect, mover, 300);
                    this.animate(itemRact, this.item, 300);
                }
                if (this.fixHeader && moverIndex !== -1 && fixMoverRect) {
                    this.animate(fixMoverRect, fixMover, 300);
                    this.animate(fixItemRect, fixItem, 300);
                }
            }
        };
        this.getLongestRow = (table) => {
            let result = table.rows[0];
            Array.from(table.rows).forEach((row) => {
                const rowL = row.children.length;
                const resultL = result.children.length;
                result = rowL > resultL ? row : result;
            });
            return result;
        };
        this.getChildTableColumn = (table, index) => {
            const cTable = table.cloneNode(true);
            this.origin2DragItem(cTable);
            const empty = (node) => {
                while (node.firstChild) {
                    node.removeChild(node.firstChild);
                }
            };
            Array.from(cTable.rows).forEach((row) => {
                if (row.classList.contains('child-table')) {
                    const target = this.getChildTableColumn(row.children[0].children[0], index);
                    empty(row.children[0]);
                    row.children[0].appendChild(target);
                }
                else {
                    const target = row.children[index];
                    empty(row);
                    if (target) {
                        row.appendChild(target);
                    }
                }
            });
            this.sizeChildColumnFake(cTable, table, index);
            return cTable;
        };
        this.detecteChildTables = (table) => {
            Array.from(table.rows).forEach((row, index) => {
                if (row.classList.contains('child-table')) {
                    const childTable = table.rows[index].children[0].children[0];
                    this.childTables.push(childTable);
                    this.detecteChildTables(childTable);
                }
            });
        };
        this.getReference = (dropTarget, target, x) => {
            const resolve = (after) => {
                return after ? this.nextEl(target) : target;
            };
            const inside = () => {
                const rect = target.getBoundingClientRect();
                return resolve(x > rect.left + this.getRectWidth(rect) / 2);
            };
            const outside = () => {
                const len = dropTarget.children.length;
                let i;
                let el;
                let rect;
                for (i = 0; i < len; i++) {
                    el = dropTarget.children[i];
                    rect = el.getBoundingClientRect();
                    if ((rect.left + rect.width / 2) > x) {
                        return el;
                    }
                }
                return null;
            };
            const reference = target !== dropTarget ? inside() : outside();
            return reference;
        };
        this.getImmediateChild = (dropTarget, target) => {
            let immediate = target;
            const isElementDropFreeze = (element) => {
                const index = Array.from(element.parentNode.children).indexOf(element);
                return index < this.colDropFreezeTo;
            };
            while (immediate !== dropTarget && this.getParent(immediate) !== dropTarget) {
                immediate = this.getParent(immediate);
            }
            if (immediate === this.documentElement || isElementDropFreeze(immediate)) {
                return null;
            }
            return immediate;
        };
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.document = this.doc;
        this.documentElement = this.doc.documentElement;
    }
    ngOnInit() {
        if (this.colDraggable) {
            this.iterableDiffer = this.iterableDiffers.find([]).create(null);
            this.objDiffer = {};
            this.dataSource.forEach((data, index) => {
                this.objDiffer[index] = this.differs.find(data).create();
            });
        }
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nCommonText = data.common;
        });
    }
    ngOnChanges(changes) {
        if ((changes['columns'] || changes.multiSort) && this.columns) {
            this.multiSortArray = [];
            this.columns.forEach(column => {
                if (column.sortable) {
                    const sortIndex = this.multiSort.findIndex(item => item['field'] === column.field);
                    this.multiSortArray.push({
                        field: column.field,
                        direction: sortIndex !== -1 ? this.multiSort[sortIndex].direction : SortDirection.default
                    });
                }
            });
        }
        if (changes['columns'] && this.columns) {
            this.rowCount = Math.max(...this.columns.map(column => {
                if (column.advancedHeader) {
                    return column.advancedHeader.length;
                }
                else {
                    return 0;
                }
            }));
            if (this.rowCount > 0) {
                this.rowCountArray = new Array(this.rowCount);
                this.initAdvanceHeader();
            }
            if (this.colDraggable) {
                this.rerenderTables();
            }
        }
        if (changes && changes.dataSource) {
            if (this.colDraggable) {
                this.rerenderTables();
            }
        }
        if (this.colDraggable && changes['tableBodyEl'] && this.tableBodyEl) {
            if (this.fixHeader && this.tableBodyEl && this.dataSource.length) {
                this.fixOriginTable = this.tableBodyEl.nativeElement;
                this.renderFixFakeTableEl();
                this.fixFakeTableEl.style.display = 'none';
                this.fixTableScrollViewEl = this.fixOriginTable.parentNode.parentNode;
                this.ref.markForCheck();
            }
        }
    }
    ngDoCheck() {
        if (!this.colDraggable) {
            return;
        }
        this.dataSource.forEach((elt, index) => {
            const objDiffer = this.objDiffer[index];
            if (!objDiffer) {
                return;
            }
            const objChanges = objDiffer.diff(elt);
            if (objChanges) {
                objChanges.forEachChangedItem((changeItem) => {
                    if (changeItem.key === '$isChildTableOpen' && elt.children && elt.children.length) {
                        this.rerenderTables();
                    }
                    if (changeItem.key === 'children') {
                        this.rerenderTables();
                    }
                });
            }
        });
        const changes = this.iterableDiffer.diff(this.columns);
        if (changes) {
            this.createCellMap();
        }
    }
    ngAfterViewInit() {
        if (this.colDraggable) {
            // set mirror container to table-wrap element
            this.mirrorContainer = this.element.nativeElement.parentNode.parentNode;
            this.bodyOverflow = this.documentElement.style.overflow;
            this.detecteOriginTable();
            setTimeout(() => {
                this.renderFakeTable();
                this.el.style.display = 'none';
            });
            this.documentElement.addEventListener('resize', this.renderFakeTable);
            this.createCellMap();
            this.scrollViewEl = this.originTable.parentNode.parentNode;
            this.scrollViewRect = this.scrollViewEl.getBoundingClientRect();
        }
    }
    createCellMap() {
        let cellIndex = 0;
        this.columns.forEach((column, index) => {
            if (!column.advancedHeader) {
                this.cellMap[cellIndex] = { name: column.field, sortKey: [index] };
                cellIndex++;
            }
            else {
                if (column.advancedHeader[0].colspan) {
                    this.cellMap[cellIndex] = {
                        name: column.field, isAdvanceHeader: true,
                        sortKey: [index], headerLength: column.advancedHeader[0].colspan
                    };
                    cellIndex++;
                }
                else {
                    Object.keys(this.cellMap).forEach(key => {
                        const item = this.cellMap[key];
                        if (item.isAdvanceHeader && item.sortKey.length < item.headerLength) {
                            item.sortKey.push(index);
                        }
                    });
                }
            }
        });
    }
    ngOnDestroy() {
        if (this.colDraggable) {
            this.documentElement.removeEventListener('resize', this.renderFakeTable);
        }
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
    onHeadClick(event, column) {
        event.field = column.field;
        delete event.th;
        this.headClickSortEvent.emit(event);
    }
    onCheckAllChange() {
        this.dt.onCheckAllChange(this.pageAllChecked);
    }
    onSearchQueryChange() {
        this.dt.onSearchQueryChange(this.searchQuery);
    }
    canFilterable(column) {
        return column.field && column.field !== '$index' && column.filterable;
    }
    getIfExistMultiSort(field) {
        const column = this.columns.find(item => item['field'] === field);
        return !!column.sortable;
    }
    getSortDirection(field) {
        if (!this.multiSortArray) {
            return false;
        }
        const filterField = this.multiSortArray.filter(item => {
            return item['field'] === field;
        });
        if (filterField.length !== 0) {
            return filterField[0]['direction'];
        }
        else {
            return undefined;
        }
    }
    onResize($event, column) {
        this.resizeHandlerEvent.emit(Object.assign(Object.assign({}, $event), { field: column.field }));
    }
    onBeginResize($event) {
        const thRenderWidthList = [];
        this.thList.forEach(th => {
            thRenderWidthList.push({ field: th.element.getAttribute('field'), width: th.element.clientWidth });
        });
        this.beginResizeHandlerEvent.emit({ event: $event, thRenderWidthList });
    }
    onResizing($event, column) {
        this.resizingHandlerEvent.emit(Object.assign(Object.assign({}, $event), { field: column.field }));
    }
    // 初始化多行表头，为了兼容resizeable对表头互相影响数据做了记录
    initAdvanceHeader() {
        if (this.resizeable) {
            this.columns.forEach((column, colIndex) => {
                if (column['advancedHeader']) {
                    column['advancedHeader'].forEach((item, rowIndex) => {
                        item['$rowIndex'] = rowIndex;
                        item['$colIndex'] = colIndex;
                        item['$cols'] = new Array(item.colspan).fill(1).map((v, i) => colIndex + i);
                    });
                }
                column['$colIndex'] = colIndex;
            });
        }
    }
    trackByFn(index, item) {
        return index;
    }
    onTap(e) {
        e.preventDefault();
        this.originCellIndex = this.findCellIndex(e);
        setTimeout(() => {
            this.documentElement.addEventListener('mousemove', this.handleMousemove);
            this.documentElement.addEventListener('mouseup', () => {
                this.documentElement.removeEventListener('mousemove', this.handleMousemove);
            });
        });
    }
    appendSibling({ target, origin }) {
        if (!target) {
            return;
        }
        target.parentNode.insertBefore(target, origin ? origin.nextElementSibling : null);
    }
    getOffset(el) {
        const rect = el.getBoundingClientRect();
        return {
            left: rect.left + this.getScroll('scrollLeft', 'pageXOffset'),
            top: rect.top + this.getScroll('scrollTop', 'pageYOffset')
        };
    }
    getScroll(scrollProp, offsetProp) {
        if (typeof window !== undefined && typeof window[offsetProp] !== 'undefined') {
            return window[offsetProp];
        }
        if (this.documentElement.clientHeight) {
            return this.documentElement[scrollProp];
        }
        return this.document.body[scrollProp];
    }
    dispatchMousedown() {
        const { el, originCellIndex } = this;
        el.children[originCellIndex.x].dispatchEvent(this.getTouchyEvent());
    }
    getTouchyEvent() {
        let event;
        // This is true only for IE,firefox
        if (this.document.createEvent) {
            // To create a mouse event , first we need to create an event and then initialize it.
            event = this.document.createEvent('MouseEvent');
            event.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        }
        else {
            event = new MouseEvent('mousedown', {
                'view': window,
                'bubbles': true,
                'cancelable': true
            });
        }
        return event;
    }
    removeMirrorImage() {
        if (this.mirror) {
            this.documentElement.removeEventListener('mousemove', this.grab);
            this.getParent(this.mirror).removeChild(this.mirror);
            this.mirror = null;
            setTimeout(() => {
                this.rmClass(this.mirrorContainer, 'gu-unselectable');
                this.rmClass(this.documentElement, 'gu-unselectable');
            });
        }
    }
    canStart(item) {
        while (this.getParent(item) && this.isContainer(this.getParent(item)) === false) {
            item = this.getParent(item); // drag target should be a top element
            if (!item) {
                return;
            }
        }
        const source = this.getParent(item);
        if (!source) {
            return;
        }
        return {
            item: item,
            source: source
        };
    }
    detecteOriginTable() {
        let target = this.element.nativeElement;
        while (target.nodeName !== 'TABLE') {
            target = target.parentElement;
        }
        this.originTable = target;
        if (this.fixHeader && this.tableBodyEl) {
            this.fixOriginTable = this.tableBodyEl.nativeElement;
            this.detecteChildTables(this.fixOriginTable);
        }
        else {
            this.detecteChildTables(this.originTable);
        }
    }
    renderFakeTable() {
        if (this.el && !this.dataSourceChange) {
            return;
        }
        this.childTables = [];
        this.detecteChildTables(this.originTable);
        const fakeTable = this.buildFakeTable(this.originTable);
        this.fakeTable = fakeTable;
        const el = fakeTable.reduce((previous, current) => {
            const li = this.document.createElement('li');
            if (current) {
                li.appendChild(current);
            }
            return previous.appendChild(li) && previous;
        }, this.document.createElement('ul'));
        this.el = el;
        this.renderEl(el, this.originTable, fakeTable);
    }
    renderFixFakeTableEl() {
        if (this.fixFakeTableEl && !this.dataSourceChange) {
            return;
        }
        const fakeTable = this.buildFakeTable(this.fixOriginTable);
        this.mainFakeTable = fakeTable;
        const el = fakeTable.reduce((previous, current) => {
            const li = this.document.createElement('li');
            li.appendChild(current);
            return previous.appendChild(li) && previous;
        }, this.document.createElement('ul'));
        this.fixFakeTableEl = el;
        this.renderEl(el, this.fixOriginTable, this.mainFakeTable);
    }
    buildFakeTable(table) {
        this.colOffset = 0;
        this.secondHeaderOffset = 0;
        return Array.from(table.rows[0].children).map((cell, index) => {
            return this.getColumnAsTableByIndex(table, index, cell.colSpan, cell.rowSpan);
        });
    }
    renderEl(el, originEl, fakeTables) {
        if (typeof window === undefined) {
            return;
        }
        this.sizeColumnFake(fakeTables, originEl);
        this.css(el, {
            position: 'absolute',
        });
        if (originEl.parentNode.children[0].nodeName === 'UL') {
            originEl.parentNode.removeChild(originEl.parentNode.children[0]);
            this.insertBeforeSibling({ target: el, origin: originEl });
        }
        else {
            this.insertBeforeSibling({ target: el, origin: originEl });
        }
        // render every wrapper of table(element li)
        const spacing = window.getComputedStyle(originEl).getPropertyValue('border-spacing').split(' ')[0];
        const attr = 'margin-right';
        const length = el.children.length;
        Array.from(el.children).forEach((li, dex) => {
            if (spacing && dex < (length - 1)) {
                li.style[attr] = `-${spacing}`;
            }
        });
        this.addClass(el.parentElement, this.classes.dragging);
        this.addClass(el, this.classes.draggableTable);
        this.addClass(el, 'sindu_column');
    }
    sizeColumnFake(fakeTables, originEl) {
        // calculate width of every column
        Array.from(originEl.rows[0].children).forEach((cell, index) => {
            if (!fakeTables[index]) {
                return;
            }
            const w = cell.getBoundingClientRect().width;
            const t = fakeTables[index];
            this.css(t, { width: `${w}px` });
            this.css(t.rows[0].children[0], { width: `${w}px` });
        });
    }
    css(el, cssList) {
        Object.keys(cssList).forEach((k) => {
            el.style[k] = cssList[k];
        });
        return el;
    }
    insertBeforeSibling({ target, origin }) {
        if (!target) {
            return;
        }
        origin.parentNode.insertBefore(target, origin);
    }
    findCellIndex(e) {
        let target = e.target;
        while (target.nodeName !== 'TH') {
            target = target.parentElement || target.parentNode;
        }
        return { x: target.cellIndex, y: target.parentElement.rowIndex };
    }
    renderMirrorImage(target) {
        if (this.mirror) {
            return;
        }
        this.mirror = target.cloneNode(true);
        const getFixTableTotalHeight = () => {
            return this.fixOriginTable.parentNode.parentNode.parentNode.getBoundingClientRect().height;
        };
        const getTableTotalHeight = () => {
            return this.originTable.parentNode.parentNode.parentNode.getBoundingClientRect().height;
        };
        // 固定表头表格时，对拖动内容进行截取
        if (this.fixHeader) {
            const to = Array.from(this.el.children).indexOf(target);
            const fixTarget = this.fixFakeTableEl.children[to].children[0].cloneNode(true);
            const fixTargetContainer = this.document.createElement('div');
            const mirrorHeight = Math.min(parseInt(this.maxHeight, 10), getFixTableTotalHeight());
            fixTargetContainer.style.height = mirrorHeight + 'px';
            fixTargetContainer.style.overflow = 'hidden';
            fixTargetContainer.appendChild(fixTarget);
            fixTarget.style.maxHeight = this.maxHeight;
            fixTarget.style.top = '-' + this.fixTableOffsetTop + 'px';
            this.mirror.appendChild(fixTargetContainer);
        }
        // 设置最大高度，但不是固定表头的表格
        if (!this.fixHeader && this.maxHeight) {
            const mirrorHeight = Math.min(parseInt(this.maxHeight, 10), getTableTotalHeight());
            this.mirror.style.height = mirrorHeight + 'px';
            this.mirror.style.overflow = 'hidden';
        }
        this.mirror.style.visibility = 'hidden';
        const thNode = this.mirror.querySelector('th');
        this.addClass(thNode, 'hover');
        this.rmClass(this.mirror, 'gu-transit');
        this.addClass(this.mirror, 'gu-mirror');
        this.mirrorContainer.appendChild(this.mirror);
        this.addClass(this.mirrorContainer, 'gu-unselectable');
    }
    lookupClass(className) {
        const cache = {};
        const start = '(?:^|\\s)';
        const end = '(?:\\s|$)';
        let cached = cache[className];
        if (cached) {
            cached.lastIndex = 0;
        }
        else {
            cache[className] = cached = new RegExp(start + className + end, 'g');
        }
        return cached;
    }
    addClass(el, className) {
        const current = el.className;
        if (!current.length) {
            el.className = className;
        }
        else if (!this.lookupClass(className).test(current)) {
            el.className += ' ' + className;
        }
    }
    rmClass(el, className) {
        el.className = el.className.replace(this.lookupClass(className), ' ').trim();
    }
    handleScroll(x, y, e) {
        this.scrollViewRect = this.scrollViewEl.getBoundingClientRect();
        let fixTableScrollViewRect;
        if (this.fixHeader) {
            this.fixTableScrollViewEl = this.fixOriginTable.parentNode.parentNode;
            fixTableScrollViewRect = this.fixTableScrollViewEl.getBoundingClientRect();
        }
        let scrollLeft = this.scrollViewEl.scrollLeft;
        const range = 150;
        const scrollToLeft = () => {
            scrollLeft -= 50;
            if (this.fixHeader) {
                this.fixTableScrollViewEl.scrollTo(scrollLeft, 0);
            }
            this.scrollViewEl.scrollTo(scrollLeft, 0);
            this.animationRequestId = requestAnimationFrame(scrollToLeft);
            this.documentElement.dispatchEvent(e);
        };
        const scrollToRight = () => {
            scrollLeft += 50;
            if (this.fixHeader) {
                this.fixTableScrollViewEl.scrollTo(scrollLeft, 0);
            }
            this.scrollViewEl.scrollTo(scrollLeft, 0);
            this.animationRequestId = requestAnimationFrame(scrollToRight);
            this.documentElement.dispatchEvent(e);
        };
        if (!this.fixHeader && (y < this.scrollViewRect.top || y > this.scrollViewRect.bottom)) {
            return;
        }
        if (this.fixHeader && (y < this.scrollViewRect.top || y > fixTableScrollViewRect.bottom)) {
            return;
        }
        if (this.scrollViewRect.left < x && x < (this.scrollViewRect.left + range)) {
            this.animationRequestId = requestAnimationFrame(scrollToLeft);
        }
        if ((this.scrollViewRect.right - range) < x && x < this.scrollViewRect.right) {
            this.animationRequestId = requestAnimationFrame(scrollToRight);
        }
    }
    moveTarget(container, target, reference) {
        container.insertBefore(target, reference);
    }
    getParent(el) {
        return el.parentNode === this.document ? null : el.parentNode;
    }
    getEventHost(e) {
        if (e.targetTouches && e.targetTouches.length) {
            return e.targetTouches[0];
        }
        if (e.changedTouches && e.changedTouches.length) {
            return e.changedTouches[0];
        }
        return e;
    }
    getCoord(coord, e) {
        const host = this.getEventHost(e);
        return host[coord];
    }
    getColumnAsTableByIndex(table, selectedColIndex, colSpan, rowSpan) {
        const skipRowIndexList = this.getDataBetween(0, 0 + rowSpan);
        const cTable = table.cloneNode(true);
        cTable.removeChild(cTable.firstChild); // remove colgroup
        if (this.fixHeader) {
            cTable.deleteCaption();
        }
        else if (!this.fixHeader && cTable.tBodies.length > 1) {
            cTable.removeChild(cTable.tBodies[0]);
        }
        this.origin2DragItem(cTable);
        const empty = (node) => {
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }
        };
        const insertBodyColList = this.getDataBetween(selectedColIndex - 1 + this.colOffset, selectedColIndex + this.colOffset + colSpan);
        const insertHeaderColList = this.getDataBetween(selectedColIndex + this.secondHeaderOffset - 1, selectedColIndex +
            this.secondHeaderOffset + colSpan - rowSpan + 1);
        const getTreeTableCol = (row, rowIndex) => {
            const target = this.getChildTableColumn(row.children[0].children[0], selectedColIndex);
            empty(row.children[0]);
            row.children[0].appendChild(target);
        };
        const getMultipleHCol = (row, rowIndex) => {
            if (rowIndex === 0) {
                const target = row.children[selectedColIndex];
                empty(row);
                if (target) {
                    row.appendChild(target);
                }
                return;
            }
            if (rowIndex === 1) {
                const targets = insertHeaderColList.map((colIndex) => {
                    return row.children[colIndex];
                });
                empty(row);
                targets.forEach((target) => {
                    if (target) {
                        row.appendChild(target);
                    }
                });
                return;
            }
            else {
                const targets = insertBodyColList.map((colIndex) => {
                    return row.children[colIndex];
                });
                empty(row);
                targets.forEach((target) => {
                    if (target) {
                        row.appendChild(target);
                    }
                });
            }
        };
        const getNormalTableCol = (row, rowIndex) => {
            if (rowIndex === 0) {
                const target = row.children[selectedColIndex];
                empty(row);
                if (target) {
                    row.appendChild(target);
                }
            }
            else {
                const target = row.children[selectedColIndex + this.colOffset];
                empty(row);
                if (target && skipRowIndexList.indexOf(rowIndex) === -1) {
                    row.appendChild(target);
                }
            }
        };
        Array.from(cTable.rows).forEach((row, rowIndex) => {
            if (row.classList.contains('child-table')) {
                getTreeTableCol(row, rowIndex);
            }
            else {
                if (colSpan > 1) {
                    getMultipleHCol(row, rowIndex);
                }
                else {
                    getNormalTableCol(row, rowIndex);
                }
            }
            this.css(row, { height: `${table.rows[rowIndex].getBoundingClientRect().height}px` });
        });
        this.colOffset += (colSpan - 1);
        this.secondHeaderOffset = rowSpan > 1 ? this.secondHeaderOffset - 1 : this.secondHeaderOffset;
        return cTable;
    }
    getDataBetween(form, end) {
        const result = [];
        for (let i = form + 1; i < end; i++) {
            result.push(i);
        }
        return result;
    }
    sizeChildColumnFake(fakeTable, originEl, index) {
        // calculate width of every column
        const cell = Array.from(this.originTable.rows[0].children)[index];
        const w = cell.getBoundingClientRect().width;
        this.css(fakeTable, { width: `${w}px` });
        this.css(fakeTable.rows[0].children[0], { width: `${w}px` });
        // calculate height of every cell
        const rowHeights = Array.from(originEl.rows)
            .map(row => row.children[0].getBoundingClientRect().height);
        Array.from(fakeTable.rows).forEach((row, rowIndex) => {
            this.css(row, { height: `${rowHeights[rowIndex]}px` });
        });
    }
    origin2DragItem(liTable) {
        this.css(liTable, { 'table-layout': 'fixed', width: 'initial', height: 'initial', padding: 0, margin: 0 });
        ['width', 'height', 'id'].forEach((p) => {
            liTable.removeAttribute(p);
        });
    }
    getElementBehindPoint(point, x, y) {
        const p = point || {};
        const state = p.className;
        p.className += ' gu-hide';
        const el = this.document.elementFromPoint(x, y);
        p.className = state;
        return el;
    }
    findDropTarget(elementBehindCursor, clientX, clientY) {
        let target = elementBehindCursor;
        const accepted = () => {
            const droppable = this.isContainer(target);
            if (droppable === false) {
                return false;
            }
            const immediate = this.getImmediateChild(target, elementBehindCursor);
            if (!immediate) {
                return false;
            }
            const reference = this.getReference(target, immediate, clientX);
            const initial = this.isInitialPlacement(target, reference);
            if (initial) {
                return true; // should always be able to drop it right back where it was
            }
            return true;
        };
        while (target && !accepted()) {
            target = this.getParent(target);
        }
        return target;
    }
    getRectWidth(rect) {
        return rect.width || (rect.right - rect.left);
    }
    getRectHeight(rect) {
        return rect.height || (rect.bottom - rect.top);
    }
    nextEl(el) {
        return el.nextElementSibling || manually();
        function manually() {
            let sibling = el;
            do {
                sibling = sibling.nextSibling;
            } while (sibling && sibling.nodeType !== 1);
            return sibling;
        }
    }
    isInitialPlacement(target, s) {
        let sibling;
        if (s !== undefined) {
            sibling = s;
        }
        else if (this.mirror) {
            sibling = this.currentSibling;
        }
        else {
            sibling = this.nextEl(this.item);
        }
        return target === this.source && sibling === this.initialSibling;
    }
    isContainer(el) {
        return el === this.el;
    }
    animate(prevRect, target, time) {
        if (time) {
            if (!prevRect || !target) {
                return;
            }
            const currentRect = target.getBoundingClientRect();
            target.style.transition = 'none';
            target.style.transform = 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)';
            target.style.transition = 'all ' + time + 'ms cubic-bezier(0.755, 0.05, 0.855, 0.06)';
            target.style.transform = 'translate3d(0,0,0)';
            clearTimeout(target.animated);
            target.animated = setTimeout(function () {
                target.style.transition = '';
                target.style.transform = '';
                target.animated = false;
            }, time);
        }
    }
    toggleChildrenTable(event) {
        this.childrenTableOpen = !this.childrenTableOpen;
        this.dt.onToggleAllChildrenTable(this.childrenTableOpen);
    }
    onOptionSelect(option) {
        if (option.onChecked) {
            option.onChecked();
        }
    }
}
DataTableHeadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableHeadComponent, deps: [{ token: DATA_TABLE }, { token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }, { token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i1$2.I18nService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DataTableHeadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableHeadComponent, selector: "d-data-table-head,[dDataTableHead]", inputs: { checkable: "checkable", headerCheckDisabled: "headerCheckDisabled", headerCheckVisible: "headerCheckVisible", checkOptions: "checkOptions", showExpandToggle: "showExpandToggle", pageAllChecked: "pageAllChecked", columns: "columns", multiSort: "multiSort", resizeable: "resizeable", maxHeight: "maxHeight", showSortIcon: "showSortIcon", showFilterIcon: "showFilterIcon", colDropFreezeTo: "colDropFreezeTo", colDraggable: "colDraggable", fixHeader: "fixHeader", dataSource: "dataSource", tableViewRefElement: "tableViewRefElement", tableBodyEl: "tableBodyEl", checkableColumn: "checkableColumn", showExpandToggleColumn: "showExpandToggleColumn", halfChecked: "halfChecked", childrenTableOpen: "childrenTableOpen" }, outputs: { headClickSortEvent: "headClickSortEvent", resizeHandlerEvent: "resizeHandlerEvent", beginResizeHandlerEvent: "beginResizeHandlerEvent", resizingHandlerEvent: "resizingHandlerEvent", dragTableEndEvent: "dragTableEndEvent" }, viewQueries: [{ propertyName: "thList", predicate: TableThComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-container>\n  <ng-template [ngTemplateOutlet]=\"defaultHeadTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this }\" *ngIf=\"!(rowCount > 0)\">\n  </ng-template>\n  <ng-template\n    [ngTemplateOutlet]=\"AdvancedHeadTmpl\"\n    [ngTemplateOutletContext]=\"{ $implicit: this, rows: rowCountArray }\"\n    *ngIf=\"rowCount > 0\"\n  >\n  </ng-template>\n</ng-container>\n\n<!-- begin:template: header label template-->\n<ng-template #defaultHeadTemplate let-head=\"\">\n  <tr>\n    <th\n      *ngIf=\"showExpandToggle\"\n      class=\"devui-detail-cell\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"0\"\n    ></th>\n    <th\n      *ngIf=\"checkable\"\n      class=\"devui-checkable-cell\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"showExpandToggle && columns[0]?.fixedLeft ? '16px' : '0'\"\n    >\n      <d-checkbox\n        *ngIf=\"headerCheckVisible\"\n        class=\"check-box-all\"\n        [name]=\"'checkAll'\"\n        [disabled]=\"headerCheckDisabled\"\n        (change)=\"onCheckAllChange()\"\n        [(ngModel)]=\"pageAllChecked\"\n        [halfchecked]=\"halfChecked\"\n      >\n      </d-checkbox>\n      <div *ngIf=\"checkOptions && checkOptions.length > 0\" dDropDown appendToBody [trigger]=\"'hover'\" class=\"select-options\">\n        <div dDropDownToggle>\n          <svg\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            height=\"16px\"\n            version=\"1.1\"\n            viewBox=\"0 0 16 16\"\n            width=\"16px\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\" fill-rule=\"evenodd\" id=\"chevron_down\" stroke=\"none\" stroke-width=\"1\">\n              <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n            </g>\n          </svg>\n        </div>\n        <ul dDropDownMenu class=\"devui-dropdown-menu\" role=\"menu\">\n          <li *ngFor=\"let option of checkOptions\" role=\"menuitem\" (click)=\"onOptionSelect(option)\">\n            <a class=\"devui-dropdown-item\">{{ option.label }}</a>\n          </li>\n        </ul>\n      </div>\n    </th>\n    <th\n      dHeadCell\n      *ngFor=\"let column of columns; trackBy: trackByFn; let last = last; let colIndex = index\"\n      [minWidth]=\"column.minWidth\"\n      [maxWidth]=\"column.maxWidth\"\n      [attr.field]=\"column.field\"\n      [showSortIcon]=\"showSortIcon\"\n      [showFilterIcon]=\"showFilterIcon\"\n      [sortable]=\"getIfExistMultiSort(column.field)\"\n      [sortDirection]=\"getSortDirection(column.field)\"\n      (sortChange)=\"onHeadClick($event, column)\"\n      [filterable]=\"canFilterable(column)\"\n      [closeFilterWhenScroll]=\"column.closeFilterWhenScroll\"\n      [filterList]=\"column.filterList\"\n      [column]=\"column\"\n      [filterMultiple]=\"column.filterMultiple\"\n      [filterBoxWidth]=\"column.filterBoxWidth\"\n      [filterBoxHeight]=\"column.filterBoxHeight\"\n      [filterIconActive]=\"column.filterIconActive\"\n      [beforeFilter]=\"column.beforeFilter\"\n      [customFilterTemplate]=\"column.customFilterTemplate\"\n      [extraFilterTemplate]=\"column.extraFilterTemplate\"\n      [searchFn]=\"column.searchFn\"\n      (filterChange)=\"column.emitFilterData($event)\"\n      (filterToggle)=\"column.emitFilterToggle($event)\"\n      [fixedLeft]=\"column.fixedLeft\"\n      [isLastFixedLeft]=\"column.fixedLeft && !columns[colIndex + 1]?.fixedLeft\"\n      [fixedRight]=\"column.fixedRight\"\n      [isFirstFixedRight]=\"column.fixedRight && !columns[colIndex - 1]?.fixedRight\"\n      [nestedColumn]=\"column.extraOptions?.showHeadTableToggler\"\n      (toggleChildrenTableEvent)=\"toggleChildrenTable($event)\"\n      (tapEvent)=\"onTap($event)\"\n      [iconFoldTable]=\"column.extraOptions?.iconFoldTable\"\n      [iconUnFoldTable]=\"column.extraOptions?.iconUnFoldTable\"\n      [tableViewRefElement]=\"tableViewRefElement\"\n      [colDraggable]=\"colDraggable && colIndex > head?.colDropFreezeTo - 1\"\n      [childrenTableOpen]=\"childrenTableOpen\"\n      [ngClass]=\"{\n        sindu_handle: colDraggable && colIndex > head?.colDropFreezeTo - 1,\n        'drop-freeze': colDraggable && colIndex < head?.colDropFreezeTo\n      }\"\n      [resizeEnabled]=\"resizeable\"\n      (resizeEndEvent)=\"onResize($event, column)\"\n      (resizeStartEvent)=\"onBeginResize($event)\"\n      (resizingEvent)=\"onResizing($event, column)\"\n    >\n      <span *ngIf=\"!column.headCellTmpl?.template\" [attr.title]=\"column.header\">{{ column.header }}</span>\n      <ng-container *ngIf=\"column.headCellTmpl?.template\">\n        <ng-template\n          [ngTemplateOutlet]=\"column.headCellTmpl?.template\"\n          [ngTemplateOutletContext]=\"{ column: column, $implicit: head }\"\n        ></ng-template>\n      </ng-container>\n    </th>\n  </tr>\n</ng-template>\n<!--end:tempate-->\n\n<ng-template let-head=\"\" let-rows=\"rows\" #AdvancedHeadTmpl>\n  <tr *ngFor=\"let rowContex of rows; let rowIndex = index\">\n    <th\n      *ngIf=\"showExpandToggle && rowIndex === 0\"\n      class=\"devui-detail-cell\"\n      [attr.rowspan]=\"rows?.length || 1\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"0\"\n    ></th>\n    <th\n      *ngIf=\"checkable && rowIndex === 0\"\n      class=\"devui-checkable-cell\"\n      [attr.rowspan]=\"rows?.length || 1\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"showExpandToggle && columns[0]?.fixedLeft ? '16px' : '0'\"\n    >\n      <d-checkbox\n        *ngIf=\"headerCheckVisible\"\n        class=\"check-box-all\"\n        [name]=\"'checkAll'\"\n        [disabled]=\"headerCheckDisabled\"\n        (change)=\"onCheckAllChange()\"\n        [(ngModel)]=\"pageAllChecked\"\n        [halfchecked]=\"halfChecked\"\n      >\n      </d-checkbox>\n      <div *ngIf=\"checkOptions && checkOptions.length > 0\" dDropDown appendToBody [trigger]=\"'hover'\" class=\"select-options\">\n        <div dDropDownToggle>\n          <svg\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            height=\"16px\"\n            version=\"1.1\"\n            viewBox=\"0 0 16 16\"\n            width=\"16px\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\" fill-rule=\"evenodd\" id=\"chevron_down\" stroke=\"none\" stroke-width=\"1\">\n              <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n            </g>\n          </svg>\n        </div>\n        <ul dDropDownMenu class=\"devui-dropdown-menu\" role=\"menu\">\n          <li *ngFor=\"let option of checkOptions\" role=\"menuitem\" (click)=\"onOptionSelect(option)\">\n            <a class=\"devui-dropdown-item\">{{ option.label }}</a>\n          </li>\n        </ul>\n      </div>\n    </th>\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByFn; let colIndex = index; let last = last\">\n      <th\n        dHeadCell\n        *ngIf=\"column.advancedHeader && column.advancedHeader[rowIndex]?.rowspan && column.advancedHeader[rowIndex]?.colspan\"\n        [attr.rowspan]=\"column.advancedHeader[rowIndex]?.rowspan\"\n        [attr.colspan]=\"column.advancedHeader[rowIndex]?.colspan\"\n        [style.textAlign]=\"\n          rowIndex !== column.advancedHeader.length - 1 &&\n          (column.advancedHeader[rowIndex]?.rowspan > 0 || column.advancedHeader[rowIndex]?.colspan > 0)\n            ? 'center'\n            : ''\n        \"\n        [minWidth]=\"column.minWidth\"\n        [attr.field]=\"column.field\"\n        [maxWidth]=\"column.maxWidth\"\n        [resizeEnabled]=\"resizeable && rowIndex === column.advancedHeader.length - 1 && !last\"\n        (resizeEndEvent)=\"onResize($event, column)\"\n        (resizeStartEvent)=\"onBeginResize($event)\"\n        (resizingEvent)=\"onResizing($event, column)\"\n        [showSortIcon]=\"showSortIcon\"\n        [showFilterIcon]=\"showFilterIcon\"\n        [sortable]=\"getIfExistMultiSort(column.field) && rowIndex === column.advancedHeader.length - 1\"\n        [sortDirection]=\"getSortDirection(column.field)\"\n        (sortChange)=\"onHeadClick($event, column)\"\n        [filterable]=\"canFilterable(column) && rowIndex === column.advancedHeader.length - 1\"\n        [closeFilterWhenScroll]=\"column.closeFilterWhenScroll\"\n        [filterList]=\"column.filterList\"\n        [column]=\"column\"\n        [filterMultiple]=\"column.filterMultiple\"\n        [filterBoxWidth]=\"column.filterBoxWidth\"\n        [filterBoxHeight]=\"column.filterBoxHeight\"\n        [filterIconActive]=\"column.filterIconActive\"\n        [beforeFilter]=\"column.beforeFilter\"\n        [customFilterTemplate]=\"column.customFilterTemplate\"\n        [extraFilterTemplate]=\"column.extraFilterTemplate\"\n        [searchFn]=\"column.searchFn\"\n        (filterChange)=\"column.emitFilterData($event)\"\n        (filterToggle)=\"column.emitFilterToggle($event)\"\n        [fixedLeft]=\"column.fixedLeft\"\n        [isLastFixedLeft]=\"column.fixedLeft && !columns[colIndex + 1]?.fixedLeft\"\n        [fixedRight]=\"column.fixedRight\"\n        [isFirstFixedRight]=\"column.fixedRight && !columns[colIndex - 1]?.fixedRight\"\n        [nestedColumn]=\"column.extraOptions?.showHeadTableToggler\"\n        (toggleChildrenTableEvent)=\"toggleChildrenTable($event)\"\n        (tapEvent)=\"onTap($event)\"\n        [iconFoldTable]=\"column.extraOptions?.iconFoldTable\"\n        [iconUnFoldTable]=\"column.extraOptions?.iconUnFoldTable\"\n        [tableViewRefElement]=\"tableViewRefElement\"\n        [colDraggable]=\"colDraggable && colIndex > head?.colDropFreezeTo - 1\"\n        [childrenTableOpen]=\"childrenTableOpen\"\n        [ngClass]=\"{\n          sindu_handle: colDraggable && colIndex > head?.colDropFreezeTo - 1,\n          'drop-freeze': colDraggable && colIndex < head?.colDropFreezeTo\n        }\"\n      >\n        <span *ngIf=\"rowIndex < rows.length - 1 || !column.headCellTmpl?.template\" [attr.title]=\"column.advancedHeader[rowIndex].header\">{{\n          column.advancedHeader[rowIndex].header\n        }}</span>\n        <ng-container *ngIf=\"column.headCellTmpl?.template && rowIndex === rows.length - 1\">\n          <ng-template\n            [ngTemplateOutlet]=\"column.headCellTmpl?.template\"\n            [ngTemplateOutletContext]=\"{\n              column: column,\n              $implicit: head,\n              rowIndex: rowIndex,\n              colIndex: colIndex\n            }\"\n          >\n          </ng-template>\n        </ng-container>\n      </th>\n      <th\n        dHeadCell\n        *ngIf=\"!column.advancedHeader && rowIndex === 0\"\n        [minWidth]=\"column.minWidth\"\n        [maxWidth]=\"column.maxWidth\"\n        [attr.field]=\"column.field\"\n        [showSortIcon]=\"showSortIcon\"\n        [showFilterIcon]=\"showFilterIcon\"\n        [sortable]=\"getIfExistMultiSort(column.field)\"\n        [sortDirection]=\"getSortDirection(column.field)\"\n        (sortChange)=\"onHeadClick($event, column)\"\n        [filterable]=\"canFilterable(column)\"\n        [closeFilterWhenScroll]=\"column.closeFilterWhenScroll\"\n        [filterList]=\"column.filterList\"\n        [column]=\"column\"\n        [filterMultiple]=\"column.filterMultiple\"\n        [filterBoxWidth]=\"column.filterBoxWidth\"\n        [filterBoxHeight]=\"column.filterBoxHeight\"\n        [filterIconActive]=\"column.filterIconActive\"\n        [beforeFilter]=\"column.beforeFilter\"\n        [customFilterTemplate]=\"column.customFilterTemplate\"\n        [extraFilterTemplate]=\"column.extraFilterTemplate\"\n        [searchFn]=\"column.searchFn\"\n        (filterChange)=\"column.emitFilterData($event)\"\n        (filterToggle)=\"column.emitFilterToggle($event)\"\n        [fixedLeft]=\"column.fixedLeft\"\n        [isLastFixedLeft]=\"column.fixedLeft && !columns[colIndex + 1]?.fixedLeft\"\n        [fixedRight]=\"column.fixedRight\"\n        [isFirstFixedRight]=\"column.fixedRight && !columns[colIndex - 1]?.fixedRight\"\n        [nestedColumn]=\"column.extraOptions?.showHeadTableToggler\"\n        (toggleChildrenTableEvent)=\"toggleChildrenTable($event)\"\n        (tapEvent)=\"onTap($event)\"\n        [iconFoldTable]=\"column.extraOptions?.iconFoldTable\"\n        [iconUnFoldTable]=\"column.extraOptions?.iconUnFoldTable\"\n        [tableViewRefElement]=\"tableViewRefElement\"\n        [colDraggable]=\"colDraggable && colIndex > head?.colDropFreezeTo - 1\"\n        [childrenTableOpen]=\"childrenTableOpen\"\n        [ngClass]=\"{\n          sindu_handle: colDraggable && colIndex > head?.colDropFreezeTo - 1,\n          'drop-freeze': colDraggable && colIndex < head?.colDropFreezeTo\n        }\"\n        [resizeEnabled]=\"resizeable\"\n        (resizeEndEvent)=\"onResize($event, column)\"\n        (resizeStartEvent)=\"onBeginResize($event)\"\n        (resizingEvent)=\"onResizing($event, column)\"\n        [attr.rowspan]=\"rows?.length || 1\"\n      >\n        <span *ngIf=\"!column.headCellTmpl?.template\" [attr.title]=\"column.header\">{{ column.header }}</span>\n        <ng-container *ngIf=\"column.headCellTmpl?.template\">\n          <ng-template\n            [ngTemplateOutlet]=\"column.headCellTmpl?.template\"\n            [ngTemplateOutletContext]=\"{ column: column, $implicit: head }\"\n          ></ng-template>\n        </ng-container>\n      </th>\n    </ng-container>\n    <!-- <th width=\"0\"  *ngIf=\"resizeable\"></th> -->\n  </tr>\n</ng-template>\n", styles: [".select-options{cursor:pointer;vertical-align:middle}svg>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}\n"], components: [{ type: i1$1.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }, { type: i2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }, { type: TableThComponent, selector: "[dHeadCell]", inputs: ["resizeEnabled", "filterable", "beforeFilter", "customFilterTemplate", "extraFilterTemplate", "searchFn", "showFilterIcon", "filterList", "filterIconActive", "filterMultiple", "closeFilterWhenScroll", "filterBoxWidth", "filterBoxHeight", "sortable", "sortDirection", "showSortIcon", "colDraggable", "nestedColumn", "iconFoldTable", "iconUnFoldTable", "tableViewRefElement", "minWidth", "maxWidth", "fixedLeft", "fixedRight", "isLastFixedLeft", "isFirstFixedRight", "childrenTableOpen", "column"], outputs: ["filterChange", "filterToggle", "sortDirectionChange", "sortChange", "resizeEndEvent", "resizeStartEvent", "resizingEvent", "toggleChildrenTableEvent", "tapEvent"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableHeadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-data-table-head,[dDataTableHead]', preserveWhitespaces: false, template: "<ng-container>\n  <ng-template [ngTemplateOutlet]=\"defaultHeadTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this }\" *ngIf=\"!(rowCount > 0)\">\n  </ng-template>\n  <ng-template\n    [ngTemplateOutlet]=\"AdvancedHeadTmpl\"\n    [ngTemplateOutletContext]=\"{ $implicit: this, rows: rowCountArray }\"\n    *ngIf=\"rowCount > 0\"\n  >\n  </ng-template>\n</ng-container>\n\n<!-- begin:template: header label template-->\n<ng-template #defaultHeadTemplate let-head=\"\">\n  <tr>\n    <th\n      *ngIf=\"showExpandToggle\"\n      class=\"devui-detail-cell\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"0\"\n    ></th>\n    <th\n      *ngIf=\"checkable\"\n      class=\"devui-checkable-cell\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"showExpandToggle && columns[0]?.fixedLeft ? '16px' : '0'\"\n    >\n      <d-checkbox\n        *ngIf=\"headerCheckVisible\"\n        class=\"check-box-all\"\n        [name]=\"'checkAll'\"\n        [disabled]=\"headerCheckDisabled\"\n        (change)=\"onCheckAllChange()\"\n        [(ngModel)]=\"pageAllChecked\"\n        [halfchecked]=\"halfChecked\"\n      >\n      </d-checkbox>\n      <div *ngIf=\"checkOptions && checkOptions.length > 0\" dDropDown appendToBody [trigger]=\"'hover'\" class=\"select-options\">\n        <div dDropDownToggle>\n          <svg\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            height=\"16px\"\n            version=\"1.1\"\n            viewBox=\"0 0 16 16\"\n            width=\"16px\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\" fill-rule=\"evenodd\" id=\"chevron_down\" stroke=\"none\" stroke-width=\"1\">\n              <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n            </g>\n          </svg>\n        </div>\n        <ul dDropDownMenu class=\"devui-dropdown-menu\" role=\"menu\">\n          <li *ngFor=\"let option of checkOptions\" role=\"menuitem\" (click)=\"onOptionSelect(option)\">\n            <a class=\"devui-dropdown-item\">{{ option.label }}</a>\n          </li>\n        </ul>\n      </div>\n    </th>\n    <th\n      dHeadCell\n      *ngFor=\"let column of columns; trackBy: trackByFn; let last = last; let colIndex = index\"\n      [minWidth]=\"column.minWidth\"\n      [maxWidth]=\"column.maxWidth\"\n      [attr.field]=\"column.field\"\n      [showSortIcon]=\"showSortIcon\"\n      [showFilterIcon]=\"showFilterIcon\"\n      [sortable]=\"getIfExistMultiSort(column.field)\"\n      [sortDirection]=\"getSortDirection(column.field)\"\n      (sortChange)=\"onHeadClick($event, column)\"\n      [filterable]=\"canFilterable(column)\"\n      [closeFilterWhenScroll]=\"column.closeFilterWhenScroll\"\n      [filterList]=\"column.filterList\"\n      [column]=\"column\"\n      [filterMultiple]=\"column.filterMultiple\"\n      [filterBoxWidth]=\"column.filterBoxWidth\"\n      [filterBoxHeight]=\"column.filterBoxHeight\"\n      [filterIconActive]=\"column.filterIconActive\"\n      [beforeFilter]=\"column.beforeFilter\"\n      [customFilterTemplate]=\"column.customFilterTemplate\"\n      [extraFilterTemplate]=\"column.extraFilterTemplate\"\n      [searchFn]=\"column.searchFn\"\n      (filterChange)=\"column.emitFilterData($event)\"\n      (filterToggle)=\"column.emitFilterToggle($event)\"\n      [fixedLeft]=\"column.fixedLeft\"\n      [isLastFixedLeft]=\"column.fixedLeft && !columns[colIndex + 1]?.fixedLeft\"\n      [fixedRight]=\"column.fixedRight\"\n      [isFirstFixedRight]=\"column.fixedRight && !columns[colIndex - 1]?.fixedRight\"\n      [nestedColumn]=\"column.extraOptions?.showHeadTableToggler\"\n      (toggleChildrenTableEvent)=\"toggleChildrenTable($event)\"\n      (tapEvent)=\"onTap($event)\"\n      [iconFoldTable]=\"column.extraOptions?.iconFoldTable\"\n      [iconUnFoldTable]=\"column.extraOptions?.iconUnFoldTable\"\n      [tableViewRefElement]=\"tableViewRefElement\"\n      [colDraggable]=\"colDraggable && colIndex > head?.colDropFreezeTo - 1\"\n      [childrenTableOpen]=\"childrenTableOpen\"\n      [ngClass]=\"{\n        sindu_handle: colDraggable && colIndex > head?.colDropFreezeTo - 1,\n        'drop-freeze': colDraggable && colIndex < head?.colDropFreezeTo\n      }\"\n      [resizeEnabled]=\"resizeable\"\n      (resizeEndEvent)=\"onResize($event, column)\"\n      (resizeStartEvent)=\"onBeginResize($event)\"\n      (resizingEvent)=\"onResizing($event, column)\"\n    >\n      <span *ngIf=\"!column.headCellTmpl?.template\" [attr.title]=\"column.header\">{{ column.header }}</span>\n      <ng-container *ngIf=\"column.headCellTmpl?.template\">\n        <ng-template\n          [ngTemplateOutlet]=\"column.headCellTmpl?.template\"\n          [ngTemplateOutletContext]=\"{ column: column, $implicit: head }\"\n        ></ng-template>\n      </ng-container>\n    </th>\n  </tr>\n</ng-template>\n<!--end:tempate-->\n\n<ng-template let-head=\"\" let-rows=\"rows\" #AdvancedHeadTmpl>\n  <tr *ngFor=\"let rowContex of rows; let rowIndex = index\">\n    <th\n      *ngIf=\"showExpandToggle && rowIndex === 0\"\n      class=\"devui-detail-cell\"\n      [attr.rowspan]=\"rows?.length || 1\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"0\"\n    ></th>\n    <th\n      *ngIf=\"checkable && rowIndex === 0\"\n      class=\"devui-checkable-cell\"\n      [attr.rowspan]=\"rows?.length || 1\"\n      [ngClass]=\"{ 'devui-sticky-left-cell': columns[0]?.fixedLeft }\"\n      [style.left]=\"showExpandToggle && columns[0]?.fixedLeft ? '16px' : '0'\"\n    >\n      <d-checkbox\n        *ngIf=\"headerCheckVisible\"\n        class=\"check-box-all\"\n        [name]=\"'checkAll'\"\n        [disabled]=\"headerCheckDisabled\"\n        (change)=\"onCheckAllChange()\"\n        [(ngModel)]=\"pageAllChecked\"\n        [halfchecked]=\"halfChecked\"\n      >\n      </d-checkbox>\n      <div *ngIf=\"checkOptions && checkOptions.length > 0\" dDropDown appendToBody [trigger]=\"'hover'\" class=\"select-options\">\n        <div dDropDownToggle>\n          <svg\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            height=\"16px\"\n            version=\"1.1\"\n            viewBox=\"0 0 16 16\"\n            width=\"16px\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\" fill-rule=\"evenodd\" id=\"chevron_down\" stroke=\"none\" stroke-width=\"1\">\n              <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n            </g>\n          </svg>\n        </div>\n        <ul dDropDownMenu class=\"devui-dropdown-menu\" role=\"menu\">\n          <li *ngFor=\"let option of checkOptions\" role=\"menuitem\" (click)=\"onOptionSelect(option)\">\n            <a class=\"devui-dropdown-item\">{{ option.label }}</a>\n          </li>\n        </ul>\n      </div>\n    </th>\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByFn; let colIndex = index; let last = last\">\n      <th\n        dHeadCell\n        *ngIf=\"column.advancedHeader && column.advancedHeader[rowIndex]?.rowspan && column.advancedHeader[rowIndex]?.colspan\"\n        [attr.rowspan]=\"column.advancedHeader[rowIndex]?.rowspan\"\n        [attr.colspan]=\"column.advancedHeader[rowIndex]?.colspan\"\n        [style.textAlign]=\"\n          rowIndex !== column.advancedHeader.length - 1 &&\n          (column.advancedHeader[rowIndex]?.rowspan > 0 || column.advancedHeader[rowIndex]?.colspan > 0)\n            ? 'center'\n            : ''\n        \"\n        [minWidth]=\"column.minWidth\"\n        [attr.field]=\"column.field\"\n        [maxWidth]=\"column.maxWidth\"\n        [resizeEnabled]=\"resizeable && rowIndex === column.advancedHeader.length - 1 && !last\"\n        (resizeEndEvent)=\"onResize($event, column)\"\n        (resizeStartEvent)=\"onBeginResize($event)\"\n        (resizingEvent)=\"onResizing($event, column)\"\n        [showSortIcon]=\"showSortIcon\"\n        [showFilterIcon]=\"showFilterIcon\"\n        [sortable]=\"getIfExistMultiSort(column.field) && rowIndex === column.advancedHeader.length - 1\"\n        [sortDirection]=\"getSortDirection(column.field)\"\n        (sortChange)=\"onHeadClick($event, column)\"\n        [filterable]=\"canFilterable(column) && rowIndex === column.advancedHeader.length - 1\"\n        [closeFilterWhenScroll]=\"column.closeFilterWhenScroll\"\n        [filterList]=\"column.filterList\"\n        [column]=\"column\"\n        [filterMultiple]=\"column.filterMultiple\"\n        [filterBoxWidth]=\"column.filterBoxWidth\"\n        [filterBoxHeight]=\"column.filterBoxHeight\"\n        [filterIconActive]=\"column.filterIconActive\"\n        [beforeFilter]=\"column.beforeFilter\"\n        [customFilterTemplate]=\"column.customFilterTemplate\"\n        [extraFilterTemplate]=\"column.extraFilterTemplate\"\n        [searchFn]=\"column.searchFn\"\n        (filterChange)=\"column.emitFilterData($event)\"\n        (filterToggle)=\"column.emitFilterToggle($event)\"\n        [fixedLeft]=\"column.fixedLeft\"\n        [isLastFixedLeft]=\"column.fixedLeft && !columns[colIndex + 1]?.fixedLeft\"\n        [fixedRight]=\"column.fixedRight\"\n        [isFirstFixedRight]=\"column.fixedRight && !columns[colIndex - 1]?.fixedRight\"\n        [nestedColumn]=\"column.extraOptions?.showHeadTableToggler\"\n        (toggleChildrenTableEvent)=\"toggleChildrenTable($event)\"\n        (tapEvent)=\"onTap($event)\"\n        [iconFoldTable]=\"column.extraOptions?.iconFoldTable\"\n        [iconUnFoldTable]=\"column.extraOptions?.iconUnFoldTable\"\n        [tableViewRefElement]=\"tableViewRefElement\"\n        [colDraggable]=\"colDraggable && colIndex > head?.colDropFreezeTo - 1\"\n        [childrenTableOpen]=\"childrenTableOpen\"\n        [ngClass]=\"{\n          sindu_handle: colDraggable && colIndex > head?.colDropFreezeTo - 1,\n          'drop-freeze': colDraggable && colIndex < head?.colDropFreezeTo\n        }\"\n      >\n        <span *ngIf=\"rowIndex < rows.length - 1 || !column.headCellTmpl?.template\" [attr.title]=\"column.advancedHeader[rowIndex].header\">{{\n          column.advancedHeader[rowIndex].header\n        }}</span>\n        <ng-container *ngIf=\"column.headCellTmpl?.template && rowIndex === rows.length - 1\">\n          <ng-template\n            [ngTemplateOutlet]=\"column.headCellTmpl?.template\"\n            [ngTemplateOutletContext]=\"{\n              column: column,\n              $implicit: head,\n              rowIndex: rowIndex,\n              colIndex: colIndex\n            }\"\n          >\n          </ng-template>\n        </ng-container>\n      </th>\n      <th\n        dHeadCell\n        *ngIf=\"!column.advancedHeader && rowIndex === 0\"\n        [minWidth]=\"column.minWidth\"\n        [maxWidth]=\"column.maxWidth\"\n        [attr.field]=\"column.field\"\n        [showSortIcon]=\"showSortIcon\"\n        [showFilterIcon]=\"showFilterIcon\"\n        [sortable]=\"getIfExistMultiSort(column.field)\"\n        [sortDirection]=\"getSortDirection(column.field)\"\n        (sortChange)=\"onHeadClick($event, column)\"\n        [filterable]=\"canFilterable(column)\"\n        [closeFilterWhenScroll]=\"column.closeFilterWhenScroll\"\n        [filterList]=\"column.filterList\"\n        [column]=\"column\"\n        [filterMultiple]=\"column.filterMultiple\"\n        [filterBoxWidth]=\"column.filterBoxWidth\"\n        [filterBoxHeight]=\"column.filterBoxHeight\"\n        [filterIconActive]=\"column.filterIconActive\"\n        [beforeFilter]=\"column.beforeFilter\"\n        [customFilterTemplate]=\"column.customFilterTemplate\"\n        [extraFilterTemplate]=\"column.extraFilterTemplate\"\n        [searchFn]=\"column.searchFn\"\n        (filterChange)=\"column.emitFilterData($event)\"\n        (filterToggle)=\"column.emitFilterToggle($event)\"\n        [fixedLeft]=\"column.fixedLeft\"\n        [isLastFixedLeft]=\"column.fixedLeft && !columns[colIndex + 1]?.fixedLeft\"\n        [fixedRight]=\"column.fixedRight\"\n        [isFirstFixedRight]=\"column.fixedRight && !columns[colIndex - 1]?.fixedRight\"\n        [nestedColumn]=\"column.extraOptions?.showHeadTableToggler\"\n        (toggleChildrenTableEvent)=\"toggleChildrenTable($event)\"\n        (tapEvent)=\"onTap($event)\"\n        [iconFoldTable]=\"column.extraOptions?.iconFoldTable\"\n        [iconUnFoldTable]=\"column.extraOptions?.iconUnFoldTable\"\n        [tableViewRefElement]=\"tableViewRefElement\"\n        [colDraggable]=\"colDraggable && colIndex > head?.colDropFreezeTo - 1\"\n        [childrenTableOpen]=\"childrenTableOpen\"\n        [ngClass]=\"{\n          sindu_handle: colDraggable && colIndex > head?.colDropFreezeTo - 1,\n          'drop-freeze': colDraggable && colIndex < head?.colDropFreezeTo\n        }\"\n        [resizeEnabled]=\"resizeable\"\n        (resizeEndEvent)=\"onResize($event, column)\"\n        (resizeStartEvent)=\"onBeginResize($event)\"\n        (resizingEvent)=\"onResizing($event, column)\"\n        [attr.rowspan]=\"rows?.length || 1\"\n      >\n        <span *ngIf=\"!column.headCellTmpl?.template\" [attr.title]=\"column.header\">{{ column.header }}</span>\n        <ng-container *ngIf=\"column.headCellTmpl?.template\">\n          <ng-template\n            [ngTemplateOutlet]=\"column.headCellTmpl?.template\"\n            [ngTemplateOutletContext]=\"{ column: column, $implicit: head }\"\n          ></ng-template>\n        </ng-container>\n      </th>\n    </ng-container>\n    <!-- <th width=\"0\"  *ngIf=\"resizeable\"></th> -->\n  </tr>\n</ng-template>\n", styles: [".select-options{cursor:pointer;vertical-align:middle}svg>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DATA_TABLE]
                    }] }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }, { type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i1$2.I18nService }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    }, propDecorators: { checkable: [{
                type: Input
            }], headerCheckDisabled: [{
                type: Input
            }], headerCheckVisible: [{
                type: Input
            }], checkOptions: [{
                type: Input
            }], showExpandToggle: [{
                type: Input
            }], pageAllChecked: [{
                type: Input
            }], columns: [{
                type: Input
            }], multiSort: [{
                type: Input
            }], resizeable: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], showSortIcon: [{
                type: Input
            }], showFilterIcon: [{
                type: Input
            }], colDropFreezeTo: [{
                type: Input
            }], colDraggable: [{
                type: Input
            }], fixHeader: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], tableViewRefElement: [{
                type: Input
            }], tableBodyEl: [{
                type: Input
            }], checkableColumn: [{
                type: Input
            }], showExpandToggleColumn: [{
                type: Input
            }], headClickSortEvent: [{
                type: Output
            }], resizeHandlerEvent: [{
                type: Output
            }], halfChecked: [{
                type: Input
            }], childrenTableOpen: [{
                type: Input
            }], beginResizeHandlerEvent: [{
                type: Output
            }], resizingHandlerEvent: [{
                type: Output
            }], dragTableEndEvent: [{
                type: Output
            }], thList: [{
                type: ViewChildren,
                args: [TableThComponent]
            }] } });

class TableTbodyComponent {
    constructor() {
        this.dataSource = [];
        this.nestedLayer = 0;
        this.nestedIndex = '-1';
    }
    ngOnInit() { }
    trackByFn(index) {
        return index;
    }
}
TableTbodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTbodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableTbodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableTbodyComponent, selector: "[dTableBody]", inputs: { dataSource: "dataSource", rowTemplete: "rowTemplete", nestedLayer: "nestedLayer", nestedIndex: "nestedIndex", virtualScroll: "virtualScroll", tableWidthConfig: "tableWidthConfig", minHeight: "minHeight", minHeightStretchRow: "minHeightStretchRow" }, queries: [{ propertyName: "rowTempleteForSelect", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"!virtualScroll; else scrollViewTpl\">\n  <ng-container *ngFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template\n      [ngTemplateOutlet]=\"trTable\"\n      [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex, nestedLayer: nestedLayer, nestedIndex: nestedIndex }\"\n    >\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #scrollViewTpl>\n  <ng-container *cdkVirtualFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template\n      [ngTemplateOutlet]=\"trTable\"\n      [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex, nestedLayer: nestedLayer, nestedIndex: nestedIndex }\"\n    >\n    </ng-template>\n  </ng-container>\n</ng-template>\n\n<ng-template #trTable let-rowIndex=\"rowIndex\" let-rowItem=\"rowItem\" let-nestedLayer=\"nestedLayer\" let-nestedIndex=\"nestedIndex\">\n  <ng-template\n    [ngTemplateOutlet]=\"rowTemplete\"\n    [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex, nestedLayer: nestedLayer, nestedIndex: nestedIndex }\"\n  ></ng-template>\n  <tr class=\"child-table\" *ngIf=\"rowItem['children'] && rowItem['$isChildTableOpen']\" [style.height]=\"minHeight ? '40px' : null\">\n    <td [attr.colspan]=\"tableWidthConfig.length\">\n      <table class=\"devui-table\" [style.table-layout]=\"'fixed'\">\n        <colgroup>\n          <col [style.width]=\"config.width\" *ngFor=\"let config of tableWidthConfig\" />\n        </colgroup>\n        <tbody\n          dTableBody\n          [rowTemplete]=\"rowTemplete\"\n          [dataSource]=\"rowItem['children']\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [nestedLayer]=\"nestedLayer + 1\"\n          [nestedIndex]=\"nestedIndex + ',' + rowIndex\"\n        ></tbody>\n      </table>\n    </td>\n  </tr>\n</ng-template>\n\n<ng-template [ngTemplateOutlet]=\"minHeightStretchRow\"></ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.detail-content{color:#252b3a;color:var(--devui-text, #252b3a);font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.child-table:hover{background:transparent!important}.child-table .devui-table{background:transparent;margin-bottom:0}.child-table>td{padding:0;border:0}::ng-deep .devui-table tbody>tr.expand-row{background:#f7f8fa;background:var(--devui-table-expand-area-bg, #f7f8fa)}\n"], components: [{ type: TableTbodyComponent, selector: "[dTableBody]", inputs: ["dataSource", "rowTemplete", "nestedLayer", "nestedIndex", "virtualScroll", "tableWidthConfig", "minHeight", "minHeightStretchRow"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTbodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTableBody]', template: "<ng-container *ngIf=\"!virtualScroll; else scrollViewTpl\">\n  <ng-container *ngFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template\n      [ngTemplateOutlet]=\"trTable\"\n      [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex, nestedLayer: nestedLayer, nestedIndex: nestedIndex }\"\n    >\n    </ng-template>\n  </ng-container>\n</ng-container>\n\n<ng-template #scrollViewTpl>\n  <ng-container *cdkVirtualFor=\"let rowItem of dataSource; trackBy: trackByFn; let rowIndex = index\">\n    <ng-template\n      [ngTemplateOutlet]=\"trTable\"\n      [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex, nestedLayer: nestedLayer, nestedIndex: nestedIndex }\"\n    >\n    </ng-template>\n  </ng-container>\n</ng-template>\n\n<ng-template #trTable let-rowIndex=\"rowIndex\" let-rowItem=\"rowItem\" let-nestedLayer=\"nestedLayer\" let-nestedIndex=\"nestedIndex\">\n  <ng-template\n    [ngTemplateOutlet]=\"rowTemplete\"\n    [ngTemplateOutletContext]=\"{ rowItem: rowItem, rowIndex: rowIndex, nestedLayer: nestedLayer, nestedIndex: nestedIndex }\"\n  ></ng-template>\n  <tr class=\"child-table\" *ngIf=\"rowItem['children'] && rowItem['$isChildTableOpen']\" [style.height]=\"minHeight ? '40px' : null\">\n    <td [attr.colspan]=\"tableWidthConfig.length\">\n      <table class=\"devui-table\" [style.table-layout]=\"'fixed'\">\n        <colgroup>\n          <col [style.width]=\"config.width\" *ngFor=\"let config of tableWidthConfig\" />\n        </colgroup>\n        <tbody\n          dTableBody\n          [rowTemplete]=\"rowTemplete\"\n          [dataSource]=\"rowItem['children']\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [nestedLayer]=\"nestedLayer + 1\"\n          [nestedIndex]=\"nestedIndex + ',' + rowIndex\"\n        ></tbody>\n      </table>\n    </td>\n  </tr>\n</ng-template>\n\n<ng-template [ngTemplateOutlet]=\"minHeightStretchRow\"></ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.detail-content{color:#252b3a;color:var(--devui-text, #252b3a);font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.child-table:hover{background:transparent!important}.child-table .devui-table{background:transparent;margin-bottom:0}.child-table>td{padding:0;border:0}::ng-deep .devui-table tbody>tr.expand-row{background:#f7f8fa;background:var(--devui-table-expand-area-bg, #f7f8fa)}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { dataSource: [{
                type: Input
            }], rowTemplete: [{
                type: Input
            }], nestedLayer: [{
                type: Input
            }], nestedIndex: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], tableWidthConfig: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minHeightStretchRow: [{
                type: Input
            }], rowTempleteForSelect: [{
                type: ContentChild,
                args: [TemplateRef]
            }] } });

class TableTrComponent {
    constructor(eleRef, render2) {
        this.eleRef = eleRef;
        this.render2 = render2;
        this.headerRowspan = 1;
        this.headerCheckStatusEvent = new EventEmitter();
        this.checkStatusEvent = new EventEmitter();
    }
    ngOnInit() {
    }
    ngAfterContentInit() {
        if (this.thList) {
            this.firstTh = this.thList.first;
        }
        this.initFixedColumnStatus();
    }
    initFixedColumnStatus() {
        const fixLeftList = this.eleRef.nativeElement.querySelectorAll('.devui-sticky-left-cell');
        const fixRightList = this.eleRef.nativeElement.querySelectorAll('.devui-sticky-right-cell');
        if (fixLeftList === null || fixLeftList === void 0 ? void 0 : fixLeftList.length) {
            const lastEle = fixLeftList[fixLeftList.length - 1];
            this.render2.addClass(lastEle, 'devui-last-sticky-left-cell');
        }
        if (fixRightList === null || fixRightList === void 0 ? void 0 : fixRightList.length) {
            const firstEle = fixRightList[0];
            this.render2.addClass(firstEle, 'devui-first-sticky-right-cell');
        }
    }
    onHeaderCheckChange(checked) {
        this.headerChecked = checked;
        this.headerHalfChecked = false;
        this.headerCheckStatusEvent.emit(checked);
    }
    onOptionSelect(option) {
        if (option.onChecked) {
            option.onChecked();
        }
    }
}
TableTrComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTrComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
TableTrComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableTrComponent, selector: "[dTableRow]", outputs: { headerCheckStatusEvent: "headerCheckStatusEvent", checkStatusEvent: "checkStatusEvent" }, queries: [{ propertyName: "thList", predicate: TableThComponent }], ngImport: i0, template: "<th\n  *ngIf=\"headerCheckable\"\n  [attr.rowspan]=\"headerRowspan\"\n  class=\"devui-checkable-cell\"\n  [ngClass]=\"{ 'devui-sticky-left-cell': firstTh?.fixedLeft }\"\n  [style.left]=\"'0px'\"\n>\n  <d-checkbox\n    class=\"check-box-all\"\n    [name]=\"'checkbox'\"\n    (change)=\"onHeaderCheckChange($event)\"\n    [(ngModel)]=\"headerChecked\"\n    [halfchecked]=\"headerHalfChecked\"\n    [disabled]=\"headerCheckDisabled\"\n  ></d-checkbox>\n\n  <div *ngIf=\"headerCheckOptions && headerCheckOptions.length > 0\" dDropDown appendToBody [trigger]=\"'hover'\" class=\"select-options\">\n    <div dDropDownToggle>\n      <svg\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        height=\"16px\"\n        version=\"1.1\"\n        viewBox=\"0 0 16 16\"\n        width=\"16px\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g fill=\"none\" fill-rule=\"evenodd\" id=\"chevron_down\" stroke=\"none\" stroke-width=\"1\">\n          <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n        </g>\n      </svg>\n    </div>\n    <ul dDropDownMenu class=\"devui-dropdown-menu\" role=\"menu\">\n      <li *ngFor=\"let option of headerCheckOptions\" role=\"menuitem\" (click)=\"onOptionSelect(option)\">\n        <a class=\"devui-dropdown-item\">{{ option.label }}</a>\n      </li>\n    </ul>\n  </div>\n</th>\n<ng-content></ng-content>\n", styles: [".select-options{cursor:pointer;vertical-align:middle}svg>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}\n"], components: [{ type: i1$1.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }, { type: i2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTrComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTableRow]', template: "<th\n  *ngIf=\"headerCheckable\"\n  [attr.rowspan]=\"headerRowspan\"\n  class=\"devui-checkable-cell\"\n  [ngClass]=\"{ 'devui-sticky-left-cell': firstTh?.fixedLeft }\"\n  [style.left]=\"'0px'\"\n>\n  <d-checkbox\n    class=\"check-box-all\"\n    [name]=\"'checkbox'\"\n    (change)=\"onHeaderCheckChange($event)\"\n    [(ngModel)]=\"headerChecked\"\n    [halfchecked]=\"headerHalfChecked\"\n    [disabled]=\"headerCheckDisabled\"\n  ></d-checkbox>\n\n  <div *ngIf=\"headerCheckOptions && headerCheckOptions.length > 0\" dDropDown appendToBody [trigger]=\"'hover'\" class=\"select-options\">\n    <div dDropDownToggle>\n      <svg\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        height=\"16px\"\n        version=\"1.1\"\n        viewBox=\"0 0 16 16\"\n        width=\"16px\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g fill=\"none\" fill-rule=\"evenodd\" id=\"chevron_down\" stroke=\"none\" stroke-width=\"1\">\n          <polygon points=\"4.5 5 8 8.76923077 11.5 5 13 6.61538462 8 12 3 6.61538462\"></polygon>\n        </g>\n      </svg>\n    </div>\n    <ul dDropDownMenu class=\"devui-dropdown-menu\" role=\"menu\">\n      <li *ngFor=\"let option of headerCheckOptions\" role=\"menuitem\" (click)=\"onOptionSelect(option)\">\n        <a class=\"devui-dropdown-item\">{{ option.label }}</a>\n      </li>\n    </ul>\n  </div>\n</th>\n<ng-content></ng-content>\n", styles: [".select-options{cursor:pointer;vertical-align:middle}svg>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { thList: [{
                type: ContentChildren,
                args: [TableThComponent]
            }], headerCheckStatusEvent: [{
                type: Output
            }], checkStatusEvent: [{
                type: Output
            }] } });

class TableTheadComponent {
    constructor() {
        this.headerCheckStatusEvent = new EventEmitter();
        this.headerChildrenTableToggleEvent = new EventEmitter();
    }
    ngOnInit() { }
    ngAfterContentInit() {
        if (this.headerRowList) {
            this.headerFirstRow = this.headerRowList.first;
            if (this.headerFirstRow) {
                this.headerFirstRow.headerRowspan = this.headerRowList.length;
                this.headerFirstRow.headerCheckable = this.checkable;
                this.headerFirstRow.headerCheckDisabled = this.checkDisabled;
                this.headerFirstRow.headerCheckOptions = this.checkOptions;
                this.checkStatusSubscription = this.headerFirstRow.headerCheckStatusEvent.subscribe((status) => {
                    this.headerCheckStatusEvent.emit(status);
                });
            }
        }
        if (this.thList) {
            this.setNestedThToggle();
            this.thList.changes.subscribe((list) => {
                this.setNestedThToggle();
            });
        }
    }
    ngOnChanges(changes) {
        if ((changes['checkable'] && !changes['checkable'].isFirstChange()) ||
            (changes['checkDisabled'] && !changes['checkDisabled'].isFirstChange()) ||
            (changes['checkOptions'] && !changes['checkOptions'].isFirstChange())) {
            if (this.headerFirstRow) {
                this.headerFirstRow.headerRowspan = this.headerRowList.length;
                this.headerFirstRow.headerCheckable = this.checkable;
                this.headerFirstRow.headerCheckDisabled = this.checkDisabled;
                this.headerFirstRow.headerCheckOptions = this.checkOptions;
            }
        }
    }
    setNestedThToggle() {
        this.nestedTh = this.thList.find(th => {
            return th.nestedColumn;
        });
        if (this.nestedTh) {
            this.toggleTableSubscription = this.nestedTh.toggleChildrenTableEvent.subscribe((childrenTableOpen) => {
                this.headerChildrenTableToggleEvent.emit(childrenTableOpen);
            });
        }
    }
    setHeaderCheckStatus(status) {
        if (status.pageAllChecked !== undefined) {
            this.headerFirstRow.headerChecked = status.pageAllChecked;
        }
        if (status.pageHalfChecked !== undefined) {
            this.headerFirstRow.headerHalfChecked = status.pageHalfChecked;
        }
    }
    setHeaderToggleStatus(open) {
        if (this.nestedTh) {
            this.nestedTh.childrenTableOpen = open;
        }
    }
    ngOnDestroy() {
        if (this.checkStatusSubscription) {
            this.checkStatusSubscription.unsubscribe();
            this.checkStatusSubscription = null;
        }
        if (this.toggleTableSubscription) {
            this.toggleTableSubscription.unsubscribe();
            this.toggleTableSubscription = null;
        }
    }
}
TableTheadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTheadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableTheadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableTheadComponent, selector: "[dTableHead]", inputs: { checkable: "checkable", checkDisabled: "checkDisabled", checkOptions: "checkOptions" }, queries: [{ propertyName: "headerRowList", predicate: TableTrComponent }, { propertyName: "thList", predicate: TableThComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-content></ng-content>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTheadComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTableHead]', template: "<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { checkable: [{
                type: Input
            }], checkDisabled: [{
                type: Input
            }], checkOptions: [{
                type: Input
            }], headerRowList: [{
                type: ContentChildren,
                args: [TableTrComponent]
            }], thList: [{
                type: ContentChildren,
                args: [TableThComponent, { descendants: true }]
            }] } });

class DataTableCellEditTmplComponent {
}
DataTableCellEditTmplComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellEditTmplComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DataTableCellEditTmplComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableCellEditTmplComponent, selector: "d-cell-edit", queries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellEditTmplComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-cell-edit',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { template: [{
                type: ContentChild,
                args: [TemplateRef]
            }] } });

class DataTableCellViewTmplComponent {
}
DataTableCellViewTmplComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellViewTmplComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DataTableCellViewTmplComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableCellViewTmplComponent, selector: "d-cell", queries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellViewTmplComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-cell',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { template: [{
                type: ContentChild,
                args: [TemplateRef]
            }] } });

class DataTableHeadCellTmplComponent {
}
DataTableHeadCellTmplComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableHeadCellTmplComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DataTableHeadCellTmplComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableHeadCellTmplComponent, selector: "d-head-cell", queries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableHeadCellTmplComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-head-cell',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { template: [{
                type: ContentChild,
                args: [TemplateRef]
            }] } });

class DataTableColumnTmplComponent {
    constructor() {
        this.nestedColumnIndent = 16;
        this.order = Number.MAX_VALUE;
        this.nestedColumn = false;
        this.filterChange = new EventEmitter();
        this.filterToggle = new EventEmitter();
        this.filterMultiple = true;
        this.orderChange = new EventEmitter();
        this.widthChange = new EventEmitter();
        // 鼠标是否移动到当前表头单元格
        this.selected = false;
        // @deprecated
        this.fieldType = 'text';
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes['order']) {
            this.orderChange.emit(changes['order'].currentValue);
        }
        if (changes['width']) {
            this.widthChange.emit(changes['width'].currentValue);
        }
    }
    ngOnDestroy() {
        this.orderChange.unsubscribe();
    }
    // column.extraOptions?.dateFormat
    emitFilterData(filterData) {
        this.filterChange.emit(filterData);
    }
    emitFilterToggle(data) {
        this.filterToggle.emit(data);
    }
}
DataTableColumnTmplComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableColumnTmplComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DataTableColumnTmplComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableColumnTmplComponent, selector: "d-column", inputs: { advancedHeader: "advancedHeader", maxWidth: "maxWidth", minWidth: "minWidth", field: "field", header: "header", sortable: "sortable", editable: "editable", filterable: "filterable", closeFilterWhenScroll: "closeFilterWhenScroll", cellClass: "cellClass", nestedColumnIndent: "nestedColumnIndent", width: "width", fixedLeft: "fixedLeft", fixedRight: "fixedRight", extraOptions: "extraOptions", order: "order", nestedColumn: "nestedColumn", filterList: "filterList", filterMultiple: "filterMultiple", filterIconActive: "filterIconActive", filterBoxWidth: "filterBoxWidth", filterBoxHeight: "filterBoxHeight", beforeFilter: "beforeFilter", customFilterTemplate: "customFilterTemplate", extraFilterTemplate: "extraFilterTemplate", searchFn: "searchFn", fieldType: "fieldType" }, outputs: { filterChange: "filterChange", filterToggle: "filterToggle" }, queries: [{ propertyName: "cellCmp", first: true, predicate: DataTableCellViewTmplComponent, descendants: true }, { propertyName: "cellEditCmp", first: true, predicate: DataTableCellEditTmplComponent, descendants: true }, { propertyName: "headCellTmpl", first: true, predicate: DataTableHeadCellTmplComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableColumnTmplComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-column',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { advancedHeader: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], field: [{
                type: Input
            }], header: [{
                type: Input
            }], sortable: [{
                type: Input
            }], editable: [{
                type: Input
            }], filterable: [{
                type: Input
            }], closeFilterWhenScroll: [{
                type: Input
            }], cellClass: [{
                type: Input
            }], nestedColumnIndent: [{
                type: Input
            }], width: [{
                type: Input
            }], fixedLeft: [{
                type: Input
            }], fixedRight: [{
                type: Input
            }], extraOptions: [{
                type: Input
            }], order: [{
                type: Input
            }], nestedColumn: [{
                type: Input
            }], filterList: [{
                type: Input
            }], filterChange: [{
                type: Output
            }], filterToggle: [{
                type: Output
            }], filterMultiple: [{
                type: Input
            }], filterIconActive: [{
                type: Input
            }], filterBoxWidth: [{
                type: Input
            }], filterBoxHeight: [{
                type: Input
            }], beforeFilter: [{
                type: Input
            }], cellCmp: [{
                type: ContentChild,
                args: [DataTableCellViewTmplComponent]
            }], cellEditCmp: [{
                type: ContentChild,
                args: [DataTableCellEditTmplComponent]
            }], headCellTmpl: [{
                type: ContentChild,
                args: [DataTableHeadCellTmplComponent]
            }], customFilterTemplate: [{
                type: Input
            }], extraFilterTemplate: [{
                type: Input
            }], searchFn: [{
                type: Input
            }], fieldType: [{
                type: Input
            }] } });

class DataTableComponent {
    constructor(elementRef, ngZone, renderer, cdr, doc) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.cdr = cdr;
        this.doc = doc;
        /**
         * 【可选】表头checkbox是否可见
         */
        this.headerCheckVisible = true;
        /**
         * 【可选】默认表格使用的表格类型，可选值为'cell' @deprecated
         */
        this.editModel = 'cell';
        /**
         * 鼠标悬浮行时是否高亮
         */
        this.rowHoveredHighlight = true;
        /**
         * 表格宽度
         */
        this.tableWidth = '100%';
        /**
         * 固定表头指定高度是否包含表头的高度，`tableHeight`设置的高度默认是表格body的高度
         */
        this.containFixHeaderHeight = false;
        /**
         * 【可选】多列选择数组，用来指导那几列会被排序
         */
        this.multiSort = [];
        /**
         * 【可选】用来自定义不可拖拽的前几列
         */
        this.colDropFreezeTo = 0;
        /**
         * 【可选】同时绑定单击、双击事件时，用于区分点击的时间间隔,默认300ms，两个事件不同时使用可以指定为0
         */
        this.timeout = 300;
        /**
         * 【可选】配置表头操作未激活状态下是否显示操作区域，默认不显示
         */
        this.showOperationArea = false;
        /**
         * 【可选】是否显示排序未激活图标，默认不显示,
         */
        this.showSortIcon = false;
        /**
         * 【可选】是否显示筛选未激活图标，默认不显示,
         */
        this.showFilterIcon = false;
        /**
         * 多列选择Change事件，用来更新多列选择数组, column param
         * */
        this.multiSortChange = new EventEmitter();
        /**
         * 表格单元格点击事件
         */
        this.cellClick = new EventEmitter();
        /**
         * 表格单元格双击事件
         */
        this.cellDBClick = new EventEmitter();
        /**
         * 表格行点击事件
         */
        this.rowClick = new EventEmitter();
        /**
         * 表格行双击事件
         */
        this.rowDBClick = new EventEmitter();
        /**
        * 行detail toggle事件
        */
        this.detialToggle = new EventEmitter();
        /**
         * 表格单元格开始编辑事件
         */
        this.cellEditStart = new EventEmitter();
        /**
         * 表格单元格结束编辑事件
         */
        this.cellEditEnd = new EventEmitter();
        /**
         * 某行的勾选状态变化事件
         */
        this.rowCheckChange = new EventEmitter();
        /**
         * 当前页码全勾选状态变化事件
         */
        this.checkAllChange = new EventEmitter();
        /**
         * 延迟懒加载完成事件
         */
        this.loadMore = new EventEmitter();
        /**
         * 列宽变化事件
         */
        this.resize = new EventEmitter();
        /**
         * 当前表格层级，默认为0，在树形表格场景下自增长
         * 内部嵌套使用，不对外暴露
         */
        this.tableLevel = 0;
        /**
         * 配置树形表格的父子选中是否互相关联
         * upward：选中子关联父
         * downward： 选中父关联子
         */
        this.checkableRelation = { upward: true, downward: true };
        /**
         * 子列表关闭事件
         */
        this.childrenTableClose = new EventEmitter();
        /**
         * 全部子列表关闭事件
         */
        this.allChildrenTableClose = new EventEmitter();
        /**
         * 虚拟滚动配置
         */
        this.virtualItemSize = 40;
        this.virtualMinBufferPx = 80;
        this.virtualMaxBufferPx = 200;
        /**
         * 列宽配置
         */
        this.tableWidthConfig = [];
        /**
         * 表格布局
         */
        this.tableLayout = 'fixed';
        /**
         * 表格边框类型，默认有行边框，bordered：全边框，borderless：无边框
         */
        this.borderType = '';
        /**
         * 表格内部滚动事件
         */
        this.tableScrollEvent = new EventEmitter();
        this.columnDragEnd = new EventEmitter();
        /**
         * 表格尺寸，sm对应行高40px， md对应行高48px，lg对应行高56px
         */
        this.size = 'sm';
        this.shadowType = 'embed';
        this.tableOverflowType = 'auto';
        this._dataSource = [];
        this._pageAllChecked = false;
        this.selectable = true;
        this.allChecked = [];
        this.documentClickEvent = new EventEmitter();
        this.cellEditorClickEvent = new EventEmitter();
        this._hideColumn = [];
        this.searchQueryChange = new EventEmitter();
        this.halfChecked = false;
        this.scrollY = 0;
        this.BUILTIN_COL_WIDTH = '36px';
        this.BUILTIN_COL_WIDTH_EXTRA = '55px';
        this._tableTotalWidth = 0;
        this._lastColSize = 0;
        // 判断数据是否存在选中状态
        this.hasChecked = (data) => {
            if (data.$checked) {
                return true;
            }
            if (data.children) {
                return data.children.some(this.hasChecked);
            }
        };
        // 判断数据是否存在未选中状态
        this.hasUnChecked = (data) => {
            if (!data.$checked) {
                return true;
            }
            if (data.children) {
                return data.children.some(this.hasUnChecked);
            }
        };
        this.onDocumentClickListen = this.onDocumentClick.bind(this);
        this.document = this.doc;
    }
    get hostHeight() {
        return (this.tableHeight && this.dataSource.length) ? this.tableHeight : null;
    }
    get hasShadow() {
        return this.shadowType === 'normal';
    }
    set content(content) {
        setTimeout(() => {
            this.tableBodyEl = content;
            if (this.virtualScroll) {
                this.initVirtualBodyHeight();
            }
        });
    }
    set dataSource(dataSource) {
        if (dataSource === null || !dataSource) {
            /* eslint-disable-next-line no-param-reassign */
            dataSource = [];
        }
        this._dataSource = dataSource;
        const hasChecked = this.dataSource.some(this.hasChecked);
        const hasUnChecked = this.dataSource.some(this.hasUnChecked);
        this._pageAllChecked = dataSource && dataSource.length > 0 && !hasUnChecked;
        this.halfChecked = hasChecked && hasUnChecked;
        if (this.innerHeader) {
            this.innerHeader.setHeaderCheckStatus({ pageAllChecked: this._pageAllChecked, pageHalfChecked: this.halfChecked });
        }
        if (this.virtualScroll) {
            this.initVirtualBodyHeight();
        }
        this.initScrollStatus();
    }
    get dataSource() {
        return this._dataSource;
    }
    set hideColumn(hideColumn) {
        this._hideColumn = hideColumn;
        if (this._columns) {
            this.updateColumns();
        }
    }
    get hideColumn() {
        return this._hideColumn;
    }
    set pageAllChecked(pageAllChecked) {
        if (this.dataSource) {
            this._dataSource = this.setCheckedStatus(this.dataSource, pageAllChecked);
        }
        this._pageAllChecked = pageAllChecked;
        this.halfChecked = this.dataSource.some(this.hasChecked) && this.dataSource.some(this.hasUnChecked);
    }
    get pageAllChecked() {
        return this._pageAllChecked;
    }
    initVirtualBodyHeight() {
        setTimeout(() => {
            if (this.virtualScrollViewport) {
                this.virtualScrollViewport.checkViewportSize();
            }
        });
        if (this.tableHeight && this.tableHeight !== 'auto') {
            this.virtualBodyHeight = this.tableHeight;
            return;
        }
        if (!this.maxHeight) {
            this.virtualBodyHeight = null;
            return;
        }
        if (this.tableBodyEl) {
            const tableHeader = this.tableBodyEl.nativeElement.querySelector('thead');
            const tableHeaderHeight = ((tableHeader === null || tableHeader === void 0 ? void 0 : tableHeader.offsetHeight) + 8) || 0;
            const curTotalHeight = this.dataSource.length * this.virtualItemSize + tableHeaderHeight;
            this.virtualBodyHeight = curTotalHeight < parseInt(this.maxHeight, 10) ? curTotalHeight + 'px' : this.maxHeight;
            return;
        }
    }
    getColumns() {
        const cols = this.columns
            .filter(column => {
            return !this.hideColumn.some(field => column.field === field);
        });
        cols.sort((first, second) => first.order - second.order);
        return cols;
    }
    // life hook start
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.document.addEventListener('click', this.onDocumentClickListen);
        });
    }
    ngOnChanges(changes) {
        if (changes['checkable']) {
            const checkColIndex = this.tableWidthConfig.findIndex((config) => {
                return config.field === 'checkbox';
            });
            if (this.checkable) {
                if (checkColIndex < 0) {
                    if (this.showExpandToggle) {
                        this.tableWidthConfig.splice(1, 0, { field: 'checkbox', width: this.BUILTIN_COL_WIDTH });
                    }
                    else {
                        this.tableWidthConfig.unshift({ field: 'checkbox', width: this.BUILTIN_COL_WIDTH });
                    }
                }
            }
            else {
                if (checkColIndex > -1) {
                    this.tableWidthConfig.splice(checkColIndex, 1);
                }
            }
        }
        if (changes['showExpandToggle']) {
            const expandColIndex = this.tableWidthConfig.findIndex((config) => {
                return config.field === 'expand';
            });
            if (this.showExpandToggle) {
                if (expandColIndex < 0) {
                    this.tableWidthConfig.unshift({ field: 'expand', width: this.BUILTIN_COL_WIDTH });
                }
            }
            else {
                if (expandColIndex > -1) {
                    this.tableWidthConfig.splice(expandColIndex, 1);
                }
            }
        }
        if (this.virtualScroll &&
            ((changes['tableHeight'] && !changes.tableHeight.firstChange) ||
                (changes['maxHeight'] && !changes.maxHeight.firstChange) ||
                (changes['virtualScroll'] && !changes.virtualScroll.firstChange))) {
            this.initVirtualBodyHeight();
        }
    }
    onDocumentClick($event) {
        this.documentClickEvent.emit($event);
    }
    ngAfterContentInit() {
        if (this.columns.length > 0) {
            this.updateColumns();
            this.columns.forEach((col) => {
                col.orderChange.subscribe(() => {
                    this.updateColumns();
                });
                col.widthChange.subscribe(() => {
                    this.updateColumns();
                });
            });
        }
        if (this.innerHeader) {
            this.headerCheckStatusSubscription = this.innerHeader.headerCheckStatusEvent.subscribe((status) => {
                this.onCheckAllChange(status);
            });
            this.headertoggleTableSubscription = this.innerHeader.headerChildrenTableToggleEvent.subscribe((status) => {
                this.onToggleAllChildrenTable(status);
            });
        }
        else {
            this.columns.changes.subscribe(() => {
                this.updateColumns();
            });
        }
        setTimeout(() => {
            this.initScrollStatus();
        });
    }
    initScrollStatus() {
        var _a, _b, _c;
        if (this.tableOverflowType !== 'overlay') {
            return;
        }
        const ele = this.virtualScroll ? (_b = (_a = this.virtualScrollViewport) === null || _a === void 0 ? void 0 : _a.elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement : (_c = this.normalScrollElement) === null || _c === void 0 ? void 0 : _c.nativeElement;
        this.hasWidthScroll = ele && ele.scrollWidth > ele.clientWidth;
        this.hasHeightScroll = ele && ele.scrollHeight > ele.clientHeight;
    }
    ngAfterViewInit() {
        this.thList.forEach(th => {
            th.tableViewRefElement = this.tableViewRefElement;
        });
        this.thList.changes.subscribe((list) => {
            list.forEach(th => {
                th.tableViewRefElement = this.tableViewRefElement;
            });
        });
        if (this.onlyOneColumnSort) {
            this.resetThSortOrder();
        }
        this.initScrollClass();
    }
    // 初始化时判断是否存在横向滚动，并加上相应类名
    initScrollClass() {
        var _a, _b, _c;
        const ele = ((_a = this.normalScrollElement) === null || _a === void 0 ? void 0 : _a.nativeElement) || ((_c = (_b = this.vitualScrollElement) === null || _b === void 0 ? void 0 : _b.elementRef) === null || _c === void 0 ? void 0 : _c.nativeElement);
        if (ele.clientWidth !== ele.scrollWidth) {
            this.setScrollViewClass('left');
        }
    }
    resetThSortOrder() {
        var _a;
        merge(...(_a = this.thList) === null || _a === void 0 ? void 0 : _a.map(th => th.sortChange)).pipe(takeUntil(this.thList.changes)).subscribe((sortEvent) => {
            this.thList.filter(th => th !== sortEvent.th).forEach(th => th.clearSortOrder());
        });
        this.thList.changes.pipe(switchMap(() => merge(...this.thList.map(th => th.sortChange)))).subscribe((sortEvent) => {
            this.thList.filter(th => th !== sortEvent.th).forEach(th => th.clearSortOrder());
        });
    }
    updateColumns() {
        this._columns = this.getColumns();
        this.tableWidthConfig = [];
        if (this.showExpandToggle) {
            this.tableWidthConfig.push({ field: 'expand', width: this.BUILTIN_COL_WIDTH });
        }
        if (this.checkable) {
            if (this.checkOptions && this.checkOptions.length > 0) {
                this.tableWidthConfig.push({ field: 'checkbox', width: this.BUILTIN_COL_WIDTH_EXTRA });
            }
            else {
                this.tableWidthConfig.push({ field: 'checkbox', width: this.BUILTIN_COL_WIDTH });
            }
        }
        this._columns.forEach((col) => {
            this.tableWidthConfig.push({ field: col.field, width: col.width });
        });
    }
    ngOnDestroy() {
        this.unSubscription();
        this.document.removeEventListener('click', this.onDocumentClickListen);
    }
    onHandleSort(column) {
        if (this.multiSort && this.multiSort.length > 0) {
            const multiSortIndex = this.multiSort.findIndex(item => item.field === column.field);
            if (multiSortIndex !== -1) {
                this.multiSort.splice(multiSortIndex, 1);
            }
            if (column.direction === '') {
                this.multiSortChange.emit(this.multiSort);
                return;
            }
            if (!this.onlyOneColumnSort) {
                this.multiSort.push(column);
            }
            else {
                this.multiSort = [column];
            }
        }
        else {
            this.multiSort = [column];
        }
        this.multiSortChange.emit(this.multiSort);
    }
    onCellClick($event) {
        this.selectedRowItem = $event.rowItem;
        this.selectedColumnItem = $event.column;
        this.ngZone.run(() => {
            this.cellClick.emit($event);
        });
    }
    onCellEditStart($event) {
        this.isCellEdit = true;
        this.cellEditStart.emit($event);
    }
    onCellEditEnd($event) {
        this.isCellEdit = false;
        this.cellEditEnd.emit($event);
    }
    onCellDBClick($event) {
        this.ngZone.run(() => {
            this.cellDBClick.emit($event);
        });
    }
    onRowClick($event) {
        this.selectedRowItem = $event.rowItem;
        this.ngZone.run(() => {
            this.rowClick.emit($event);
        });
    }
    onRowDBClick($event) {
        this.ngZone.run(() => {
            this.rowDBClick.emit($event);
        });
    }
    onDetailToggle($event) {
        this.detialToggle.emit($event);
    }
    setRowCheckStatus($event) {
        // 处理children的选中
        if ($event.rowItem.children && this.checkableRelation.downward) {
            this.setCheckedStatus($event.rowItem.children, $event.checked);
        }
        // 处理parents的选中
        if (this.checkableRelation.upward) {
            const nestedIndexArray = $event.nestedIndex.split(',');
            nestedIndexArray.shift();
            const nestedIndexArrayToInt = nestedIndexArray.map((value) => {
                return parseInt(value, 10);
            });
            // 通过选中行的父级索引设置父的选中状态
            this.setParentCheckStatus(nestedIndexArrayToInt);
        }
        // 处理整个table header的选中
        const hasChecked = this.dataSource.some(this.hasChecked);
        if ($event) {
            const hasUnChecked = this.dataSource.some(this.hasUnChecked);
            this._pageAllChecked = !hasUnChecked;
            this.halfChecked = hasChecked && hasUnChecked;
        }
        else {
            this._pageAllChecked = false;
            this.halfChecked = hasChecked;
        }
        if (this.innerHeader) {
            this.innerHeader.setHeaderCheckStatus({ pageAllChecked: this._pageAllChecked, pageHalfChecked: this.halfChecked });
        }
        this.rowCheckChange.emit($event);
    }
    setParentCheckStatus(nestedIndex) {
        if (nestedIndex.length > 0) {
            const topIndex = nestedIndex[0];
            const topParent = this.dataSource[topIndex];
            const argNestedIndex = [...nestedIndex];
            argNestedIndex.shift();
            const lastParent = this.findLastParent(topParent, argNestedIndex);
            this.setSelfCheckStatus(lastParent);
            nestedIndex.pop();
            if (nestedIndex.length > 0) {
                this.setParentCheckStatus(nestedIndex);
            }
        }
    }
    findLastParent(source, indexArray) {
        if (source && indexArray.length > 0) {
            const topIndex = indexArray[0];
            const topParent = source.children[topIndex];
            indexArray.shift();
            return this.findLastParent(topParent, indexArray);
        }
        else {
            return source;
        }
    }
    setSelfCheckStatus(data) {
        if (data && data.children) {
            const hasUnChecked = data.children.some((child) => {
                return !child.$checked;
            });
            const hasChecked = data.children.some((child) => {
                return child.$checked || child.$halfChecked;
            });
            data.$checked = !hasUnChecked;
            data.$halfChecked = hasUnChecked && hasChecked;
        }
    }
    setCheckedStatus(data, checked, toggle) {
        return data.map(item => {
            if (!(item.$checkDisabled || item.$disabled)) {
                if ((toggle && item.$checked === undefined) || !toggle) {
                    item.$checked = checked;
                    item.$halfChecked = false;
                }
            }
            if (item.children) {
                item.children = this.setCheckedStatus(item.children, checked, toggle);
            }
            return item;
        });
    }
    onCheckAllChange($event) {
        this.pageAllChecked = $event;
        this.checkAllChange.emit($event);
    }
    onSearchQueryChange($event) {
        this.searchQueryChange.emit($event);
    }
    getSelectedRowItem() {
        return this.selectedRowItem;
    }
    onLoadMore(event) {
        this.loadMore.emit(this);
    }
    updateColumnsWidth() {
        this.tableWidthConfig = [];
        if (this.showExpandToggle) {
            const expandWidth = this.elementRef.nativeElement.querySelector('.devui-detail-cell').clientWidth;
            this.tableWidthConfig.push({ field: 'expand', width: expandWidth + 'px' });
        }
        if (this.checkable) {
            const checkboxWidth = this.elementRef.nativeElement.querySelector('.devui-checkable-cell').clientWidth;
            this.tableWidthConfig.push({ field: 'checkbox', width: checkboxWidth + 'px' });
        }
        this._columns.forEach((col) => {
            this.tableWidthConfig.push({ field: col.field, width: col.width });
        });
    }
    beginResizeHandlerEvent($event) {
        const thRenderWidthList = $event.thRenderWidthList;
        if (thRenderWidthList.length > 0) {
            this._tableTotalWidth = this.elementRef.nativeElement.querySelector('.table-wrap').offsetWidth;
            // 兼容d-column表头分组场景
            const reverseThList = thRenderWidthList.reverse();
            this._columns.forEach(column => {
                const thItem = reverseThList.find(th => th.field === column.field);
                if (thItem) {
                    column.width = thItem.width + 'px';
                }
            });
            if (!this._lastColSize) {
                this._lastColSize = parseInt(this._columns.slice(-1)[0].width, 10);
            }
            this.updateColumnsWidth();
        }
        this.onDocumentClick($event.event);
    }
    onResizingFixedHandler({ field, width }) {
        if (this.resizeable) {
            const index = this.tableWidthConfig.findIndex((config) => {
                return config.field === field;
            });
            if (index > -1) {
                setTimeout(() => {
                    this.tableWidthConfig[index].width = width + 'px';
                });
            }
        }
    }
    onResizeHandler({ width, field }) {
        if (width < 0) {
            return;
        }
        const index = this.tableWidthConfig.findIndex((config) => {
            return config.field === field;
        });
        if (index > -1) {
            this.tableWidthConfig[index].width = width + 'px';
        }
        const curTotal = this.tableWidthConfig.reduce((pre, cur) => {
            const value = pre + parseInt(cur.width, 10);
            return value;
        }, 0);
        let columnResizeEventArg;
        this._columns = this._columns.map((column, colIndex) => {
            if (column.field === field) {
                column.width = parseInt(width, 10) + 'px';
                columnResizeEventArg = { currentColumn: column, nextColumn: this._columns[colIndex + 1] };
                this.resize.emit(columnResizeEventArg);
            }
            return column;
        });
        const changeSize = curTotal - this._tableTotalWidth;
        const lastCol = this._columns.slice(-1)[0];
        const lastColWidth = parseInt(lastCol.width, 10);
        if (changeSize < 0 && columnResizeEventArg.nextColumn) {
            const newSize = parseInt(lastCol.width) - changeSize + 'px';
            lastCol.width = newSize;
            this.tableWidthConfig[this.tableWidthConfig.length - 1].width = newSize;
        }
        else if (this._lastColSize < lastColWidth) {
            const lastChange = (lastColWidth - this._lastColSize) > changeSize ? changeSize : (lastColWidth - this._lastColSize);
            lastCol.width = lastColWidth - lastChange + 'px';
            this.tableWidthConfig[this.tableWidthConfig.length - 1].width = lastColWidth - lastChange + 'px';
        }
    }
    handleDragTable({ from, to }) {
        this.columnDragEnd.emit({ from, to });
        const sortArray = (array, fromE, toE) => {
            if (fromE < toE) {
                const fromEData = array[fromE];
                for (let i = 0; i < array.length; i++) {
                    if (i >= fromE && i < toE) {
                        this.ngZone.run(() => {
                            array[i] = array[i + 1];
                        });
                    }
                }
                this.ngZone.run(() => {
                    array[toE] = fromEData;
                });
            }
            if (fromE > toE) {
                const fromEData = array[fromE];
                for (let i = array.length; i > 0; i--) {
                    if (i <= fromE && i > toE) {
                        array[i] = array[i - 1];
                    }
                }
                array[toE] = fromEData;
            }
        };
        sortArray(this._columns, from, to);
        this._columns.forEach((item, index) => {
            item.order = index;
        });
    }
    onBodyScroll(event) {
        const target = event.target;
        if (this.isCellEdit) {
            // Y轴滚动距离超过tr高度时取消目前编辑状态
            if (this.scrollY === 0) {
                this.scrollY = target.scrollTop;
            }
            const offset = target.scrollTop - this.scrollY;
            if (offset > 40 || offset < -40) {
                this.cancelEditingStatus();
                this.scrollY = 0;
            }
        }
        const scrollLeft = target.scrollLeft;
        if (scrollLeft === 0) {
            if (target.clientWidth === target.scrollWidth) {
                this.setScrollViewClass('none');
            }
            else {
                this.setScrollViewClass('left');
            }
        }
        else if (scrollLeft + target.clientWidth === target.scrollWidth) {
            this.setScrollViewClass('right');
        }
        else {
            this.setScrollViewClass('middle');
        }
        if (this.fixHeader) {
            this.fixHeaderContainerRefElement.nativeElement.scrollLeft = scrollLeft;
        }
        this.tableScrollEvent.emit(event);
    }
    setScrollViewClass(position) {
        const element = this.tableViewRefElement.nativeElement;
        const className = 'devui-talbe-scorll-' + position;
        const elClassList = element.classList;
        if (!elClassList.contains(className)) {
            for (let index = 0; index < elClassList.length; index++) {
                const clName = elClassList[index];
                if (clName.startsWith('devui-talbe-scorll-')) {
                    this.renderer.removeClass(element, clName);
                }
            }
            this.renderer.addClass(element, className);
        }
    }
    unSubscription() {
        if (this.headerCheckStatusSubscription) {
            this.headerCheckStatusSubscription.unsubscribe();
            this.headerCheckStatusSubscription = null;
        }
        if (this.headertoggleTableSubscription) {
            this.headertoggleTableSubscription.unsubscribe();
            this.headertoggleTableSubscription = null;
        }
    }
    setRowChildToggleStatus(rowItem, open) {
        if (open) {
            let loadChildrenResult = Promise.resolve(true);
            if (this.loadChildrenTable) {
                loadChildrenResult = this.loadChildrenTable(rowItem);
            }
            loadChildrenResult.then(() => {
                // 异步加载子表格是检查选中状态
                if (rowItem.$checked && this.checkableRelation.downward) {
                    this.setCheckedStatus(rowItem.children, rowItem.$checked, true);
                }
            });
        }
        else {
            this.childrenTableClose.emit(rowItem);
        }
    }
    setTableChildrenToggleStatus(open) {
        this.onToggleAllChildrenTable(open);
        if (this.innerHeader) {
            this.innerHeader.setHeaderToggleStatus(open);
        }
        else {
            this.childrenTableOpen = open;
        }
    }
    travelChildrenToggleStatus(data, open) {
        return data.map(item => {
            if (item.children) {
                item.$isChildTableOpen = open;
                item.children = this.travelChildrenToggleStatus(item.children, open);
            }
            return item;
        });
    }
    // 切换表头的子表格展开收起
    onToggleAllChildrenTable(open) {
        this.childrenTableOpen = open;
        if (open) {
            let loadAllChildrenResult = Promise.resolve(true);
            if (this.loadAllChildrenTable) {
                loadAllChildrenResult = this.loadAllChildrenTable();
            }
            loadAllChildrenResult.then(() => {
                this.dataSource.forEach(item => {
                    if (item.$checked && item.children) {
                        this.setCheckedStatus(item.children, true, true);
                    }
                });
                this.travelChildrenToggleStatus(this.dataSource, open);
            });
        }
        else {
            this.travelChildrenToggleStatus(this.dataSource, open);
            this.allChildrenTableClose.emit();
        }
    }
    cancelEditingStatus() {
        this.documentClickEvent.emit('cancel');
    }
    collectCheckedRows(dist, source) {
        source.forEach(row => {
            if (row.$checked) {
                dist.push(row);
            }
            if (row.children) {
                this.collectCheckedRows(dist, row.children);
            }
        });
    }
    getCheckedRows() {
        if (this.checkableRelation.upward) {
            // 如果children的选中状态关联parent的选中状态,只需返回最外层的数据
            return this.dataSource ? this.dataSource.filter(item => item.$checked || item.$halfChecked) : [];
        }
        else {
            // 如果children的选中状态不关联parent的选中状态,遍历dataSource,将所有的选中行平级返回
            const checkedRows = [];
            this.collectCheckedRows(checkedRows, this.dataSource);
            return checkedRows;
        }
    }
    setTableCheckStatus(status) {
        if (status.pageAllChecked !== undefined) { // 设置全选
            if (this.dataSource) {
                this._dataSource = this.setCheckedStatus(this.dataSource, status.pageAllChecked);
            }
            this._pageAllChecked = status.pageAllChecked;
            if (status.pageAllChecked) { // 全选为true
                this.halfChecked = false;
            }
            else {
                this.halfChecked = this.dataSource.some(this.hasChecked) && this.dataSource.some(this.hasUnChecked);
            }
        }
        if (status.pageHalfChecked !== undefined) { // 设置半选
            this.halfChecked = status.pageHalfChecked;
        }
        if (this.innerHeader) {
            this.innerHeader.setHeaderCheckStatus({ pageAllChecked: this._pageAllChecked, pageHalfChecked: this.halfChecked });
        }
    }
    // 更新cdk虚拟滚动viewport size并重新渲染，解决父层高度变化渲染数据size没有更新问题
    updateVirtualScrollSize() {
        this.virtualScrollViewport.checkViewportSize();
    }
}
DataTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DataTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableComponent, selector: "d-data-table", inputs: { checkable: "checkable", headerCheckDisabled: "headerCheckDisabled", headerCheckVisible: "headerCheckVisible", checkOptions: "checkOptions", showExpandToggle: "showExpandToggle", fixHeader: "fixHeader", scrollable: "scrollable", editModel: "editModel", maxWidth: "maxWidth", maxHeight: "maxHeight", type: "type", rowHoveredHighlight: "rowHoveredHighlight", generalRowHoveredData: "generalRowHoveredData", cssClass: "cssClass", tableWidth: "tableWidth", tableHeight: "tableHeight", containFixHeaderHeight: "containFixHeaderHeight", onlyOneColumnSort: "onlyOneColumnSort", multiSort: "multiSort", resizeable: "resizeable", colDraggable: "colDraggable", colDropFreezeTo: "colDropFreezeTo", detailTemplateRef: "detailTemplateRef", timeout: "timeout", showOperationArea: "showOperationArea", showSortIcon: "showSortIcon", showFilterIcon: "showFilterIcon", beforeCellEdit: "beforeCellEdit", tableLevel: "tableLevel", checkableRelation: "checkableRelation", loadChildrenTable: "loadChildrenTable", loadAllChildrenTable: "loadAllChildrenTable", virtualScroll: "virtualScroll", headerExpandConfig: "headerExpandConfig", virtualItemSize: "virtualItemSize", virtualMinBufferPx: "virtualMinBufferPx", virtualMaxBufferPx: "virtualMaxBufferPx", lazy: "lazy", tableWidthConfig: "tableWidthConfig", headerBg: "headerBg", tableLayout: "tableLayout", borderType: "borderType", striped: "striped", minHeight: "minHeight", size: "size", shadowType: "shadowType", tableOverflowType: "tableOverflowType", dataSource: "dataSource", hideColumn: "hideColumn", pageAllChecked: "pageAllChecked" }, outputs: { multiSortChange: "multiSortChange", cellClick: "cellClick", cellDBClick: "cellDBClick", rowClick: "rowClick", rowDBClick: "rowDBClick", detialToggle: "detialToggle", cellEditStart: "cellEditStart", cellEditEnd: "cellEditEnd", rowCheckChange: "rowCheckChange", checkAllChange: "checkAllChange", loadMore: "loadMore", resize: "resize", childrenTableClose: "childrenTableClose", allChildrenTableClose: "allChildrenTableClose", tableScrollEvent: "tableScrollEvent", columnDragEnd: "columnDragEnd" }, host: { properties: { "style.height": "this.hostHeight", "class.devui-table-shadow": "this.hasShadow" } }, providers: [{
            provide: DATA_TABLE,
            useExisting: forwardRef(() => DataTableComponent)
        }], queries: [{ propertyName: "innerHeader", first: true, predicate: TableTheadComponent, descendants: true }, { propertyName: "innerBody", first: true, predicate: TableTbodyComponent, descendants: true }, { propertyName: "noResultTemplate", first: true, predicate: ["noResultTemplateRef"], descendants: true }, { propertyName: "columns", predicate: DataTableColumnTmplComponent }, { propertyName: "thList", predicate: TableThComponent, descendants: true }], viewQueries: [{ propertyName: "fixHeaderContainerRefElement", first: true, predicate: ["fixHeaderContainerRef"], descendants: true }, { propertyName: "tableViewRefElement", first: true, predicate: ["tableView"], descendants: true, static: true }, { propertyName: "virtualScrollViewport", first: true, predicate: ["cdkVirtualScrollViewport"], descendants: true }, { propertyName: "normalScrollElement", first: true, predicate: ["normalScroll"], descendants: true }, { propertyName: "vitualScrollElement", first: true, predicate: ["scrollViewTpl"], descendants: true }, { propertyName: "devuiNormalScrollBody", first: true, predicate: ["devuiNormalScrollBody"], descendants: true, read: ElementRef }, { propertyName: "content", first: true, predicate: ["tableBody"], descendants: true }], exportAs: ["dataTable"], usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-data-table {{ cssClass }}\">\n  <div class=\"devui-table-view {{ containFixHeaderHeight ? 'contain-fix-height' : '' }}\" #tableView>\n    <div\n      *ngIf=\"fixHeader\"\n      #fixHeaderContainerRef\n      class=\"table-wrap\"\n      [style.overflow-x]=\"'hidden'\"\n      [style.scrollbar-width]=\"'none'\"\n      [style.overflow-y]=\"tableOverflowType === 'overlay' ? 'overlay' : 'scroll'\"\n      [style.max-height]=\"maxHeight ? maxHeight : null\"\n      [style.max-width]=\"maxWidth ? maxWidth : null\"\n      [style.width]=\"!maxWidth ? tableWidth : null\"\n    >\n      <table\n        class=\"devui-table devui-table-{{ size }} {{ borderType ? 'table-' + borderType : '' }} {{ fixHeader ? 'table-fix-header' : '' }} {{\n          headerBg ? 'header-bg' : ''\n        }} {{ striped ? 'table-striped' : '' }}\"\n        [ngClass]=\"{ 'area-active': showOperationArea }\"\n        [style.table-layout]=\"tableLayout\"\n      >\n        <colgroup>\n          <col *ngFor=\"let config of tableWidthConfig\" [style.width]=\"config.width\" />\n        </colgroup>\n        <ng-container *ngTemplateOutlet=\"HeaderContent\"></ng-container>\n        <ng-template *ngIf=\"!innerHeader\" [ngTemplateOutlet]=\"headerTpl\"></ng-template>\n      </table>\n    </div>\n\n    <div\n      #normalScroll\n      cdkScrollable\n      dLazyLoad\n      [enableLazyLoad]=\"lazy\"\n      (loadMore)=\"onLoadMore($event)\"\n      *ngIf=\"!virtualScroll; else scrollViewTpl\"\n      class=\"devui-scrollbar\"\n      [ngClass]=\"{\n        'scroll-view': scrollable,\n        'overflow-overlay': tableOverflowType === 'overlay',\n        'table-wrap': !fixHeader,\n        'has-width-scroll': hasWidthScroll,\n        'has-height-scroll': hasHeightScroll\n      }\"\n      [style.height]=\"tableHeight ? tableHeight : null\"\n      [style.max-height]=\"maxHeight ? maxHeight : null\"\n      [style.max-width]=\"maxWidth ? maxWidth : null\"\n      [style.width]=\"!maxWidth ? tableWidth : null\"\n      (scroll)=\"onBodyScroll($event)\"\n    >\n      <table\n        #tableBody\n        class=\"devui-table devui-table-{{ size }} {{ borderType ? 'table-' + borderType : '' }} {{\n          rowHoveredHighlight ? 'table-hover' : ''\n        }} {{ headerBg ? 'header-bg' : '' }} {{ striped ? 'table-striped' : '' }}\"\n        [ngClass]=\"{ 'area-active': showOperationArea }\"\n        [style.table-layout]=\"tableLayout\"\n        [style.height]=\"minHeight ? minHeight : null\"\n        [style.position]=\"tableOverflowType === 'overlay' ? null : 'relative'\"\n      >\n        <colgroup>\n          <col *ngFor=\"let config of tableWidthConfig\" [style.width]=\"config.width\" />\n        </colgroup>\n        <ng-container *ngIf=\"!fixHeader\">\n          <ng-container *ngTemplateOutlet=\"HeaderContent\"></ng-container>\n          <ng-template *ngIf=\"!innerHeader\" [ngTemplateOutlet]=\"headerTpl\"></ng-template>\n        </ng-container>\n        <tbody\n          dTableBody\n          dSortable\n          *ngIf=\"innerBody\"\n          [dataSource]=\"dataSource\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [rowTemplete]=\"innerBody.rowTempleteForSelect\"\n          [minHeight]=\"minHeight\"\n          [minHeightStretchRow]=\"innerBody.minHeightStretchRow\"\n        ></tbody>\n        <tbody\n          *ngIf=\"!innerBody\"\n          dDataTableBody\n          #devuiNormalScrollBody\n          [dataSource]=\"dataSource\"\n          [resizeable]=\"resizeable\"\n          [columns]=\"_columns\"\n          [checkable]=\"checkable\"\n          [allChecked]=\"_pageAllChecked\"\n          [selectable]=\"selectable\"\n          [editModel]=\"editModel\"\n          [editRowItem]=\"editRowItem\"\n          [showExpandToggle]=\"showExpandToggle\"\n          [detailTemplateRef]=\"detailTemplateRef\"\n          [timeout]=\"timeout\"\n          [type]=\"type\"\n          [rowHoveredHighlight]=\"rowHoveredHighlight\"\n          [tableLevel]=\"tableLevel\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [headerExpandConfig]=\"headerExpandConfig\"\n          [generalRowHoveredData]=\"generalRowHoveredData\"\n        ></tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"devui-no-result-wrapper\"\n  [ngClass]=\"{ 'overlay-table-no-result': tableOverflowType === 'overlay' }\"\n  *ngIf=\"!dataSource?.length && noResultTemplate != null\"\n>\n  <ng-template [ngTemplateOutlet]=\"noResultTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this }\"></ng-template>\n</div>\n\n<ng-template #scrollViewTpl>\n  <cdk-virtual-scroll-viewport\n    #cdkVirtualScrollViewport\n    dLazyLoad\n    [enableLazyLoad]=\"lazy\"\n    (loadMore)=\"onLoadMore($event)\"\n    [itemSize]=\"virtualItemSize\"\n    [minBufferPx]=\"virtualMinBufferPx\"\n    [maxBufferPx]=\"virtualMaxBufferPx\"\n    class=\"devui-scrollbar viewport-wrapper\"\n    [ngClass]=\"{\n      'scroll-view': scrollable,\n      'overflow-overlay': tableOverflowType === 'overlay',\n      'virtual-scroll-wrap': !fixHeader,\n      'has-width-scroll': hasWidthScroll,\n      'has-height-scroll': hasHeightScroll\n    }\"\n    [style.height]=\"virtualBodyHeight\"\n    [style.max-height]=\"maxHeight ? maxHeight : null\"\n    [style.max-width]=\"maxWidth ? maxWidth : null\"\n    [style.width]=\"!maxWidth ? tableWidth : null\"\n    (scroll)=\"onBodyScroll($event)\"\n  >\n    <table\n      #tableBody\n      class=\"devui-table devui-table-{{ size }} {{ borderType ? 'table-' + borderType : '' }} {{\n        rowHoveredHighlight ? 'table-hover' : ''\n      }} {{ headerBg ? 'header-bg' : '' }} {{ striped ? 'table-striped' : '' }}\"\n      [ngClass]=\"{ 'area-active': showOperationArea }\"\n      [style.table-layout]=\"tableLayout\"\n      [style.height]=\"minHeight ? minHeight : null\"\n    >\n      <colgroup>\n        <col *ngFor=\"let config of tableWidthConfig\" [style.width]=\"config.width\" />\n      </colgroup>\n      <ng-container *ngIf=\"!fixHeader\">\n        <ng-container *ngTemplateOutlet=\"HeaderContent\"></ng-container>\n        <ng-template *ngIf=\"!innerHeader\" [ngTemplateOutlet]=\"headerTpl\"></ng-template>\n      </ng-container>\n      <tbody\n        dTableBody\n        dSortable\n        *ngIf=\"innerBody\"\n        [dataSource]=\"dataSource\"\n        [tableWidthConfig]=\"tableWidthConfig\"\n        [virtualScroll]=\"virtualScroll\"\n        [rowTemplete]=\"innerBody.rowTempleteForSelect\"\n        [minHeight]=\"minHeight\"\n        [minHeightStretchRow]=\"innerBody.minHeightStretchRow\"\n      ></tbody>\n      <tbody\n        *ngIf=\"!innerBody\"\n        dDataTableBody\n        [dataSource]=\"dataSource\"\n        [resizeable]=\"resizeable\"\n        [columns]=\"_columns\"\n        [checkable]=\"checkable\"\n        [allChecked]=\"_pageAllChecked\"\n        [selectable]=\"selectable\"\n        [editModel]=\"editModel\"\n        [editRowItem]=\"editRowItem\"\n        [showExpandToggle]=\"showExpandToggle\"\n        [detailTemplateRef]=\"detailTemplateRef\"\n        [timeout]=\"timeout\"\n        [type]=\"type\"\n        [rowHoveredHighlight]=\"rowHoveredHighlight\"\n        [tableLevel]=\"tableLevel\"\n        [virtualScroll]=\"virtualScroll\"\n        [tableWidthConfig]=\"tableWidthConfig\"\n        [headerExpandConfig]=\"headerExpandConfig\"\n        [generalRowHoveredData]=\"generalRowHoveredData\"\n      ></tbody>\n    </table>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<ng-template #headerTpl>\n  <thead\n    dDataTableHead\n    [resizeable]=\"resizeable\"\n    [tableViewRefElement]=\"tableViewRefElement\"\n    [tableBodyEl]=\"tableBodyEl\"\n    [multiSort]=\"multiSort\"\n    [columns]=\"_columns\"\n    [pageAllChecked]=\"_pageAllChecked\"\n    [checkable]=\"checkable\"\n    [checkOptions]=\"checkOptions\"\n    [headerCheckDisabled]=\"headerCheckDisabled\"\n    [headerCheckVisible]=\"headerCheckVisible\"\n    [showExpandToggle]=\"showExpandToggle\"\n    [showSortIcon]=\"showSortIcon\"\n    [showFilterIcon]=\"showFilterIcon\"\n    (resizeHandlerEvent)=\"onResizeHandler($event)\"\n    (headClickSortEvent)=\"onHandleSort($event)\"\n    [halfChecked]=\"halfChecked\"\n    [maxHeight]=\"maxHeight\"\n    (beginResizeHandlerEvent)=\"beginResizeHandlerEvent($event)\"\n    (resizingHandlerEvent)=\"onResizingFixedHandler($event)\"\n    [fixHeader]=\"fixHeader\"\n    (dragTableEndEvent)=\"handleDragTable($event)\"\n    [dataSource]=\"dataSource\"\n    [colDropFreezeTo]=\"colDropFreezeTo\"\n    [colDraggable]=\"colDraggable\"\n    [childrenTableOpen]=\"childrenTableOpen\"\n  ></thead>\n</ng-template>\n<ng-template #HeaderContent><ng-content select=\"thead\"></ng-content></ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host{display:block}:host.devui-table-shadow{border-radius:2px;border-radius:var(--devui-border-radius, 2px);overflow:hidden;box-shadow:0 1px 4px rgba(37,43,58,.1);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) var(--devui-light-shadow, rgba(37, 43, 58, .1))}:host.devui-table-shadow ::ng-deep table tbody tr:last-child td{border-bottom-color:transparent}.devui-data-table ::ng-deep{border:none;height:100%}.devui-data-table ::ng-deep .devui-table-view{padding:0;border:none;position:relative;height:100%}.devui-data-table ::ng-deep .devui-table-view.contain-fix-height{display:flex;flex-direction:column}.devui-data-table ::ng-deep .devui-table-view.contain-fix-height .scroll-view{flex:1}.devui-data-table ::ng-deep .devui-table-view .scroll-view{overflow-x:auto;overflow-y:scroll}.devui-data-table ::ng-deep .devui-table-view .scroll-view.overflow-overlay{overflow:hidden}.devui-data-table ::ng-deep .devui-table-view .scroll-view.overflow-overlay:hover{overflow:auto;overflow:overlay}.devui-data-table ::ng-deep .devui-table-view .scroll-view.has-width-scroll:not(:hover):after{content:\"\";position:absolute;right:0;bottom:0;top:0;width:50px;background:linear-gradient(90deg,transparent,#ffffff);background:linear-gradient(90deg,transparent,var(--devui-base-bg, #ffffff))}.devui-data-table ::ng-deep .devui-table-view .scroll-view.has-height-scroll:not(:hover):before{content:\"\";position:absolute;left:0;bottom:0;right:0;height:20px;background:linear-gradient(180deg,transparent,#ffffff);background:linear-gradient(180deg,transparent,var(--devui-base-bg, #ffffff))}.devui-data-table ::ng-deep .devui-table-view .devui-table{border-collapse:separate;border-spacing:0;table-layout:fixed;width:100%;max-width:100%;margin:0}.devui-data-table ::ng-deep .devui-table-view .devui-table>tbody+tbody{border-top:none}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper{overflow-x:auto;overflow-y:scroll;position:relative}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.overflow-overlay{overflow:hidden}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.overflow-overlay:hover{overflow:auto;overflow:overlay}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.has-width-scroll:not(:hover):after{content:\"\";position:absolute;right:0;bottom:0;top:0;width:50px;background:linear-gradient(90deg,transparent,#ffffff)}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.has-height-scroll:not(:hover):before{content:\"\";position:absolute;left:0;bottom:0;right:0;height:20px;background:linear-gradient(180deg,transparent,#ffffff)}.devui-data-table ::ng-deep .devui-table-view .resize-bar{top:0;bottom:0;position:absolute;cursor:col-resize;background:#5e7ce0;background:var(--devui-form-control-line-active, #5e7ce0);width:2px;z-index:9999;display:none}.devui-data-table ::ng-deep .devui-table-view .resize-overlay{position:absolute;display:block;top:0;left:0;bottom:0;right:0;z-index:1000}.devui-data-table ::ng-deep .table-wrap{overflow-y:auto}.devui-data-table ::ng-deep .virtual-scroll-wrap .cdk-virtual-scroll-content-wrapper{padding-top:8px}.devui-data-table ::ng-deep .devui-scrollbar{scrollbar-width:thin}.devui-table ::ng-deep thead span{font-weight:700;color:#252b3a;color:var(--devui-text, #252b3a);font-size:12px;font-size:var(--devui-font-size-sm, 12px)}.devui-table ::ng-deep thead tr{background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-table ::ng-deep thead tr th{text-align:left;background-clip:padding-box!important;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3);display:table-cell;padding:0;font-size:0;background-color:inherit}.devui-table ::ng-deep thead tr th .drag-icon{display:inline-block;margin-right:2px;visibility:hidden}.devui-table ::ng-deep thead tr th .drag-icon+.childtable-toggler>.customized-icon{font-size:16px;font-size:var(--devui-font-size-icon, 16px)}.devui-table ::ng-deep thead tr th>*{display:inline-block}.devui-table ::ng-deep thead tr th .title,.devui-table ::ng-deep thead tr th .parent-title{display:inline-block;max-width:calc(100% - 18px);line-height:42px;vertical-align:middle;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;font-size:12px;font-size:var(--devui-font-size-sm, 12px);font-weight:700;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-table ::ng-deep thead tr th .title.can-filter{width:calc(100% - 34px)}.devui-table ::ng-deep thead tr th .childtable-toggler+.title{width:calc(100% - 38px)}.devui-table ::ng-deep thead tr th .childtable-toggler+.title.can-filter{width:calc(100% - 54px)}.devui-table ::ng-deep thead tr th:hover,.devui-table ::ng-deep thead tr th.hover{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr th:hover d-table-sort,.devui-table ::ng-deep thead tr th.hover d-table-sort{display:block}.devui-table ::ng-deep thead tr th:hover d-table-filter,.devui-table ::ng-deep thead tr th.hover d-table-filter{display:block}.devui-table ::ng-deep thead tr th:hover .filter-icon,.devui-table ::ng-deep thead tr th.hover .filter-icon{visibility:visible}.devui-table ::ng-deep thead tr th:hover .sort-icon-default,.devui-table ::ng-deep thead tr th.hover .sort-icon-default{visibility:visible}.devui-table ::ng-deep thead tr th.operable:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table ::ng-deep thead tr th.sindu_handle:hover,.devui-table ::ng-deep thead tr th.sindu_handle.hover{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr th.sindu_handle:hover .drag-icon,.devui-table ::ng-deep thead tr th.sindu_handle.hover .drag-icon{visibility:visible}.devui-table ::ng-deep thead tr th.sindu_handle:hover .hidden-icon.drag-icon,.devui-table ::ng-deep thead tr th.sindu_handle.hover .hidden-icon.drag-icon{visibility:hidden}.devui-table ::ng-deep thead tr th.devui-checkable-cell{padding:10px 0 10px 20px}.devui-table ::ng-deep thead tr th.devui-detail-cell{width:36px;text-align:center;padding:0;cursor:pointer}.devui-table ::ng-deep thead tr th.devui-sticky-left-cell,.devui-table ::ng-deep thead tr th.devui-sticky-right-cell{position:-webkit-sticky;position:sticky;z-index:5}.devui-table ::ng-deep thead tr th .header-container{position:relative;display:flex;align-items:center;padding-left:2px;padding-right:8px}.devui-table ::ng-deep thead tr .sort-active{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr .filter-active{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr .check-box-all{vertical-align:middle;margin-right:5px}.devui-table ::ng-deep tbody>tr{background:#ffffff;background:var(--devui-base-bg, #ffffff);-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.devui-table ::ng-deep tbody>tr.table-row-selected{background:#f2f5fc;background:var(--devui-list-item-selected-bg, #f2f5fc)}.devui-table ::ng-deep tbody>tr>td{background-clip:padding-box;vertical-align:middle;padding:10px 20px 9px;border-top:none;word-wrap:break-word;word-break:normal;line-height:22px;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a);background-color:inherit;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table ::ng-deep tbody>tr>td.editable-cell{position:relative}.devui-table ::ng-deep tbody>tr>td.editable-cell:hover:after{content:\"\";display:block;width:calc(100% - 32px);position:absolute;height:calc(100% - 14px);border:1px solid #d7d8da;border:1px solid var(--devui-line, #d7d8da);left:12px;top:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);pointer-events:none}.devui-table ::ng-deep tbody>tr>td.devui-checkable-cell{padding:10px 0 10px 20px}.devui-table ::ng-deep tbody>tr>td.devui-detail-cell{width:36px;text-align:center;padding:0;cursor:pointer}.devui-table ::ng-deep tbody>tr>td.devui-sticky-left-cell,.devui-table ::ng-deep tbody>tr>td.devui-sticky-right-cell{position:-webkit-sticky;position:sticky;z-index:5}.devui-table ::ng-deep .clickable{cursor:pointer;vertical-align:middle}.devui-table ::ng-deep .d-checkbox>label{margin:auto}.devui-table ::ng-deep svg.svg-icon rect{stroke:#cfd0d3;stroke:var(--devui-disabled-text, #cfd0d3)}.devui-table ::ng-deep svg.svg-icon.svg-icon-close rect:last-child{stroke:none;fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-table ::ng-deep path{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-table ::ng-deep svg.svg-icon:hover g path{fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}.devui-table ::ng-deep svg.svg-icon:hover g rect{stroke:#252b3a;stroke:var(--devui-icon-fill-active, #252b3a)}.devui-table ::ng-deep svg.svg-icon.svg-icon-close:hover rect:last-child{stroke:none;fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}.devui-table ::ng-deep .resize-handle{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;cursor:col-resize}.devui-table ::ng-deep .resizeable:hover .resize-handle{border-right:1px solid #d7d8da;border-right:1px solid var(--devui-line, #d7d8da)}.devui-table ::ng-deep .resizeable .resize-handle:hover{border-right:2px solid #5e7ce0;border-right:2px solid var(--devui-form-control-line-active, #5e7ce0)}.devui-no-result-wrapper{padding:40px 0;background:#ffffff;background:var(--devui-base-bg, #ffffff);width:calc(100% - 8px)}.devui-no-result-wrapper.overlay-table-no-result{width:100%}.devui-table.area-active ::ng-deep thead>tr>th.operable{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table.area-active ::ng-deep thead>tr>th.operable .filter-icon{visibility:visible}.devui-table.area-active ::ng-deep thead>tr>th.operable .sort-icon-default{visibility:visible}.devui-table ::ng-deep thead>tr>th.can-sort d-table-filter{flex:1;text-align:right}.devui-table.devui-table-md ::ng-deep tbody>tr>td{padding:11px 20px 12px}.devui-table.devui-table-md ::ng-deep thead>tr>th.devui-checkable-cell{padding:10px 20px}.devui-table.devui-table-lg ::ng-deep tbody>tr>td{padding:15px 20px 16px}.devui-table.devui-table-lg ::ng-deep thead>tr>th.devui-checkable-cell{padding:10px 20px}.devui-table.devui-table-xs ::ng-deep tbody>tr>td{padding:4px 20px}.devui-table.devui-table-xs ::ng-deep thead>tr>th.devui-checkable-cell{padding:10px 20px}.devui-table.devui-table-xs ::ng-deep thead tr th .title{line-height:32px}.devui-table.table-striped ::ng-deep tbody>tr:nth-of-type(even){background:#f2f5fc;background:var(--devui-list-item-strip-bg, #f2f5fc)}.devui-table.table-borderless ::ng-deep tbody>tr>td{border-bottom:none}.devui-table.header-bg ::ng-deep thead tr{background-color:#f2f5fc;background-color:var(--devui-list-item-strip-bg, #f2f5fc)}.devui-table.header-bg ::ng-deep thead tr .devui-first-sticky-right-cell{background:linear-gradient(to right,transparent,#f2f5fc 10px);background:linear-gradient(to right,transparent,var(--devui-list-item-strip-bg, #f2f5fc) 10px)}.devui-table.header-bg ::ng-deep thead tr .devui-last-sticky-left-cell{background:linear-gradient(to left,transparent,#f2f5fc 10px);background:linear-gradient(to left,transparent,var(--devui-list-item-strip-bg, #f2f5fc) 10px)}.devui-table.table-bordered ::ng-deep tr td:first-child{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-bordered ::ng-deep tr td{border-right:1px solid #f2f2f3;border-right:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-bordered ::ng-deep thead tr th:first-child{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-bordered ::ng-deep thead tr th{border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3);border-right:1px solid #f2f2f3;border-right:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-hover ::ng-deep tbody>tr:not(.table-row-selected):not(.expand-row):not(.child-table):hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table.table-hover ::ng-deep tbody>tr:not(.table-row-selected):not(.expand-row):not(.child-table):hover .devui-first-sticky-right-cell{background:linear-gradient(to right,transparent,#f2f2f3 10px);background:linear-gradient(to right,transparent,var(--devui-list-item-hover-bg, #f2f2f3) 10px)}.devui-table.table-hover ::ng-deep tbody>tr:not(.table-row-selected):not(.expand-row):not(.child-table):hover .devui-last-sticky-left-cell{background:linear-gradient(to left,transparent,#f2f2f3 10px);background:linear-gradient(to left,transparent,var(--devui-list-item-hover-bg, #f2f2f3) 10px)}:host ::ng-deep .devui-toggle-childtable{cursor:pointer;margin-right:5px}:host ::ng-deep .devui-toggle-childtable>svg{vertical-align:middle}:host ::ng-deep .devui-toggle-childtable>svg>g>path{fill:#babbc0;fill:var(--devui-placeholder, #babbc0)}:host ::ng-deep .full-width{width:100%}:host ::ng-deep .hover-bg{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);pointer-events:none}:host ::ng-deep .hover-bg+th{pointer-events:none}:host ::ng-deep .table-view-selector{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:col-resize}:host ::ng-deep .edit-padding-fix{margin-top:-6px;margin-bottom:-6px}:host ::ng-deep .childtable-toggler{cursor:pointer;padding-right:8px;font-size:unset!important}:host ::ng-deep .childtable-toggler>svg{vertical-align:middle}:host ::ng-deep .childtable-toggler>svg>g>path{fill:#babbc0;fill:var(--devui-placeholder, #babbc0)}:host ::ng-deep .table.table-bordered.table-fix-header{border-bottom:0}:host ::ng-deep .table.table-bordered.table-fix-header th{border-bottom:0}:host ::ng-deep table.table-fix-header thead tr th:first-child{border-top-left-radius:2px;border-top-left-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table.table-fix-header thead tr th:last-child{border-top-right-radius:2px;border-top-right-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table thead tr th:first-child{border-top-left-radius:2px;border-top-left-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table thead tr th:last-child{border-top-right-radius:2px;border-top-right-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table tbody tr:last-child td:first-child{border-bottom-left-radius:2px;border-bottom-left-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table tbody tr:last-child td:last-child{border-bottom-right-radius:2px;border-bottom-right-radius:var(--devui-border-radius, 2px)}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-last-sticky-left-cell,:host ::ng-deep .devui-talbe-scorll-middle th .devui-last-sticky-left-cell,:host ::ng-deep .devui-talbe-scorll-right tr .devui-last-sticky-left-cell,:host ::ng-deep .devui-talbe-scorll-right th .devui-last-sticky-left-cell{background:linear-gradient(to left,transparent,#ffffff 10px);background:linear-gradient(to left,transparent,var(--devui-base-bg, #ffffff) 10px)}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-last-sticky-left-cell:after,:host ::ng-deep .devui-talbe-scorll-middle th .devui-last-sticky-left-cell:after,:host ::ng-deep .devui-talbe-scorll-right tr .devui-last-sticky-left-cell:after,:host ::ng-deep .devui-talbe-scorll-right th .devui-last-sticky-left-cell:after{content:\"\";position:absolute;top:0;right:0;bottom:0;width:10px;pointer-events:none;box-shadow:inset 8px 0 8px -4px rgba(37,43,58,.1);box-shadow:inset var(--devui-table-inset-shadow-left, 8px 0 8px -4px) var(--devui-light-shadow, rgba(37, 43, 58, .1))}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-first-sticky-right-cell,:host ::ng-deep .devui-talbe-scorll-middle th .devui-first-sticky-right-cell,:host ::ng-deep .devui-talbe-scorll-left tr .devui-first-sticky-right-cell,:host ::ng-deep .devui-talbe-scorll-left th .devui-first-sticky-right-cell{background:linear-gradient(to right,transparent,#ffffff 10px);background:linear-gradient(to right,transparent,var(--devui-base-bg, #ffffff) 10px)}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-first-sticky-right-cell:before,:host ::ng-deep .devui-talbe-scorll-middle th .devui-first-sticky-right-cell:before,:host ::ng-deep .devui-talbe-scorll-left tr .devui-first-sticky-right-cell:before,:host ::ng-deep .devui-talbe-scorll-left th .devui-first-sticky-right-cell:before{content:\"\";position:absolute;top:0;left:0;bottom:0;width:10px;pointer-events:none;box-shadow:inset -8px 0 8px -4px rgba(37,43,58,.1);box-shadow:inset var(--devui-table-inset-shadow-right, -8px 0 8px -4px) var(--devui-light-shadow, rgba(37, 43, 58, .1))}:host ::ng-deep .gu-unselectable{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}:host ::ng-deep .gu-mirror{position:fixed!important;margin:0!important;z-index:9999!important;background-color:#fff;box-shadow:0 2px 8px 0 var(--dark-1-boxshadow, rgba(41, 48, 64, .2));box-shadow:0 2px 8px rgba(41,48,64,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--dark-1-boxshadow, rgba(41, 48, 64, .2));list-style:none}:host ::ng-deep .gu-hide{display:none!important}:host ::ng-deep .sindu_dragger{list-style:none;margin:0;padding:0;box-sizing:border-box;display:flex}:host ::ng-deep .sindu_handle>.header-container>.drag-icon{cursor:move}:host ::ng-deep .sindu_dragger li{margin:0;padding:0;list-style:none;text-align:inherit}:host ::ng-deep .sindu_dragger li table,:host ::ng-deep .sindu_dragger tr,:host ::ng-deep .sindu_dragger th,:host ::ng-deep .sindu_dragger td{box-sizing:border-box}:host ::ng-deep .sindu_dragging .sindu_origin_table{visibility:hidden}:host ::ng-deep .gu-mirror li{margin:0;padding:0;list-style:none;text-align:inherit}:host ::ng-deep .gu-mirror li table,:host ::ng-deep .gu-mirror tr,:host ::ng-deep .gu-mirror th,:host ::ng-deep .gu-mirror td{box-sizing:border-box}:host ::ng-deep .gu-transit{opacity:.5}:host ::ng-deep .devui-table.table-bordered thead tr th.devui-checkable-cell{padding:10px}:host ::ng-deep .devui-table.table-bordered tbody>tr>td.devui-checkable-cell{padding:10px}\n", ":host ::ng-deep th .datatable-svg g#order-default path{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}:host ::ng-deep th .datatable-svg g#order-desc polygon#Path-4{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}:host ::ng-deep th .datatable-svg g#order-desc polygon#Path-4-Copy{fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}:host ::ng-deep th .datatable-svg g#order-asc polygon#Path-4{fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}:host ::ng-deep th .datatable-svg g#order-asc polygon#Path-4-Copy{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}\n"], components: [{ type: TableTbodyComponent, selector: "[dTableBody]", inputs: ["dataSource", "rowTemplete", "nestedLayer", "nestedIndex", "virtualScroll", "tableWidthConfig", "minHeight", "minHeightStretchRow"] }, { type: DataTableBodyComponent, selector: "d-data-table-body, [dDataTableBody]", inputs: ["checkable", "showExpandToggle", "allChecked", "selectable", "editModel", "editRowItem", "dataSource", "resizeable", "columns", "detailTemplateRef", "timeout", "type", "rowHoveredHighlight", "tableLevel", "nestedIndex", "virtualScroll", "tableWidthConfig", "headerExpandConfig", "generalRowHoveredData"] }, { type: i3.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: DataTableHeadComponent, selector: "d-data-table-head,[dDataTableHead]", inputs: ["checkable", "headerCheckDisabled", "headerCheckVisible", "checkOptions", "showExpandToggle", "pageAllChecked", "columns", "multiSort", "resizeable", "maxHeight", "showSortIcon", "showFilterIcon", "colDropFreezeTo", "colDraggable", "fixHeader", "dataSource", "tableViewRefElement", "tableBodyEl", "checkableColumn", "showExpandToggleColumn", "halfChecked", "childrenTableOpen"], outputs: ["headClickSortEvent", "resizeHandlerEvent", "beginResizeHandlerEvent", "resizingHandlerEvent", "dragTableEndEvent"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.CdkScrollable, selector: "[cdk-scrollable], [cdkScrollable]" }, { type: i6.LazyLoadDirective, selector: "[dLazyLoad]", inputs: ["enableLazyLoad", "contentMode", "target", "imgLoadSrc"], outputs: ["loadMore"] }, { type: i4$2.SortableDirective, selector: "[dSortable]", inputs: ["dSortable", "dSortableZMode"] }, { type: i3.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-data-table', exportAs: 'dataTable', preserveWhitespaces: false, providers: [{
                            provide: DATA_TABLE,
                            useExisting: forwardRef(() => DataTableComponent)
                        }], template: "<div class=\"devui-data-table {{ cssClass }}\">\n  <div class=\"devui-table-view {{ containFixHeaderHeight ? 'contain-fix-height' : '' }}\" #tableView>\n    <div\n      *ngIf=\"fixHeader\"\n      #fixHeaderContainerRef\n      class=\"table-wrap\"\n      [style.overflow-x]=\"'hidden'\"\n      [style.scrollbar-width]=\"'none'\"\n      [style.overflow-y]=\"tableOverflowType === 'overlay' ? 'overlay' : 'scroll'\"\n      [style.max-height]=\"maxHeight ? maxHeight : null\"\n      [style.max-width]=\"maxWidth ? maxWidth : null\"\n      [style.width]=\"!maxWidth ? tableWidth : null\"\n    >\n      <table\n        class=\"devui-table devui-table-{{ size }} {{ borderType ? 'table-' + borderType : '' }} {{ fixHeader ? 'table-fix-header' : '' }} {{\n          headerBg ? 'header-bg' : ''\n        }} {{ striped ? 'table-striped' : '' }}\"\n        [ngClass]=\"{ 'area-active': showOperationArea }\"\n        [style.table-layout]=\"tableLayout\"\n      >\n        <colgroup>\n          <col *ngFor=\"let config of tableWidthConfig\" [style.width]=\"config.width\" />\n        </colgroup>\n        <ng-container *ngTemplateOutlet=\"HeaderContent\"></ng-container>\n        <ng-template *ngIf=\"!innerHeader\" [ngTemplateOutlet]=\"headerTpl\"></ng-template>\n      </table>\n    </div>\n\n    <div\n      #normalScroll\n      cdkScrollable\n      dLazyLoad\n      [enableLazyLoad]=\"lazy\"\n      (loadMore)=\"onLoadMore($event)\"\n      *ngIf=\"!virtualScroll; else scrollViewTpl\"\n      class=\"devui-scrollbar\"\n      [ngClass]=\"{\n        'scroll-view': scrollable,\n        'overflow-overlay': tableOverflowType === 'overlay',\n        'table-wrap': !fixHeader,\n        'has-width-scroll': hasWidthScroll,\n        'has-height-scroll': hasHeightScroll\n      }\"\n      [style.height]=\"tableHeight ? tableHeight : null\"\n      [style.max-height]=\"maxHeight ? maxHeight : null\"\n      [style.max-width]=\"maxWidth ? maxWidth : null\"\n      [style.width]=\"!maxWidth ? tableWidth : null\"\n      (scroll)=\"onBodyScroll($event)\"\n    >\n      <table\n        #tableBody\n        class=\"devui-table devui-table-{{ size }} {{ borderType ? 'table-' + borderType : '' }} {{\n          rowHoveredHighlight ? 'table-hover' : ''\n        }} {{ headerBg ? 'header-bg' : '' }} {{ striped ? 'table-striped' : '' }}\"\n        [ngClass]=\"{ 'area-active': showOperationArea }\"\n        [style.table-layout]=\"tableLayout\"\n        [style.height]=\"minHeight ? minHeight : null\"\n        [style.position]=\"tableOverflowType === 'overlay' ? null : 'relative'\"\n      >\n        <colgroup>\n          <col *ngFor=\"let config of tableWidthConfig\" [style.width]=\"config.width\" />\n        </colgroup>\n        <ng-container *ngIf=\"!fixHeader\">\n          <ng-container *ngTemplateOutlet=\"HeaderContent\"></ng-container>\n          <ng-template *ngIf=\"!innerHeader\" [ngTemplateOutlet]=\"headerTpl\"></ng-template>\n        </ng-container>\n        <tbody\n          dTableBody\n          dSortable\n          *ngIf=\"innerBody\"\n          [dataSource]=\"dataSource\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [rowTemplete]=\"innerBody.rowTempleteForSelect\"\n          [minHeight]=\"minHeight\"\n          [minHeightStretchRow]=\"innerBody.minHeightStretchRow\"\n        ></tbody>\n        <tbody\n          *ngIf=\"!innerBody\"\n          dDataTableBody\n          #devuiNormalScrollBody\n          [dataSource]=\"dataSource\"\n          [resizeable]=\"resizeable\"\n          [columns]=\"_columns\"\n          [checkable]=\"checkable\"\n          [allChecked]=\"_pageAllChecked\"\n          [selectable]=\"selectable\"\n          [editModel]=\"editModel\"\n          [editRowItem]=\"editRowItem\"\n          [showExpandToggle]=\"showExpandToggle\"\n          [detailTemplateRef]=\"detailTemplateRef\"\n          [timeout]=\"timeout\"\n          [type]=\"type\"\n          [rowHoveredHighlight]=\"rowHoveredHighlight\"\n          [tableLevel]=\"tableLevel\"\n          [tableWidthConfig]=\"tableWidthConfig\"\n          [headerExpandConfig]=\"headerExpandConfig\"\n          [generalRowHoveredData]=\"generalRowHoveredData\"\n        ></tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"devui-no-result-wrapper\"\n  [ngClass]=\"{ 'overlay-table-no-result': tableOverflowType === 'overlay' }\"\n  *ngIf=\"!dataSource?.length && noResultTemplate != null\"\n>\n  <ng-template [ngTemplateOutlet]=\"noResultTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this }\"></ng-template>\n</div>\n\n<ng-template #scrollViewTpl>\n  <cdk-virtual-scroll-viewport\n    #cdkVirtualScrollViewport\n    dLazyLoad\n    [enableLazyLoad]=\"lazy\"\n    (loadMore)=\"onLoadMore($event)\"\n    [itemSize]=\"virtualItemSize\"\n    [minBufferPx]=\"virtualMinBufferPx\"\n    [maxBufferPx]=\"virtualMaxBufferPx\"\n    class=\"devui-scrollbar viewport-wrapper\"\n    [ngClass]=\"{\n      'scroll-view': scrollable,\n      'overflow-overlay': tableOverflowType === 'overlay',\n      'virtual-scroll-wrap': !fixHeader,\n      'has-width-scroll': hasWidthScroll,\n      'has-height-scroll': hasHeightScroll\n    }\"\n    [style.height]=\"virtualBodyHeight\"\n    [style.max-height]=\"maxHeight ? maxHeight : null\"\n    [style.max-width]=\"maxWidth ? maxWidth : null\"\n    [style.width]=\"!maxWidth ? tableWidth : null\"\n    (scroll)=\"onBodyScroll($event)\"\n  >\n    <table\n      #tableBody\n      class=\"devui-table devui-table-{{ size }} {{ borderType ? 'table-' + borderType : '' }} {{\n        rowHoveredHighlight ? 'table-hover' : ''\n      }} {{ headerBg ? 'header-bg' : '' }} {{ striped ? 'table-striped' : '' }}\"\n      [ngClass]=\"{ 'area-active': showOperationArea }\"\n      [style.table-layout]=\"tableLayout\"\n      [style.height]=\"minHeight ? minHeight : null\"\n    >\n      <colgroup>\n        <col *ngFor=\"let config of tableWidthConfig\" [style.width]=\"config.width\" />\n      </colgroup>\n      <ng-container *ngIf=\"!fixHeader\">\n        <ng-container *ngTemplateOutlet=\"HeaderContent\"></ng-container>\n        <ng-template *ngIf=\"!innerHeader\" [ngTemplateOutlet]=\"headerTpl\"></ng-template>\n      </ng-container>\n      <tbody\n        dTableBody\n        dSortable\n        *ngIf=\"innerBody\"\n        [dataSource]=\"dataSource\"\n        [tableWidthConfig]=\"tableWidthConfig\"\n        [virtualScroll]=\"virtualScroll\"\n        [rowTemplete]=\"innerBody.rowTempleteForSelect\"\n        [minHeight]=\"minHeight\"\n        [minHeightStretchRow]=\"innerBody.minHeightStretchRow\"\n      ></tbody>\n      <tbody\n        *ngIf=\"!innerBody\"\n        dDataTableBody\n        [dataSource]=\"dataSource\"\n        [resizeable]=\"resizeable\"\n        [columns]=\"_columns\"\n        [checkable]=\"checkable\"\n        [allChecked]=\"_pageAllChecked\"\n        [selectable]=\"selectable\"\n        [editModel]=\"editModel\"\n        [editRowItem]=\"editRowItem\"\n        [showExpandToggle]=\"showExpandToggle\"\n        [detailTemplateRef]=\"detailTemplateRef\"\n        [timeout]=\"timeout\"\n        [type]=\"type\"\n        [rowHoveredHighlight]=\"rowHoveredHighlight\"\n        [tableLevel]=\"tableLevel\"\n        [virtualScroll]=\"virtualScroll\"\n        [tableWidthConfig]=\"tableWidthConfig\"\n        [headerExpandConfig]=\"headerExpandConfig\"\n        [generalRowHoveredData]=\"generalRowHoveredData\"\n      ></tbody>\n    </table>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<ng-template #headerTpl>\n  <thead\n    dDataTableHead\n    [resizeable]=\"resizeable\"\n    [tableViewRefElement]=\"tableViewRefElement\"\n    [tableBodyEl]=\"tableBodyEl\"\n    [multiSort]=\"multiSort\"\n    [columns]=\"_columns\"\n    [pageAllChecked]=\"_pageAllChecked\"\n    [checkable]=\"checkable\"\n    [checkOptions]=\"checkOptions\"\n    [headerCheckDisabled]=\"headerCheckDisabled\"\n    [headerCheckVisible]=\"headerCheckVisible\"\n    [showExpandToggle]=\"showExpandToggle\"\n    [showSortIcon]=\"showSortIcon\"\n    [showFilterIcon]=\"showFilterIcon\"\n    (resizeHandlerEvent)=\"onResizeHandler($event)\"\n    (headClickSortEvent)=\"onHandleSort($event)\"\n    [halfChecked]=\"halfChecked\"\n    [maxHeight]=\"maxHeight\"\n    (beginResizeHandlerEvent)=\"beginResizeHandlerEvent($event)\"\n    (resizingHandlerEvent)=\"onResizingFixedHandler($event)\"\n    [fixHeader]=\"fixHeader\"\n    (dragTableEndEvent)=\"handleDragTable($event)\"\n    [dataSource]=\"dataSource\"\n    [colDropFreezeTo]=\"colDropFreezeTo\"\n    [colDraggable]=\"colDraggable\"\n    [childrenTableOpen]=\"childrenTableOpen\"\n  ></thead>\n</ng-template>\n<ng-template #HeaderContent><ng-content select=\"thead\"></ng-content></ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host{display:block}:host.devui-table-shadow{border-radius:2px;border-radius:var(--devui-border-radius, 2px);overflow:hidden;box-shadow:0 1px 4px rgba(37,43,58,.1);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) var(--devui-light-shadow, rgba(37, 43, 58, .1))}:host.devui-table-shadow ::ng-deep table tbody tr:last-child td{border-bottom-color:transparent}.devui-data-table ::ng-deep{border:none;height:100%}.devui-data-table ::ng-deep .devui-table-view{padding:0;border:none;position:relative;height:100%}.devui-data-table ::ng-deep .devui-table-view.contain-fix-height{display:flex;flex-direction:column}.devui-data-table ::ng-deep .devui-table-view.contain-fix-height .scroll-view{flex:1}.devui-data-table ::ng-deep .devui-table-view .scroll-view{overflow-x:auto;overflow-y:scroll}.devui-data-table ::ng-deep .devui-table-view .scroll-view.overflow-overlay{overflow:hidden}.devui-data-table ::ng-deep .devui-table-view .scroll-view.overflow-overlay:hover{overflow:auto;overflow:overlay}.devui-data-table ::ng-deep .devui-table-view .scroll-view.has-width-scroll:not(:hover):after{content:\"\";position:absolute;right:0;bottom:0;top:0;width:50px;background:linear-gradient(90deg,transparent,#ffffff);background:linear-gradient(90deg,transparent,var(--devui-base-bg, #ffffff))}.devui-data-table ::ng-deep .devui-table-view .scroll-view.has-height-scroll:not(:hover):before{content:\"\";position:absolute;left:0;bottom:0;right:0;height:20px;background:linear-gradient(180deg,transparent,#ffffff);background:linear-gradient(180deg,transparent,var(--devui-base-bg, #ffffff))}.devui-data-table ::ng-deep .devui-table-view .devui-table{border-collapse:separate;border-spacing:0;table-layout:fixed;width:100%;max-width:100%;margin:0}.devui-data-table ::ng-deep .devui-table-view .devui-table>tbody+tbody{border-top:none}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper{overflow-x:auto;overflow-y:scroll;position:relative}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.overflow-overlay{overflow:hidden}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.overflow-overlay:hover{overflow:auto;overflow:overlay}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.has-width-scroll:not(:hover):after{content:\"\";position:absolute;right:0;bottom:0;top:0;width:50px;background:linear-gradient(90deg,transparent,#ffffff)}.devui-data-table ::ng-deep .devui-table-view .viewport-wrapper.has-height-scroll:not(:hover):before{content:\"\";position:absolute;left:0;bottom:0;right:0;height:20px;background:linear-gradient(180deg,transparent,#ffffff)}.devui-data-table ::ng-deep .devui-table-view .resize-bar{top:0;bottom:0;position:absolute;cursor:col-resize;background:#5e7ce0;background:var(--devui-form-control-line-active, #5e7ce0);width:2px;z-index:9999;display:none}.devui-data-table ::ng-deep .devui-table-view .resize-overlay{position:absolute;display:block;top:0;left:0;bottom:0;right:0;z-index:1000}.devui-data-table ::ng-deep .table-wrap{overflow-y:auto}.devui-data-table ::ng-deep .virtual-scroll-wrap .cdk-virtual-scroll-content-wrapper{padding-top:8px}.devui-data-table ::ng-deep .devui-scrollbar{scrollbar-width:thin}.devui-table ::ng-deep thead span{font-weight:700;color:#252b3a;color:var(--devui-text, #252b3a);font-size:12px;font-size:var(--devui-font-size-sm, 12px)}.devui-table ::ng-deep thead tr{background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-table ::ng-deep thead tr th{text-align:left;background-clip:padding-box!important;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3);display:table-cell;padding:0;font-size:0;background-color:inherit}.devui-table ::ng-deep thead tr th .drag-icon{display:inline-block;margin-right:2px;visibility:hidden}.devui-table ::ng-deep thead tr th .drag-icon+.childtable-toggler>.customized-icon{font-size:16px;font-size:var(--devui-font-size-icon, 16px)}.devui-table ::ng-deep thead tr th>*{display:inline-block}.devui-table ::ng-deep thead tr th .title,.devui-table ::ng-deep thead tr th .parent-title{display:inline-block;max-width:calc(100% - 18px);line-height:42px;vertical-align:middle;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;font-size:12px;font-size:var(--devui-font-size-sm, 12px);font-weight:700;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-table ::ng-deep thead tr th .title.can-filter{width:calc(100% - 34px)}.devui-table ::ng-deep thead tr th .childtable-toggler+.title{width:calc(100% - 38px)}.devui-table ::ng-deep thead tr th .childtable-toggler+.title.can-filter{width:calc(100% - 54px)}.devui-table ::ng-deep thead tr th:hover,.devui-table ::ng-deep thead tr th.hover{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr th:hover d-table-sort,.devui-table ::ng-deep thead tr th.hover d-table-sort{display:block}.devui-table ::ng-deep thead tr th:hover d-table-filter,.devui-table ::ng-deep thead tr th.hover d-table-filter{display:block}.devui-table ::ng-deep thead tr th:hover .filter-icon,.devui-table ::ng-deep thead tr th.hover .filter-icon{visibility:visible}.devui-table ::ng-deep thead tr th:hover .sort-icon-default,.devui-table ::ng-deep thead tr th.hover .sort-icon-default{visibility:visible}.devui-table ::ng-deep thead tr th.operable:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table ::ng-deep thead tr th.sindu_handle:hover,.devui-table ::ng-deep thead tr th.sindu_handle.hover{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr th.sindu_handle:hover .drag-icon,.devui-table ::ng-deep thead tr th.sindu_handle.hover .drag-icon{visibility:visible}.devui-table ::ng-deep thead tr th.sindu_handle:hover .hidden-icon.drag-icon,.devui-table ::ng-deep thead tr th.sindu_handle.hover .hidden-icon.drag-icon{visibility:hidden}.devui-table ::ng-deep thead tr th.devui-checkable-cell{padding:10px 0 10px 20px}.devui-table ::ng-deep thead tr th.devui-detail-cell{width:36px;text-align:center;padding:0;cursor:pointer}.devui-table ::ng-deep thead tr th.devui-sticky-left-cell,.devui-table ::ng-deep thead tr th.devui-sticky-right-cell{position:-webkit-sticky;position:sticky;z-index:5}.devui-table ::ng-deep thead tr th .header-container{position:relative;display:flex;align-items:center;padding-left:2px;padding-right:8px}.devui-table ::ng-deep thead tr .sort-active{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr .filter-active{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-table ::ng-deep thead tr .check-box-all{vertical-align:middle;margin-right:5px}.devui-table ::ng-deep tbody>tr{background:#ffffff;background:var(--devui-base-bg, #ffffff);-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.devui-table ::ng-deep tbody>tr.table-row-selected{background:#f2f5fc;background:var(--devui-list-item-selected-bg, #f2f5fc)}.devui-table ::ng-deep tbody>tr>td{background-clip:padding-box;vertical-align:middle;padding:10px 20px 9px;border-top:none;word-wrap:break-word;word-break:normal;line-height:22px;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a);background-color:inherit;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table ::ng-deep tbody>tr>td.editable-cell{position:relative}.devui-table ::ng-deep tbody>tr>td.editable-cell:hover:after{content:\"\";display:block;width:calc(100% - 32px);position:absolute;height:calc(100% - 14px);border:1px solid #d7d8da;border:1px solid var(--devui-line, #d7d8da);left:12px;top:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);pointer-events:none}.devui-table ::ng-deep tbody>tr>td.devui-checkable-cell{padding:10px 0 10px 20px}.devui-table ::ng-deep tbody>tr>td.devui-detail-cell{width:36px;text-align:center;padding:0;cursor:pointer}.devui-table ::ng-deep tbody>tr>td.devui-sticky-left-cell,.devui-table ::ng-deep tbody>tr>td.devui-sticky-right-cell{position:-webkit-sticky;position:sticky;z-index:5}.devui-table ::ng-deep .clickable{cursor:pointer;vertical-align:middle}.devui-table ::ng-deep .d-checkbox>label{margin:auto}.devui-table ::ng-deep svg.svg-icon rect{stroke:#cfd0d3;stroke:var(--devui-disabled-text, #cfd0d3)}.devui-table ::ng-deep svg.svg-icon.svg-icon-close rect:last-child{stroke:none;fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-table ::ng-deep path{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-table ::ng-deep svg.svg-icon:hover g path{fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}.devui-table ::ng-deep svg.svg-icon:hover g rect{stroke:#252b3a;stroke:var(--devui-icon-fill-active, #252b3a)}.devui-table ::ng-deep svg.svg-icon.svg-icon-close:hover rect:last-child{stroke:none;fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}.devui-table ::ng-deep .resize-handle{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;cursor:col-resize}.devui-table ::ng-deep .resizeable:hover .resize-handle{border-right:1px solid #d7d8da;border-right:1px solid var(--devui-line, #d7d8da)}.devui-table ::ng-deep .resizeable .resize-handle:hover{border-right:2px solid #5e7ce0;border-right:2px solid var(--devui-form-control-line-active, #5e7ce0)}.devui-no-result-wrapper{padding:40px 0;background:#ffffff;background:var(--devui-base-bg, #ffffff);width:calc(100% - 8px)}.devui-no-result-wrapper.overlay-table-no-result{width:100%}.devui-table.area-active ::ng-deep thead>tr>th.operable{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table.area-active ::ng-deep thead>tr>th.operable .filter-icon{visibility:visible}.devui-table.area-active ::ng-deep thead>tr>th.operable .sort-icon-default{visibility:visible}.devui-table ::ng-deep thead>tr>th.can-sort d-table-filter{flex:1;text-align:right}.devui-table.devui-table-md ::ng-deep tbody>tr>td{padding:11px 20px 12px}.devui-table.devui-table-md ::ng-deep thead>tr>th.devui-checkable-cell{padding:10px 20px}.devui-table.devui-table-lg ::ng-deep tbody>tr>td{padding:15px 20px 16px}.devui-table.devui-table-lg ::ng-deep thead>tr>th.devui-checkable-cell{padding:10px 20px}.devui-table.devui-table-xs ::ng-deep tbody>tr>td{padding:4px 20px}.devui-table.devui-table-xs ::ng-deep thead>tr>th.devui-checkable-cell{padding:10px 20px}.devui-table.devui-table-xs ::ng-deep thead tr th .title{line-height:32px}.devui-table.table-striped ::ng-deep tbody>tr:nth-of-type(even){background:#f2f5fc;background:var(--devui-list-item-strip-bg, #f2f5fc)}.devui-table.table-borderless ::ng-deep tbody>tr>td{border-bottom:none}.devui-table.header-bg ::ng-deep thead tr{background-color:#f2f5fc;background-color:var(--devui-list-item-strip-bg, #f2f5fc)}.devui-table.header-bg ::ng-deep thead tr .devui-first-sticky-right-cell{background:linear-gradient(to right,transparent,#f2f5fc 10px);background:linear-gradient(to right,transparent,var(--devui-list-item-strip-bg, #f2f5fc) 10px)}.devui-table.header-bg ::ng-deep thead tr .devui-last-sticky-left-cell{background:linear-gradient(to left,transparent,#f2f5fc 10px);background:linear-gradient(to left,transparent,var(--devui-list-item-strip-bg, #f2f5fc) 10px)}.devui-table.table-bordered ::ng-deep tr td:first-child{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-bordered ::ng-deep tr td{border-right:1px solid #f2f2f3;border-right:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-bordered ::ng-deep thead tr th:first-child{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-bordered ::ng-deep thead tr th{border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3);border-right:1px solid #f2f2f3;border-right:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-table.table-hover ::ng-deep tbody>tr:not(.table-row-selected):not(.expand-row):not(.child-table):hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table.table-hover ::ng-deep tbody>tr:not(.table-row-selected):not(.expand-row):not(.child-table):hover .devui-first-sticky-right-cell{background:linear-gradient(to right,transparent,#f2f2f3 10px);background:linear-gradient(to right,transparent,var(--devui-list-item-hover-bg, #f2f2f3) 10px)}.devui-table.table-hover ::ng-deep tbody>tr:not(.table-row-selected):not(.expand-row):not(.child-table):hover .devui-last-sticky-left-cell{background:linear-gradient(to left,transparent,#f2f2f3 10px);background:linear-gradient(to left,transparent,var(--devui-list-item-hover-bg, #f2f2f3) 10px)}:host ::ng-deep .devui-toggle-childtable{cursor:pointer;margin-right:5px}:host ::ng-deep .devui-toggle-childtable>svg{vertical-align:middle}:host ::ng-deep .devui-toggle-childtable>svg>g>path{fill:#babbc0;fill:var(--devui-placeholder, #babbc0)}:host ::ng-deep .full-width{width:100%}:host ::ng-deep .hover-bg{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);pointer-events:none}:host ::ng-deep .hover-bg+th{pointer-events:none}:host ::ng-deep .table-view-selector{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:col-resize}:host ::ng-deep .edit-padding-fix{margin-top:-6px;margin-bottom:-6px}:host ::ng-deep .childtable-toggler{cursor:pointer;padding-right:8px;font-size:unset!important}:host ::ng-deep .childtable-toggler>svg{vertical-align:middle}:host ::ng-deep .childtable-toggler>svg>g>path{fill:#babbc0;fill:var(--devui-placeholder, #babbc0)}:host ::ng-deep .table.table-bordered.table-fix-header{border-bottom:0}:host ::ng-deep .table.table-bordered.table-fix-header th{border-bottom:0}:host ::ng-deep table.table-fix-header thead tr th:first-child{border-top-left-radius:2px;border-top-left-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table.table-fix-header thead tr th:last-child{border-top-right-radius:2px;border-top-right-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table thead tr th:first-child{border-top-left-radius:2px;border-top-left-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table thead tr th:last-child{border-top-right-radius:2px;border-top-right-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table tbody tr:last-child td:first-child{border-bottom-left-radius:2px;border-bottom-left-radius:var(--devui-border-radius, 2px)}:host ::ng-deep table tbody tr:last-child td:last-child{border-bottom-right-radius:2px;border-bottom-right-radius:var(--devui-border-radius, 2px)}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-last-sticky-left-cell,:host ::ng-deep .devui-talbe-scorll-middle th .devui-last-sticky-left-cell,:host ::ng-deep .devui-talbe-scorll-right tr .devui-last-sticky-left-cell,:host ::ng-deep .devui-talbe-scorll-right th .devui-last-sticky-left-cell{background:linear-gradient(to left,transparent,#ffffff 10px);background:linear-gradient(to left,transparent,var(--devui-base-bg, #ffffff) 10px)}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-last-sticky-left-cell:after,:host ::ng-deep .devui-talbe-scorll-middle th .devui-last-sticky-left-cell:after,:host ::ng-deep .devui-talbe-scorll-right tr .devui-last-sticky-left-cell:after,:host ::ng-deep .devui-talbe-scorll-right th .devui-last-sticky-left-cell:after{content:\"\";position:absolute;top:0;right:0;bottom:0;width:10px;pointer-events:none;box-shadow:inset 8px 0 8px -4px rgba(37,43,58,.1);box-shadow:inset var(--devui-table-inset-shadow-left, 8px 0 8px -4px) var(--devui-light-shadow, rgba(37, 43, 58, .1))}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-first-sticky-right-cell,:host ::ng-deep .devui-talbe-scorll-middle th .devui-first-sticky-right-cell,:host ::ng-deep .devui-talbe-scorll-left tr .devui-first-sticky-right-cell,:host ::ng-deep .devui-talbe-scorll-left th .devui-first-sticky-right-cell{background:linear-gradient(to right,transparent,#ffffff 10px);background:linear-gradient(to right,transparent,var(--devui-base-bg, #ffffff) 10px)}:host ::ng-deep .devui-talbe-scorll-middle tr .devui-first-sticky-right-cell:before,:host ::ng-deep .devui-talbe-scorll-middle th .devui-first-sticky-right-cell:before,:host ::ng-deep .devui-talbe-scorll-left tr .devui-first-sticky-right-cell:before,:host ::ng-deep .devui-talbe-scorll-left th .devui-first-sticky-right-cell:before{content:\"\";position:absolute;top:0;left:0;bottom:0;width:10px;pointer-events:none;box-shadow:inset -8px 0 8px -4px rgba(37,43,58,.1);box-shadow:inset var(--devui-table-inset-shadow-right, -8px 0 8px -4px) var(--devui-light-shadow, rgba(37, 43, 58, .1))}:host ::ng-deep .gu-unselectable{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}:host ::ng-deep .gu-mirror{position:fixed!important;margin:0!important;z-index:9999!important;background-color:#fff;box-shadow:0 2px 8px 0 var(--dark-1-boxshadow, rgba(41, 48, 64, .2));box-shadow:0 2px 8px rgba(41,48,64,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--dark-1-boxshadow, rgba(41, 48, 64, .2));list-style:none}:host ::ng-deep .gu-hide{display:none!important}:host ::ng-deep .sindu_dragger{list-style:none;margin:0;padding:0;box-sizing:border-box;display:flex}:host ::ng-deep .sindu_handle>.header-container>.drag-icon{cursor:move}:host ::ng-deep .sindu_dragger li{margin:0;padding:0;list-style:none;text-align:inherit}:host ::ng-deep .sindu_dragger li table,:host ::ng-deep .sindu_dragger tr,:host ::ng-deep .sindu_dragger th,:host ::ng-deep .sindu_dragger td{box-sizing:border-box}:host ::ng-deep .sindu_dragging .sindu_origin_table{visibility:hidden}:host ::ng-deep .gu-mirror li{margin:0;padding:0;list-style:none;text-align:inherit}:host ::ng-deep .gu-mirror li table,:host ::ng-deep .gu-mirror tr,:host ::ng-deep .gu-mirror th,:host ::ng-deep .gu-mirror td{box-sizing:border-box}:host ::ng-deep .gu-transit{opacity:.5}:host ::ng-deep .devui-table.table-bordered thead tr th.devui-checkable-cell{padding:10px}:host ::ng-deep .devui-table.table-bordered tbody>tr>td.devui-checkable-cell{padding:10px}\n", ":host ::ng-deep th .datatable-svg g#order-default path{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}:host ::ng-deep th .datatable-svg g#order-desc polygon#Path-4{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}:host ::ng-deep th .datatable-svg g#order-desc polygon#Path-4-Copy{fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}:host ::ng-deep th .datatable-svg g#order-asc polygon#Path-4{fill:#252b3a;fill:var(--devui-icon-fill-active, #252b3a)}:host ::ng-deep th .datatable-svg g#order-asc polygon#Path-4-Copy{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    }, propDecorators: { checkable: [{
                type: Input
            }], headerCheckDisabled: [{
                type: Input
            }], headerCheckVisible: [{
                type: Input
            }], checkOptions: [{
                type: Input
            }], showExpandToggle: [{
                type: Input
            }], fixHeader: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], editModel: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], type: [{
                type: Input
            }], rowHoveredHighlight: [{
                type: Input
            }], generalRowHoveredData: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], tableWidth: [{
                type: Input
            }], tableHeight: [{
                type: Input
            }], containFixHeaderHeight: [{
                type: Input
            }], onlyOneColumnSort: [{
                type: Input
            }], multiSort: [{
                type: Input
            }], resizeable: [{
                type: Input
            }], colDraggable: [{
                type: Input
            }], colDropFreezeTo: [{
                type: Input
            }], detailTemplateRef: [{
                type: Input
            }], timeout: [{
                type: Input
            }], showOperationArea: [{
                type: Input
            }], showSortIcon: [{
                type: Input
            }], showFilterIcon: [{
                type: Input
            }], multiSortChange: [{
                type: Output
            }], cellClick: [{
                type: Output
            }], cellDBClick: [{
                type: Output
            }], rowClick: [{
                type: Output
            }], rowDBClick: [{
                type: Output
            }], detialToggle: [{
                type: Output
            }], beforeCellEdit: [{
                type: Input
            }], cellEditStart: [{
                type: Output
            }], cellEditEnd: [{
                type: Output
            }], rowCheckChange: [{
                type: Output
            }], checkAllChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }], resize: [{
                type: Output
            }], tableLevel: [{
                type: Input
            }], checkableRelation: [{
                type: Input
            }], loadChildrenTable: [{
                type: Input
            }], loadAllChildrenTable: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], headerExpandConfig: [{
                type: Input
            }], childrenTableClose: [{
                type: Output
            }], allChildrenTableClose: [{
                type: Output
            }], virtualItemSize: [{
                type: Input
            }], virtualMinBufferPx: [{
                type: Input
            }], virtualMaxBufferPx: [{
                type: Input
            }], lazy: [{
                type: Input
            }], tableWidthConfig: [{
                type: Input
            }], headerBg: [{
                type: Input
            }], tableLayout: [{
                type: Input
            }], borderType: [{
                type: Input
            }], striped: [{
                type: Input
            }], tableScrollEvent: [{
                type: Output
            }], minHeight: [{
                type: Input
            }], columnDragEnd: [{
                type: Output
            }], size: [{
                type: Input
            }], shadowType: [{
                type: Input
            }], tableOverflowType: [{
                type: Input
            }], columns: [{
                type: ContentChildren,
                args: [DataTableColumnTmplComponent]
            }], innerHeader: [{
                type: ContentChild,
                args: [TableTheadComponent]
            }], innerBody: [{
                type: ContentChild,
                args: [TableTbodyComponent]
            }], thList: [{
                type: ContentChildren,
                args: [TableThComponent, { descendants: true }]
            }], noResultTemplate: [{
                type: ContentChild,
                args: ['noResultTemplateRef']
            }], fixHeaderContainerRefElement: [{
                type: ViewChild,
                args: ['fixHeaderContainerRef']
            }], tableViewRefElement: [{
                type: ViewChild,
                args: ['tableView', { static: true }]
            }], virtualScrollViewport: [{
                type: ViewChild,
                args: ['cdkVirtualScrollViewport']
            }], normalScrollElement: [{
                type: ViewChild,
                args: ['normalScroll']
            }], vitualScrollElement: [{
                type: ViewChild,
                args: ['scrollViewTpl']
            }], devuiNormalScrollBody: [{
                type: ViewChild,
                args: ['devuiNormalScrollBody', { read: ElementRef }]
            }], hostHeight: [{
                type: HostBinding,
                args: ['style.height']
            }], hasShadow: [{
                type: HostBinding,
                args: ['class.devui-table-shadow']
            }], content: [{
                type: ViewChild,
                args: ['tableBody']
            }], dataSource: [{
                type: Input
            }], hideColumn: [{
                type: Input
            }], pageAllChecked: [{
                type: Input
            }] } });

class TableTdService {
    constructor() {
        this.tableCellClickEvent = new EventEmitter();
    }
}
TableTdService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTdService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TableTdService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTdService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTdService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

class TableTdComponent {
    constructor(elementRef, tdService) {
        this.elementRef = elementRef;
        this.tdService = tdService;
        this.editableTip = EditableTip.hover;
        this.nestedColumn = false;
        this.nestedColumnIndent = 16;
        this.toggleChildTableEvent = new EventEmitter();
        this.editStatusEvent = new EventEmitter();
        /**
         * 编辑状态调整 @deprecated
         */
        this.editingChange = new EventEmitter();
        this.currentEditing = false;
    }
    get isEditable() {
        return this.editable && !this.editing && this.editableTip !== 'btn';
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes['fixedLeft']) {
            if (this.fixedLeft) {
                this.stickyLeftClass = true;
                this.stickyLeftStyle = this.fixedLeft;
            }
            else {
                this.stickyLeftClass = false;
                this.stickyLeftStyle = null;
            }
        }
        if (changes['fixedRight']) {
            if (this.fixedRight) {
                this.stickyRightClass = true;
                this.stickyRightStyle = this.fixedRight;
            }
            else {
                this.stickyRightClass = false;
                this.stickyRightStyle = null;
            }
        }
        if (changes['editing'] && changes['editing'].currentValue && !this.currentEditing) {
            this.bindEditClickEvent();
        }
    }
    startEditing(event) {
        event.stopPropagation();
        event.preventDefault();
        let beforePromise = Promise.resolve(true);
        if (this.beforeEditStart) {
            const result = this.beforeEditStart(this.rowItem, this.field);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    beforePromise = result;
                }
                else if (result.subscribe) {
                    beforePromise = result.toPromise();
                }
                else {
                    beforePromise = Promise.resolve(result);
                }
            }
        }
        beforePromise.then((canStart) => {
            if (canStart) {
                this.editing = true;
                this.currentEditing = true;
                this.editingChange.emit(true);
                this.editStatusEvent.emit(true);
                this.tdService.tableCellClickEvent.emit(event);
                this.bindEditClickEvent();
            }
        });
    }
    bindEditClickEvent() {
        this.documentClickSubscription = fromEvent(document, 'click').pipe(tap((e) => {
            e.stopPropagation();
        })).subscribe((clickEvent) => {
            if (!this.elementRef.nativeElement.contains(clickEvent.target) && !this.clickInTd) {
                this.finishCellEdit();
            }
            this.clickInTd = false;
        });
        this.tdMousedownSubscription = fromEvent(this.elementRef.nativeElement, 'mousedown').subscribe(event => {
            this.clickInTd = true;
        });
        this.tdMouseupSubscription = fromEvent(this.elementRef.nativeElement, 'mouseup').subscribe(event => {
            this.clickInTd = false;
        });
        this.tdClickSubscription = this.tdService.tableCellClickEvent.subscribe((clickEvent) => {
            if (!this.elementRef.nativeElement.contains(clickEvent.target)) {
                this.finishCellEdit();
            }
        });
    }
    removeEditClickEvent() {
        if (this.documentClickSubscription) {
            this.documentClickSubscription.unsubscribe();
            this.documentClickSubscription = null;
        }
        if (this.tdClickSubscription) {
            this.tdClickSubscription.unsubscribe();
            this.tdClickSubscription = null;
        }
    }
    finishCellEdit() {
        let beforePromise = Promise.resolve(true);
        if (this.beforeEditEnd) {
            const result = this.beforeEditEnd(this.rowItem, this.field);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    beforePromise = result;
                }
                else if (result.subscribe) {
                    beforePromise = result.toPromise();
                }
                else {
                    beforePromise = Promise.resolve(result);
                }
            }
        }
        beforePromise.then((canEnd) => {
            if (canEnd) {
                this.editing = false;
                this.currentEditing = false;
                this.editingChange.emit(false);
                this.editStatusEvent.emit(false);
                this.removeEditClickEvent();
            }
        });
    }
    toggleChildTable(rowItem) {
        rowItem.$isChildTableOpen = !rowItem.$isChildTableOpen;
        this.toggleChildTableEvent.emit(rowItem.$isChildTableOpen);
    }
    ngOnDestroy() {
        if (this.documentClickSubscription) {
            this.documentClickSubscription.unsubscribe();
            this.documentClickSubscription = null;
        }
        if (this.tdClickSubscription) {
            this.tdClickSubscription.unsubscribe();
            this.tdClickSubscription = null;
        }
        if (this.tdMousedownSubscription) {
            this.tdMousedownSubscription.unsubscribe();
            this.tdMousedownSubscription = null;
        }
        if (this.tdMouseupSubscription) {
            this.tdMouseupSubscription.unsubscribe();
            this.tdMouseupSubscription = null;
        }
    }
}
TableTdComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTdComponent, deps: [{ token: i0.ElementRef }, { token: TableTdService }], target: i0.ɵɵFactoryTarget.Component });
TableTdComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TableTdComponent, selector: "[dTableCell]", inputs: { editable: "editable", editableTip: "editableTip", nestedColumn: "nestedColumn", nestedLayer: "nestedLayer", field: "field", rowItem: "rowItem", fixedLeft: "fixedLeft", fixedRight: "fixedRight", iconFoldTable: "iconFoldTable", iconUnFoldTable: "iconUnFoldTable", nestedColumnIndent: "nestedColumnIndent", beforeEditStart: "beforeEditStart", beforeEditEnd: "beforeEditEnd", editing: "editing" }, outputs: { toggleChildTableEvent: "toggleChildTableEvent", editStatusEvent: "editStatusEvent", editingChange: "editingChange" }, host: { properties: { "class.devui-sticky-left-cell": "this.stickyLeftClass", "class.devui-sticky-right-cell": "this.stickyRightClass", "style.left": "this.stickyLeftStyle", "style.right": "this.stickyRightStyle", "class.editable-cell": "this.isEditable" } }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"editable && !editing\">\n  <div *ngIf=\"editableTip === 'btn'\" class=\"cell-container\">\n    <div class=\"cell-container-inner not-break modify-holder\">\n      <ng-template\n        [ngTemplateOutlet]=\"nestedTmp\"\n        [ngTemplateOutletContext]=\"{ nestedColumn: nestedColumn, rowItem: rowItem, nestedLayer: nestedLayer }\"\n      ></ng-template>\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      <span class=\"cell-modify\" (click)=\"startEditing($event)\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16px\" height=\"16px\" version=\"1.1\">\n          <g fill=\"none\" fill-rule=\"evenodd\" stroke=\"none\" stroke-width=\"1\">\n            <path\n              d=\"M 9.48528 3.41421 L 10.8995 2 L 13.7279 4.82843 L 12.3137 6.24264 L 9.48528 3.41421 Z M 5.24264 13.3137 L 2.41421 13.3137 L 2.41421 10.4853 L 8.77817 4.12132 L 11.6066 6.94975 L 5.24264 13.3137 Z\"\n            />\n          </g>\n        </svg>\n      </span>\n    </div>\n  </div>\n\n  <div *ngIf=\"editableTip !== 'btn'\" class=\"cell-editable not-break\" (click)=\"startEditing($event)\">\n    <ng-template\n      [ngTemplateOutlet]=\"nestedTmp\"\n      [ngTemplateOutletContext]=\"{ nestedColumn: nestedColumn, rowItem: rowItem, nestedLayer: nestedLayer }\"\n    ></ng-template>\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"!editable || editing\">\n  <ng-template\n    [ngTemplateOutlet]=\"nestedTmp\"\n    [ngTemplateOutletContext]=\"{ nestedColumn: nestedColumn, rowItem: rowItem, nestedLayer: nestedLayer }\"\n  ></ng-template>\n  <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n</ng-container>\n\n<ng-template #content><ng-content></ng-content></ng-template>\n\n<ng-template #nestedTmp let-nestedColumn=\"nestedColumn\" let-rowItem=\"rowItem\" let-nestedLayer=\"nestedLayer\">\n  <ng-container *ngIf=\"nestedColumn\">\n    <span *ngIf=\"nestedLayer > 0\" class=\"cell-placeholder\" [ngStyle]=\"{ width: nestedLayer * nestedColumnIndent + 'px' }\"></span>\n    <span [style.visibility]=\"rowItem.children ? 'visible' : 'hidden'\" class=\"childtable-toggler\" (click)=\"toggleChildTable(rowItem)\">\n      <ng-container *ngIf=\"rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!iconFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-close\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <rect x=\"4\" y=\"7\" width=\"8\" height=\"2\"></rect>\n          </g>\n        </svg>\n        <span *ngIf=\"iconFoldTable\" [innerHTML]=\"iconFoldTable | safe: 'html'\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"!rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!iconUnFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-open-folder\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <path\n              d=\"M8.75,4 L8.75,7.25 L12,7.25 L12,8.75 L8.749,8.75 L8.75,12 L7.25,12 L7.249,8.75 L4,8.75 L4,7.25 L7.25,7.25 L7.25,4 L8.75,4 Z\"\n            ></path>\n          </g>\n        </svg>\n        <span *ngIf=\"iconUnFoldTable\" [innerHTML]=\"iconUnFoldTable | safe: 'html'\"></span>\n      </ng-container>\n    </span>\n  </ng-container>\n</ng-template>\n", styles: ["svg.svg-icon-arrow>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep d-button button.d-btn.d-btn-icon{padding:0!important}:host.editable-cell{position:relative}:host.editable-cell:hover:after{content:\"\";display:block;width:calc(100% - 32px);position:absolute;height:calc(100% - 14px);border:1px solid #d7d8da;border:1px solid var(--devui-line, #d7d8da);left:12px;top:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);pointer-events:none}.cell-modify{position:absolute;right:0;cursor:pointer}.cell-modify>svg{vertical-align:middle}.cell-modify:hover>svg>g>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.cell-container{position:relative;height:24px}.cell-container-inner{position:absolute;max-width:100%;width:100%;min-height:24px}.cell-container-inner.modify-holder{padding-right:20px}.cell-container-inner.modify-holder .cell-modify{display:none;cursor:pointer;position:absolute;right:0}.cell-container-inner.modify-holder .cell-modify>svg{vertical-align:middle}.cell-container-inner.modify-holder .cell-modify>svg>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.cell-container-inner.modify-holder .cell-modify:hover>svg>g{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.cell-container-inner.modify-holder:hover .cell-modify{display:inline}.not-break{white-space:nowrap;text-overflow:ellipsis;overflow:hidden;word-spacing:normal;word-wrap:normal}.cell-editable{cursor:pointer;margin-left:-5px;padding-left:5px}.cell-editable:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3)}.cell-placeholder{display:inline-block;height:16px}\n"], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], pipes: { "safe": i6.SafePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TableTdComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTableCell]', template: "<ng-container *ngIf=\"editable && !editing\">\n  <div *ngIf=\"editableTip === 'btn'\" class=\"cell-container\">\n    <div class=\"cell-container-inner not-break modify-holder\">\n      <ng-template\n        [ngTemplateOutlet]=\"nestedTmp\"\n        [ngTemplateOutletContext]=\"{ nestedColumn: nestedColumn, rowItem: rowItem, nestedLayer: nestedLayer }\"\n      ></ng-template>\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      <span class=\"cell-modify\" (click)=\"startEditing($event)\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16px\" height=\"16px\" version=\"1.1\">\n          <g fill=\"none\" fill-rule=\"evenodd\" stroke=\"none\" stroke-width=\"1\">\n            <path\n              d=\"M 9.48528 3.41421 L 10.8995 2 L 13.7279 4.82843 L 12.3137 6.24264 L 9.48528 3.41421 Z M 5.24264 13.3137 L 2.41421 13.3137 L 2.41421 10.4853 L 8.77817 4.12132 L 11.6066 6.94975 L 5.24264 13.3137 Z\"\n            />\n          </g>\n        </svg>\n      </span>\n    </div>\n  </div>\n\n  <div *ngIf=\"editableTip !== 'btn'\" class=\"cell-editable not-break\" (click)=\"startEditing($event)\">\n    <ng-template\n      [ngTemplateOutlet]=\"nestedTmp\"\n      [ngTemplateOutletContext]=\"{ nestedColumn: nestedColumn, rowItem: rowItem, nestedLayer: nestedLayer }\"\n    ></ng-template>\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"!editable || editing\">\n  <ng-template\n    [ngTemplateOutlet]=\"nestedTmp\"\n    [ngTemplateOutletContext]=\"{ nestedColumn: nestedColumn, rowItem: rowItem, nestedLayer: nestedLayer }\"\n  ></ng-template>\n  <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n</ng-container>\n\n<ng-template #content><ng-content></ng-content></ng-template>\n\n<ng-template #nestedTmp let-nestedColumn=\"nestedColumn\" let-rowItem=\"rowItem\" let-nestedLayer=\"nestedLayer\">\n  <ng-container *ngIf=\"nestedColumn\">\n    <span *ngIf=\"nestedLayer > 0\" class=\"cell-placeholder\" [ngStyle]=\"{ width: nestedLayer * nestedColumnIndent + 'px' }\"></span>\n    <span [style.visibility]=\"rowItem.children ? 'visible' : 'hidden'\" class=\"childtable-toggler\" (click)=\"toggleChildTable(rowItem)\">\n      <ng-container *ngIf=\"rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!iconFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-close\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <rect x=\"4\" y=\"7\" width=\"8\" height=\"2\"></rect>\n          </g>\n        </svg>\n        <span *ngIf=\"iconFoldTable\" [innerHTML]=\"iconFoldTable | safe: 'html'\"></span>\n      </ng-container>\n      <ng-container *ngIf=\"!rowItem['$isChildTableOpen']\">\n        <svg\n          *ngIf=\"!iconUnFoldTable\"\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          class=\"svg-icon svg-icon-open-folder\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <rect x=\"0.5\" y=\"0.5\" width=\"15\" height=\"15\" rx=\"2\"></rect>\n            <path\n              d=\"M8.75,4 L8.75,7.25 L12,7.25 L12,8.75 L8.749,8.75 L8.75,12 L7.25,12 L7.249,8.75 L4,8.75 L4,7.25 L7.25,7.25 L7.25,4 L8.75,4 Z\"\n            ></path>\n          </g>\n        </svg>\n        <span *ngIf=\"iconUnFoldTable\" [innerHTML]=\"iconUnFoldTable | safe: 'html'\"></span>\n      </ng-container>\n    </span>\n  </ng-container>\n</ng-template>\n", styles: ["svg.svg-icon-arrow>g>polygon{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host ::ng-deep d-button button.d-btn.d-btn-icon{padding:0!important}:host.editable-cell{position:relative}:host.editable-cell:hover:after{content:\"\";display:block;width:calc(100% - 32px);position:absolute;height:calc(100% - 14px);border:1px solid #d7d8da;border:1px solid var(--devui-line, #d7d8da);left:12px;top:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);pointer-events:none}.cell-modify{position:absolute;right:0;cursor:pointer}.cell-modify>svg{vertical-align:middle}.cell-modify:hover>svg>g>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.cell-container{position:relative;height:24px}.cell-container-inner{position:absolute;max-width:100%;width:100%;min-height:24px}.cell-container-inner.modify-holder{padding-right:20px}.cell-container-inner.modify-holder .cell-modify{display:none;cursor:pointer;position:absolute;right:0}.cell-container-inner.modify-holder .cell-modify>svg{vertical-align:middle}.cell-container-inner.modify-holder .cell-modify>svg>g{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.cell-container-inner.modify-holder .cell-modify:hover>svg>g{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.cell-container-inner.modify-holder:hover .cell-modify{display:inline}.not-break{white-space:nowrap;text-overflow:ellipsis;overflow:hidden;word-spacing:normal;word-wrap:normal}.cell-editable{cursor:pointer;margin-left:-5px;padding-left:5px}.cell-editable:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3)}.cell-placeholder{display:inline-block;height:16px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: TableTdService }]; }, propDecorators: { stickyLeftClass: [{
                type: HostBinding,
                args: ['class.devui-sticky-left-cell']
            }], stickyRightClass: [{
                type: HostBinding,
                args: ['class.devui-sticky-right-cell']
            }], stickyLeftStyle: [{
                type: HostBinding,
                args: ['style.left']
            }], stickyRightStyle: [{
                type: HostBinding,
                args: ['style.right']
            }], editable: [{
                type: Input
            }], editableTip: [{
                type: Input
            }], nestedColumn: [{
                type: Input
            }], nestedLayer: [{
                type: Input
            }], field: [{
                type: Input
            }], rowItem: [{
                type: Input
            }], fixedLeft: [{
                type: Input
            }], fixedRight: [{
                type: Input
            }], iconFoldTable: [{
                type: Input
            }], iconUnFoldTable: [{
                type: Input
            }], nestedColumnIndent: [{
                type: Input
            }], beforeEditStart: [{
                type: Input
            }], beforeEditEnd: [{
                type: Input
            }], toggleChildTableEvent: [{
                type: Output
            }], editing: [{
                type: Input
            }], editStatusEvent: [{
                type: Output
            }], editingChange: [{
                type: Output
            }], isEditable: [{
                type: HostBinding,
                args: ['class.editable-cell']
            }] } });

class DataTableCellTmplComponent {
}
DataTableCellTmplComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellTmplComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DataTableCellTmplComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DataTableCellTmplComponent, selector: "d-cell-template", inputs: { type: "type" }, queries: [{ propertyName: "view", first: true, predicate: DataTableCellViewTmplComponent, descendants: true }, { propertyName: "edit", first: true, predicate: DataTableCellEditTmplComponent, descendants: true }], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableCellTmplComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'd-cell-template',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { type: [{
                type: Input
            }], view: [{
                type: ContentChild,
                args: [DataTableCellViewTmplComponent]
            }], edit: [{
                type: ContentChild,
                args: [DataTableCellEditTmplComponent]
            }] } });

class DataTableModule {
}
DataTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DataTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableModule, declarations: [DataTableComponent,
        DataTableColumnTmplComponent,
        DataTableCellViewTmplComponent,
        DataTableCellEditTmplComponent,
        DataTableBodyComponent,
        DataTableHeadComponent,
        DataTableCellComponent,
        DataTableRowComponent,
        DataTableCellTmplComponent,
        DataTableHeadCellTmplComponent,
        DisPlayCellValuePipe,
        EditorDirective,
        TableThComponent,
        FilterComponent,
        SortComponent,
        TableTheadComponent,
        TableTrComponent,
        TableTbodyComponent,
        TableTdComponent], imports: [CommonModule,
        FormsModule,
        WindowRefModule,
        ScrollingModule,
        PaginationModule,
        DCommonModule,
        DatepickerModule,
        SelectModule,
        CheckBoxModule,
        ButtonModule,
        InputNumberModule,
        DropDownModule,
        TreeSelectModule,
        SafePipeModule,
        TooltipModule,
        DragDropModule,
        LazyLoadModule], exports: [DataTableComponent,
        DataTableColumnTmplComponent,
        DataTableCellViewTmplComponent,
        DataTableCellEditTmplComponent,
        DataTableBodyComponent,
        DataTableHeadComponent,
        DataTableCellComponent,
        DataTableRowComponent,
        DataTableCellTmplComponent,
        DataTableHeadCellTmplComponent,
        TableThComponent,
        FilterComponent,
        SortComponent,
        TableTheadComponent,
        TableTrComponent,
        TableTbodyComponent,
        TableTdComponent] });
DataTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableModule, providers: [TableTdService], imports: [[
            CommonModule,
            FormsModule,
            WindowRefModule,
            ScrollingModule,
            PaginationModule,
            DCommonModule,
            DatepickerModule,
            SelectModule,
            CheckBoxModule,
            ButtonModule,
            InputNumberModule,
            DropDownModule,
            TreeSelectModule,
            SafePipeModule,
            TooltipModule,
            DragDropModule,
            LazyLoadModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DataTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        WindowRefModule,
                        ScrollingModule,
                        PaginationModule,
                        DCommonModule,
                        DatepickerModule,
                        SelectModule,
                        CheckBoxModule,
                        ButtonModule,
                        InputNumberModule,
                        DropDownModule,
                        TreeSelectModule,
                        SafePipeModule,
                        TooltipModule,
                        DragDropModule,
                        LazyLoadModule
                    ],
                    exports: [
                        DataTableComponent,
                        DataTableColumnTmplComponent,
                        DataTableCellViewTmplComponent,
                        DataTableCellEditTmplComponent,
                        DataTableBodyComponent,
                        DataTableHeadComponent,
                        DataTableCellComponent,
                        DataTableRowComponent,
                        DataTableCellTmplComponent,
                        DataTableHeadCellTmplComponent,
                        TableThComponent,
                        FilterComponent,
                        SortComponent,
                        TableTheadComponent,
                        TableTrComponent,
                        TableTbodyComponent,
                        TableTdComponent
                    ],
                    declarations: [
                        DataTableComponent,
                        DataTableColumnTmplComponent,
                        DataTableCellViewTmplComponent,
                        DataTableCellEditTmplComponent,
                        DataTableBodyComponent,
                        DataTableHeadComponent,
                        DataTableCellComponent,
                        DataTableRowComponent,
                        DataTableCellTmplComponent,
                        DataTableHeadCellTmplComponent,
                        DisPlayCellValuePipe,
                        EditorDirective,
                        TableThComponent,
                        FilterComponent,
                        SortComponent,
                        TableTheadComponent,
                        TableTrComponent,
                        TableTbodyComponent,
                        TableTdComponent
                    ],
                    providers: [TableTdService],
                }]
        }] });

const simDeepClone = obj => {
    if (obj === null) {
        return null;
    }
    if (typeof obj === 'object') {
        return JSON.parse(JSON.stringify(obj));
    }
    else if (typeof obj === 'string') {
        try {
            return JSON.parse(obj);
        }
        catch (e) {
            console.error(e);
        }
    }
    else {
        return obj;
    }
};
const highPerformanceFilter = (arr, func) => {
    let res = [];
    const arrLength = arr.length;
    // 经过调查，在小于10000或大于99999条数据的时候，for循环速度比filter速度会快7至8倍左右
    if (arrLength < 10000 || arrLength > 99999) {
        for (let a = 0; a < arrLength; a++) {
            if (func(arr[a], a)) {
                res.push(arr[a]);
            }
        }
    }
    else {
        res = arr.filter(func);
    }
    return res;
};
// 生成随机Id
const generateId = () => {
    let timeStamp = new Date().getTime();
    if (window.performance && typeof window.performance.now === "function") {
        timeStamp += performance.now();
    }
    const id = 'aaaaaaaaaaaaaaabaaaaaaaaaaaaaaa'.replace(/[ab]/g, function (item) {
        const res = (timeStamp + Math.random() * 16) % 16 | 0;
        timeStamp = Math.floor(timeStamp / 16);
        return (item === 'a' ? res : (res & 0x3 | 0x8)).toString(16);
    });
    return id;
};
const highPerformanceExpandObjectInArray = (oldObj, attr) => {
    oldObj[Symbol.iterator] = function () {
        return {
            next: function () {
                const array = Reflect.ownKeys(oldObj);
                if (this.index < array.length - 1) {
                    const key = array[this.index];
                    this.index++;
                    return { value: oldObj[key] };
                }
                else {
                    return { done: true };
                }
            },
            index: 0
        };
    };
    if (attr) {
        const newObj = [];
        for (let i = 0; i < attr.length; i++) {
            if (Object.prototype.hasOwnProperty.call(oldObj, attr[i])) {
                newObj.push(oldObj[attr[i]]);
            }
        }
        return newObj;
    }
    return [...oldObj];
};
// 将一些公共方法拆分出来
const getNodeIndex = (nodeId, treeTableArray) => {
    return treeTableArray.findIndex((v) => v.node_id === nodeId);
};
class FindChild {
    constructor() {
        this.allChildCol = [];
    }
    getChildrenOfItem(node, treeTableArray) {
        const data = highPerformanceFilter(treeTableArray, item => item.parent_node_id === node.node_id);
        return data;
    }
    getAllChildrenOfItem(node, treeTableArray) {
        this.allChildCol = [];
        this.getAllChildrenData(node, treeTableArray);
        return this.allChildCol;
    }
    getAllChildrenData(node, treeTableArray) {
        const childData = this.getChildrenOfItem(node, treeTableArray);
        const newArray = [...childData];
        newArray.push(node);
        this.allChildCol = [...this.allChildCol, ...newArray];
        for (let i = 0; i < childData.length; i++) {
            if (childData[i].node_type) {
                this.getAllChildrenData(childData[i], treeTableArray);
            }
        }
    }
}
const distinct = (recordArr, nodeArr) => {
    const arr = recordArr.concat(nodeArr);
    const result = [];
    const obj = {};
    for (const i of arr) {
        if (!obj[i.node_id]) {
            result.push(i);
            obj[i.node_id] = 1;
        }
    }
    return result;
};
const highPerformanceMap = (arr, func) => {
    let res = [];
    const arrLength = arr.length;
    if (arrLength < 10000 || arrLength > 99999) {
        for (let a = 0; a < arrLength; a++) {
            const rs = func(arr[a], a);
            if (rs) {
                res.push(rs);
            }
        }
    }
    else {
        res = arr.map(func);
    }
    return res;
};
const flatTreeData = (dataSource) => {
    const flatData = [];
    const travelObj = (arr, parentId) => {
        arr.forEach(item => {
            if (item.children) {
                const obj = Object.assign({ id: generateId(), node_id: generateId(), node_type: 1, parent_node_id: parentId }, item);
                const children = obj.children;
                delete obj.children;
                flatData.push(obj);
                travelObj(children, obj.node_id);
            }
            else {
                const obj = Object.assign({ id: generateId(), node_id: generateId(), node_type: 0, parent_node_id: parentId }, item);
                flatData.push(obj);
            }
        });
    };
    travelObj(dataSource, null);
    return flatData;
};

/**
 * Generated bundle index. Do not edit.
 */

export { ColumnAdjustStrategy, DATA_TABLE, DATA_TABLE_ROW, DataTableBodyComponent, DataTableCellComponent, DataTableCellEditTmplComponent, DataTableCellTmplComponent, DataTableCellViewTmplComponent, DataTableColumnTmplComponent, DataTableComponent, DataTableHeadCellTmplComponent, DataTableHeadComponent, DataTableModule, DataTableRowComponent, DisPlayCellValuePipe, EditableTip, EditorDirective, FilterComponent, FindChild, SortComponent, SortDirection, TableTbodyComponent, TableTdComponent, TableTdService, TableThComponent, TableTheadComponent, TableTrComponent, distinct, flatTreeData, generateId, getNodeIndex, highPerformanceExpandObjectInArray, highPerformanceFilter, highPerformanceMap, simDeepClone };
//# sourceMappingURL=ng-devui-data-table.mjs.map
