import * as i0 from '@angular/core';
import { Injectable, Inject, Component, ChangeDetectionStrategy, ViewChild, Input, HostListener, EventEmitter, forwardRef, Output, ContentChild, NgModule } from '@angular/core';
import { Subject, fromEvent } from 'rxjs';
import { takeUntil, filter, debounceTime, map } from 'rxjs/operators';
import * as i1 from 'ng-devui/i18n';
import * as i4 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i3 from '@angular/cdk/scrolling';
import { ScrollingModule } from '@angular/cdk/scrolling';
import * as i5 from 'ng-devui/popover';
import { PopoverModule } from 'ng-devui/popover';
import * as i3$1 from 'ng-devui/button';
import { ButtonModule } from 'ng-devui/button';
import { chunk } from 'lodash-es';
import * as i6 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { DefaultDateConverter } from 'ng-devui/utils';
import * as i3$2 from 'ng-devui/dropdown';
import { DropDownModule } from 'ng-devui/dropdown';

class DatepickerProService {
    constructor(doc) {
        this.doc = doc;
        this.curRangeDate = [];
        this.calendarRange = [1970, 2099];
        this.currentActiveInput = 'start';
        this._minDate = new Date(this.calendarRange[0], 0, 1);
        this._maxDate = new Date(this.calendarRange[1], 11, 31);
        this.toggleEvent = new Subject();
        this.closeDropdownEvent = new Subject();
        this.activeInputChange = new Subject();
        this.selectedDateChange = new Subject();
        this.updateDateValue = new Subject();
        this.selectedTimeChange = new Subject();
        this.updateTimeChange = new Subject();
        this.detectedChanges = new Subject();
        this.document = this.doc;
    }
    set minDate(value) {
        this._minDate = new Date(value) || new Date(this.calendarRange[0], 0, 1);
        this.detectedChanges.next();
    }
    get minDate() {
        return this._minDate;
    }
    set maxDate(value) {
        this._maxDate = new Date(value) || new Date(this.calendarRange[1], 11, 31);
        this.detectedChanges.next();
    }
    get maxDate() {
        return this._maxDate;
    }
    get closeAfterSelected() {
        return !this.isRange && !this.showTime;
    }
    get curHour() {
        var _a, _b, _c;
        if (this.isRange) {
            return (this.currentActiveInput === 'start' ? (_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.getHours() : (_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.getHours()) || 0;
        }
        else {
            return ((_c = this.curDate) === null || _c === void 0 ? void 0 : _c.getHours()) || 0;
        }
    }
    get curMin() {
        var _a, _b, _c;
        if (this.isRange) {
            return (this.currentActiveInput === 'start' ? (_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.getMinutes() : (_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.getMinutes()) || 0;
        }
        else {
            return ((_c = this.curDate) === null || _c === void 0 ? void 0 : _c.getMinutes()) || 0;
        }
    }
    get curSec() {
        var _a, _b, _c;
        if (this.isRange) {
            return (this.currentActiveInput === 'start' ? (_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.getSeconds() : (_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.getSeconds()) || 0;
        }
        else {
            return ((_c = this.curDate) === null || _c === void 0 ? void 0 : _c.getSeconds()) || 0;
        }
    }
    dateInRange(date) {
        if (!date) {
            return true;
        }
        return (date.getTime() > this.minDate.getTime() && date.getTime() < this.maxDate.getTime()) ||
            date.toDateString() === this.minDate.toDateString() || date.toDateString() === this.maxDate.toDateString();
    }
    // 对范围模式下一些非法的选择进行修正
    fixRangeDate() {
        var _a, _b;
        const start = (_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.getTime();
        const end = (_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.getTime();
        if (start && end && end < start) {
            if (this.currentActiveInput === 'start') {
                this.curRangeDate[1] = null;
            }
            else if (this.currentActiveInput === 'end') {
                this.curRangeDate[0] = null;
            }
        }
    }
    // 判断日期是否为起始日期
    isStartDate(date) {
        var _a, _b, _c;
        if (!this.isRange) {
            return false;
        }
        if (this.currentActiveInput === 'start') {
            return date.toDateString() === ((_a = this.curHoverDate) === null || _a === void 0 ? void 0 : _a.toDateString()) || date.toDateString() === ((_b = this.curRangeDate[0]) === null || _b === void 0 ? void 0 : _b.toDateString());
        }
        return date.toDateString() === ((_c = this.curRangeDate[0]) === null || _c === void 0 ? void 0 : _c.toDateString());
    }
    // 判断日期是否为结束日期
    isEndDate(date) {
        var _a, _b, _c;
        if (!this.isRange) {
            return false;
        }
        if (this.currentActiveInput === 'end') {
            return date.toDateString() === ((_a = this.curHoverDate) === null || _a === void 0 ? void 0 : _a.toDateString()) || date.toDateString() === ((_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.toDateString());
        }
        return date.toDateString() === ((_c = this.curRangeDate[1]) === null || _c === void 0 ? void 0 : _c.toDateString());
    }
    // 判断日期是否在hover范围或者选中的范围内
    isDateInRange(date) {
        var _a, _b, _c, _d, _e, _f, _g;
        const dateTime = date.getTime();
        const dateStr = date.toDateString();
        if (this.isRange) {
            if (this.currentActiveInput === 'start') {
                return ((_a = (this.curHoverDate || this.curRangeDate[0])) === null || _a === void 0 ? void 0 : _a.getTime()) < dateTime &&
                    ((_b = (this.curHoverDate || this.curRangeDate[0])) === null || _b === void 0 ? void 0 : _b.toDateString()) !== dateStr &&
                    ((_c = this.curRangeDate[1]) === null || _c === void 0 ? void 0 : _c.getTime()) > dateTime &&
                    ((_d = this.curRangeDate[1]) === null || _d === void 0 ? void 0 : _d.toDateString()) !== dateStr;
            }
            else {
                return ((_e = this.curRangeDate[0]) === null || _e === void 0 ? void 0 : _e.getTime()) < dateTime &&
                    ((_f = this.curRangeDate[0]) === null || _f === void 0 ? void 0 : _f.toDateString()) !== dateStr &&
                    ((_g = (this.curHoverDate || this.curRangeDate[1])) === null || _g === void 0 ? void 0 : _g.getTime()) > dateTime &&
                    (this.curHoverDate || this.curRangeDate[1]).toDateString() !== dateStr;
            }
        }
        else {
            return false;
        }
    }
    // 判断日期是否在已选中的范围内，与hover做区分
    isDateInSelectRange(date) {
        if (!this.isRange) {
            return false;
        }
        if (!this.curRangeDate[0] || !this.curRangeDate[1]) {
            return false;
        }
        return this.curRangeDate[0].getTime() < date.getTime() && this.curRangeDate[1].getTime() > date.getTime() &&
            this.curRangeDate[1].toDateString() !== date.toDateString() && this.curRangeDate[0].toDateString() !== date.toDateString();
    }
    isDateActive(date) {
        var _a, _b, _c;
        const dateStr = date.toDateString();
        if (this.isRange) {
            return dateStr === ((_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.toDateString()) || dateStr === ((_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.toDateString());
        }
        else {
            return dateStr === ((_c = this.curDate) === null || _c === void 0 ? void 0 : _c.toDateString());
        }
    }
    isMonthActive(yearIndex, monthIndex) {
        var _a, _b, _c, _d, _e, _f;
        if (this.isRange) {
            return (yearIndex === ((_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.getFullYear()) && monthIndex === ((_b = this.curRangeDate[0]) === null || _b === void 0 ? void 0 : _b.getMonth())) ||
                (yearIndex === ((_c = this.curRangeDate[1]) === null || _c === void 0 ? void 0 : _c.getFullYear()) && monthIndex === ((_d = this.curRangeDate[1]) === null || _d === void 0 ? void 0 : _d.getMonth()));
        }
        else {
            return yearIndex === ((_e = this.curDate) === null || _e === void 0 ? void 0 : _e.getFullYear()) && monthIndex === ((_f = this.curDate) === null || _f === void 0 ? void 0 : _f.getMonth());
        }
    }
    isYearActive(yearIndex) {
        var _a, _b, _c;
        if (this.isRange) {
            return yearIndex === ((_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.getFullYear()) || yearIndex === ((_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.getFullYear());
        }
        else {
            return yearIndex === ((_c = this.curDate) === null || _c === void 0 ? void 0 : _c.getFullYear());
        }
    }
    // 是否为范围选中日期中对应的input激活项
    isActiveInputTypeDate(date) {
        var _a, _b;
        if (!this.isRange) {
            return false;
        }
        if (this.currentActiveInput === 'start') {
            return date.toDateString() === ((_a = this.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.toDateString());
        }
        else {
            return date.toDateString() === ((_b = this.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.toDateString());
        }
    }
    // 是否为选中日期且在废弃范围逻辑内
    isDateAbandon(date) {
        var _a, _b;
        if (!this.isRange || (!this.curRangeDate[0] || !this.curRangeDate[1])) {
            return false;
        }
        if (!this.isDateActive(date)) {
            return false;
        }
        if (this.currentActiveInput === 'start') {
            return ((_a = this.curHoverDate) === null || _a === void 0 ? void 0 : _a.getTime()) > date.getTime();
        }
        else {
            return ((_b = this.curHoverDate) === null || _b === void 0 ? void 0 : _b.getTime()) < date.getTime();
        }
    }
    isInSuggestList(date) {
        var _a, _b, _c, _d;
        if (!this.markedRangeDateList) {
            return false;
        }
        for (let index = 0; index < this.markedRangeDateList.length; index++) {
            const range = this.markedRangeDateList[index];
            if (((_a = range[0]) === null || _a === void 0 ? void 0 : _a.getTime()) < date.getTime() && ((_b = range[1]) === null || _b === void 0 ? void 0 : _b.getTime()) > date.getTime()) {
                return true;
            }
            if (((_c = range[0]) === null || _c === void 0 ? void 0 : _c.toDateString()) === date.toDateString() || ((_d = range[1]) === null || _d === void 0 ? void 0 : _d.toDateString()) === date.toDateString()) {
                return true;
            }
        }
        return false;
    }
    isMarkedDate(date) {
        var _a, _b;
        for (let index = 0; index < ((_a = this.markedDateList) === null || _a === void 0 ? void 0 : _a.length); index++) {
            if (((_b = this.markedDateList[index]) === null || _b === void 0 ? void 0 : _b.toDateString()) === date.toDateString()) {
                return true;
            }
        }
        return false;
    }
    mearsureStrWidth(str) {
        const mearsureDom = this.document.createElement('span');
        mearsureDom.innerText = str;
        mearsureDom.style.visibility = 'hidden';
        this.document.body.appendChild(mearsureDom);
        const domWidth = mearsureDom.offsetWidth;
        this.document.body.removeChild(mearsureDom);
        return domWidth;
    }
    ngOnDestroy() {
        this.toggleEvent.complete();
        this.selectedDateChange.complete();
        this.closeDropdownEvent.complete();
        this.updateDateValue.complete();
        this.updateTimeChange.complete();
        this.selectedTimeChange.complete();
        this.activeInputChange.complete();
        this.detectedChanges.complete();
    }
}
DatepickerProService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
DatepickerProService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProService, decorators: [{
            type: Injectable
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    } });
class DatepickerProCommonDataService {
    constructor() {
        this.calendarDataCache = {};
    }
}
DatepickerProCommonDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCommonDataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatepickerProCommonDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCommonDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCommonDataService, decorators: [{
            type: Injectable
        }] });

const DAY_DURATION = 24 * 60 * 60 * 1000;
class CalendarPanelComponent {
    constructor(i18n, pickerSrv, dataSrv, cdr, scrollDispatcher) {
        this.i18n = i18n;
        this.pickerSrv = pickerSrv;
        this.dataSrv = dataSrv;
        this.cdr = cdr;
        this.scrollDispatcher = scrollDispatcher;
        this.isWeekSelect = false;
        this.currentBodyIndex = 0;
        this.calendarItemSize = 186; // 一个月份日历的高度
        this.unsubscribe$ = new Subject();
        this.allMonthList = [];
        this.yearAndMonthList = [];
        this.isListCollopse = false;
        this.weekHoverRange = [];
    }
    get curHoverDate() {
        return this.pickerSrv.curHoverDate;
    }
    set curHoverDate(value) {
        this.pickerSrv.curHoverDate = value;
        this.cdr.detectChanges();
    }
    get curDate() {
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                return this.pickerSrv.curRangeDate[0];
            }
            else if (this.pickerSrv.currentActiveInput === 'end') {
                return this.pickerSrv.curRangeDate[1];
            }
        }
        else {
            return this.pickerSrv.curDate;
        }
    }
    set curDate(value) {
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.curRangeDate[0] = value;
            }
            else if (this.pickerSrv.currentActiveInput === 'end') {
                if (this.pickerSrv.showTime) {
                    this.pickerSrv.curRangeDate[1] =
                        (this.pickerSrv.curRangeDate[1] && this.pickerSrv.curRangeDate[1].toDateString() === value.toDateString())
                            ? value
                            : new Date(value.setHours(23, 59, 59));
                }
                else {
                    this.pickerSrv.curRangeDate[1] = new Date(value.setHours(23, 59, 59));
                }
            }
        }
        else {
            this.pickerSrv.curDate = value;
        }
    }
    get selectedRangeDate() {
        return this.pickerSrv.curRangeDate;
    }
    set selectedRangeDate(dateList) {
        this.pickerSrv.curRangeDate = dateList;
    }
    get markDateTemplate() {
        return this.pickerSrv.markDateInfoTemplate;
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().datePickerPro;
        this.i18nSubscription = this.i18n.langChange().pipe(takeUntil(this.unsubscribe$)).subscribe((data) => {
            this.i18nText = data.datePickerPro;
            this.cdr.detectChanges();
        });
    }
    ngOnInit() {
        this.setI18nText();
        this.today = new Date();
        this.initDataList();
        this.initObservable();
    }
    initObservable() {
        this.pickerSrv.toggleEvent.pipe(takeUntil(this.unsubscribe$)).subscribe(isOpen => {
            if (isOpen) {
                setTimeout(() => {
                    this.goToDate(this.curDate || new Date(), 'auto');
                });
                // 首次展开添加滚动监听
                if (!this.scrollListener) {
                    this.initScrollListener();
                }
            }
            else {
                this.curHoverDate = null;
            }
        });
        this.pickerSrv.updateDateValue.pipe(takeUntil(this.unsubscribe$)).subscribe(res => {
            if (this.isRangeType) {
                this.updateRangeDate(res.value);
            }
            else {
                this.updateSingleDate(res.value);
            }
        });
        this.pickerSrv.detectedChanges.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
            this.cdr.detectChanges();
        });
        this.pickerSrv.activeInputChange.pipe(takeUntil(this.unsubscribe$)).subscribe(type => {
            if (type === 'start') {
                this.goToDate(this.selectedRangeDate[0] || this.selectedRangeDate[1] || new Date());
            }
            else {
                if (!this.selectedRangeDate[1] && this.selectedRangeDate[0]) {
                    this.updateRangeDate([this.selectedRangeDate[0], this.selectedRangeDate[0]]);
                }
                this.goToDate(this.selectedRangeDate[1] || this.selectedRangeDate[0] || new Date());
            }
        });
    }
    initScrollListener() {
        this.scrollDispatcher.scrolled().pipe(takeUntil(this.unsubscribe$), filter((res) => {
            return res && res.getElementRef().nativeElement.classList.contains('devui-tbody-wrapper');
        }), debounceTime(50)).subscribe(() => {
            const offsetY = this.scrollBodyCmp.measureScrollOffset();
            // 当滚动超过一个月面板的一半时，就更新月份
            this.currentBodyIndex = Math.floor(offsetY / this.calendarItemSize) + (offsetY % this.calendarItemSize > 100 ? 1 : 0);
            const listIndex = this.isListCollopse ?
                Math.floor(this.currentBodyIndex / 12) : this.currentBodyIndex + Math.floor(this.currentBodyIndex / 12) + 1;
            this.goToListByIndex(listIndex);
            this.cdr.detectChanges();
        });
    }
    initDataList() {
        const key = `${this.pickerSrv.calendarRange.join('-')}-${this.pickerSrv.minDate.toDateString() + this.pickerSrv.maxDate.toDateString()}`;
        if (this.dataSrv.calendarDataCache[key]) {
            this.yearAndMonthList = this.dataSrv.calendarDataCache[key].yearAndMonthList;
            this.allMonthList = this.dataSrv.calendarDataCache[key].allMonthList;
            return;
        }
        this.yearAndMonthList = [];
        this.allMonthList = [];
        for (let yearIndex = this.pickerSrv.calendarRange[0]; yearIndex <= this.pickerSrv.calendarRange[1]; yearIndex++) {
            this.yearAndMonthList.push({
                year: yearIndex,
                isMonth: false,
                active: false
            });
            for (let monthIndex = 0; monthIndex < 12; monthIndex++) {
                this.allMonthList.push({
                    year: yearIndex,
                    month: monthIndex,
                    displayWeeks: this.getDisplayWeeks(yearIndex, monthIndex)
                });
                this.yearAndMonthList.push({
                    year: yearIndex,
                    month: monthIndex,
                    isMonth: true,
                    active: false
                });
            }
        }
        this.dataSrv.calendarDataCache[key] = {
            yearAndMonthList: this.yearAndMonthList,
            allMonthList: this.allMonthList
        };
    }
    getDisplayWeeks(yearIndex, monthIndex) {
        const firstDayOfMonth = new Date(yearIndex, monthIndex, 1);
        const weekOfDay = firstDayOfMonth.getDay();
        const startDate = new Date(firstDayOfMonth.getTime() - weekOfDay * DAY_DURATION);
        const displayWeeks = [];
        for (let i = 0; i < 6; i++) {
            const startWeekDate = startDate.getTime() + i * 7 * DAY_DURATION;
            const weekDays = new Array(7).fill(0).map((value, index) => {
                const currentDate = new Date(startWeekDate + index * DAY_DURATION);
                return {
                    day: this.fillLeft(currentDate.getDate()),
                    date: currentDate,
                    inMonth: currentDate.getMonth().toString() === monthIndex.toString(),
                    isToday: currentDate.toDateString() === this.today.toDateString()
                };
            });
            displayWeeks.push(weekDays);
        }
        return displayWeeks;
    }
    goToDate(date, scrollBehavior) {
        const indexObj = this.getCurrentIndex(date);
        const scroll = scrollBehavior || (Math.abs(indexObj.bodyIndex - this.currentBodyIndex) > 18 ? 'auto' : 'smooth');
        this.currentBodyIndex = indexObj.bodyIndex;
        this.scrollBodyCmp.scrollToIndex(indexObj.bodyIndex, scroll);
        this.goToListByIndex(indexObj.listIndex);
        this.cdr.detectChanges();
    }
    goToListByIndex(index) {
        const indexDelta = Math.abs(this.scrollListCmp.measureScrollOffset() / 30 - index);
        this.scrollListCmp.scrollToIndex(index - 4, indexDelta < 12 ? 'smooth' : 'auto');
        this.updateListActive(index);
    }
    selectMonth(year, month) {
        var _a;
        const date = new Date(year, month, 1);
        const curYear = ((_a = this.yearAndMonthList.find(t => t.active)) === null || _a === void 0 ? void 0 : _a.year) || this.curDate.getFullYear();
        // 太远的虚拟滚动会导致白屏，所以超过两年的滚动都直接跳转
        const isSmoothAnimation = Math.abs(curYear - year) < 2;
        if (this.isListCollopse) {
            this.toggleListCollopse(date);
        }
        else {
            this.goToDate(date, isSmoothAnimation ? 'smooth' : 'auto');
        }
    }
    updateRangeDate(dateList) {
        if (!dateList) {
            this.selectedRangeDate = [];
            this.cdr.detectChanges();
            return;
        }
        const curDate = (this.pickerSrv.currentActiveInput === 'start' ?
            (dateList[0] || dateList[1]) : (dateList[1] || dateList[0])) || new Date();
        const moreThanOneYear = Math.abs(curDate.getFullYear() - (this.currentBodyIndex / 12 + this.pickerSrv.calendarRange[0])) > 1;
        this.selectedRangeDate = dateList;
        this.goToDate(curDate, moreThanOneYear ? 'auto' : 'smooth');
        this.cdr.detectChanges();
    }
    updateSingleDate(date) {
        if (!date) {
            this.curDate = null;
            this.cdr.detectChanges();
            return;
        }
        const moreThanOneYear = Math.abs(date.getFullYear() - (this.currentBodyIndex / 12 + this.pickerSrv.calendarRange[0])) > 1;
        this.curDate = date;
        this.goToDate(this.curDate, moreThanOneYear ? 'auto' : 'smooth');
        this.cdr.detectChanges();
    }
    updateListActive(index) {
        const curActive = this.yearAndMonthList.find(t => t.active);
        if (curActive) {
            curActive.active = false;
        }
        this.yearAndMonthList[index].active = true;
    }
    getCurrentIndex(curDate) {
        const year = curDate.getFullYear();
        const month = curDate.getMonth();
        const listIndex = this.isListCollopse ?
            (year - this.pickerSrv.calendarRange[0]) : (year - this.pickerSrv.calendarRange[0]) * 13 + month + 1;
        return {
            bodyIndex: (year - this.pickerSrv.calendarRange[0]) * 12 + month,
            listIndex
        };
    }
    selectDate(day) {
        if (this.isDisabled(day.date) || !day.inMonth) {
            return;
        }
        if (this.isWeekSelect) {
            this.pickerSrv.curRangeDate = this.getWeekRange(day.date);
            this.pickerSrv.currentActiveInput = 'end';
        }
        else {
            this.curDate = new Date(day.date.setHours(this.pickerSrv.curHour, this.pickerSrv.curMin, this.pickerSrv.curSec));
        }
        if (this.isRangeType) {
            this.pickerSrv.fixRangeDate();
        }
        this.cdr.detectChanges();
        // 非时间模式下选完开始日期跳转到结束日期
        if (this.isRangeType && !this.pickerSrv.showTime) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.currentActiveInput = 'end';
            }
            else if (this.pickerSrv.currentActiveInput === 'end' && !this.selectedRangeDate[0]) {
                this.selectedRangeDate[0] = this.curDate;
            }
            else {
                this.pickerSrv.closeDropdownEvent.next();
            }
        }
        this.pickerSrv.selectedDateChange.next({
            type: this.isRangeType ? 'range' : 'single',
            value: this.isRangeType ? this.selectedRangeDate : this.curDate
        });
        if (this.isRangeType && this.pickerSrv.showTime) {
            this.pickerSrv.updateTimeChange.next({
                activeInput: this.pickerSrv.currentActiveInput,
                hour: this.pickerSrv.curHour,
                min: this.pickerSrv.curMin,
                seconds: this.pickerSrv.curSec
            });
        }
        if (this.pickerSrv.closeAfterSelected) {
            this.pickerSrv.closeDropdownEvent.next();
        }
    }
    isStartDate(date) {
        return this.pickerSrv.isStartDate(date);
    }
    isDisabled(date) {
        return !this.pickerSrv.dateInRange(date);
    }
    isEndDate(date) {
        return this.pickerSrv.isEndDate(date);
    }
    isDateInRange(date) {
        if (this.isWeekSelect) {
            return this.isInWeekHoverRange(date);
        }
        else {
            return this.pickerSrv.isDateInRange(date);
        }
    }
    isDateInSelectRange(date) {
        return this.pickerSrv.isDateInSelectRange(date);
    }
    isDateActive(date) {
        return this.pickerSrv.isDateActive(date);
    }
    isActiveTypeDate(date) {
        return this.pickerSrv.isActiveInputTypeDate(date);
    }
    isDateAbandon(date) {
        return this.pickerSrv.isDateAbandon(date);
    }
    isDateSuggest(date) {
        return this.pickerSrv.isInSuggestList(date);
    }
    isDateMarked(date) {
        return this.pickerSrv.isMarkedDate(date);
    }
    isSingleDate() {
        if (this.pickerSrv.currentActiveInput === 'start') {
            return !this.pickerSrv.curRangeDate[1];
        }
        else if (this.pickerSrv.currentActiveInput === 'end') {
            return !this.pickerSrv.curRangeDate[0];
        }
    }
    setHoverTarget(date, isInMonth) {
        if (!isInMonth) {
            this.curHoverDate = null;
            return;
        }
        this.curHoverDate = date;
        if (this.isWeekSelect) {
            this.weekHoverRange = this.getWeekRange(date);
            this.curWeekHoverDate = date;
            this.cdr.markForCheck();
            return;
        }
    }
    getWeekRange(date) {
        if (!date) {
            return [];
        }
        const diff = date.getDay() < this.pickerSrv.startIndexOfWeek
            ? 7 - (this.pickerSrv.startIndexOfWeek - date.getDay())
            : date.getDay() - this.pickerSrv.startIndexOfWeek;
        const weekStart = new Date(date.getTime() - diff * DAY_DURATION);
        const weekEnd = new Date(weekStart.getTime() + DAY_DURATION * 6);
        weekEnd.setHours(23, 59, 59);
        return [weekStart, weekEnd];
    }
    isInWeekHoverRange(date) {
        var _a, _b, _c, _d;
        const range = this.getWeekRange(this.curWeekHoverDate);
        const time = date.getTime();
        const timeStr = date.toDateString();
        if (this.pickerSrv.isDateActive(date)) {
            return false;
        }
        return ((((_a = range[0]) === null || _a === void 0 ? void 0 : _a.getTime()) < time && time < ((_b = range[1]) === null || _b === void 0 ? void 0 : _b.getTime())) ||
            (((_c = range[0]) === null || _c === void 0 ? void 0 : _c.toDateString()) === timeStr || timeStr === ((_d = range[1]) === null || _d === void 0 ? void 0 : _d.toDateString())));
    }
    toggleListCollopse(toDate) {
        const activeItem = this.yearAndMonthList.find(t => t.active);
        const curYear = activeItem === null || activeItem === void 0 ? void 0 : activeItem.year;
        const curMonth = activeItem === null || activeItem === void 0 ? void 0 : activeItem.month;
        this.isListCollopse = !this.isListCollopse;
        if (this.isListCollopse) {
            this.yearAndMonthList = this.yearAndMonthList.filter(t => !t.isMonth);
        }
        else {
            this.initDataList();
        }
        setTimeout(() => {
            this.goToDate(toDate || new Date(curYear, curMonth || 0, 1), 'auto');
        });
    }
    fillLeft(num) {
        return num < 10 ? `0${num}` : `${num}`;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
CalendarPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CalendarPanelComponent, deps: [{ token: i1.I18nService }, { token: DatepickerProService }, { token: DatepickerProCommonDataService }, { token: i0.ChangeDetectorRef }, { token: i3.ScrollDispatcher }], target: i0.ɵɵFactoryTarget.Component });
CalendarPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: CalendarPanelComponent, selector: "d-calendar-panel", inputs: { isRangeType: "isRangeType", isWeekSelect: "isWeekSelect" }, viewQueries: [{ propertyName: "scrollBodyCmp", first: true, predicate: ["scrollBody"], descendants: true }, { propertyName: "scrollListCmp", first: true, predicate: ["scrollList"], descendants: true }], ngImport: i0, template: "<div class=\"devui-canlender-panel\">\n  <cdk-virtual-scroll-viewport #scrollList [itemSize]=\"30\" class=\"devui-canlender-panel-year-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n    <div\n      class=\"devui-canlender-panel-year-list-item\"\n      [ngClass]=\"{ 'title-active': item.active }\"\n      *cdkVirtualFor=\"let item of yearAndMonthList; let index = index\"\n    >\n      <p class=\"devui-year-title\" *ngIf=\"!item.isMonth && !isListCollopse\" (click)=\"toggleListCollopse()\">{{ item.year }}</p>\n      <p class=\"devui-year-title\" *ngIf=\"!item.isMonth && isListCollopse\" (click)=\"selectMonth(item.year, 0)\">{{ item.year }}</p>\n      <p class=\"devui-month-title\" *ngIf=\"item.isMonth\" (click)=\"selectMonth(item.year, item.month)\">\n        {{ i18nText.monthsOfYear[item.month] }}\n      </p>\n    </div>\n  </cdk-virtual-scroll-viewport>\n\n  <div class=\"devui-canlender-panel-main\">\n    <table class=\"devui-table\">\n      <thead>\n        <tr class=\"small text-center devui-week-header\">\n          <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td colspan=\"7\">\n            <cdk-virtual-scroll-viewport\n              #scrollBody\n              [itemSize]=\"calendarItemSize\"\n              class=\"devui-tbody-wrapper\"\n              minBufferPx=\"400\"\n              maxBufferPx=\"600\"\n            >\n              <div *cdkVirtualFor=\"let month of allMonthList; let index = index\">\n                <p class=\"devui-table-month-title\">{{ i18nText?.getYearMonthStr(month.year, month.month + 1) }}</p>\n                <table\n                  class=\"devui-month-table\"\n                  [ngClass]=\"{\n                    'devui-single-date': isSingleDate()\n                  }\"\n                  (mouseleave)=\"curHoverDate = null; curWeekHoverDate = null\"\n                >\n                  <tbody>\n                    <tr class=\"small text-center devui-week-header\" *ngFor=\"let week of month.displayWeeks\">\n                      <td\n                        [ngClass]=\"{\n                          'devui-table-date': day.inMonth,\n                          'devui-table-date-selected': isDateActive(day.date),\n                          'devui-table-date-abandon-selected': isDateAbandon(day.date),\n                          'devui-table-date-today': day.isToday,\n                          'devui-table-date-disable': isDisabled(day.date),\n                          'devui-table-date-inrange': isDateInRange(day.date),\n                          'devui-table-date-start': isStartDate(day.date),\n                          'devui-table-date-end': isEndDate(day.date),\n                          'devui-table-date-in-selected-range': isDateInSelectRange(day.date),\n                          'devui-table-date-active-type': isActiveTypeDate(day.date),\n                          'devui-table-date-suggested': isDateSuggest(day.date),\n                          'devui-table-date-marked': isDateMarked(day.date)\n                        }\"\n                        *ngFor=\"let day of week\"\n                        dPopover\n                        [content]=\"markDate\"\n                        [visible]=\"isDateMarked(day.date) && curHoverDate === day.date && !!markDateTemplate\"\n                        (click)=\"selectDate(day)\"\n                        (mouseenter)=\"setHoverTarget(day.date, day.inMonth)\"\n                      >\n                        <span>{{ day.inMonth ? day.day : '' }}</span>\n                        <ng-template #markDate>\n                          <ng-template [ngTemplateOutlet]=\"markDateTemplate\" [ngTemplateOutletContext]=\"{ date: day.date }\"></ng-template>\n                        </ng-template>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </cdk-virtual-scroll-viewport>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n", styles: [".devui-canlender-panel{text-align:center;font-size:0}.devui-canlender-panel-collopse-button{position:absolute;top:0;left:60px;font-size:16px;z-index:10;cursor:pointer;color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-canlender-panel-year-list{padding:8px 0;display:inline-block;width:80px;height:305px;overflow:auto;-ms-overflow-style:none;scrollbar-width:none}.devui-canlender-panel-year-list::-webkit-scrollbar{width:0!important}.devui-canlender-panel-year-list-item{background-color:#f8f8fa;background-color:var(--devui-global-bg, #f8f8fa)}.devui-canlender-panel-year-list-item .devui-year-title{font-size:14px;font-weight:700;line-height:30px;cursor:pointer}.devui-canlender-panel-year-list-item .devui-month-title{font-size:12px;line-height:30px;cursor:pointer}.devui-canlender-panel-year-list-item.title-active{background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-canlender-panel-year-list-item:hover:not(.title-active){background-color:#f2f5fc;background-color:var(--devui-list-item-selected-bg, #f2f5fc)}.devui-canlender-panel-main{width:249px;height:305px;padding:4px;display:inline-block;font-size:12px}.devui-tbody-wrapper{height:270px;width:100%;overflow-x:hidden;-ms-overflow-style:none;scrollbar-width:none}.devui-tbody-wrapper::-webkit-scrollbar{width:0!important}.devui-table{border-spacing:0}.devui-table .devui-week-header td{width:34px;height:22px}.devui-table .devui-table-month-title{text-align:start;line-height:26px;color:#71757f;color:var(--devui-aide-text, #71757f);padding-left:8px}.devui-table .devui-month-table{color:#252b3a;color:var(--devui-text, #252b3a);border-spacing:0 4px;border-collapse:separate}.devui-table .devui-month-table .devui-table-date{padding:0 4px;width:30px}.devui-table .devui-month-table .devui-table-date span{cursor:pointer;display:block;width:22px;height:22px;line-height:22px;border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-table .devui-month-table .devui-table-date:not(.devui-table-date-disable):not(.devui-table-date-selected):hover span{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table .devui-month-table .devui-table-date.devui-table-date-today span{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected{position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected span{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected span:hover{box-shadow:none;border-color:transparent}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected.devui-table-date-abandon-selected span{background:#beccfa;background:var(--devui-primary-disabled, #beccfa)}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected.devui-table-date-active-type:not(.devui-table-date-abandon-selected) span{-webkit-animation:2s ease 0s infinite normal both breath-animation;animation:2s ease 0s infinite normal both breath-animation;position:absolute;top:0;right:7px;z-index:2}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected.devui-table-date-active-type.devui-table-date-end:not(.devui-table-date-abandon-selected) span{right:8px}@-webkit-keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}@keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}.devui-table .devui-month-table .devui-table-date.devui-table-date-inrange{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table .devui-month-table .devui-table-date.devui-table-date-inrange span:hover{background-color:#e9edfa;background-color:var(--devui-range-item-hover-bg, #e9edfa)}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end){position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end):after{content:\"\";display:block;position:absolute;width:8px;height:22px;background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);right:0;top:0}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end):not(:hover):not(.devui-table-date-selected):after{display:none}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end) span{border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.devui-table .devui-month-table .devui-table-date.devui-table-date-end:not(.devui-table-date-start){position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-end:not(.devui-table-date-start):after{content:\"\";display:block;position:absolute;width:5px;height:22px;background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);left:0;top:0}.devui-table .devui-month-table .devui-table-date.devui-table-date-end:not(.devui-table-date-start) span{border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}.devui-table .devui-month-table .devui-table-date.devui-table-date-in-selected-range:not(.devui-table-date-inrange):not(:hover){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-table .devui-month-table .devui-table-date.devui-table-date-disable span{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-table .devui-month-table .devui-table-date.devui-table-date-disable span:hover{box-shadow:none;border-color:transparent}.devui-table .devui-month-table .devui-table-date.devui-table-date-marked span{position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-marked span:after{content:\"\";display:block;position:absolute;right:9px;bottom:2px;width:3px;height:3px;border-radius:50%;background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-table .devui-month-table .devui-table-date.devui-table-date-marked.devui-table-date-selected span:after{background-color:#252b3a;background-color:var(--devui-list-item-active-text, #252b3a)}.devui-table .devui-month-table .devui-table-date.devui-table-date-suggested{border-bottom:1px solid #beccfa;border-bottom:1px solid var(--devui-link-light-active, #beccfa)}.devui-table .devui-month-table.devui-single-date .devui-table-date.devui-table-date-start:after{display:none}.devui-table .devui-month-table.devui-single-date .devui-table-date.devui-table-date-end:after{display:none}.devui-table .devui-tbody-wrapper{transform:none}:host{display:inline-block}\n"], components: [{ type: i3.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }], directives: [{ type: i3.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.PopoverDirective, selector: "[dPopover]", inputs: ["content", "controlled", "position", "showAnimation", "showAnimate", "scrollElement", "appendToBody", "zIndex", "popType", "popMaxWidth", "trigger", "hoverToContent", "hoverDelayTime", "popoverStyle", "mouseEnterDelay", "mouseLeaveDelay", "visible"], exportAs: ["dPopover"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CalendarPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-calendar-panel', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"devui-canlender-panel\">\n  <cdk-virtual-scroll-viewport #scrollList [itemSize]=\"30\" class=\"devui-canlender-panel-year-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n    <div\n      class=\"devui-canlender-panel-year-list-item\"\n      [ngClass]=\"{ 'title-active': item.active }\"\n      *cdkVirtualFor=\"let item of yearAndMonthList; let index = index\"\n    >\n      <p class=\"devui-year-title\" *ngIf=\"!item.isMonth && !isListCollopse\" (click)=\"toggleListCollopse()\">{{ item.year }}</p>\n      <p class=\"devui-year-title\" *ngIf=\"!item.isMonth && isListCollopse\" (click)=\"selectMonth(item.year, 0)\">{{ item.year }}</p>\n      <p class=\"devui-month-title\" *ngIf=\"item.isMonth\" (click)=\"selectMonth(item.year, item.month)\">\n        {{ i18nText.monthsOfYear[item.month] }}\n      </p>\n    </div>\n  </cdk-virtual-scroll-viewport>\n\n  <div class=\"devui-canlender-panel-main\">\n    <table class=\"devui-table\">\n      <thead>\n        <tr class=\"small text-center devui-week-header\">\n          <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td colspan=\"7\">\n            <cdk-virtual-scroll-viewport\n              #scrollBody\n              [itemSize]=\"calendarItemSize\"\n              class=\"devui-tbody-wrapper\"\n              minBufferPx=\"400\"\n              maxBufferPx=\"600\"\n            >\n              <div *cdkVirtualFor=\"let month of allMonthList; let index = index\">\n                <p class=\"devui-table-month-title\">{{ i18nText?.getYearMonthStr(month.year, month.month + 1) }}</p>\n                <table\n                  class=\"devui-month-table\"\n                  [ngClass]=\"{\n                    'devui-single-date': isSingleDate()\n                  }\"\n                  (mouseleave)=\"curHoverDate = null; curWeekHoverDate = null\"\n                >\n                  <tbody>\n                    <tr class=\"small text-center devui-week-header\" *ngFor=\"let week of month.displayWeeks\">\n                      <td\n                        [ngClass]=\"{\n                          'devui-table-date': day.inMonth,\n                          'devui-table-date-selected': isDateActive(day.date),\n                          'devui-table-date-abandon-selected': isDateAbandon(day.date),\n                          'devui-table-date-today': day.isToday,\n                          'devui-table-date-disable': isDisabled(day.date),\n                          'devui-table-date-inrange': isDateInRange(day.date),\n                          'devui-table-date-start': isStartDate(day.date),\n                          'devui-table-date-end': isEndDate(day.date),\n                          'devui-table-date-in-selected-range': isDateInSelectRange(day.date),\n                          'devui-table-date-active-type': isActiveTypeDate(day.date),\n                          'devui-table-date-suggested': isDateSuggest(day.date),\n                          'devui-table-date-marked': isDateMarked(day.date)\n                        }\"\n                        *ngFor=\"let day of week\"\n                        dPopover\n                        [content]=\"markDate\"\n                        [visible]=\"isDateMarked(day.date) && curHoverDate === day.date && !!markDateTemplate\"\n                        (click)=\"selectDate(day)\"\n                        (mouseenter)=\"setHoverTarget(day.date, day.inMonth)\"\n                      >\n                        <span>{{ day.inMonth ? day.day : '' }}</span>\n                        <ng-template #markDate>\n                          <ng-template [ngTemplateOutlet]=\"markDateTemplate\" [ngTemplateOutletContext]=\"{ date: day.date }\"></ng-template>\n                        </ng-template>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </cdk-virtual-scroll-viewport>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n", styles: [".devui-canlender-panel{text-align:center;font-size:0}.devui-canlender-panel-collopse-button{position:absolute;top:0;left:60px;font-size:16px;z-index:10;cursor:pointer;color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-canlender-panel-year-list{padding:8px 0;display:inline-block;width:80px;height:305px;overflow:auto;-ms-overflow-style:none;scrollbar-width:none}.devui-canlender-panel-year-list::-webkit-scrollbar{width:0!important}.devui-canlender-panel-year-list-item{background-color:#f8f8fa;background-color:var(--devui-global-bg, #f8f8fa)}.devui-canlender-panel-year-list-item .devui-year-title{font-size:14px;font-weight:700;line-height:30px;cursor:pointer}.devui-canlender-panel-year-list-item .devui-month-title{font-size:12px;line-height:30px;cursor:pointer}.devui-canlender-panel-year-list-item.title-active{background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-canlender-panel-year-list-item:hover:not(.title-active){background-color:#f2f5fc;background-color:var(--devui-list-item-selected-bg, #f2f5fc)}.devui-canlender-panel-main{width:249px;height:305px;padding:4px;display:inline-block;font-size:12px}.devui-tbody-wrapper{height:270px;width:100%;overflow-x:hidden;-ms-overflow-style:none;scrollbar-width:none}.devui-tbody-wrapper::-webkit-scrollbar{width:0!important}.devui-table{border-spacing:0}.devui-table .devui-week-header td{width:34px;height:22px}.devui-table .devui-table-month-title{text-align:start;line-height:26px;color:#71757f;color:var(--devui-aide-text, #71757f);padding-left:8px}.devui-table .devui-month-table{color:#252b3a;color:var(--devui-text, #252b3a);border-spacing:0 4px;border-collapse:separate}.devui-table .devui-month-table .devui-table-date{padding:0 4px;width:30px}.devui-table .devui-month-table .devui-table-date span{cursor:pointer;display:block;width:22px;height:22px;line-height:22px;border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-table .devui-month-table .devui-table-date:not(.devui-table-date-disable):not(.devui-table-date-selected):hover span{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table .devui-month-table .devui-table-date.devui-table-date-today span{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected{position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected span{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected span:hover{box-shadow:none;border-color:transparent}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected.devui-table-date-abandon-selected span{background:#beccfa;background:var(--devui-primary-disabled, #beccfa)}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected.devui-table-date-active-type:not(.devui-table-date-abandon-selected) span{-webkit-animation:2s ease 0s infinite normal both breath-animation;animation:2s ease 0s infinite normal both breath-animation;position:absolute;top:0;right:7px;z-index:2}.devui-table .devui-month-table .devui-table-date.devui-table-date-selected.devui-table-date-active-type.devui-table-date-end:not(.devui-table-date-abandon-selected) span{right:8px}@-webkit-keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}@keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}.devui-table .devui-month-table .devui-table-date.devui-table-date-inrange{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-table .devui-month-table .devui-table-date.devui-table-date-inrange span:hover{background-color:#e9edfa;background-color:var(--devui-range-item-hover-bg, #e9edfa)}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end){position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end):after{content:\"\";display:block;position:absolute;width:8px;height:22px;background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);right:0;top:0}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end):not(:hover):not(.devui-table-date-selected):after{display:none}.devui-table .devui-month-table .devui-table-date.devui-table-date-start:not(.devui-table-date-end) span{border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.devui-table .devui-month-table .devui-table-date.devui-table-date-end:not(.devui-table-date-start){position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-end:not(.devui-table-date-start):after{content:\"\";display:block;position:absolute;width:5px;height:22px;background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);left:0;top:0}.devui-table .devui-month-table .devui-table-date.devui-table-date-end:not(.devui-table-date-start) span{border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}.devui-table .devui-month-table .devui-table-date.devui-table-date-in-selected-range:not(.devui-table-date-inrange):not(:hover){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-table .devui-month-table .devui-table-date.devui-table-date-disable span{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-table .devui-month-table .devui-table-date.devui-table-date-disable span:hover{box-shadow:none;border-color:transparent}.devui-table .devui-month-table .devui-table-date.devui-table-date-marked span{position:relative}.devui-table .devui-month-table .devui-table-date.devui-table-date-marked span:after{content:\"\";display:block;position:absolute;right:9px;bottom:2px;width:3px;height:3px;border-radius:50%;background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-table .devui-month-table .devui-table-date.devui-table-date-marked.devui-table-date-selected span:after{background-color:#252b3a;background-color:var(--devui-list-item-active-text, #252b3a)}.devui-table .devui-month-table .devui-table-date.devui-table-date-suggested{border-bottom:1px solid #beccfa;border-bottom:1px solid var(--devui-link-light-active, #beccfa)}.devui-table .devui-month-table.devui-single-date .devui-table-date.devui-table-date-start:after{display:none}.devui-table .devui-month-table.devui-single-date .devui-table-date.devui-table-date-end:after{display:none}.devui-table .devui-tbody-wrapper{transform:none}:host{display:inline-block}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: DatepickerProService }, { type: DatepickerProCommonDataService }, { type: i0.ChangeDetectorRef }, { type: i3.ScrollDispatcher }]; }, propDecorators: { scrollBodyCmp: [{
                type: ViewChild,
                args: ['scrollBody']
            }], scrollListCmp: [{
                type: ViewChild,
                args: ['scrollList']
            }], isRangeType: [{
                type: Input
            }], isWeekSelect: [{
                type: Input
            }] } });

class TimepickerPanelComponent {
    constructor(el, pickSrv, i18n) {
        this.el = el;
        this.pickSrv = pickSrv;
        this.i18n = i18n;
        this.firstList = [];
        this.secondList = [];
        this.thirdList = [];
        this.hourIndex = null;
        this.minIndex = null;
        this.secIndex = null;
        this.typeList = ['hour', 'min', 'sec'];
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        this.initDateList();
        this.initObservable();
        this.setI18nText();
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().datePickerPro;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.datePickerPro;
        });
    }
    initObservable() {
        this.pickSrv.toggleEvent.pipe(takeUntil(this.unsubscribe$)).subscribe(isOpen => {
            if (isOpen) {
                setTimeout(() => {
                    this.initDateList(true);
                });
            }
        });
        this.pickSrv.updateTimeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(value => {
            if (this.hourIndex !== value.hour) {
                this.chooseTime('hour', value.hour);
            }
            if (this.minIndex !== value.min) {
                this.chooseTime('min', value.min);
            }
            if (this.secIndex !== value.seconds) {
                this.chooseTime('sec', value.seconds);
            }
        });
        if (this.pickSrv.isRange) {
            this.pickSrv.activeInputChange.pipe(takeUntil(this.unsubscribe$)).subscribe(type => {
                const isNull = (type === 'start' && !this.pickSrv.curRangeDate[0]) ||
                    (type === 'end' && !this.pickSrv.curRangeDate[1]);
                if (this.hourIndex !== this.pickSrv.curHour || isNull) {
                    this.chooseTime('hour', isNull ? null : this.pickSrv.curHour);
                }
                if (this.minIndex !== this.pickSrv.curMin || isNull) {
                    this.chooseTime('min', isNull ? null : this.pickSrv.curMin);
                }
                if (this.secIndex !== this.pickSrv.curSec || isNull) {
                    this.chooseTime('sec', isNull ? null : this.pickSrv.curSec);
                }
            });
        }
    }
    initDateList(justScroll = false) {
        if (this.pickSrv.curDate) {
            this.hourIndex = this.pickSrv.curDate.getHours();
            this.minIndex = this.pickSrv.curDate.getMinutes();
            this.secIndex = this.pickSrv.curDate.getSeconds();
        }
        this.typeList.forEach(type => {
            this.chooseTime(type, this[`${type}Index`], false, justScroll);
        });
    }
    chooseTime(type, index, handle = false, justScroll = false) {
        switch (type) {
            case 'hour':
                this.hourIndex = index;
                this.firstList = new Array(24).fill(1).map((t, i) => {
                    return {
                        time: i < 10 ? `0${i}` : String(i),
                        type: 'hour',
                        active: this.hourIndex === i,
                        disabled: false
                    };
                });
                this.setAllScroll(index, this.pickSrv.curMin, this.pickSrv.curSec, justScroll);
                break;
            case 'min':
                this.minIndex = index;
                this.secondList = new Array(60).fill(1).map((t, i) => {
                    return {
                        time: i < 10 ? `0${i}` : String(i),
                        type: 'min',
                        active: this.minIndex === i,
                        disabled: false
                    };
                });
                this.setAllScroll(this.pickSrv.curHour, index, this.pickSrv.curSec, justScroll);
                break;
            case 'sec':
                this.secIndex = index;
                this.thirdList = new Array(60).fill(1).map((t, i) => {
                    return {
                        time: i < 10 ? `0${i}` : String(i),
                        type: 'sec',
                        active: this.secIndex === i,
                        disabled: false
                    };
                });
                this.setAllScroll(this.pickSrv.curHour, this.pickSrv.curMin, index, justScroll);
        }
        if (handle) {
            this.pickSrv.selectedTimeChange.next({
                activeInput: this.pickSrv.currentActiveInput,
                hour: this.hourIndex,
                min: this.minIndex,
                seconds: this.secIndex
            });
        }
    }
    setAllScroll(first, second, third, justScroll) {
        this.setScroll('first', first, justScroll);
        this.setScroll('second', second, justScroll);
        this.setScroll('third', third, justScroll);
    }
    setScroll(whichList, index, justScroll) {
        const scroll = (22 + 8) * index;
        const duration = justScroll ? 0 : 100;
        if (this.el) {
            this.scrollTo(this.el.nativeElement.querySelector(`.devui-${whichList}-list`), scroll, duration);
        }
    }
    scrollTo(element, to, duration) {
        if (typeof window === undefined || !element) {
            return;
        }
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        const difference = to - element.scrollTop;
        const perTick = (difference / duration) * 10;
        const reqAnimFrame = window['requestAnimationFrame'] ||
            window['mozRequestAnimationFrame'] ||
            window['msRequestAnimationFrame'] ||
            window['oRequestAnimationFrame'];
        reqAnimFrame(() => {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            this.scrollTo(element, to, duration - 10);
        });
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
TimepickerPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TimepickerPanelComponent, deps: [{ token: i0.ElementRef }, { token: DatepickerProService }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
TimepickerPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TimepickerPanelComponent, selector: "d-timepicker-panel", ngImport: i0, template: "<div class=\"devui-timepicker-panel\">\n  <div class=\"devui-time-header\">\n    <span class=\"devui-time-header-item\">{{ i18nText?.hour }}</span>\n    <span class=\"devui-time-header-item\">{{ i18nText?.min }}</span>\n    <span class=\"devui-time-header-item\">{{ i18nText?.second }}</span>\n  </div>\n  <div class=\"devui-time-picker\">\n    <ul *ngIf=\"firstList.length\" class=\"devui-time-list devui-first-list\">\n      <li\n        *ngFor=\"let item of firstList; let i = index\"\n        class=\"devui-time-item devui-first-item\"\n        [ngClass]=\"{\n          active: item?.active,\n          disabled: item?.disabled\n        }\"\n        (click)=\"chooseTime(item.type, i, true)\"\n      >\n        {{ item?.time }}\n      </li>\n    </ul>\n    <ul *ngIf=\"secondList.length\" class=\"devui-time-list devui-second-list\">\n      <li\n        *ngFor=\"let item of secondList; let i = index\"\n        class=\"devui-time-item devui-second-item\"\n        [ngClass]=\"{\n          active: item?.active,\n          disabled: item?.disabled\n        }\"\n        (click)=\"chooseTime(item.type, i, true)\"\n      >\n        {{ item?.time }}\n      </li>\n    </ul>\n    <ul *ngIf=\"thirdList.length\" class=\"devui-time-list devui-third-list\">\n      <li\n        *ngFor=\"let item of thirdList; let i = index\"\n        class=\"devui-time-item devui-third-item\"\n        [ngClass]=\"{\n          active: item?.active,\n          disabled: item?.disabled\n        }\"\n        (click)=\"chooseTime(item.type, i, true)\"\n      >\n        {{ item?.time }}\n      </li>\n    </ul>\n  </div>\n</div>\n", styles: [":host{display:inline-block;vertical-align:top;font-size:12px}.devui-timepicker-panel{width:115px;height:306px;text-align:center;border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-timepicker-panel .devui-time-header{display:flex;height:30px;padding:0 12px}.devui-timepicker-panel .devui-time-header-item{flex:1;line-height:30px;margin-right:12px}.devui-timepicker-panel .devui-time-header-item:last-child{margin-right:0}.devui-timepicker-panel .devui-time-picker{display:flex;height:276px;width:114px;padding:0 12px;overflow:hidden;border-radius:2px 2px 0 0;border-radius:var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0 0}.devui-timepicker-panel .devui-time-picker .devui-time-list{flex:1;overflow-x:hidden;overflow-y:scroll;overflow-y:overlay;scroll-behavior:auto;padding-right:12px;scrollbar-width:none}.devui-timepicker-panel .devui-time-picker .devui-time-list:last-child{padding-right:0}.devui-timepicker-panel .devui-time-picker .devui-time-list::-webkit-scrollbar{width:0!important}.devui-timepicker-panel .devui-time-picker .devui-time-list:hover{scrollbar-width:thin}.devui-timepicker-panel .devui-time-picker .devui-time-list:hover::-webkit-scrollbar{width:4px!important}.devui-timepicker-panel .devui-time-picker .devui-time-list .devui-time-item{width:100%;height:22px;line-height:22px;text-align:center;cursor:pointer}.devui-timepicker-panel .devui-time-picker .devui-time-list .devui-time-item:not(:last-child){margin-bottom:8px}.devui-timepicker-panel .devui-time-picker .devui-time-list .devui-time-item:last-child{margin-bottom:260px}.devui-timepicker-panel .devui-time-picker:not(.devui-disabled) .devui-time-list .devui-time-item:hover{color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-timepicker-panel .devui-time-picker:not(.devui-disabled) .devui-time-list .devui-time-item.active{color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc);border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-timepicker-panel .devui-time-picker:not(.devui-disabled) .devui-time-list .devui-time-item.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}\n"], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TimepickerPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-timepicker-panel', preserveWhitespaces: false, template: "<div class=\"devui-timepicker-panel\">\n  <div class=\"devui-time-header\">\n    <span class=\"devui-time-header-item\">{{ i18nText?.hour }}</span>\n    <span class=\"devui-time-header-item\">{{ i18nText?.min }}</span>\n    <span class=\"devui-time-header-item\">{{ i18nText?.second }}</span>\n  </div>\n  <div class=\"devui-time-picker\">\n    <ul *ngIf=\"firstList.length\" class=\"devui-time-list devui-first-list\">\n      <li\n        *ngFor=\"let item of firstList; let i = index\"\n        class=\"devui-time-item devui-first-item\"\n        [ngClass]=\"{\n          active: item?.active,\n          disabled: item?.disabled\n        }\"\n        (click)=\"chooseTime(item.type, i, true)\"\n      >\n        {{ item?.time }}\n      </li>\n    </ul>\n    <ul *ngIf=\"secondList.length\" class=\"devui-time-list devui-second-list\">\n      <li\n        *ngFor=\"let item of secondList; let i = index\"\n        class=\"devui-time-item devui-second-item\"\n        [ngClass]=\"{\n          active: item?.active,\n          disabled: item?.disabled\n        }\"\n        (click)=\"chooseTime(item.type, i, true)\"\n      >\n        {{ item?.time }}\n      </li>\n    </ul>\n    <ul *ngIf=\"thirdList.length\" class=\"devui-time-list devui-third-list\">\n      <li\n        *ngFor=\"let item of thirdList; let i = index\"\n        class=\"devui-time-item devui-third-item\"\n        [ngClass]=\"{\n          active: item?.active,\n          disabled: item?.disabled\n        }\"\n        (click)=\"chooseTime(item.type, i, true)\"\n      >\n        {{ item?.time }}\n      </li>\n    </ul>\n  </div>\n</div>\n", styles: [":host{display:inline-block;vertical-align:top;font-size:12px}.devui-timepicker-panel{width:115px;height:306px;text-align:center;border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-timepicker-panel .devui-time-header{display:flex;height:30px;padding:0 12px}.devui-timepicker-panel .devui-time-header-item{flex:1;line-height:30px;margin-right:12px}.devui-timepicker-panel .devui-time-header-item:last-child{margin-right:0}.devui-timepicker-panel .devui-time-picker{display:flex;height:276px;width:114px;padding:0 12px;overflow:hidden;border-radius:2px 2px 0 0;border-radius:var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0 0}.devui-timepicker-panel .devui-time-picker .devui-time-list{flex:1;overflow-x:hidden;overflow-y:scroll;overflow-y:overlay;scroll-behavior:auto;padding-right:12px;scrollbar-width:none}.devui-timepicker-panel .devui-time-picker .devui-time-list:last-child{padding-right:0}.devui-timepicker-panel .devui-time-picker .devui-time-list::-webkit-scrollbar{width:0!important}.devui-timepicker-panel .devui-time-picker .devui-time-list:hover{scrollbar-width:thin}.devui-timepicker-panel .devui-time-picker .devui-time-list:hover::-webkit-scrollbar{width:4px!important}.devui-timepicker-panel .devui-time-picker .devui-time-list .devui-time-item{width:100%;height:22px;line-height:22px;text-align:center;cursor:pointer}.devui-timepicker-panel .devui-time-picker .devui-time-list .devui-time-item:not(:last-child){margin-bottom:8px}.devui-timepicker-panel .devui-time-picker .devui-time-list .devui-time-item:last-child{margin-bottom:260px}.devui-timepicker-panel .devui-time-picker:not(.devui-disabled) .devui-time-list .devui-time-item:hover{color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-timepicker-panel .devui-time-picker:not(.devui-disabled) .devui-time-list .devui-time-item.active{color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc);border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-timepicker-panel .devui-time-picker:not(.devui-disabled) .devui-time-list .devui-time-item.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DatepickerProService }, { type: i1.I18nService }]; } });

class FooterPanelComponent {
    constructor(pickerSrv, i18n) {
        this.pickerSrv = pickerSrv;
        this.i18n = i18n;
        this.setI18nText();
    }
    get isRange() {
        return this.pickerSrv.isRange;
    }
    get confirmDisable() {
        if (this.isRange) {
            return (this.pickerSrv.currentActiveInput === 'start' && !this.pickerSrv.curRangeDate[0]) ||
                (this.pickerSrv.currentActiveInput === 'end' && !this.pickerSrv.curRangeDate[1]);
        }
        else {
            return false;
        }
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.common;
        });
    }
    ensureDate() {
        if (this.pickerSrv.isRange) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.currentActiveInput = 'end';
                this.pickerSrv.activeInputChange.next('end');
            }
            else if (!this.pickerSrv.curRangeDate[0]) {
                this.pickerSrv.currentActiveInput = 'start';
                this.pickerSrv.activeInputChange.next('start');
            }
            else {
                this.close(true);
            }
        }
        else {
            this.close(true);
        }
    }
    close(isConfirm = false) {
        this.pickerSrv.closeDropdownEvent.next(isConfirm);
    }
    ngOnDestroy() {
        this.i18nSubscription.unsubscribe();
    }
}
FooterPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FooterPanelComponent, deps: [{ token: DatepickerProService }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
FooterPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: FooterPanelComponent, selector: "d-datepicker-footer-panel", inputs: { footerTemplate: "footerTemplate" }, ngImport: i0, template: "<div class=\"devui-datepicekr-pro-footer\">\n  <ng-template [ngTemplateOutlet]=\"footerTemplate || default\"> </ng-template>\n</div>\n\n<ng-template #default>\n  <d-button bsStyle=\"primary\" [disabled]=\"confirmDisable\" (click)=\"ensureDate()\"> {{ i18nText.btnOk }} </d-button>\n  <d-button class=\"devui-cancel-button\" bsStyle=\"common\" *ngIf=\"isRange\" (click)=\"close()\"> {{ i18nText.btnCancel }} </d-button>\n</ng-template>\n", styles: [".devui-datepicekr-pro-footer{padding:8px;text-align:center;border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-datepicekr-pro-footer .devui-cancel-button{margin-left:4px}\n"], components: [{ type: i3$1.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }], directives: [{ type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FooterPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-datepicker-footer-panel', preserveWhitespaces: false, template: "<div class=\"devui-datepicekr-pro-footer\">\n  <ng-template [ngTemplateOutlet]=\"footerTemplate || default\"> </ng-template>\n</div>\n\n<ng-template #default>\n  <d-button bsStyle=\"primary\" [disabled]=\"confirmDisable\" (click)=\"ensureDate()\"> {{ i18nText.btnOk }} </d-button>\n  <d-button class=\"devui-cancel-button\" bsStyle=\"common\" *ngIf=\"isRange\" (click)=\"close()\"> {{ i18nText.btnCancel }} </d-button>\n</ng-template>\n", styles: [".devui-datepicekr-pro-footer{padding:8px;text-align:center;border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-datepicekr-pro-footer .devui-cancel-button{margin-left:4px}\n"] }]
        }], ctorParameters: function () { return [{ type: DatepickerProService }, { type: i1.I18nService }]; }, propDecorators: { footerTemplate: [{
                type: Input
            }] } });

class MonthPanelComponent {
    constructor(i18n, pickerSrv, cdr) {
        this.i18n = i18n;
        this.pickerSrv = pickerSrv;
        this.cdr = cdr;
        this.isRangeType = false;
        this.unsubscribe$ = new Subject();
        this.yearList = [];
        this.calenderItemSize = 186;
        this.monthList = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [10, 11, 12]
        ];
    }
    get curHoverDate() {
        return this.pickerSrv.curHoverDate;
    }
    set curHoverDate(value) {
        this.pickerSrv.curHoverDate = value;
    }
    get selectedRangeDate() {
        return this.pickerSrv.curRangeDate;
    }
    set selectedRangeDate(dateList) {
        this.pickerSrv.curRangeDate = dateList;
    }
    get currentDate() {
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                return this.pickerSrv.curRangeDate[0];
            }
            else if (this.pickerSrv.currentActiveInput === 'end') {
                return this.pickerSrv.curRangeDate[1];
            }
        }
        else {
            return this.pickerSrv.curDate;
        }
    }
    set currentDate(value) {
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.curRangeDate[0] = value;
            }
            else if (this.pickerSrv.currentActiveInput === 'end') {
                this.pickerSrv.curRangeDate[1] = value;
            }
        }
        else {
            this.pickerSrv.curDate = value;
        }
    }
    ngOnInit() {
        this.thisMonth = new Date();
        this.initList();
        this.initObservable();
        this.setI18nText();
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().datePickerPro;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.datePickerPro;
            this.cdr.detectChanges();
        });
    }
    initObservable() {
        this.pickerSrv.toggleEvent.pipe(takeUntil(this.unsubscribe$)).subscribe(isOpen => {
            if (isOpen) {
                setTimeout(() => {
                    this.goToDate(this.currentDate || new Date());
                });
            }
            if (!this.scrollListener) {
                this.initScrollListener();
            }
        });
        this.pickerSrv.updateDateValue.pipe(takeUntil(this.unsubscribe$)).subscribe(res => {
            if (res.type === 'range') {
                this.pickerSrv.curRangeDate = res.value;
            }
            else {
                this.pickerSrv.curDate = res.value;
            }
            this.goToDate(this.currentDate || new Date());
            this.cdr.detectChanges();
        });
        this.pickerSrv.activeInputChange.pipe(takeUntil(this.unsubscribe$)).subscribe(type => {
            if (type === 'start') {
                this.goToDate(this.selectedRangeDate[0] || this.selectedRangeDate[1] || new Date());
            }
            else {
                this.goToDate(this.selectedRangeDate[1] || this.selectedRangeDate[0] || new Date());
            }
        });
    }
    initList() {
        for (let yearIndex = this.pickerSrv.calendarRange[0]; yearIndex <= this.pickerSrv.calendarRange[1]; yearIndex++) {
            this.yearList.push({
                year: yearIndex,
                active: false
            });
        }
    }
    initScrollListener() {
        const scrollEle = this.scrollBodyCmp.getElementRef().nativeElement;
        this.scrollListener = fromEvent(scrollEle, 'mousewheel').pipe(takeUntil(this.unsubscribe$), debounceTime(180) // 滚动动画时间180，延时保证计算位置的准确
        ).subscribe(() => {
            const offsetY = this.scrollBodyCmp.measureScrollOffset();
            // 当面板滚过一半更新面板
            this.currentBodyIndex = Math.floor(offsetY / this.calenderItemSize) + (offsetY % this.calenderItemSize > 100 ? 1 : 0);
            this.goToListByIndex(this.currentBodyIndex);
            this.cdr.detectChanges();
        });
    }
    goToDate(date, scrollBehavior = 'auto') {
        if (date) {
            const index = date.getFullYear() - this.pickerSrv.calendarRange[0];
            this.currentBodyIndex = index;
            this.scrollBodyCmp.scrollToIndex(index, scrollBehavior);
            this.goToListByIndex(index);
        }
    }
    goToListByIndex(index) {
        const indexDelta = Math.abs(this.scrollListCmp.measureScrollOffset() / 30 - index);
        this.scrollListCmp.scrollToIndex(index - 4, indexDelta < 12 ? 'smooth' : 'auto');
    }
    selectMonth(yearIndex, monthIndex) {
        if (this.isDisable(yearIndex, monthIndex)) {
            return;
        }
        this.currentDate = new Date(yearIndex, monthIndex - 1, 1);
        if (this.isRangeType) {
            this.pickerSrv.fixRangeDate();
        }
        // 非时间模式下选完开始日期跳转到结束日期
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.currentActiveInput = 'end';
            }
            else if (this.pickerSrv.currentActiveInput === 'end' && !this.selectedRangeDate[0]) {
                this.pickerSrv.currentActiveInput = 'start';
            }
            else {
                this.pickerSrv.closeDropdownEvent.next();
            }
        }
        this.pickerSrv.selectedDateChange.next({
            type: this.isRangeType ? 'range' : 'single',
            value: this.isRangeType ? this.selectedRangeDate : this.currentDate
        });
        if (this.pickerSrv.closeAfterSelected) {
            this.pickerSrv.closeDropdownEvent.next();
        }
    }
    selectYear(yearIndex) {
        const isScroll = (yearIndex - this.pickerSrv.calendarRange[0]) - this.currentBodyIndex < 7;
        this.goToDate(new Date(yearIndex, 0, 1), isScroll ? 'smooth' : 'auto');
    }
    isSelected(yearIndex, monthIndex) {
        return this.pickerSrv.isMonthActive(yearIndex, monthIndex - 1);
    }
    isThisMonth(yearIndex, monthIndex) {
        return this.thisMonth.getFullYear() === yearIndex && this.thisMonth.getMonth() === monthIndex - 1;
    }
    isDateInRange(yearIndex, monthIndex) {
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.isDateInRange(date);
    }
    isDisable(yearIndex, monthIndex) {
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.maxDate.getTime() < date.getTime() || this.pickerSrv.minDate.getTime() > date.getTime();
    }
    isStartDate(yearIndex, monthIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.isStartDate(date);
    }
    isEndDate(yearIndex, monthIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.isEndDate(date);
    }
    isDateAbandon(yearIndex, monthIndex) {
        if (!this.isRangeType || (!this.selectedRangeDate[0] || !this.selectedRangeDate[1])) {
            return false;
        }
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.isDateAbandon(date);
    }
    isDateInSelectRange(yearIndex, monthIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.isDateInSelectRange(date);
    }
    isActiveTypeDate(yearIndex, monthIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, monthIndex - 1, 1);
        return this.pickerSrv.isActiveInputTypeDate(date);
    }
    setHoverTarget(yearIndex, monthIndex) {
        const date = new Date(yearIndex, monthIndex - 1, 1);
        if (this.isRangeType && !this.isDisable(yearIndex, monthIndex)) {
            this.curHoverDate = date;
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
MonthPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MonthPanelComponent, deps: [{ token: i1.I18nService }, { token: DatepickerProService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MonthPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: MonthPanelComponent, selector: "d-month-panel", inputs: { isRangeType: "isRangeType" }, viewQueries: [{ propertyName: "scrollBodyCmp", first: true, predicate: ["scrollBody"], descendants: true }, { propertyName: "scrollListCmp", first: true, predicate: ["scrollList"], descendants: true }], ngImport: i0, template: "<div class=\"devui-month-panel\">\n  <cdk-virtual-scroll-viewport #scrollList [itemSize]=\"30\" class=\"devui-year-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n    <div\n      class=\"devui-year-list-item\"\n      [ngClass]=\"{ 'title-active': index === currentBodyIndex }\"\n      *cdkVirtualFor=\"let year of yearList; let index = index\"\n      (click)=\"selectYear(year.year)\"\n    >\n      <p class=\"devui-year-title\">{{ year.year }}</p>\n    </div>\n  </cdk-virtual-scroll-viewport>\n  <div class=\"devui-month-list-wrapper\">\n    <cdk-virtual-scroll-viewport #scrollBody [itemSize]=\"calenderItemSize\" class=\"devui-month-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n      <div *cdkVirtualFor=\"let year of yearList; let index = index\">\n        <p class=\"devui-table-year-title\">{{ year.year + '\u5E74' }}</p>\n        <table\n          class=\"devui-month-table\"\n          [ngClass]=\"{ 'devui-active-month': index === currentBodyIndex }\"\n          (mouseleave)=\"curHoverDate = null\"\n        >\n          <tbody>\n            <tr *ngFor=\"let season of monthList\">\n              <td\n                *ngFor=\"let month of season\"\n                class=\"devui-month-item\"\n                [ngClass]=\"{\n                  'devui-table-month-selected': isSelected(year.year, month),\n                  'devui-table-this-month': isThisMonth(year.year, month),\n                  'devui-table-date-inrange': isDateInRange(year.year, month),\n                  'devui-table-date-start': isStartDate(year.year, month),\n                  'devui-table-date-end': isEndDate(year.year, month),\n                  'devui-table-date-abandon-selected': isDateAbandon(year.year, month),\n                  'devui-table-date-in-selected-range': isDateInSelectRange(year.year, month),\n                  'devui-table-date-active-type': isActiveTypeDate(year.year, month)\n                }\"\n              >\n                <span\n                  (mouseenter)=\"setHoverTarget(year.year, month)\"\n                  [ngClass]=\"{ 'devui-disabled': isDisable(year.year, month) }\"\n                  (click)=\"selectMonth(year.year, month)\"\n                >\n                  {{ i18nText.monthsOfYear[month - 1] }}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</div>\n", styles: [".devui-month-panel{height:300px;font-size:0}.devui-month-panel .devui-year-list{padding:8px 0;display:inline-block;width:80px;height:300px;overflow:auto;text-align:center;font-size:12px;scrollbar-width:none}.devui-month-panel .devui-year-list::-webkit-scrollbar{width:0!important}.devui-month-panel .devui-year-list-item{height:30px;line-height:30px;background-color:#f8f8fa;background-color:var(--devui-global-bg, #f8f8fa);cursor:pointer}.devui-month-panel .devui-year-list-item.title-active{background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-month-panel .devui-year-list-item:hover:not(.title-active){background-color:#f2f5fc;background-color:var(--devui-list-item-selected-bg, #f2f5fc)}.devui-month-panel .devui-month-list-wrapper{padding:0 4px;display:inline-block}.devui-month-panel .devui-month-list{width:180px;height:295px;font-size:12px;scrollbar-width:none}.devui-month-panel .devui-month-list::-webkit-scrollbar{width:0!important}.devui-month-panel .devui-month-list .devui-table-year-title{text-align:start;line-height:26px;color:#71757f;color:var(--devui-aide-text, #71757f);padding-left:8px}.devui-month-panel .devui-month-list .devui-month-table{border-collapse:collapse}.devui-month-panel .devui-month-list .devui-month-item{width:60px;height:40px;padding:4px 0;box-sizing:border-box;text-align:center;cursor:pointer}.devui-month-panel .devui-month-list .devui-month-item:hover span:not(.devui-disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-panel .devui-month-list .devui-month-item span{display:block;line-height:32px;border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-month-panel .devui-month-list .devui-month-item span.devui-disabled{border-radius:0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-this-month span{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-month-selected span{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-month-selected span:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-month-selected.devui-table-date-abandon-selected span{background:#beccfa;background:var(--devui-primary-disabled, #beccfa)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-inrange:not(.devui-table-month-selected) span{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-start:not(.devui-table-date-end) span{border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-end:not(.devui-table-date-start) span{border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-in-selected-range:not(.devui-table-date-inrange):not(:hover) span{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-radius:0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-active-type:not(.devui-table-date-abandon-selected) span{-webkit-animation:2s ease 0s infinite normal both breath-animation;animation:2s ease 0s infinite normal both breath-animation}@-webkit-keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}@keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}\n"], components: [{ type: i3.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }], directives: [{ type: i3.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MonthPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-month-panel', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"devui-month-panel\">\n  <cdk-virtual-scroll-viewport #scrollList [itemSize]=\"30\" class=\"devui-year-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n    <div\n      class=\"devui-year-list-item\"\n      [ngClass]=\"{ 'title-active': index === currentBodyIndex }\"\n      *cdkVirtualFor=\"let year of yearList; let index = index\"\n      (click)=\"selectYear(year.year)\"\n    >\n      <p class=\"devui-year-title\">{{ year.year }}</p>\n    </div>\n  </cdk-virtual-scroll-viewport>\n  <div class=\"devui-month-list-wrapper\">\n    <cdk-virtual-scroll-viewport #scrollBody [itemSize]=\"calenderItemSize\" class=\"devui-month-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n      <div *cdkVirtualFor=\"let year of yearList; let index = index\">\n        <p class=\"devui-table-year-title\">{{ year.year + '\u5E74' }}</p>\n        <table\n          class=\"devui-month-table\"\n          [ngClass]=\"{ 'devui-active-month': index === currentBodyIndex }\"\n          (mouseleave)=\"curHoverDate = null\"\n        >\n          <tbody>\n            <tr *ngFor=\"let season of monthList\">\n              <td\n                *ngFor=\"let month of season\"\n                class=\"devui-month-item\"\n                [ngClass]=\"{\n                  'devui-table-month-selected': isSelected(year.year, month),\n                  'devui-table-this-month': isThisMonth(year.year, month),\n                  'devui-table-date-inrange': isDateInRange(year.year, month),\n                  'devui-table-date-start': isStartDate(year.year, month),\n                  'devui-table-date-end': isEndDate(year.year, month),\n                  'devui-table-date-abandon-selected': isDateAbandon(year.year, month),\n                  'devui-table-date-in-selected-range': isDateInSelectRange(year.year, month),\n                  'devui-table-date-active-type': isActiveTypeDate(year.year, month)\n                }\"\n              >\n                <span\n                  (mouseenter)=\"setHoverTarget(year.year, month)\"\n                  [ngClass]=\"{ 'devui-disabled': isDisable(year.year, month) }\"\n                  (click)=\"selectMonth(year.year, month)\"\n                >\n                  {{ i18nText.monthsOfYear[month - 1] }}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</div>\n", styles: [".devui-month-panel{height:300px;font-size:0}.devui-month-panel .devui-year-list{padding:8px 0;display:inline-block;width:80px;height:300px;overflow:auto;text-align:center;font-size:12px;scrollbar-width:none}.devui-month-panel .devui-year-list::-webkit-scrollbar{width:0!important}.devui-month-panel .devui-year-list-item{height:30px;line-height:30px;background-color:#f8f8fa;background-color:var(--devui-global-bg, #f8f8fa);cursor:pointer}.devui-month-panel .devui-year-list-item.title-active{background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-month-panel .devui-year-list-item:hover:not(.title-active){background-color:#f2f5fc;background-color:var(--devui-list-item-selected-bg, #f2f5fc)}.devui-month-panel .devui-month-list-wrapper{padding:0 4px;display:inline-block}.devui-month-panel .devui-month-list{width:180px;height:295px;font-size:12px;scrollbar-width:none}.devui-month-panel .devui-month-list::-webkit-scrollbar{width:0!important}.devui-month-panel .devui-month-list .devui-table-year-title{text-align:start;line-height:26px;color:#71757f;color:var(--devui-aide-text, #71757f);padding-left:8px}.devui-month-panel .devui-month-list .devui-month-table{border-collapse:collapse}.devui-month-panel .devui-month-list .devui-month-item{width:60px;height:40px;padding:4px 0;box-sizing:border-box;text-align:center;cursor:pointer}.devui-month-panel .devui-month-list .devui-month-item:hover span:not(.devui-disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-panel .devui-month-list .devui-month-item span{display:block;line-height:32px;border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.devui-month-panel .devui-month-list .devui-month-item span.devui-disabled{border-radius:0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-this-month span{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-month-selected span{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-month-selected span:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-month-selected.devui-table-date-abandon-selected span{background:#beccfa;background:var(--devui-primary-disabled, #beccfa)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-inrange:not(.devui-table-month-selected) span{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-start:not(.devui-table-date-end) span{border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-end:not(.devui-table-date-start) span{border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-in-selected-range:not(.devui-table-date-inrange):not(:hover) span{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-radius:0}.devui-month-panel .devui-month-list .devui-month-item.devui-table-date-active-type:not(.devui-table-date-abandon-selected) span{-webkit-animation:2s ease 0s infinite normal both breath-animation;animation:2s ease 0s infinite normal both breath-animation}@-webkit-keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}@keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: DatepickerProService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { scrollBodyCmp: [{
                type: ViewChild,
                args: ['scrollBody']
            }], scrollListCmp: [{
                type: ViewChild,
                args: ['scrollList']
            }], isRangeType: [{
                type: Input
            }] } });

class YearPanelComponent {
    constructor(cdr, pickerSrv) {
        this.cdr = cdr;
        this.pickerSrv = pickerSrv;
        this.isRangeType = false;
        this.yearList = [];
        this.unsubscribe$ = new Subject();
    }
    get curHoverDate() {
        return this.pickerSrv.curHoverDate;
    }
    set curHoverDate(value) {
        this.pickerSrv.curHoverDate = value;
    }
    get currentDate() {
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                return this.pickerSrv.curRangeDate[0];
            }
            else if (this.pickerSrv.currentActiveInput === 'end') {
                return this.pickerSrv.curRangeDate[1];
            }
        }
        else {
            return this.pickerSrv.curDate;
        }
    }
    set currentDate(value) {
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.curRangeDate[0] = value;
            }
            else if (this.pickerSrv.currentActiveInput === 'end') {
                this.pickerSrv.curRangeDate[1] = value;
            }
        }
        else {
            this.pickerSrv.curDate = value;
        }
    }
    ngOnInit() {
        this.initYearList();
        this.initObservable();
    }
    initObservable() {
        this.pickerSrv.toggleEvent.subscribe(isOpen => {
            if (isOpen) {
                setTimeout(() => {
                    this.goToYear(this.currentDate || new Date());
                });
            }
        });
        this.pickerSrv.updateDateValue.pipe(takeUntil(this.unsubscribe$)).subscribe(res => {
            if (res.type === 'range') {
                this.pickerSrv.curRangeDate = res.value;
            }
            else {
                this.pickerSrv.curDate = res.value;
            }
            this.goToYear(this.currentDate || new Date());
        });
        this.pickerSrv.activeInputChange.pipe(takeUntil(this.unsubscribe$)).subscribe(type => {
            if (type === 'start') {
                this.goToYear(this.pickerSrv.curRangeDate[0] || this.pickerSrv.curRangeDate[1] || new Date());
            }
            else {
                this.goToYear(this.pickerSrv.curRangeDate[1] || this.pickerSrv.curRangeDate[0] || new Date());
            }
        });
    }
    initYearList() {
        const list = new Array(this.pickerSrv.calendarRange[1] - this.pickerSrv.calendarRange[0] + 1).fill(1).map((t, i) => {
            return i + this.pickerSrv.calendarRange[0];
        });
        this.yearList = chunk(list, 3);
    }
    goToYear(date) {
        if (date) {
            const index = Math.floor((date.getFullYear() - this.pickerSrv.calendarRange[0]) / 3);
            this.scrollListCmp.scrollToIndex(index - 1);
        }
        this.cdr.detectChanges();
    }
    isThisYear(yearIndex) {
        return yearIndex === new Date().getFullYear();
    }
    isActiveYear(yearIndex) {
        return this.pickerSrv.isYearActive(yearIndex);
    }
    isStartDate(yearIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.isStartDate(date);
    }
    isEndDate(yearIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.isEndDate(date);
    }
    isDateAbandon(yearIndex) {
        if (!this.isRangeType || (!this.pickerSrv.curRangeDate[0] || !this.pickerSrv.curRangeDate[1])) {
            return false;
        }
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.isDateAbandon(date);
    }
    isActiveTypeDate(yearIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.isActiveInputTypeDate(date);
    }
    isDateInRange(yearIndex) {
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.isDateInRange(date);
    }
    isDateInSelectRange(yearIndex) {
        if (!this.isRangeType) {
            return false;
        }
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.isDateInSelectRange(date);
    }
    selectYear(yearIndex) {
        if (this.isDisable(yearIndex)) {
            return;
        }
        this.currentDate = new Date(yearIndex, 0, 1);
        if (this.isRangeType) {
            this.pickerSrv.fixRangeDate();
        }
        // 非时间模式下选完开始日期跳转到结束日期
        if (this.isRangeType) {
            if (this.pickerSrv.currentActiveInput === 'start') {
                this.pickerSrv.currentActiveInput = 'end';
            }
            else if (this.pickerSrv.currentActiveInput === 'end' && !this.pickerSrv.curRangeDate[0]) {
                this.pickerSrv.currentActiveInput = 'start';
            }
            else {
                this.pickerSrv.closeDropdownEvent.next();
            }
        }
        this.pickerSrv.selectedDateChange.next({
            type: this.isRangeType ? 'range' : 'single',
            value: this.isRangeType ? this.pickerSrv.curRangeDate : this.currentDate
        });
        if (this.pickerSrv.closeAfterSelected) {
            this.pickerSrv.closeDropdownEvent.next();
        }
    }
    isDisable(yearIndex) {
        const date = new Date(yearIndex, 0, 1);
        return this.pickerSrv.maxDate.getTime() < date.getTime() || this.pickerSrv.minDate.getTime() > date.getTime();
    }
    setHoverTarget(yearIndex) {
        const date = new Date(yearIndex, 0, 1);
        if (this.isRangeType && !this.isDisable(yearIndex)) {
            this.curHoverDate = date;
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
YearPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: YearPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DatepickerProService }], target: i0.ɵɵFactoryTarget.Component });
YearPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: YearPanelComponent, selector: "d-year-panel", inputs: { isRangeType: "isRangeType" }, viewQueries: [{ propertyName: "scrollListCmp", first: true, predicate: ["scrollList"], descendants: true }], ngImport: i0, template: "<div class=\"year-list-panel\" (mouseleave)=\"curHoverDate = null\">\n  <cdk-virtual-scroll-viewport #scrollList [itemSize]=\"48\" class=\"devui-year-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n    <div class=\"devui-year-list-item\" *cdkVirtualFor=\"let years of yearList; let index = index\">\n      <p\n        class=\"devui-year-title\"\n        [ngClass]=\"{\n          'devui-this-year': isThisYear(year),\n          'devui-active-year': isActiveYear(year),\n          'devui-disabled': isDisable(year),\n          'devui-table-date-inrange': isDateInRange(year),\n          'devui-table-date-start': isStartDate(year),\n          'devui-table-date-end': isEndDate(year),\n          'devui-table-date-abandon-selected': isDateAbandon(year),\n          'devui-table-date-in-selected-range': isDateInSelectRange(year),\n          'devui-table-date-active-type': isActiveTypeDate(year)\n        }\"\n        (click)=\"selectYear(year)\"\n        (mouseenter)=\"setHoverTarget(year)\"\n        *ngFor=\"let year of years\"\n      >\n        {{ year }}\n      </p>\n    </div>\n  </cdk-virtual-scroll-viewport>\n</div>\n", styles: [".year-list-panel{width:204px;height:200px;padding:8px 12px}.year-list-panel .devui-year-list{width:184px;height:186px;scrollbar-width:none}.year-list-panel .devui-year-list::-webkit-scrollbar{width:0}.year-list-panel .devui-year-list:hover{overflow-y:overlay;scrollbar-width:thin}.year-list-panel .devui-year-list:hover::-webkit-scrollbar{width:4px}.year-list-panel .devui-year-list .devui-year-list-item{padding:4px 0;height:48px}.year-list-panel .devui-year-list .devui-year-title{width:60px;height:40px;float:left;font-size:12px;display:block;text-align:center;line-height:40px;cursor:pointer;border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.year-list-panel .devui-year-list .devui-year-title:hover:not(.devui-active-year):not(.devui-disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.year-list-panel .devui-year-list .devui-year-title.devui-this-year{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.year-list-panel .devui-year-list .devui-year-title.devui-active-year{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.year-list-panel .devui-year-list .devui-year-title.devui-active-year.devui-table-date-abandon-selected{background:#beccfa;background:var(--devui-primary-disabled, #beccfa)}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-inrange:not(.devui-active-year){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:0}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-start:not(.devui-table-date-end){border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-end:not(.devui-table-date-start){border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-in-selected-range:not(.devui-table-date-inrange):not(:hover){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-radius:0}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-active-type:not(.devui-table-date-abandon-selected){-webkit-animation:2s ease 0s infinite normal both breath-animation;animation:2s ease 0s infinite normal both breath-animation}@-webkit-keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}@keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}.year-list-panel .devui-year-list .devui-year-title.devui-disabled{border-radius:0;cursor:not-allowed}.year-list-panel .devui-year-list .devui-year-title.devui-disabled:first-of-type{border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.year-list-panel .devui-year-list .devui-year-title.devui-disabled:last-of-type{border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}\n"], components: [{ type: i3.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }], directives: [{ type: i3.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: YearPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-year-panel', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"year-list-panel\" (mouseleave)=\"curHoverDate = null\">\n  <cdk-virtual-scroll-viewport #scrollList [itemSize]=\"48\" class=\"devui-year-list\" minBufferPx=\"400\" maxBufferPx=\"600\">\n    <div class=\"devui-year-list-item\" *cdkVirtualFor=\"let years of yearList; let index = index\">\n      <p\n        class=\"devui-year-title\"\n        [ngClass]=\"{\n          'devui-this-year': isThisYear(year),\n          'devui-active-year': isActiveYear(year),\n          'devui-disabled': isDisable(year),\n          'devui-table-date-inrange': isDateInRange(year),\n          'devui-table-date-start': isStartDate(year),\n          'devui-table-date-end': isEndDate(year),\n          'devui-table-date-abandon-selected': isDateAbandon(year),\n          'devui-table-date-in-selected-range': isDateInSelectRange(year),\n          'devui-table-date-active-type': isActiveTypeDate(year)\n        }\"\n        (click)=\"selectYear(year)\"\n        (mouseenter)=\"setHoverTarget(year)\"\n        *ngFor=\"let year of years\"\n      >\n        {{ year }}\n      </p>\n    </div>\n  </cdk-virtual-scroll-viewport>\n</div>\n", styles: [".year-list-panel{width:204px;height:200px;padding:8px 12px}.year-list-panel .devui-year-list{width:184px;height:186px;scrollbar-width:none}.year-list-panel .devui-year-list::-webkit-scrollbar{width:0}.year-list-panel .devui-year-list:hover{overflow-y:overlay;scrollbar-width:thin}.year-list-panel .devui-year-list:hover::-webkit-scrollbar{width:4px}.year-list-panel .devui-year-list .devui-year-list-item{padding:4px 0;height:48px}.year-list-panel .devui-year-list .devui-year-title{width:60px;height:40px;float:left;font-size:12px;display:block;text-align:center;line-height:40px;cursor:pointer;border-radius:4px;border-radius:var(--devui-border-radius-feedback, 4px)}.year-list-panel .devui-year-list .devui-year-title:hover:not(.devui-active-year):not(.devui-disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.year-list-panel .devui-year-list .devui-year-title.devui-this-year{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.year-list-panel .devui-year-list .devui-year-title.devui-active-year{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc);color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}.year-list-panel .devui-year-list .devui-year-title.devui-active-year.devui-table-date-abandon-selected{background:#beccfa;background:var(--devui-primary-disabled, #beccfa)}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-inrange:not(.devui-active-year){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);border-radius:0}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-start:not(.devui-table-date-end){border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-end:not(.devui-table-date-start){border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-in-selected-range:not(.devui-table-date-inrange):not(:hover){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-radius:0}.year-list-panel .devui-year-list .devui-year-title.devui-table-date-active-type:not(.devui-table-date-abandon-selected){-webkit-animation:2s ease 0s infinite normal both breath-animation;animation:2s ease 0s infinite normal both breath-animation}@-webkit-keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}@keyframes breath-animation{0%{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}50%{box-shadow:0 0 8px #f2f5fc;box-shadow:0 0 8px var(--devui-list-item-active-bg, #f2f5fc)}to{box-shadow:0 0 #f2f5fc;box-shadow:0 0 0 var(--devui-list-item-active-bg, #f2f5fc)}}.year-list-panel .devui-year-list .devui-year-title.devui-disabled{border-radius:0;cursor:not-allowed}.year-list-panel .devui-year-list .devui-year-title.devui-disabled:first-of-type{border-radius:4px 0 0 4px;border-radius:var(--devui-border-radius-feedback, 4px) 0 0 var(--devui-border-radius-feedback, 4px)}.year-list-panel .devui-year-list .devui-year-title.devui-disabled:last-of-type{border-radius:0 4px 4px 0;border-radius:0 var(--devui-border-radius-feedback, 4px) var(--devui-border-radius-feedback, 4px) 0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: DatepickerProService }]; }, propDecorators: { scrollListCmp: [{
                type: ViewChild,
                args: ['scrollList']
            }], isRangeType: [{
                type: Input
            }] } });

class DatepickerPanelComponent {
    constructor() {
        this.mode = 'date';
    }
    onClick(event) {
        event.stopPropagation();
    }
}
DatepickerPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DatepickerPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DatepickerPanelComponent, selector: "d-datepicker-panel", inputs: { isRangeType: "isRangeType", showTime: "showTime", showCustom: "showCustom", customTemplate: "customTemplate", footerTemplate: "footerTemplate", mode: "mode" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0, template: "<div class=\"devui-datepicker-pro-panel\">\n  <ng-container *ngIf=\"mode === 'date' || !mode\">\n    <d-calendar-panel [isRangeType]=\"isRangeType\"> </d-calendar-panel>\n    <d-timepicker-panel *ngIf=\"showTime\"></d-timepicker-panel>\n\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"showTime || footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n\n  <ng-container *ngIf=\"mode === 'month'\">\n    <d-month-panel [isRangeType]=\"isRangeType\"></d-month-panel>\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n\n  <ng-container *ngIf=\"mode === 'year'\">\n    <d-year-panel [isRangeType]=\"isRangeType\"></d-year-panel>\n\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n\n  <ng-container *ngIf=\"mode === 'week' && isRangeType === true\">\n    <d-calendar-panel [isRangeType]=\"true\" [isWeekSelect]=\"true\"> </d-calendar-panel>\n\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n</div>\n", styles: [".devui-custom-panel-wrapper{display:inline-block;vertical-align:top;text-align:center;height:305px;font-size:12px;border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-datepicker-pro-panel{width:-webkit-max-content;width:-moz-max-content;width:max-content}:host{font-size:0}\n"], components: [{ type: CalendarPanelComponent, selector: "d-calendar-panel", inputs: ["isRangeType", "isWeekSelect"] }, { type: TimepickerPanelComponent, selector: "d-timepicker-panel" }, { type: FooterPanelComponent, selector: "d-datepicker-footer-panel", inputs: ["footerTemplate"] }, { type: MonthPanelComponent, selector: "d-month-panel", inputs: ["isRangeType"] }, { type: YearPanelComponent, selector: "d-year-panel", inputs: ["isRangeType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-datepicker-panel', preserveWhitespaces: false, template: "<div class=\"devui-datepicker-pro-panel\">\n  <ng-container *ngIf=\"mode === 'date' || !mode\">\n    <d-calendar-panel [isRangeType]=\"isRangeType\"> </d-calendar-panel>\n    <d-timepicker-panel *ngIf=\"showTime\"></d-timepicker-panel>\n\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"showTime || footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n\n  <ng-container *ngIf=\"mode === 'month'\">\n    <d-month-panel [isRangeType]=\"isRangeType\"></d-month-panel>\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n\n  <ng-container *ngIf=\"mode === 'year'\">\n    <d-year-panel [isRangeType]=\"isRangeType\"></d-year-panel>\n\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n\n  <ng-container *ngIf=\"mode === 'week' && isRangeType === true\">\n    <d-calendar-panel [isRangeType]=\"true\" [isWeekSelect]=\"true\"> </d-calendar-panel>\n\n    <div class=\"devui-custom-panel-wrapper\" *ngIf=\"customTemplate\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate\"> </ng-template>\n    </div>\n\n    <d-datepicker-footer-panel *ngIf=\"footerTemplate\" [footerTemplate]=\"footerTemplate\"></d-datepicker-footer-panel>\n  </ng-container>\n</div>\n", styles: [".devui-custom-panel-wrapper{display:inline-block;vertical-align:top;text-align:center;height:305px;font-size:12px;border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-datepicker-pro-panel{width:-webkit-max-content;width:-moz-max-content;width:max-content}:host{font-size:0}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { isRangeType: [{
                type: Input
            }], showTime: [{
                type: Input
            }], showCustom: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], footerTemplate: [{
                type: Input
            }], mode: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class DatepickerProCalendarComponent {
    constructor(pickerSrv, i18n) {
        this.pickerSrv = pickerSrv;
        this.i18n = i18n;
        this.isRangeType = false;
        this.showTime = false;
        this.mode = 'date';
        this.startIndexOfWeek = 0;
        this.splitter = '-';
        this.showRangeHeader = true;
        this.allowClear = true;
        this.confirmEvent = new EventEmitter();
        this.cancelEvent = new EventEmitter();
        this.strWidth = 0;
        this._dateValue = [];
        this.unsubscribe$ = new Subject();
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.i18nText = this.i18n.getI18nText().datePickerPro;
        this.datepickerConvert = new DefaultDateConverter();
    }
    set activeRangeType(type) {
        this.pickerSrv.currentActiveInput = type;
        this.focusChange(type);
        this.pickerSrv.activeInputChange.next(type);
    }
    get curActiveDate() {
        if (this.pickerSrv.currentActiveInput === 'start') {
            return this.pickerSrv.curRangeDate[0] || this.pickerSrv.curRangeDate[1] || new Date();
        }
        else {
            return this.pickerSrv.curRangeDate[1] || this.pickerSrv.curRangeDate[0] || new Date();
        }
    }
    set currentActiveInput(value) {
        this.pickerSrv.currentActiveInput = value;
    }
    get currentActiveInput() {
        return this.pickerSrv.currentActiveInput;
    }
    get dateValue() {
        return this._dateValue;
    }
    set dateValue(value) {
        this._dateValue = value;
        this.getStrWidth();
    }
    get curFormat() {
        if (this.mode === 'year') {
            return 'y';
        }
        else if (this.mode === 'month') {
            return 'y-MM';
        }
        else {
            return this.showTime ? 'y/MM/dd HH:mm:ss' : 'y/MM/dd';
        }
    }
    set minDate(value) {
        if (!value) {
            return;
        }
        this.pickerSrv.minDate = value;
    }
    set maxDate(value) {
        if (!value) {
            return;
        }
        this.pickerSrv.maxDate = value;
    }
    set markedRangeDateList(value) {
        this.pickerSrv.markedRangeDateList = value;
    }
    ;
    set markedDateList(value) {
        this.pickerSrv.markedDateList = value;
    }
    set markDateInfoTemplate(tmp) {
        this.pickerSrv.markDateInfoTemplate = tmp;
    }
    ;
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18n.langChange().pipe(takeUntil(this.unsubscribe$)).subscribe((data) => {
            this.i18nLocale = data.locale;
            this.i18nText = data.datePickerPro;
        });
    }
    ngOnInit() {
        this.setI18nText();
        this.initSrvStatus();
        this.initObservable();
    }
    ngAfterViewInit() {
        this.updateCurPosition();
    }
    updateCurPosition() {
        this.pickerSrv.toggleEvent.next(true);
    }
    clear(event) {
        if (event) {
            event.stopPropagation();
        }
        this.pickerSrv.updateDateValue.next({
            type: this.isRangeType ? 'range' : 'single',
            value: this.isRangeType ? [] : null
        });
        this.pickerSrv.updateTimeChange.next({
            hour: null,
            min: null,
            seconds: null
        });
        if (this.isRangeType) {
            this.dateValue = [];
            this.pickerSrv.curRangeDate = [];
            this.currentActiveInput = 'start';
            if (event) {
                this.onChange(this.pickerSrv.curRangeDate);
            }
        }
        else {
            this.pickerSrv.curDate = null;
            if (event) {
                this.onChange(this.pickerSrv.curDate);
            }
        }
    }
    initSrvStatus() {
        this.pickerSrv.showTime = this.showTime;
        this.pickerSrv.isRange = this.isRangeType;
        this.pickerSrv.startIndexOfWeek = this.startIndexOfWeek;
    }
    formatDateToString(date) {
        if (!date) {
            return '';
        }
        return this.datepickerConvert.format(date, this.curFormat);
    }
    initObservable() {
        this.pickerSrv.selectedDateChange.pipe(takeUntil(this.unsubscribe$)).subscribe(change => {
            if (this.isRangeType) {
                this.pickerSrv.curRangeDate = change.value;
                this.dateValue = change.value.map(d => this.formatDateToString(d));
                this.onChange(this.pickerSrv.curRangeDate);
            }
            else {
                this.pickerSrv.curDate = change.value;
                this.onChange(change.value);
            }
        });
        this.pickerSrv.selectedTimeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(time => {
            if (this.isRangeType) {
                const curTime = new Date(this.curActiveDate.getTime()).setHours(time.hour, time.min, time.seconds);
                const curDate = new Date(curTime);
                if (time.activeInput === 'start') {
                    this.pickerSrv.curRangeDate[0] = curDate;
                    if (this.isSameDateAndTimeWrong()) {
                        this.pickerSrv.curRangeDate[1] = curDate;
                        this.dateValue[1] = this.formatDateToString(curDate);
                    }
                    this.dateValue = [this.formatDateToString(curDate), this.dateValue[1]];
                }
                else {
                    this.pickerSrv.curRangeDate[1] = curDate;
                    if (this.isSameDateAndTimeWrong()) {
                        this.pickerSrv.curRangeDate[0] = curDate;
                        this.dateValue[0] = this.formatDateToString(curDate);
                    }
                    this.dateValue = [this.dateValue[0], this.formatDateToString(curDate)];
                }
                this.onChange(this.pickerSrv.curRangeDate);
            }
            else {
                const curDate = new Date((this.pickerSrv.curDate || new Date()).setHours(time.hour, time.min, time.seconds));
                this.pickerSrv.curDate = curDate;
                this.onChange(curDate);
            }
        });
        this.pickerSrv.closeDropdownEvent.pipe(takeUntil(this.unsubscribe$)).subscribe(isConfirm => {
            if (isConfirm) {
                this.confirmEvent.emit(this.pickerSrv.curDate || this.pickerSrv.curRangeDate);
            }
            else {
                this.cancelEvent.emit();
            }
        });
    }
    focusChange(type) {
        this.currentActiveInput = type;
        this.pickerSrv.activeInputChange.next(type);
        if (type === 'start') {
            setTimeout(() => {
                var _a;
                if ((_a = this.datepickerInputStart) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    this.datepickerInputStart.nativeElement.focus();
                }
            });
        }
        else {
            setTimeout(() => {
                var _a;
                if ((_a = this.datepickerInputEnd) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    this.datepickerInputEnd.nativeElement.focus();
                }
            });
        }
    }
    isSameDateAndTimeWrong() {
        var _a, _b;
        if (((_a = this.pickerSrv.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.toDateString()) === ((_b = this.pickerSrv.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.toDateString())) {
            return this.pickerSrv.curRangeDate[0].getTime() > this.pickerSrv.curRangeDate[1].getTime();
        }
        return false;
    }
    writeValue(value) {
        if (this.isRangeType) {
            this.writeRangeValue(value);
        }
        else {
            this.writeSingleValue(value);
        }
    }
    writeRangeValue(value) {
        if (!value || !value.length) {
            this.clear();
            return;
        }
        if (value.find(t => !this.pickerSrv.dateInRange(t))) {
            return;
        }
        this.dateValue = value.map(d => {
            return d ? this.datepickerConvert.format(d, this.curFormat) : '';
        });
        this.pickerSrv.curRangeDate = value;
        this.pickerSrv.updateDateValue.next({
            type: 'range',
            value
        });
    }
    writeSingleValue(value) {
        if (!value || !this.pickerSrv.dateInRange(new Date(value))) {
            this.clear();
            return;
        }
        this.pickerSrv.curDate = value;
        this.pickerSrv.updateDateValue.next({
            type: 'single',
            value
        });
        if (this.showTime) {
            this.pickerSrv.updateTimeChange.next({
                hour: value.getHours(),
                min: value.getMinutes(),
                seconds: value.getSeconds()
            });
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    getStrWidth() {
        let str = this.pickerSrv.currentActiveInput === 'start' ? this.dateValue[0] : this.dateValue[1];
        if (!str || !str.length) {
            str = this.pickerSrv.currentActiveInput === 'start' ? this.i18nText.startPlaceholder : this.i18nText.endPlaceholder;
        }
        this.strWidth = this.pickerSrv.mearsureStrWidth(str);
    }
}
DatepickerProCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCalendarComponent, deps: [{ token: DatepickerProService }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
DatepickerProCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DatepickerProCalendarComponent, selector: "d-datepicker-calendar", inputs: { activeRangeType: "activeRangeType", isRangeType: "isRangeType", showTime: "showTime", mode: "mode", startIndexOfWeek: "startIndexOfWeek", splitter: "splitter", showRangeHeader: "showRangeHeader", placeholder: "placeholder", allowClear: "allowClear", minDate: "minDate", maxDate: "maxDate", markedRangeDateList: "markedRangeDateList", markedDateList: "markedDateList" }, outputs: { confirmEvent: "confirmEvent", cancelEvent: "cancelEvent" }, providers: [
        DatepickerProService,
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatepickerProCalendarComponent),
            multi: true
        }
    ], queries: [{ propertyName: "customTemplate", first: true, predicate: ["customTemplate"], descendants: true }, { propertyName: "footerTemplate", first: true, predicate: ["footerTemplate"], descendants: true }, { propertyName: "markDateInfoTemplate", first: true, predicate: ["markDateInfoTemplate"], descendants: true }], viewQueries: [{ propertyName: "datepickerInputStart", first: true, predicate: ["dateInputStart"], descendants: true }, { propertyName: "datepickerInputEnd", first: true, predicate: ["dateInputEnd"], descendants: true }], ngImport: i0, template: "<div class=\"devui-calendar-header\" *ngIf=\"showRangeHeader && isRangeType\" [ngStyle]=\"{ width: showTime ? 'auto' : '330px' }\">\n  <div\n    class=\"devui-range-picker devui-input-group devui-dropdown-origin\"\n    [ngClass]=\"{\n      'devui-has-value': dateValue[0] || dateValue[1]\n    }\"\n  >\n    <i class=\"devui-range-picker-icon\">\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M5,0 L5,1 L11,1 L11,0 L12,0 L12,1 L14,1 C15.1045695,1 16,1.8954305 16,3 L16,14 C16,15.1045695 15.1045695,16 14,16 L2,16 C0.8954305,16 0,15.1045695 0,14 L0,3 C0,1.8954305 0.8954305,1 2,1 L4,1 L4,0 L5,0 Z M15,5 L1,5 L1,14 C1,14.5522847 1.44771525,15 2,15 L14,15 C14.5522847,15 15,14.5522847 15,14 L15,5 Z M6,7 C6.55228475,7 7,7.44771525 7,8 L7,10 C7,10.5522847 6.55228475,11 6,11 L4,11 C3.44771525,11 3,10.5522847 3,10 L3,8 C3,7.44771525 3.44771525,7 4,7 L6,7 Z M6,8 L4,8 L4,10 L6,10 L6,8 Z M4,2 L2,2 C1.44771525,2 1,2.44771525 1,3 L1,4 L15,4 L15,3 C15,2.44771525 14.5522847,2 14,2 L12,2 L12,3 L11,3 L11,2 L5,2 L5,3 L4,3 L4,2 Z\"\n            fill=\"#BABBC0\"\n          ></path>\n        </g>\n      </svg>\n    </i>\n    <input\n      #dateInputStart\n      class=\"devui-input devui-form-control devui-date-start\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'start' }\"\n      [placeholder]=\"(placeholder && placeholder[0]) || i18nText.startPlaceholder\"\n      [(ngModel)]=\"dateValue[0]\"\n      (click)=\"focusChange('start')\"\n      autocomplete=\"off\"\n    />\n    <span> {{ splitter }} </span>\n    <input\n      #dateInputEnd\n      class=\"devui-input devui-form-control devui-date-end\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'end' }\"\n      [placeholder]=\"(placeholder && placeholder[1]) || i18nText.endPlaceholder\"\n      [(ngModel)]=\"dateValue[1]\"\n      (click)=\"focusChange('end')\"\n      autocomplete=\"off\"\n    />\n    <div\n      class=\"devui-date-input-active-bar\"\n      [style.width.px]=\"strWidth\"\n      [ngClass]=\"{\n        'devui-start-side': currentActiveInput === 'start',\n        'devui-end-side': currentActiveInput === 'end'\n      }\"\n    ></div>\n    <div *ngIf=\"allowClear\" class=\"devui-input-group-addon close-icon-wrapper\" (click)=\"clear($event)\">\n      <div class=\"close-icon\">\n        <svg\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</div>\n<d-datepicker-panel\n  [isRangeType]=\"isRangeType\"\n  [showTime]=\"showTime\"\n  [customTemplate]=\"customTemplate\"\n  [footerTemplate]=\"footerTemplate\"\n></d-datepicker-panel>\n", styles: [":host{display:inline-block}.devui-calendar-header{padding:8px 16px;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-range-picker{padding:0 8px;position:relative;box-sizing:border-box;width:100%;min-height:24px}.devui-range-picker .devui-input{height:26px;padding:4px 8px;width:calc(50% - 18px)}.devui-range-picker .devui-input.devui-active-input{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-range-picker .devui-date-input-active-bar{display:block;max-width:calc(50% - 48px);height:1px;background-color:#f2f2f3;background-color:var(--devui-brand-foil, #f2f2f3);position:absolute;bottom:0}.devui-range-picker .devui-date-input-active-bar.devui-start-side{left:35px}.devui-range-picker .devui-date-input-active-bar.devui-end-side{left:calc(50% + 20px)}.devui-range-picker-icon{vertical-align:bottom}.devui-range-picker .close-icon-wrapper{padding:0 8px;visibility:hidden;position:absolute;right:0;top:0;line-height:25px}.devui-range-picker .close-icon-wrapper .close-icon{width:16px;height:16px;display:inline-block;line-height:16px}.devui-range-picker .close-icon-wrapper .close-icon svg{vertical-align:middle;position:relative;top:-.1em}.devui-range-picker .close-icon-wrapper .close-icon svg path{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.devui-range-picker .close-icon-wrapper .close-icon:hover svg path{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.devui-range-picker.devui-has-value:hover .close-icon-wrapper{visibility:visible}.devui-range-picker:not(.devui-disabled) .close-icon-wrapper{cursor:pointer}.devui-input-group>.devui-input{display:inline-block}.devui-input-group>.devui-input::-ms-clear{display:none}\n"], components: [{ type: DatepickerPanelComponent, selector: "d-datepicker-panel", inputs: ["isRangeType", "showTime", "showCustom", "customTemplate", "footerTemplate", "mode"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-datepicker-calendar', providers: [
                        DatepickerProService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatepickerProCalendarComponent),
                            multi: true
                        }
                    ], preserveWhitespaces: false, template: "<div class=\"devui-calendar-header\" *ngIf=\"showRangeHeader && isRangeType\" [ngStyle]=\"{ width: showTime ? 'auto' : '330px' }\">\n  <div\n    class=\"devui-range-picker devui-input-group devui-dropdown-origin\"\n    [ngClass]=\"{\n      'devui-has-value': dateValue[0] || dateValue[1]\n    }\"\n  >\n    <i class=\"devui-range-picker-icon\">\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M5,0 L5,1 L11,1 L11,0 L12,0 L12,1 L14,1 C15.1045695,1 16,1.8954305 16,3 L16,14 C16,15.1045695 15.1045695,16 14,16 L2,16 C0.8954305,16 0,15.1045695 0,14 L0,3 C0,1.8954305 0.8954305,1 2,1 L4,1 L4,0 L5,0 Z M15,5 L1,5 L1,14 C1,14.5522847 1.44771525,15 2,15 L14,15 C14.5522847,15 15,14.5522847 15,14 L15,5 Z M6,7 C6.55228475,7 7,7.44771525 7,8 L7,10 C7,10.5522847 6.55228475,11 6,11 L4,11 C3.44771525,11 3,10.5522847 3,10 L3,8 C3,7.44771525 3.44771525,7 4,7 L6,7 Z M6,8 L4,8 L4,10 L6,10 L6,8 Z M4,2 L2,2 C1.44771525,2 1,2.44771525 1,3 L1,4 L15,4 L15,3 C15,2.44771525 14.5522847,2 14,2 L12,2 L12,3 L11,3 L11,2 L5,2 L5,3 L4,3 L4,2 Z\"\n            fill=\"#BABBC0\"\n          ></path>\n        </g>\n      </svg>\n    </i>\n    <input\n      #dateInputStart\n      class=\"devui-input devui-form-control devui-date-start\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'start' }\"\n      [placeholder]=\"(placeholder && placeholder[0]) || i18nText.startPlaceholder\"\n      [(ngModel)]=\"dateValue[0]\"\n      (click)=\"focusChange('start')\"\n      autocomplete=\"off\"\n    />\n    <span> {{ splitter }} </span>\n    <input\n      #dateInputEnd\n      class=\"devui-input devui-form-control devui-date-end\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'end' }\"\n      [placeholder]=\"(placeholder && placeholder[1]) || i18nText.endPlaceholder\"\n      [(ngModel)]=\"dateValue[1]\"\n      (click)=\"focusChange('end')\"\n      autocomplete=\"off\"\n    />\n    <div\n      class=\"devui-date-input-active-bar\"\n      [style.width.px]=\"strWidth\"\n      [ngClass]=\"{\n        'devui-start-side': currentActiveInput === 'start',\n        'devui-end-side': currentActiveInput === 'end'\n      }\"\n    ></div>\n    <div *ngIf=\"allowClear\" class=\"devui-input-group-addon close-icon-wrapper\" (click)=\"clear($event)\">\n      <div class=\"close-icon\">\n        <svg\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</div>\n<d-datepicker-panel\n  [isRangeType]=\"isRangeType\"\n  [showTime]=\"showTime\"\n  [customTemplate]=\"customTemplate\"\n  [footerTemplate]=\"footerTemplate\"\n></d-datepicker-panel>\n", styles: [":host{display:inline-block}.devui-calendar-header{padding:8px 16px;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3)}.devui-range-picker{padding:0 8px;position:relative;box-sizing:border-box;width:100%;min-height:24px}.devui-range-picker .devui-input{height:26px;padding:4px 8px;width:calc(50% - 18px)}.devui-range-picker .devui-input.devui-active-input{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-range-picker .devui-date-input-active-bar{display:block;max-width:calc(50% - 48px);height:1px;background-color:#f2f2f3;background-color:var(--devui-brand-foil, #f2f2f3);position:absolute;bottom:0}.devui-range-picker .devui-date-input-active-bar.devui-start-side{left:35px}.devui-range-picker .devui-date-input-active-bar.devui-end-side{left:calc(50% + 20px)}.devui-range-picker-icon{vertical-align:bottom}.devui-range-picker .close-icon-wrapper{padding:0 8px;visibility:hidden;position:absolute;right:0;top:0;line-height:25px}.devui-range-picker .close-icon-wrapper .close-icon{width:16px;height:16px;display:inline-block;line-height:16px}.devui-range-picker .close-icon-wrapper .close-icon svg{vertical-align:middle;position:relative;top:-.1em}.devui-range-picker .close-icon-wrapper .close-icon svg path{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.devui-range-picker .close-icon-wrapper .close-icon:hover svg path{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.devui-range-picker.devui-has-value:hover .close-icon-wrapper{visibility:visible}.devui-range-picker:not(.devui-disabled) .close-icon-wrapper{cursor:pointer}.devui-input-group>.devui-input{display:inline-block}.devui-input-group>.devui-input::-ms-clear{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: DatepickerProService }, { type: i1.I18nService }]; }, propDecorators: { activeRangeType: [{
                type: Input
            }], isRangeType: [{
                type: Input
            }], showTime: [{
                type: Input
            }], mode: [{
                type: Input
            }], startIndexOfWeek: [{
                type: Input
            }], splitter: [{
                type: Input
            }], showRangeHeader: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], allowClear: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], markedRangeDateList: [{
                type: Input
            }], markedDateList: [{
                type: Input
            }], confirmEvent: [{
                type: Output
            }], cancelEvent: [{
                type: Output
            }], customTemplate: [{
                type: ContentChild,
                args: ['customTemplate']
            }], footerTemplate: [{
                type: ContentChild,
                args: ['footerTemplate']
            }], markDateInfoTemplate: [{
                type: ContentChild,
                args: ['markDateInfoTemplate']
            }], datepickerInputStart: [{
                type: ViewChild,
                args: ['dateInputStart']
            }], datepickerInputEnd: [{
                type: ViewChild,
                args: ['dateInputEnd']
            }] } });

class DatepickerProComponent {
    constructor(i18n, pickerSrv) {
        this.i18n = i18n;
        this.pickerSrv = pickerSrv;
        this.mode = 'date';
        this.showTime = false;
        this.disabled = false;
        this.autoOpen = false;
        this.showAnimation = true;
        this.appendToBody = true;
        this.allowClear = true;
        this.dropdownToggle = new EventEmitter();
        this.confirmEvent = new EventEmitter();
        this.dateValue = '';
        this.unsubscribe$ = new Subject();
        this.isOpen = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.i18nText = this.i18n.getI18nText().datePickerPro;
        this.datepickerConvert = new DefaultDateConverter();
    }
    set calenderRange(value) {
        this.pickerSrv.calendarRange = value || [1970, 2099];
    }
    set minDate(value) {
        if (!value) {
            return;
        }
        this.pickerSrv.minDate = value;
    }
    set maxDate(value) {
        if (!value) {
            return;
        }
        this.pickerSrv.maxDate = value;
    }
    set markedRangeDateList(value) {
        this.pickerSrv.markedRangeDateList = value;
    }
    ;
    set markedDateList(value) {
        this.pickerSrv.markedDateList = value;
    }
    set markDateInfoTemplate(tmp) {
        this.pickerSrv.markDateInfoTemplate = tmp;
    }
    ;
    get dateConfig() {
        return {
            dateConverter: this.datepickerConvert,
            min: this.pickerSrv.minDate || new Date(this.pickerSrv.calendarRange[0] + '/01/01'),
            max: this.pickerSrv.maxDate || new Date(this.pickerSrv.calendarRange[1] + '/12/31'),
            format: {
                date: this.format || 'y/MM/dd',
                time: this.format || 'y/MM/dd HH:mm:ss',
                month: this.format || 'y-MM',
                year: 'y'
            }
        };
    }
    get curFormat() {
        if (this.mode === 'year') {
            return this.dateConfig.format.year;
        }
        else if (this.mode === 'month') {
            return this.dateConfig.format.month;
        }
        else {
            return this.showTime ? this.dateConfig.format.time : this.dateConfig.format.date;
        }
    }
    ngOnInit() {
        this.initSrvStatus();
        this.setI18nText();
        setTimeout(() => {
            this.isOpen = this.autoOpen;
        });
    }
    ngAfterViewInit() {
        this.initObservable();
    }
    initSrvStatus() {
        this.pickerSrv.showTime = this.showTime;
        this.pickerSrv.isRange = false;
    }
    initObservable() {
        this.pickerSrv.selectedDateChange.pipe(takeUntil(this.unsubscribe$)).subscribe(change => {
            this.dateValue = this.formatDateToString(change.value);
            this.pickerSrv.curDate = change.value;
            this.onChange(change.value);
        });
        this.pickerSrv.selectedTimeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(time => {
            if (this.dateValue) {
                const curTime = this.datepickerConvert.parse(this.dateValue, this.curFormat).setHours(time.hour, time.min, time.seconds);
                const curDate = new Date(curTime);
                this.pickerSrv.curDate = curDate;
                this.dateValue = this.formatDateToString(curDate);
                this.onChange(curDate);
            }
            else {
                this.writeValue(new Date(new Date().setHours(time.hour, time.min, time.seconds)));
                this.onChange(this.pickerSrv.curDate);
            }
        });
        this.pickerSrv.closeDropdownEvent.pipe(takeUntil(this.unsubscribe$)).subscribe(isConfirm => {
            this.isOpen = false;
            this.dropdownToggle.emit(false);
            if (isConfirm) {
                this.confirmEvent.emit(this.pickerSrv.curDate);
            }
        });
        if (!this.hostTemplate) {
            fromEvent(this.datepickerInput.nativeElement, 'input').pipe(takeUntil(this.unsubscribe$), debounceTime(300)).subscribe((event) => {
                if (!this.dateValue) {
                    return;
                }
                const inputDate = this.datepickerConvert.parse(this.dateValue, this.curFormat);
                if (inputDate instanceof Date && inputDate.getTime() === this.pickerSrv.curDate.getTime()) {
                    return;
                }
                if (this.validateDate(this.dateValue)) {
                    this.pickerSrv.curDate = inputDate;
                    this.pickerSrv.updateDateValue.next({
                        type: 'single',
                        value: inputDate
                    });
                    if (this.showTime) {
                        this.pickerSrv.updateTimeChange.next({
                            hour: inputDate.getHours(),
                            min: inputDate.getMinutes(),
                            seconds: inputDate.getSeconds()
                        });
                    }
                }
            });
            fromEvent(this.datepickerInput.nativeElement, 'blur').pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                if (!this.validateDate(this.dateValue)) {
                    this.dateValue = this.pickerSrv.curDate ?
                        this.datepickerConvert.format(this.pickerSrv.curDate, this.curFormat, this.i18nLocale) :
                        '';
                }
            });
        }
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18n.langChange().pipe(takeUntil(this.unsubscribe$)).subscribe((data) => {
            this.i18nLocale = data.locale;
            this.i18nText = data.datePickerPro;
        });
    }
    validateDate(value) {
        const valueDate = this.datepickerConvert.parse(value, this.curFormat);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.datepickerConvert.format(valueDate, this.curFormat, this.i18nLocale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat && !this.pickerSrv.dateInRange(valueDate))) {
            return false;
        }
        else {
            return true;
        }
    }
    formatDateToString(date) {
        return this.datepickerConvert.format(date, this.curFormat);
    }
    clear(event, isHandle) {
        if (event) {
            event.stopPropagation();
        }
        if (this.disabled && isHandle) {
            return;
        }
        this.pickerSrv.updateDateValue.next({
            type: 'single',
            value: null
        });
        this.pickerSrv.updateTimeChange.next({
            hour: null,
            min: null,
            seconds: null
        });
        this.dateValue = null;
        this.pickerSrv.curDate = null;
        if (event) {
            this.onChange(this.pickerSrv.curDate);
        }
    }
    onToggle(isOpen) {
        if (isOpen !== this.isOpen || isOpen) {
            this.dropdownToggle.emit(isOpen);
        }
        this.isOpen = isOpen;
        this.pickerSrv.toggleEvent.next(isOpen);
    }
    openDropdown(event) {
        if (this.isOpen) {
            event.stopPropagation();
        }
        this.isOpen = true;
        setTimeout(() => {
            var _a;
            if ((_a = this.datepickerInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                this.datepickerInput.nativeElement.focus();
            }
        });
    }
    writeValue(value) {
        if (!value || !this.pickerSrv.dateInRange(new Date(value))) {
            this.clear();
            return;
        }
        this.dateValue = this.formatDateToString(value);
        this.pickerSrv.curDate = value;
        this.pickerSrv.updateDateValue.next({
            type: 'single',
            value
        });
        if (this.showTime) {
            this.pickerSrv.updateTimeChange.next({
                hour: value.getHours(),
                min: value.getMinutes(),
                seconds: value.getSeconds()
            });
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
DatepickerProComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProComponent, deps: [{ token: i1.I18nService }, { token: DatepickerProService }], target: i0.ɵɵFactoryTarget.Component });
DatepickerProComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DatepickerProComponent, selector: "d-datepicker-pro", inputs: { mode: "mode", showTime: "showTime", disabled: "disabled", autoOpen: "autoOpen", format: "format", cssClass: "cssClass", showAnimation: "showAnimation", appendToBody: "appendToBody", width: "width", placeholder: "placeholder", allowClear: "allowClear", calenderRange: "calenderRange", minDate: "minDate", maxDate: "maxDate", markedRangeDateList: "markedRangeDateList", markedDateList: "markedDateList" }, outputs: { dropdownToggle: "dropdownToggle", confirmEvent: "confirmEvent" }, providers: [
        DatepickerProService,
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatepickerProComponent),
            multi: true
        }
    ], queries: [{ propertyName: "customTemplate", first: true, predicate: ["customTemplate"], descendants: true }, { propertyName: "footerTemplate", first: true, predicate: ["footerTemplate"], descendants: true }, { propertyName: "hostTemplate", first: true, predicate: ["hostTemplate"], descendants: true }, { propertyName: "markDateInfoTemplate", first: true, predicate: ["markDateInfoTemplate"], descendants: true }], viewQueries: [{ propertyName: "datepickerInput", first: true, predicate: ["dateInput"], descendants: true }], ngImport: i0, template: "<div\n  class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n  *ngIf=\"appendToBody; else normal\"\n  dDropDown\n  appendToBody\n  [disabled]=\"disabled\"\n  [isOpen]=\"isOpen\"\n  [trigger]=\"'manually'\"\n  (toggleEvent)=\"onToggle($event)\"\n  (click)=\"openDropdown($event)\"\n  [closeScope]=\"'blank'\"\n  [showAnimation]=\"showAnimation\"\n  [ngStyle]=\"{ width: width || '250px' }\"\n>\n  <div dDropDownToggle>\n    <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ value: dateValue }\"></ng-template>\n  </div>\n\n  <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n    <d-datepicker-panel\n      [isRangeType]=\"false\"\n      [showTime]=\"showTime\"\n      [customTemplate]=\"customTemplate\"\n      [footerTemplate]=\"footerTemplate\"\n      [mode]=\"mode\"\n    >\n    </d-datepicker-panel>\n  </div>\n</div>\n\n<ng-template #normal>\n  <div\n    class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n    dDropDown\n    [disabled]=\"disabled\"\n    [isOpen]=\"isOpen\"\n    [trigger]=\"'manually'\"\n    (toggleEvent)=\"onToggle($event)\"\n    (click)=\"openDropdown($event)\"\n    [closeScope]=\"'blank'\"\n    [showAnimation]=\"showAnimation\"\n    [ngStyle]=\"{ width: width || '250px' }\"\n  >\n    <div dDropDownToggle>\n      <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ value: dateValue }\"></ng-template>\n    </div>\n\n    <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n      <d-datepicker-panel\n        [isRangeType]=\"false\"\n        [showTime]=\"showTime\"\n        [customTemplate]=\"customTemplate\"\n        [footerTemplate]=\"footerTemplate\"\n        [mode]=\"mode\"\n      >\n      </d-datepicker-panel>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #default>\n  <div\n    class=\"devui-single-picker devui-input-group devui-dropdown-origin\"\n    [ngClass]=\"{\n      'devui-disabled': disabled,\n      'devui-has-value': dateValue\n    }\"\n  >\n    <i class=\"devui-single-picker-icon\">\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M5,0 L5,1 L11,1 L11,0 L12,0 L12,1 L14,1 C15.1045695,1 16,1.8954305 16,3 L16,14 C16,15.1045695 15.1045695,16 14,16 L2,16 C0.8954305,16 0,15.1045695 0,14 L0,3 C0,1.8954305 0.8954305,1 2,1 L4,1 L4,0 L5,0 Z M15,5 L1,5 L1,14 C1,14.5522847 1.44771525,15 2,15 L14,15 C14.5522847,15 15,14.5522847 15,14 L15,5 Z M6,7 C6.55228475,7 7,7.44771525 7,8 L7,10 C7,10.5522847 6.55228475,11 6,11 L4,11 C3.44771525,11 3,10.5522847 3,10 L3,8 C3,7.44771525 3.44771525,7 4,7 L6,7 Z M6,8 L4,8 L4,10 L6,10 L6,8 Z M4,2 L2,2 C1.44771525,2 1,2.44771525 1,3 L1,4 L15,4 L15,3 C15,2.44771525 14.5522847,2 14,2 L12,2 L12,3 L11,3 L11,2 L5,2 L5,3 L4,3 L4,2 Z\"\n            fill=\"#BABBC0\"\n          ></path>\n        </g>\n      </svg>\n    </i>\n    <input\n      #dateInput\n      class=\"devui-input devui-form-control\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder || i18nText?.placeholder\"\n      [(ngModel)]=\"dateValue\"\n      autocomplete=\"off\"\n    />\n    <div *ngIf=\"allowClear\" class=\"devui-input-group-addon close-icon-wrapper\" (click)=\"clear($event, true)\">\n      <div class=\"close-icon\">\n        <svg\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-datepicker-pro-wrapper{display:inline-block;background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-datepicker-pro-wrapper .devui-single-picker{padding-left:8px;position:relative;box-sizing:border-box;width:100%;min-height:24px}.devui-datepicker-pro-wrapper .devui-single-picker .devui-input{padding:4px 8px;width:calc(100% - 16px)}.devui-datepicker-pro-wrapper .devui-single-picker-icon{vertical-align:bottom}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper{padding:0 8px;vertical-align:baseline;visibility:hidden}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon{width:16px;height:16px;display:inline-block;line-height:12px}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon svg{vertical-align:middle;position:relative;top:-.1em}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon svg path{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon:hover svg path{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.devui-datepicker-pro-wrapper .devui-single-picker.devui-has-value:hover:not(.devui-disabled) .close-icon-wrapper{visibility:visible}.devui-datepicker-pro-wrapper .devui-single-picker:not(.devui-disabled) .close-icon-wrapper{cursor:pointer}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input{display:inline-block}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input::-ms-clear{display:none}\n"], components: [{ type: i3$2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }, { type: DatepickerPanelComponent, selector: "d-datepicker-panel", inputs: ["isRangeType", "showTime", "showCustom", "customTemplate", "footerTemplate", "mode"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3$2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3$2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-datepicker-pro', providers: [
                        DatepickerProService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatepickerProComponent),
                            multi: true
                        }
                    ], preserveWhitespaces: false, template: "<div\n  class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n  *ngIf=\"appendToBody; else normal\"\n  dDropDown\n  appendToBody\n  [disabled]=\"disabled\"\n  [isOpen]=\"isOpen\"\n  [trigger]=\"'manually'\"\n  (toggleEvent)=\"onToggle($event)\"\n  (click)=\"openDropdown($event)\"\n  [closeScope]=\"'blank'\"\n  [showAnimation]=\"showAnimation\"\n  [ngStyle]=\"{ width: width || '250px' }\"\n>\n  <div dDropDownToggle>\n    <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ value: dateValue }\"></ng-template>\n  </div>\n\n  <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n    <d-datepicker-panel\n      [isRangeType]=\"false\"\n      [showTime]=\"showTime\"\n      [customTemplate]=\"customTemplate\"\n      [footerTemplate]=\"footerTemplate\"\n      [mode]=\"mode\"\n    >\n    </d-datepicker-panel>\n  </div>\n</div>\n\n<ng-template #normal>\n  <div\n    class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n    dDropDown\n    [disabled]=\"disabled\"\n    [isOpen]=\"isOpen\"\n    [trigger]=\"'manually'\"\n    (toggleEvent)=\"onToggle($event)\"\n    (click)=\"openDropdown($event)\"\n    [closeScope]=\"'blank'\"\n    [showAnimation]=\"showAnimation\"\n    [ngStyle]=\"{ width: width || '250px' }\"\n  >\n    <div dDropDownToggle>\n      <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ value: dateValue }\"></ng-template>\n    </div>\n\n    <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n      <d-datepicker-panel\n        [isRangeType]=\"false\"\n        [showTime]=\"showTime\"\n        [customTemplate]=\"customTemplate\"\n        [footerTemplate]=\"footerTemplate\"\n        [mode]=\"mode\"\n      >\n      </d-datepicker-panel>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #default>\n  <div\n    class=\"devui-single-picker devui-input-group devui-dropdown-origin\"\n    [ngClass]=\"{\n      'devui-disabled': disabled,\n      'devui-has-value': dateValue\n    }\"\n  >\n    <i class=\"devui-single-picker-icon\">\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M5,0 L5,1 L11,1 L11,0 L12,0 L12,1 L14,1 C15.1045695,1 16,1.8954305 16,3 L16,14 C16,15.1045695 15.1045695,16 14,16 L2,16 C0.8954305,16 0,15.1045695 0,14 L0,3 C0,1.8954305 0.8954305,1 2,1 L4,1 L4,0 L5,0 Z M15,5 L1,5 L1,14 C1,14.5522847 1.44771525,15 2,15 L14,15 C14.5522847,15 15,14.5522847 15,14 L15,5 Z M6,7 C6.55228475,7 7,7.44771525 7,8 L7,10 C7,10.5522847 6.55228475,11 6,11 L4,11 C3.44771525,11 3,10.5522847 3,10 L3,8 C3,7.44771525 3.44771525,7 4,7 L6,7 Z M6,8 L4,8 L4,10 L6,10 L6,8 Z M4,2 L2,2 C1.44771525,2 1,2.44771525 1,3 L1,4 L15,4 L15,3 C15,2.44771525 14.5522847,2 14,2 L12,2 L12,3 L11,3 L11,2 L5,2 L5,3 L4,3 L4,2 Z\"\n            fill=\"#BABBC0\"\n          ></path>\n        </g>\n      </svg>\n    </i>\n    <input\n      #dateInput\n      class=\"devui-input devui-form-control\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder || i18nText?.placeholder\"\n      [(ngModel)]=\"dateValue\"\n      autocomplete=\"off\"\n    />\n    <div *ngIf=\"allowClear\" class=\"devui-input-group-addon close-icon-wrapper\" (click)=\"clear($event, true)\">\n      <div class=\"close-icon\">\n        <svg\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-datepicker-pro-wrapper{display:inline-block;background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-datepicker-pro-wrapper .devui-single-picker{padding-left:8px;position:relative;box-sizing:border-box;width:100%;min-height:24px}.devui-datepicker-pro-wrapper .devui-single-picker .devui-input{padding:4px 8px;width:calc(100% - 16px)}.devui-datepicker-pro-wrapper .devui-single-picker-icon{vertical-align:bottom}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper{padding:0 8px;vertical-align:baseline;visibility:hidden}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon{width:16px;height:16px;display:inline-block;line-height:12px}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon svg{vertical-align:middle;position:relative;top:-.1em}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon svg path{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.devui-datepicker-pro-wrapper .devui-single-picker .close-icon-wrapper .close-icon:hover svg path{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.devui-datepicker-pro-wrapper .devui-single-picker.devui-has-value:hover:not(.devui-disabled) .close-icon-wrapper{visibility:visible}.devui-datepicker-pro-wrapper .devui-single-picker:not(.devui-disabled) .close-icon-wrapper{cursor:pointer}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input{display:inline-block}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input::-ms-clear{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: DatepickerProService }]; }, propDecorators: { mode: [{
                type: Input
            }], showTime: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autoOpen: [{
                type: Input
            }], format: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], width: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], allowClear: [{
                type: Input
            }], dropdownToggle: [{
                type: Output
            }], confirmEvent: [{
                type: Output
            }], calenderRange: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], markedRangeDateList: [{
                type: Input
            }], markedDateList: [{
                type: Input
            }], customTemplate: [{
                type: ContentChild,
                args: ['customTemplate']
            }], footerTemplate: [{
                type: ContentChild,
                args: ['footerTemplate']
            }], hostTemplate: [{
                type: ContentChild,
                args: ['hostTemplate']
            }], markDateInfoTemplate: [{
                type: ContentChild,
                args: ['markDateInfoTemplate']
            }], datepickerInput: [{
                type: ViewChild,
                args: ['dateInput']
            }] } });

class RangeDatepickerProComponent {
    constructor(i18n, pickerSrv, cdr) {
        this.i18n = i18n;
        this.pickerSrv = pickerSrv;
        this.cdr = cdr;
        this.mode = 'date';
        this.showTime = false;
        this.disabled = false;
        this.autoOpen = false;
        this.splitter = '-';
        this.startIndexOfWeek = 0;
        this.appendToBody = true;
        this.allowClear = true;
        this.dropdownToggle = new EventEmitter();
        this.confirmEvent = new EventEmitter();
        this._dateValue = [];
        this.unsubscribe$ = new Subject();
        this.isOpen = false;
        this.strWidth = 0;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.inputChangeCallback = (type) => {
            const targetValue = type === 'start' ? this.dateValue[0] : this.dateValue[1];
            if (!targetValue) {
                return;
            }
            const inputDate = this.datepickerConvert.parse(targetValue, this.curFormat);
            const curDate = type === 'start' ? this.pickerSrv.curRangeDate[0] : this.pickerSrv.curRangeDate[1];
            if (inputDate instanceof Date && inputDate.getTime() === (curDate === null || curDate === void 0 ? void 0 : curDate.getTime())) {
                return;
            }
            if (this.validateDate(targetValue)) {
                if (type === 'start') {
                    this.pickerSrv.curRangeDate[0] = inputDate;
                }
                else {
                    this.pickerSrv.curRangeDate[1] = inputDate;
                }
                this.pickerSrv.updateDateValue.next({
                    type: 'range',
                    value: this.pickerSrv.curRangeDate
                });
                if (this.showTime) {
                    this.pickerSrv.updateTimeChange.next({
                        activeInput: type,
                        hour: inputDate.getHours(),
                        min: inputDate.getMinutes(),
                        seconds: inputDate.getSeconds()
                    });
                }
            }
        };
        this.inputBlurCallback = (type) => {
            const targetValue = type === 'start' ? this.dateValue[0] : this.dateValue[1];
            if (!this.validateDate(targetValue)) {
                if (type === 'start') {
                    this.dateValue[0] = this.pickerSrv.curRangeDate[0] ?
                        this.datepickerConvert.format(this.pickerSrv.curRangeDate[0], this.curFormat, this.locale || this.i18nLocale) :
                        '';
                }
                else {
                    this.dateValue[1] = this.pickerSrv.curRangeDate[1] ?
                        this.datepickerConvert.format(this.pickerSrv.curRangeDate[1], this.curFormat, this.locale || this.i18nLocale) :
                        '';
                }
            }
            this.getStrWidth();
        };
        this.i18nText = this.i18n.getI18nText().datePickerPro;
        this.datepickerConvert = new DefaultDateConverter();
    }
    set calenderRange(value) {
        this.pickerSrv.calendarRange = value || [1970, 2099];
    }
    set minDate(value) {
        if (!value) {
            return;
        }
        this.pickerSrv.minDate = value;
    }
    set maxDate(value) {
        if (!value) {
            return;
        }
        this.pickerSrv.maxDate = value;
    }
    set markedRangeDateList(value) {
        this.pickerSrv.markedRangeDateList = value;
    }
    ;
    set markedDateList(value) {
        this.pickerSrv.markedDateList = value;
    }
    set markDateInfoTemplate(tmp) {
        this.pickerSrv.markDateInfoTemplate = tmp;
    }
    ;
    get dateValue() {
        return this._dateValue;
    }
    set dateValue(value) {
        this._dateValue = value;
        this.getStrWidth();
    }
    set currentActiveInput(value) {
        this.pickerSrv.currentActiveInput = value;
    }
    get currentActiveInput() {
        return this.pickerSrv.currentActiveInput;
    }
    get dateConfig() {
        return {
            dateConverter: this.datepickerConvert,
            min: this.pickerSrv.minDate || new Date(this.pickerSrv.calendarRange[0] + '/01/01'),
            max: this.pickerSrv.maxDate || new Date(this.pickerSrv.calendarRange[1] + '/12/31'),
            format: {
                date: this.format || 'y/MM/dd',
                time: this.format || 'y/MM/dd HH:mm:ss',
                month: this.format || 'y-MM',
                year: 'y'
            }
        };
    }
    get curFormat() {
        if (this.mode === 'year') {
            return this.dateConfig.format.year;
        }
        else if (this.mode === 'month') {
            return this.dateConfig.format.month;
        }
        else {
            return this.showTime ? this.dateConfig.format.time : this.dateConfig.format.date;
        }
    }
    get curActiveDate() {
        if (this.pickerSrv.currentActiveInput === 'start') {
            return this.pickerSrv.curRangeDate[0] || this.pickerSrv.curRangeDate[1] || new Date();
        }
        else {
            return this.pickerSrv.curRangeDate[1] || this.pickerSrv.curRangeDate[0] || new Date();
        }
    }
    ngOnInit() {
        this.initSrvStatus();
        this.setI18nText();
        setTimeout(() => {
            this.isOpen = this.autoOpen;
        });
    }
    ngAfterViewInit() {
        this.initObservable();
    }
    initSrvStatus() {
        this.pickerSrv.showTime = this.showTime;
        this.pickerSrv.isRange = true;
        this.pickerSrv.startIndexOfWeek = this.startIndexOfWeek;
    }
    initObservable() {
        this.pickerSrv.selectedDateChange.pipe(takeUntil(this.unsubscribe$)).subscribe(change => {
            this.pickerSrv.curRangeDate = change.value;
            this.dateValue = change.value.map(d => this.formatDateToString(d));
            this.onChange(change.value);
        });
        this.pickerSrv.closeDropdownEvent.pipe(takeUntil(this.unsubscribe$)).subscribe(isConfirm => {
            this.isOpen = false;
            this.dropdownToggle.emit(false);
            if (isConfirm) {
                this.confirmEvent.emit(this.pickerSrv.curRangeDate);
            }
        });
        this.pickerSrv.activeInputChange.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
            this.getStrWidth();
        });
        if (!this.hostTemplate) {
            fromEvent(this.datepickerInputStart.nativeElement, 'input').pipe(takeUntil(this.unsubscribe$), map(t => {
                this.getStrWidth();
                return 'start';
            }), debounceTime(300)).subscribe(this.inputChangeCallback);
            fromEvent(this.datepickerInputEnd.nativeElement, 'input').pipe(takeUntil(this.unsubscribe$), map(t => {
                this.getStrWidth();
                return 'end';
            }), debounceTime(300)).subscribe(this.inputChangeCallback);
            fromEvent(this.datepickerInputStart.nativeElement, 'blur').pipe(takeUntil(this.unsubscribe$), map(t => 'start')).subscribe(this.inputBlurCallback);
            fromEvent(this.datepickerInputEnd.nativeElement, 'blur').pipe(takeUntil(this.unsubscribe$), map(t => 'end')).subscribe(this.inputBlurCallback);
        }
        if (this.showTime) {
            this.pickerSrv.selectedTimeChange.pipe(takeUntil(this.unsubscribe$)).subscribe(change => {
                const curTime = new Date(this.curActiveDate.getTime()).setHours(change.hour, change.min, change.seconds);
                const curDate = new Date(curTime);
                if (change.activeInput === 'start') {
                    this.pickerSrv.curRangeDate[0] = curDate;
                    if (this.isSameDateAndTimeWrong()) {
                        this.pickerSrv.curRangeDate[1] = curDate;
                        this.dateValue[1] = this.formatDateToString(curDate);
                    }
                    this.dateValue = [this.formatDateToString(curDate), this.dateValue[1]];
                }
                else {
                    this.pickerSrv.curRangeDate[1] = curDate;
                    if (this.isSameDateAndTimeWrong()) {
                        this.pickerSrv.curRangeDate[0] = curDate;
                        this.dateValue[0] = this.formatDateToString(curDate);
                    }
                    this.dateValue = [this.dateValue[0], this.formatDateToString(curDate)];
                }
                this.onChange(this.pickerSrv.curRangeDate);
            });
        }
    }
    isSameDateAndTimeWrong() {
        var _a, _b;
        if (((_a = this.pickerSrv.curRangeDate[0]) === null || _a === void 0 ? void 0 : _a.toDateString()) === ((_b = this.pickerSrv.curRangeDate[1]) === null || _b === void 0 ? void 0 : _b.toDateString())) {
            return this.pickerSrv.curRangeDate[0].getTime() > this.pickerSrv.curRangeDate[1].getTime();
        }
        return false;
    }
    getStrWidth() {
        let str = this.pickerSrv.currentActiveInput === 'start' ? this.dateValue[0] : this.dateValue[1];
        if (!str || !str.length) {
            str = this.pickerSrv.currentActiveInput === 'start' ? this.i18nText.startPlaceholder : this.i18nText.endPlaceholder;
        }
        this.strWidth = this.pickerSrv.mearsureStrWidth(str);
    }
    formatDateToString(date) {
        if (!date) {
            return '';
        }
        return this.datepickerConvert.format(date, this.curFormat);
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18n.langChange().pipe(takeUntil(this.unsubscribe$)).subscribe((data) => {
            this.i18nLocale = data.locale;
            this.i18nText = data.datePickerPro;
        });
    }
    focusChange(type) {
        if (!this.isOpen) {
            type = 'start';
        }
        this.currentActiveInput = type;
        this.pickerSrv.activeInputChange.next(type);
        if (type === 'start') {
            setTimeout(() => {
                var _a;
                if ((_a = this.datepickerInputStart) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    this.datepickerInputStart.nativeElement.focus();
                }
            });
        }
        else {
            setTimeout(() => {
                var _a;
                if ((_a = this.datepickerInputEnd) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    this.datepickerInputEnd.nativeElement.focus();
                }
            });
        }
    }
    validateDate(value) {
        const valueDate = this.datepickerConvert.parse(value, this.curFormat);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.datepickerConvert.format(valueDate, this.curFormat, this.locale || this.i18nLocale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat && !this.pickerSrv.dateInRange(valueDate))) {
            return false;
        }
        else {
            return true;
        }
    }
    onToggle(isOpen) {
        if (isOpen !== this.isOpen || isOpen) {
            this.dropdownToggle.emit(isOpen);
        }
        this.isOpen = isOpen;
        this.pickerSrv.toggleEvent.next(isOpen);
    }
    openDropdown(event) {
        if (this.isOpen) {
            event.stopPropagation();
        }
        this.isOpen = true;
    }
    clear(event, isHandle) {
        if (event) {
            event.stopPropagation();
        }
        if (this.disabled && isHandle) {
            return;
        }
        this.pickerSrv.updateDateValue.next({
            type: 'range',
            value: []
        });
        this.pickerSrv.updateTimeChange.next({
            hour: null,
            min: null,
            seconds: null
        });
        this.dateValue = [];
        this.pickerSrv.curRangeDate = [];
        this.currentActiveInput = 'start';
        if (event) {
            this.onChange(this.pickerSrv.curRangeDate);
        }
    }
    writeValue(value) {
        if (!value || !value.length) {
            this.clear();
            return;
        }
        if (value.find(t => !this.pickerSrv.dateInRange(t))) {
            return;
        }
        this.dateValue = value.map(d => {
            return d ? this.datepickerConvert.format(d, this.curFormat) : '';
        });
        this.pickerSrv.curRangeDate = value;
        this.pickerSrv.updateDateValue.next({
            type: 'range',
            value
        });
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
}
RangeDatepickerProComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: RangeDatepickerProComponent, deps: [{ token: i1.I18nService }, { token: DatepickerProService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
RangeDatepickerProComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: RangeDatepickerProComponent, selector: "d-range-datepicker-pro", inputs: { mode: "mode", showTime: "showTime", disabled: "disabled", autoOpen: "autoOpen", format: "format", locale: "locale", cssClass: "cssClass", splitter: "splitter", width: "width", startIndexOfWeek: "startIndexOfWeek", appendToBody: "appendToBody", placeholder: "placeholder", allowClear: "allowClear", calenderRange: "calenderRange", minDate: "minDate", maxDate: "maxDate", markedRangeDateList: "markedRangeDateList", markedDateList: "markedDateList" }, outputs: { dropdownToggle: "dropdownToggle", confirmEvent: "confirmEvent" }, providers: [
        DatepickerProService,
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => RangeDatepickerProComponent),
            multi: true
        }
    ], queries: [{ propertyName: "customTemplate", first: true, predicate: ["customTemplate"], descendants: true }, { propertyName: "footerTemplate", first: true, predicate: ["footerTemplate"], descendants: true }, { propertyName: "hostTemplate", first: true, predicate: ["hostTemplate"], descendants: true }, { propertyName: "markDateInfoTemplate", first: true, predicate: ["markDateInfoTemplate"], descendants: true }], viewQueries: [{ propertyName: "datepickerInputStart", first: true, predicate: ["dateInputStart"], descendants: true }, { propertyName: "datepickerInputEnd", first: true, predicate: ["dateInputEnd"], descendants: true }], ngImport: i0, template: "<div\n  class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n  *ngIf=\"appendToBody; else normal\"\n  dDropDown\n  appendToBody\n  [disabled]=\"disabled\"\n  [isOpen]=\"isOpen\"\n  [trigger]=\"'manually'\"\n  (toggleEvent)=\"onToggle($event)\"\n  (click)=\"openDropdown($event)\"\n  [closeScope]=\"'blank'\"\n  [ngStyle]=\"{ width: width || (showTime ? '400px' : '300px') }\"\n>\n  <div dDropDownToggle>\n    <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ values: dateValue }\"></ng-template>\n  </div>\n\n  <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n    <d-datepicker-panel\n      [isRangeType]=\"true\"\n      [showTime]=\"showTime\"\n      [customTemplate]=\"customTemplate\"\n      [footerTemplate]=\"footerTemplate\"\n      [mode]=\"mode\"\n    >\n    </d-datepicker-panel>\n  </div>\n</div>\n\n<ng-template #normal>\n  <div\n    class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n    dDropDown\n    [disabled]=\"disabled\"\n    [isOpen]=\"isOpen\"\n    [trigger]=\"'manually'\"\n    (toggleEvent)=\"onToggle($event)\"\n    (click)=\"openDropdown($event)\"\n    [closeScope]=\"'blank'\"\n    [ngStyle]=\"{ width: width || (showTime ? '400px' : '300px') }\"\n  >\n    <div dDropDownToggle>\n      <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ values: dateValue }\"></ng-template>\n    </div>\n\n    <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n      <d-datepicker-panel\n        [isRangeType]=\"true\"\n        [showTime]=\"showTime\"\n        [customTemplate]=\"customTemplate\"\n        [footerTemplate]=\"footerTemplate\"\n        [mode]=\"mode\"\n      >\n      </d-datepicker-panel>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #default>\n  <div\n    class=\"devui-range-picker devui-input-group devui-dropdown-origin\"\n    [ngClass]=\"{\n      'devui-disabled': disabled,\n      'devui-has-value': dateValue[0] || dateValue[1]\n    }\"\n  >\n    <i class=\"devui-range-picker-icon\">\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M5,0 L5,1 L11,1 L11,0 L12,0 L12,1 L14,1 C15.1045695,1 16,1.8954305 16,3 L16,14 C16,15.1045695 15.1045695,16 14,16 L2,16 C0.8954305,16 0,15.1045695 0,14 L0,3 C0,1.8954305 0.8954305,1 2,1 L4,1 L4,0 L5,0 Z M15,5 L1,5 L1,14 C1,14.5522847 1.44771525,15 2,15 L14,15 C14.5522847,15 15,14.5522847 15,14 L15,5 Z M6,7 C6.55228475,7 7,7.44771525 7,8 L7,10 C7,10.5522847 6.55228475,11 6,11 L4,11 C3.44771525,11 3,10.5522847 3,10 L3,8 C3,7.44771525 3.44771525,7 4,7 L6,7 Z M6,8 L4,8 L4,10 L6,10 L6,8 Z M4,2 L2,2 C1.44771525,2 1,2.44771525 1,3 L1,4 L15,4 L15,3 C15,2.44771525 14.5522847,2 14,2 L12,2 L12,3 L11,3 L11,2 L5,2 L5,3 L4,3 L4,2 Z\"\n            fill=\"#BABBC0\"\n          ></path>\n        </g>\n      </svg>\n    </i>\n    <input\n      #dateInputStart\n      class=\"devui-input devui-form-control devui-date-start\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'start' && isOpen }\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"(placeholder && placeholder[0]) || i18nText.startPlaceholder\"\n      [(ngModel)]=\"dateValue[0]\"\n      (click)=\"focusChange('start')\"\n      autocomplete=\"off\"\n    />\n    <span> {{ splitter }} </span>\n    <input\n      #dateInputEnd\n      class=\"devui-input devui-form-control devui-date-end\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'end' && isOpen }\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"(placeholder && placeholder[1]) || i18nText.endPlaceholder\"\n      [(ngModel)]=\"dateValue[1]\"\n      (click)=\"focusChange('end')\"\n      autocomplete=\"off\"\n    />\n    <div\n      class=\"devui-date-input-active-bar\"\n      *ngIf=\"isOpen\"\n      [style.width.px]=\"strWidth\"\n      [ngClass]=\"{\n        'devui-start-side': currentActiveInput === 'start',\n        'devui-end-side': currentActiveInput === 'end'\n      }\"\n    ></div>\n    <div *ngIf=\"allowClear\" class=\"devui-input-group-addon close-icon-wrapper\" (click)=\"clear($event, true)\">\n      <div class=\"close-icon\">\n        <svg\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-datepicker-pro-wrapper{display:inline-block;background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-datepicker-pro-wrapper .devui-range-picker{padding:0 8px;position:relative;box-sizing:border-box;width:100%;min-height:24px}.devui-datepicker-pro-wrapper .devui-range-picker .devui-input{padding:4px 8px;width:calc(50% - 18px)}.devui-datepicker-pro-wrapper .devui-range-picker .devui-input.devui-active-input{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-datepicker-pro-wrapper .devui-range-picker .devui-date-input-active-bar{display:block;max-width:calc(50% - 48px);height:1px;background-color:#f2f2f3;background-color:var(--devui-brand-foil, #f2f2f3);position:absolute;bottom:0}.devui-datepicker-pro-wrapper .devui-range-picker .devui-date-input-active-bar.devui-start-side{left:35px}.devui-datepicker-pro-wrapper .devui-range-picker .devui-date-input-active-bar.devui-end-side{left:calc(50% + 20px)}.devui-datepicker-pro-wrapper .devui-range-picker-icon{vertical-align:bottom}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper{padding:0 8px;visibility:hidden;position:absolute;right:0;top:0;line-height:25px}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon{width:16px;height:16px;display:inline-block;line-height:16px}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon svg{vertical-align:middle;position:relative;top:-.1em}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon svg path{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon:hover svg path{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.devui-datepicker-pro-wrapper .devui-range-picker.devui-has-value:hover .close-icon-wrapper{visibility:visible}.devui-datepicker-pro-wrapper .devui-range-picker:not(.devui-disabled) .close-icon-wrapper{cursor:pointer}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input{display:inline-block}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input::-ms-clear{display:none}\n"], components: [{ type: i3$2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }, { type: DatepickerPanelComponent, selector: "d-datepicker-panel", inputs: ["isRangeType", "showTime", "showCustom", "customTemplate", "footerTemplate", "mode"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3$2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3$2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: RangeDatepickerProComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-range-datepicker-pro', providers: [
                        DatepickerProService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RangeDatepickerProComponent),
                            multi: true
                        }
                    ], preserveWhitespaces: false, template: "<div\n  class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n  *ngIf=\"appendToBody; else normal\"\n  dDropDown\n  appendToBody\n  [disabled]=\"disabled\"\n  [isOpen]=\"isOpen\"\n  [trigger]=\"'manually'\"\n  (toggleEvent)=\"onToggle($event)\"\n  (click)=\"openDropdown($event)\"\n  [closeScope]=\"'blank'\"\n  [ngStyle]=\"{ width: width || (showTime ? '400px' : '300px') }\"\n>\n  <div dDropDownToggle>\n    <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ values: dateValue }\"></ng-template>\n  </div>\n\n  <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n    <d-datepicker-panel\n      [isRangeType]=\"true\"\n      [showTime]=\"showTime\"\n      [customTemplate]=\"customTemplate\"\n      [footerTemplate]=\"footerTemplate\"\n      [mode]=\"mode\"\n    >\n    </d-datepicker-panel>\n  </div>\n</div>\n\n<ng-template #normal>\n  <div\n    class=\"devui-datepicker-pro-wrapper {{ cssClass }}\"\n    dDropDown\n    [disabled]=\"disabled\"\n    [isOpen]=\"isOpen\"\n    [trigger]=\"'manually'\"\n    (toggleEvent)=\"onToggle($event)\"\n    (click)=\"openDropdown($event)\"\n    [closeScope]=\"'blank'\"\n    [ngStyle]=\"{ width: width || (showTime ? '400px' : '300px') }\"\n  >\n    <div dDropDownToggle>\n      <ng-template [ngTemplateOutlet]=\"hostTemplate || default\" [ngTemplateOutletContext]=\"{ values: dateValue }\"></ng-template>\n    </div>\n\n    <div class=\"devui-datepicker-pro-dropdown-panel\" [ngStyle]=\"{ paddingBottom: !showTime && !footerTemplate ? 0 : '4px' }\" dDropDownMenu>\n      <d-datepicker-panel\n        [isRangeType]=\"true\"\n        [showTime]=\"showTime\"\n        [customTemplate]=\"customTemplate\"\n        [footerTemplate]=\"footerTemplate\"\n        [mode]=\"mode\"\n      >\n      </d-datepicker-panel>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #default>\n  <div\n    class=\"devui-range-picker devui-input-group devui-dropdown-origin\"\n    [ngClass]=\"{\n      'devui-disabled': disabled,\n      'devui-has-value': dateValue[0] || dateValue[1]\n    }\"\n  >\n    <i class=\"devui-range-picker-icon\">\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M5,0 L5,1 L11,1 L11,0 L12,0 L12,1 L14,1 C15.1045695,1 16,1.8954305 16,3 L16,14 C16,15.1045695 15.1045695,16 14,16 L2,16 C0.8954305,16 0,15.1045695 0,14 L0,3 C0,1.8954305 0.8954305,1 2,1 L4,1 L4,0 L5,0 Z M15,5 L1,5 L1,14 C1,14.5522847 1.44771525,15 2,15 L14,15 C14.5522847,15 15,14.5522847 15,14 L15,5 Z M6,7 C6.55228475,7 7,7.44771525 7,8 L7,10 C7,10.5522847 6.55228475,11 6,11 L4,11 C3.44771525,11 3,10.5522847 3,10 L3,8 C3,7.44771525 3.44771525,7 4,7 L6,7 Z M6,8 L4,8 L4,10 L6,10 L6,8 Z M4,2 L2,2 C1.44771525,2 1,2.44771525 1,3 L1,4 L15,4 L15,3 C15,2.44771525 14.5522847,2 14,2 L12,2 L12,3 L11,3 L11,2 L5,2 L5,3 L4,3 L4,2 Z\"\n            fill=\"#BABBC0\"\n          ></path>\n        </g>\n      </svg>\n    </i>\n    <input\n      #dateInputStart\n      class=\"devui-input devui-form-control devui-date-start\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'start' && isOpen }\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"(placeholder && placeholder[0]) || i18nText.startPlaceholder\"\n      [(ngModel)]=\"dateValue[0]\"\n      (click)=\"focusChange('start')\"\n      autocomplete=\"off\"\n    />\n    <span> {{ splitter }} </span>\n    <input\n      #dateInputEnd\n      class=\"devui-input devui-form-control devui-date-end\"\n      [ngClass]=\"{ 'devui-active-input': currentActiveInput === 'end' && isOpen }\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"(placeholder && placeholder[1]) || i18nText.endPlaceholder\"\n      [(ngModel)]=\"dateValue[1]\"\n      (click)=\"focusChange('end')\"\n      autocomplete=\"off\"\n    />\n    <div\n      class=\"devui-date-input-active-bar\"\n      *ngIf=\"isOpen\"\n      [style.width.px]=\"strWidth\"\n      [ngClass]=\"{\n        'devui-start-side': currentActiveInput === 'start',\n        'devui-end-side': currentActiveInput === 'end'\n      }\"\n    ></div>\n    <div *ngIf=\"allowClear\" class=\"devui-input-group-addon close-icon-wrapper\" (click)=\"clear($event, true)\">\n      <div class=\"close-icon\">\n        <svg\n          width=\"16px\"\n          height=\"16px\"\n          viewBox=\"0 0 16 16\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <path\n              d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-datepicker-pro-wrapper{display:inline-block;background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}.devui-datepicker-pro-wrapper .devui-range-picker{padding:0 8px;position:relative;box-sizing:border-box;width:100%;min-height:24px}.devui-datepicker-pro-wrapper .devui-range-picker .devui-input{padding:4px 8px;width:calc(50% - 18px)}.devui-datepicker-pro-wrapper .devui-range-picker .devui-input.devui-active-input{color:#5e7ce0;color:var(--devui-brand, #5e7ce0)}.devui-datepicker-pro-wrapper .devui-range-picker .devui-date-input-active-bar{display:block;max-width:calc(50% - 48px);height:1px;background-color:#f2f2f3;background-color:var(--devui-brand-foil, #f2f2f3);position:absolute;bottom:0}.devui-datepicker-pro-wrapper .devui-range-picker .devui-date-input-active-bar.devui-start-side{left:35px}.devui-datepicker-pro-wrapper .devui-range-picker .devui-date-input-active-bar.devui-end-side{left:calc(50% + 20px)}.devui-datepicker-pro-wrapper .devui-range-picker-icon{vertical-align:bottom}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper{padding:0 8px;visibility:hidden;position:absolute;right:0;top:0;line-height:25px}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon{width:16px;height:16px;display:inline-block;line-height:16px}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon svg{vertical-align:middle;position:relative;top:-.1em}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon svg path{fill:#d7d8da;fill:var(--devui-shape-icon-fill, #d7d8da)}.devui-datepicker-pro-wrapper .devui-range-picker .close-icon-wrapper .close-icon:hover svg path{fill:#babbc0;fill:var(--devui-shape-icon-fill-active, #babbc0)}.devui-datepicker-pro-wrapper .devui-range-picker.devui-has-value:hover .close-icon-wrapper{visibility:visible}.devui-datepicker-pro-wrapper .devui-range-picker:not(.devui-disabled) .close-icon-wrapper{cursor:pointer}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input{display:inline-block}.devui-datepicker-pro-wrapper .devui-input-group>.devui-input::-ms-clear{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: DatepickerProService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { mode: [{
                type: Input
            }], showTime: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autoOpen: [{
                type: Input
            }], format: [{
                type: Input
            }], locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], splitter: [{
                type: Input
            }], width: [{
                type: Input
            }], startIndexOfWeek: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], allowClear: [{
                type: Input
            }], calenderRange: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], markedRangeDateList: [{
                type: Input
            }], markedDateList: [{
                type: Input
            }], dropdownToggle: [{
                type: Output
            }], confirmEvent: [{
                type: Output
            }], customTemplate: [{
                type: ContentChild,
                args: ['customTemplate']
            }], footerTemplate: [{
                type: ContentChild,
                args: ['footerTemplate']
            }], hostTemplate: [{
                type: ContentChild,
                args: ['hostTemplate']
            }], markDateInfoTemplate: [{
                type: ContentChild,
                args: ['markDateInfoTemplate']
            }], datepickerInputStart: [{
                type: ViewChild,
                args: ['dateInputStart']
            }], datepickerInputEnd: [{
                type: ViewChild,
                args: ['dateInputEnd']
            }] } });

class DatepickerProModule {
}
DatepickerProModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DatepickerProModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProModule, declarations: [DatepickerProComponent,
        DatepickerPanelComponent,
        TimepickerPanelComponent,
        FooterPanelComponent,
        CalendarPanelComponent,
        MonthPanelComponent,
        YearPanelComponent,
        RangeDatepickerProComponent,
        DatepickerProCalendarComponent], imports: [CommonModule,
        FormsModule,
        DropDownModule,
        ScrollingModule,
        ButtonModule,
        PopoverModule], exports: [DatepickerProComponent,
        DatepickerPanelComponent,
        RangeDatepickerProComponent,
        DatepickerProCalendarComponent] });
DatepickerProModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProModule, providers: [
        DatepickerProCommonDataService
    ], imports: [[
            CommonModule,
            FormsModule,
            DropDownModule,
            ScrollingModule,
            ButtonModule,
            PopoverModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerProModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        DropDownModule,
                        ScrollingModule,
                        ButtonModule,
                        PopoverModule
                    ],
                    exports: [
                        DatepickerProComponent,
                        DatepickerPanelComponent,
                        RangeDatepickerProComponent,
                        DatepickerProCalendarComponent
                    ],
                    declarations: [
                        DatepickerProComponent,
                        DatepickerPanelComponent,
                        TimepickerPanelComponent,
                        FooterPanelComponent,
                        CalendarPanelComponent,
                        MonthPanelComponent,
                        YearPanelComponent,
                        RangeDatepickerProComponent,
                        DatepickerProCalendarComponent
                    ],
                    providers: [
                        DatepickerProCommonDataService
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CalendarPanelComponent, DatepickerPanelComponent, DatepickerProCalendarComponent, DatepickerProCommonDataService, DatepickerProComponent, DatepickerProModule, DatepickerProService, FooterPanelComponent, MonthPanelComponent, RangeDatepickerProComponent, TimepickerPanelComponent, YearPanelComponent };
//# sourceMappingURL=ng-devui-datepicker-pro.mjs.map
