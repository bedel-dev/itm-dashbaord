import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { NavMenu, SpriteMode, SpriteOption } from './nav-sprite.type';
import * as i0 from "@angular/core";
export declare class NavSpriteComponent implements OnInit, AfterViewInit, OnDestroy {
    private render;
    private element;
    private router;
    private activeRout;
    private render2;
    private cdr;
    private doc;
    target: HTMLElement;
    scrollTarget: HTMLElement;
    view: {
        top?: number;
        bottom?: number;
    };
    hashSupport: boolean;
    mode: SpriteMode;
    maxLevel: number;
    title: string;
    indent: number;
    width: number;
    height: number;
    isOpen: boolean;
    spriteOption: SpriteOption;
    navItemTemplate: TemplateRef<any>;
    spriteTemp: TemplateRef<any>;
    defaultTemp: TemplateRef<any>;
    defaultNavItemTemplate: TemplateRef<any>;
    items: QueryList<ElementRef>;
    afterNavInit: EventEmitter<any>;
    currentTemp: TemplateRef<any>;
    menus: NavMenu[];
    activeIndex: number;
    isToViewByNav: boolean;
    itemsInit: boolean;
    contents: any;
    targetContainer: HTMLElement;
    scrollSub: Subscription;
    isDragging: boolean;
    mouseenterSub: Subscription;
    itemsSub: Subscription;
    timeGap: number;
    document: Document;
    get baseUrl(): string;
    constructor(render: Renderer2, element: ElementRef, router: Router, activeRout: ActivatedRoute, render2: Renderer2, cdr: ChangeDetectorRef, doc: any);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setActiveIndex(): void;
    getNavData(setActive?: boolean): void;
    getScrollPosition(ele: any): {
        top: number;
        startLine: number;
    };
    scrollEventHandler(): void;
    menuScrollToTarget(): void;
    setActiveMenu(): void;
    initStyles(): void;
    setUrlHash(): void;
    setTargetActive(): void;
    navTo(index: any): void;
    cdkDragStarted(): void;
    cdkDragEnded(): void;
    hide(): void;
    open(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NavSpriteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NavSpriteComponent, "d-nav-sprite", never, { "target": "target"; "scrollTarget": "scrollTarget"; "view": "view"; "hashSupport": "hashSupport"; "mode": "mode"; "maxLevel": "maxLevel"; "title": "title"; "indent": "indent"; "width": "width"; "height": "height"; "isOpen": "isOpen"; "spriteOption": "spriteOption"; "navItemTemplate": "navItemTemplate"; }, { "afterNavInit": "afterNavInit"; }, never, never>;
}
