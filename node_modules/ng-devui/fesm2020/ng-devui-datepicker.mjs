import * as i0 from '@angular/core';
import { Injectable, EventEmitter, forwardRef, Component, Input, Output, HostListener, ViewChild, Inject, Directive, NgModule } from '@angular/core';
import * as i5 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import * as i2 from 'ng-devui/i18n';
import * as i3$1 from 'ng-devui/utils';
import { DefaultDateConverter, unshiftString, removeClassFromOrigin, addClassToOrigin, formWithDropDown, fadeInOut, WithConfig, AppendToBodyDirectionsConfig, AnimationDuration, AnimationCurves } from 'ng-devui/utils';
import { Subject, fromEvent } from 'rxjs';
import { distinctUntilChanged, map, filter, debounceTime } from 'rxjs/operators';
import * as i3 from 'ng-devui/button';
import { ButtonModule } from 'ng-devui/button';
import * as i4 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { __decorate, __metadata } from 'tslib';
import * as i5$1 from '@angular/cdk/overlay';
import { CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';
import * as i3$2 from '@angular/animations';
import { style, animate } from '@angular/animations';

var SelectDateChangeReason;
(function (SelectDateChangeReason) {
    SelectDateChangeReason[SelectDateChangeReason["date"] = 0] = "date";
    SelectDateChangeReason[SelectDateChangeReason["time"] = 1] = "time";
    SelectDateChangeReason[SelectDateChangeReason["button"] = 2] = "button";
    SelectDateChangeReason[SelectDateChangeReason["format"] = 3] = "format";
    SelectDateChangeReason[SelectDateChangeReason["custom"] = 4] = "custom";
})(SelectDateChangeReason || (SelectDateChangeReason = {}));

class DatePickerConfigService {
    constructor() {
        this.dateConfig = {
            timePicker: false,
            dateConverter: null,
            min: 1900,
            max: 2099,
            format: {
                date: 'y/MM/dd',
                time: 'y/MM/dd HH:mm:ss'
            }
        };
        this.defaultFormat = 'y/MM/dd';
    }
}
DatePickerConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerConfigService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DatePickerConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerConfigService, decorators: [{
            type: Injectable
        }] });

var SelectDateRangeChangeReason;
(function (SelectDateRangeChangeReason) {
    SelectDateRangeChangeReason[SelectDateRangeChangeReason["date"] = 0] = "date";
    SelectDateRangeChangeReason[SelectDateRangeChangeReason["time"] = 1] = "time";
    SelectDateRangeChangeReason[SelectDateRangeChangeReason["button"] = 2] = "button";
    SelectDateRangeChangeReason[SelectDateRangeChangeReason["format"] = 3] = "format";
    SelectDateRangeChangeReason[SelectDateRangeChangeReason["custom"] = 4] = "custom";
})(SelectDateRangeChangeReason || (SelectDateRangeChangeReason = {}));

class DatepickerComponent {
    constructor(elementRef, renderer2, datePickerConfig, changeDetectorRef, i18n) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.datePickerConfig = datePickerConfig;
        this.changeDetectorRef = changeDetectorRef;
        this.i18n = i18n;
        this.selectedDateChange = new EventEmitter();
        this.disabled = false;
        this.mode = 'date';
        this.yearNumber = 12;
        this._yearNumber = 12;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.clearAll = (reason) => {
            this.writeValue(null);
            this.selectedDate = null;
            const currentReason = typeof reason === 'number' ? reason : SelectDateChangeReason.custom;
            const dateObj = {
                reason: currentReason,
                selectedDate: null
            };
            // 清空时将null作为ngModelChange参数传出
            this.onChange(dateObj);
            this.selectedDateChange.emit(dateObj);
        };
        this.chooseDate = (date, event = {}, reason = SelectDateChangeReason.custom) => {
            const parseDate = this.dateConverter.parse(date, this.dateFormat);
            this.selectedDate = parseDate || new Date();
            this.onSelectDateChanged();
            this.onSelectDate(event, parseDate, undefined, reason);
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'inline-block');
        this.setI18nText();
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.hourOptions = new Array(24).fill(0).map((value, index) => this.fillLeft(index));
        this.minuteOptions = new Array(60).fill(0).map((value, index) => this.fillLeft(index));
        const nowDate = this.selectedDate || new Date();
        this.nowMinYear = (nowDate).getFullYear() - Math.floor(this._yearNumber / 2) < this.minDate.getFullYear() ?
            this.minDate.getFullYear() : (nowDate).getFullYear() - Math.floor(this._yearNumber / 2);
        this.nowMaxYear = (nowDate).getFullYear() + Math.floor(this._yearNumber / 2) > this.maxDate.getFullYear() ?
            this.maxDate.getFullYear() : (nowDate).getFullYear() + Math.floor(this._yearNumber / 2);
        this.initMode();
        this.onSelectDateChanged();
        this.onDisplayWeeksChange();
        this.onYearRangeChange();
        this.initDatePicker();
    }
    initMode() {
        if (this.mode === 'year') {
            this.openChooseYear = true;
            this.openChooseMonth = false;
            if (!this.selectedDate) {
                this.selectedDate = new Date();
            }
            if (this.maxDate.getTime() < this.selectedDate.getTime()) {
                this.selectedDate = new Date(this.maxDate);
            }
            if (this.minDate.getTime() > this.selectedDate.getTime()) {
                this.selectedDate = new Date(this.minDate);
            }
        }
        else if (this.mode === 'month') {
            this.openChooseYear = false;
            this.openChooseMonth = true;
            if (!this.selectedDate) {
                this.selectedDate = new Date();
            }
            if (this.maxDate.getTime() < this.selectedDate.getTime()) {
                this.selectedDate = new Date(this.maxDate);
            }
            if (this.minDate.getTime() > this.selectedDate.getTime()) {
                this.selectedDate = new Date(this.minDate);
            }
        }
        else {
            this.openChooseYear = this.openChooseMonth = false;
        }
    }
    ngOnChanges(changes) {
        if (changes && changes['selectedDate'] && changes['selectedDate'].currentValue) {
            this.writeValue(this.selectedDate);
        }
    }
    onDocumentClick($event) {
        if (!this.elementRef.nativeElement.contains($event.target)) {
            this.openChooseYear = this.openChooseMonth = false;
            this.resetYearOptions();
        }
    }
    onClick($event) {
        $event.stopPropagation();
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
    }
    get dateConfig() {
        return this._dateConfig;
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min) {
            return false;
        }
        return true;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat);
        if (parseDate) {
            this._minDate = parseDate;
            this.onYearRangeChange();
        }
    }
    get minDate() {
        return this._minDate;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat);
        if (parseDate) {
            this._maxDate = parseDate;
            this.onYearRangeChange();
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set currentHour(hour) {
        this._currentHour = hour;
    }
    get currentHour() {
        return unshiftString(String(this._currentHour), 2, '0');
    }
    set currentMinute(min) {
        this._currentMinute = min;
    }
    get currentMinute() {
        return unshiftString(String(this._currentMinute), 2, '0');
    }
    set currentSecond(sec) {
        this._currentSecond = sec;
    }
    get currentSecond() {
        return unshiftString(String(this._currentSecond), 2, '0');
    }
    resetYearOptions() {
        this.initMode();
        const baseYear = this.selectedDate ? this.selectedDate.getFullYear() : (new Date()).getFullYear();
        this.currentYear = baseYear;
        this.nowMinYear = baseYear - Math.floor(this._yearNumber / 2) < this.minDate.getFullYear() ?
            this.minDate.getFullYear() : baseYear - Math.floor(this._yearNumber / 2);
        this.nowMaxYear = baseYear + Math.floor(this._yearNumber / 2) > this.maxDate.getFullYear() ?
            this.maxDate.getFullYear() : baseYear + Math.floor(this._yearNumber / 2);
        this.onYearRangeChange();
    }
    onYearRangeChange() {
        if (!this.nowMinYear || !this.nowMaxYear) {
            return;
        }
        let baseYear = Math.round((this.nowMinYear + this.nowMaxYear) / 2);
        if (this.nowMaxYear - this.nowMinYear < this._yearNumber - 1) {
            if (this.nowMinYear === this.minDate.getFullYear() && this.nowMaxYear === this.maxDate.getFullYear()) {
                baseYear = this.nowMinYear + Math.round((this.nowMaxYear - this.nowMinYear) / 2);
            }
            else if (this.nowMinYear === this.minDate.getFullYear()) {
                baseYear = this.nowMaxYear - this._yearNumber / 2 + 1;
            }
            else if (this.nowMaxYear === this.maxDate.getFullYear()) {
                baseYear = this.nowMinYear + this._yearNumber / 2;
            }
        }
        this.yearOptions = new Array(this._yearNumber).fill(0).map((value, index) => {
            const title = baseYear - this._yearNumber / 2 + index;
            return {
                title: title,
                disabled: false
            };
        });
        if (this._yearNumber > this.nowMaxYear - this.nowMinYear + 1) {
            this.yearOptions.forEach((value, index) => {
                if (index < 6) {
                    value.disabled = value.title < this.nowMinYear;
                }
                else {
                    value.disabled = value.title > this.nowMaxYear;
                }
            });
        }
    }
    writeValue(obj) {
        if (!obj) {
            return;
        }
        this.selectedDate = this.dateConverter.parse(obj, this.dateFormat);
        this.onSelectDateChanged();
        this.onDisplayWeeksChange();
        this.availableMonths = this.onDisplayMonthsChange();
        this.changeDetectorRef.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    hasPreMonth() {
        if (this.currentYear > this.minDate.getFullYear()) {
            return true;
        }
        else if (this.currentYear === this.minDate.getFullYear() && this.currentMonthIndex > this.minDate.getMonth()) {
            return true;
        }
        else {
            return false;
        }
    }
    onPreMonth() {
        if (!this.hasPreMonth()) {
            return;
        }
        const date = new Date(this.currentYear, this.currentMonthIndex);
        date.setMonth(date.getMonth() - 1);
        this.currentMonthIndex = date.getMonth();
        this.currentYear = date.getFullYear();
        this.onDisplayWeeksChange();
    }
    hasNextMonth() {
        if (this.currentYear < this.maxDate.getFullYear()) {
            return true;
        }
        else if (this.currentYear === this.maxDate.getFullYear() && this.currentMonthIndex < this.maxDate.getMonth()) {
            return true;
        }
        else {
            return false;
        }
    }
    onNextMonth(currentDate, invocation) {
        if (!this.hasNextMonth() && invocation !== 'init') {
            return;
        }
        let date;
        if (currentDate) {
            date = new Date(currentDate.getTime());
        }
        else {
            date = new Date(this.currentYear, this.currentMonthIndex);
        }
        date.setMonth(date.getMonth() + 1);
        this.currentMonthIndex = date.getMonth();
        this.currentYear = date.getFullYear();
        this.onDisplayWeeksChange();
    }
    hasPreYearOption() {
        if (this.openChooseYear) {
            return this.yearOptions[0].title.toString() > this.minDate.getFullYear();
        }
        else {
            return Number(this.currentYear) > this.minDate.getFullYear();
        }
    }
    onPreYearOption() {
        if (!this.hasPreYearOption()) {
            return;
        }
        if (this.openChooseYear) {
            if (this.nowMinYear - this._yearNumber >= this.minDate.getFullYear()) {
                this.nowMaxYear = this.nowMinYear - 1;
                this.nowMinYear = this.nowMinYear - this._yearNumber;
            }
            else {
                this.nowMaxYear = this.nowMinYear - 1;
                this.nowMinYear = this.minDate.getFullYear();
            }
            this.onYearRangeChange();
        }
        else {
            this.onSelectYear(Number(this.currentYear) - 1);
        }
    }
    hasNextYearOption() {
        if (this.openChooseYear) {
            return this.yearOptions[11].title.toString() < this.maxDate.getFullYear();
        }
        else {
            return Number(this.currentYear) < this.maxDate.getFullYear();
        }
    }
    onNextYearOption() {
        if (!this.hasNextYearOption()) {
            return;
        }
        if (this.openChooseYear) {
            if (this.nowMaxYear + this._yearNumber <= this.maxDate.getFullYear()) {
                this.nowMinYear = this.nowMaxYear + 1;
                this.nowMaxYear = this.nowMaxYear + this._yearNumber;
            }
            else {
                this.nowMinYear = this.nowMaxYear + 1;
                this.nowMaxYear = this.maxDate.getFullYear();
            }
            this.onYearRangeChange();
        }
        else {
            this.onSelectYear(Number(this.currentYear) + 1);
        }
    }
    onSelectYear(year, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        const yearDisabled = typeof year === 'object' ? year.disabled : false;
        const yearTitle = typeof year === 'object' ? year.title : year;
        if (yearDisabled) {
            return;
        }
        this.currentYear = yearTitle;
        if (this.mode === 'year') {
            this.onSelectDate($event, new Date(yearTitle, 0, 1));
        }
        else if (this.mode === 'month') {
            this.openChooseYear = false;
            this.availableMonths = this.onDisplayMonthsChange();
            this.currentMonthIndex = null;
            this.openChooseMonth = true;
        }
        else {
            this.onDisplayWeeksChange();
            this.availableMonths = this.onDisplayMonthsChange();
            this.openChooseYear = false;
            this.openChooseMonth = !!$event;
        }
    }
    onSelectDateChanged() {
        let date = this.selectedDate || new Date();
        if (date.getTime() < this.minDate.getTime()) {
            date = this.minDate;
        }
        if (date.getTime() > this.maxDate.getTime()) {
            date = this.maxDate;
        }
        this.currentYear = date.getFullYear();
        this.currentMonthIndex = date.getMonth();
        this.currentHour = this.showTime ? date.getHours() : 0;
        this.currentMinute = this.showTime ? date.getMinutes() : 0;
        this.currentSecond = this.showTime ? date.getSeconds() : 0;
    }
    onDisplayWeeksChange() {
        const today = new Date();
        const firstDayOfMonth = new Date(this.currentYear, this.currentMonthIndex, 1);
        const weekOfDay = firstDayOfMonth.getDay();
        const startDate = new Date(firstDayOfMonth.getTime() - weekOfDay * DatepickerComponent.DAY_DURATION);
        const displayWeeks = [];
        for (let i = 0; i < 6; i++) {
            const startWeekDate = startDate.getTime() + i * 7 * DatepickerComponent.DAY_DURATION;
            const weekDays = new Array(7).fill(0).map((value, index) => {
                const currentDate = new Date(startWeekDate + index * DatepickerComponent.DAY_DURATION);
                return {
                    day: this.fillLeft(currentDate.getDate()),
                    date: currentDate,
                    inMonth: currentDate.getMonth().toString() === this.currentMonthIndex.toString(),
                    isToday: currentDate.getFullYear() === today.getFullYear() &&
                        currentDate.getMonth() === today.getMonth() &&
                        currentDate.getDate() === today.getDate()
                };
            });
            displayWeeks.push(weekDays);
        }
        this.displayWeeks = displayWeeks;
    }
    onDisplayMonthsChange() {
        const all = new Array(12).fill(0).map((value, index) => {
            return {
                index: index,
                title: this.i18nText.monthsOfYear[index],
                disabled: false
            };
        });
        if (this.currentYear < this.minDate.getFullYear() || this.currentYear > this.maxDate.getFullYear()) {
            all.map(month => { month.disabled = true; });
        }
        if (this.currentYear === this.minDate.getFullYear()) {
            all.map(month => { month.disabled = month.index < this.minDate.getMonth(); });
        }
        if (this.currentYear === this.maxDate.getFullYear()) {
            all.map(month => { month.disabled = month.index > this.maxDate.getMonth(); });
        }
        return all;
    }
    fillLeft(num) {
        return num < 10 ? `0${num}` : `${num}`;
    }
    isDisabledDay(date) {
        if (this.disabled) {
            return true;
        }
        if (!date) {
            return false;
        }
        const minDate = new Date(this.minDate.getFullYear(), this.minDate.getMonth(), this.minDate.getDate());
        const maxDate = new Date(this.maxDate.getFullYear(), this.maxDate.getMonth(), this.maxDate.getDate(), 23, 59, 59);
        const dis = date.getTime() < minDate.getTime();
        return this.disabled || (date.getTime() < minDate.getTime() ||
            date.getTime() > maxDate.getTime());
    }
    isSelectDay(date) {
        if (!this.selectedDate || !date) {
            return false;
        }
        return (date.getFullYear() === this.selectedDate.getFullYear() &&
            date.getMonth() === this.selectedDate.getMonth() &&
            date.getDate() === this.selectedDate.getDate());
    }
    /*
    **  @param invocation:调用时机
    */
    onSelectDate($event, date, invocation, reason) {
        if ($event.stopPropagation) {
            $event.stopPropagation();
        }
        if (this.isDisabledDay(date)) {
            return;
        }
        this.selectedDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), Number(this.currentHour), Number(this.currentMinute), Number(this.currentSecond));
        const currentReason = typeof reason === 'number' ? reason : SelectDateChangeReason.date;
        const dateObj = {
            reason: currentReason,
            selectedDate: this.selectedDate
        };
        this.onTouched();
        this.writeValue(this.selectedDate);
        // 初始化的时候不触发emit和ngModelChange
        if (invocation !== 'init') {
            this.onChange(dateObj);
            this.selectedDateChange.emit(dateObj);
        }
        if (this.currentMonthIndex !== this.selectedDate.getMonth() ||
            this.currentYear !== this.selectedDate.getFullYear()) {
            this.currentYear = this.selectedDate.getFullYear();
            this.currentMonthIndex = this.selectedDate.getMonth();
            this.onDisplayWeeksChange();
        }
    }
    fixTime(event, type) {
        // 由于keypress不监听微软输入法需要使用keydown
        // 而keydown中微软输入法的key是'Process'，且keydown没有charCode，所以需要用code判断
        // 故退格和输入使用同一个事件
        let timeType;
        const min = 0;
        let max = 59;
        switch (type) {
            case 'h': {
                timeType = 'currentHour';
                max = 23;
                break;
            }
            case 'm': {
                timeType = 'currentMinute';
                break;
            }
            case 's': {
                timeType = 'currentSecond';
                break;
            }
        }
        let value = event.target['value'];
        const selectionStart = event.target['selectionStart'];
        const selectionEnd = event.target['selectionEnd'];
        // 是数字的时候再处理，分为小键盘和数字键
        if (/^(Digit|Numpad)\d$/.test(event.code)) {
            event.preventDefault();
            let input;
            if (event['clipboardData']) {
                input = event['clipboardData'].getData('text');
            }
            else if (event['code']) {
                input = event['code'].slice(event['code'].length - 1);
            }
            value = value.substring(0, selectionStart) + input + value.substring(selectionEnd);
            if (value.length === 3 && value.indexOf('0') === 0) {
                value = value.slice(1);
            }
        }
        else if (event.keyCode === 8) {
            event.preventDefault();
            value = value.substring(0, selectionStart - 1) + value.substring(selectionEnd);
            if (value.length < 2) {
                value = '0' + value;
            }
        }
        else if (!(event.keyCode >= 37 && event.keyCode <= 40)) {
            // 如果不是上下左右，就阻拦，执行自己的处理
            event.preventDefault();
        }
        if (/^(Digit|Numpad)\d$/.test(event.code) || event.keyCode === 8) {
            if (Number(value) >= min && Number(value) <= max) {
                this[timeType] = value;
                this.onTimeChange();
            }
        }
    }
    onTimeChange() {
        const date = this.selectedDate || new Date();
        this.selectedDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), Number(this.currentHour), Number(this.currentMinute), Number(this.currentSecond));
        const dateObj = {
            reason: SelectDateChangeReason.time,
            selectedDate: this.selectedDate
        };
        this.onTouched();
        this.writeValue(this.selectedDate);
        this.onChange(dateObj);
        this.selectedDateChange.emit(dateObj);
    }
    timeUp(type) {
        switch (type) {
            case 'h': {
                Number(this.currentHour) < 23 ? this.currentHour = (Number(this.currentHour) + 1) : this.currentHour = 0;
                break;
            }
            case 'm': {
                Number(this.currentMinute) < 59 ? this.currentMinute = (Number(this.currentMinute) + 1) : this.currentMinute = 0;
                break;
            }
            case 's': {
                Number(this.currentSecond) < 59 ? this.currentSecond = (Number(this.currentSecond) + 1) : this.currentSecond = 0;
                break;
            }
        }
        this.onTimeChange();
    }
    timeDown(type) {
        switch (type) {
            case 'h': {
                Number(this.currentHour) > 0 ? this.currentHour = (Number(this.currentHour) - 1) : this.currentHour = 23;
                break;
            }
            case 'm': {
                Number(this.currentMinute) > 0 ? this.currentMinute = (Number(this.currentMinute) - 1) : this.currentMinute = 59;
                break;
            }
            case 's': {
                Number(this.currentSecond) > 0 ? this.currentSecond = (Number(this.currentSecond) - 1) : this.currentSecond = 59;
                break;
            }
        }
        this.onTimeChange();
    }
    toggle($event, which) {
        $event.stopPropagation();
        if (which === 'year') {
            if (this.mode === 'year') {
                return;
            }
            else if (this.mode === 'month') {
                this.openChooseYear = true;
                this.openChooseMonth = false;
                return;
            }
            else {
                this.openChooseYear = !this.openChooseYear;
                this.openChooseMonth = false;
            }
        }
        else {
            if (this.mode === 'month') {
                return;
            }
            this.openChooseMonth = !this.openChooseMonth;
            this.openChooseYear = false;
        }
    }
    isTodayDisable() {
        return this.isDisabledDay(new Date());
    }
    isDisabledTime() {
        return this.isDisabledDay(this.selectedDate);
    }
    initDatePicker() {
        this.selectedDate = this.selectedDate ? this.selectedDate : new Date();
        if (this.isDisabledDay(this.selectedDate)) {
            return;
        }
        this.selectedDate = this.selectedDate ? this.selectedDate : new Date();
        this.onSelectDateChanged();
        this.onSelectDate({}, this.selectedDate, 'init');
    }
    confirmTime(event) {
        event.stopPropagation();
        const dateObj = {
            reason: SelectDateChangeReason.button,
            selectedDate: this.selectedDate
        };
        this.writeValue(this.selectedDate);
        this.onChange(dateObj);
        this.selectedDateChange.emit(dateObj);
    }
    chooseToday() {
        const today = new Date();
        if (this.isDisabledDay(today)) {
            return;
        }
        this.selectedDate = today;
        this.onSelectDateChanged();
        this.onSelectDate({}, today, undefined, SelectDateChangeReason.button);
    }
    onSelectMonth(month) {
        if (month.disabled) {
            return;
        }
        this.currentMonthIndex = month.index;
        if (this.mode === 'month') {
            this.onSelectDate({}, new Date(this.currentYear, this.currentMonthIndex, 1));
        }
        else {
            this.onDisplayWeeksChange();
            this.openChooseMonth = false;
        }
    }
    get minDateDefined() {
        return this.minDate.getTime() !== new Date(this.dateConfig.min, 0, 1, 0, 0, 0).getTime();
    }
    get maxDateDefined() {
        return this.maxDate.getTime() !== new Date(this.dateConfig.max, 11, 31, 23, 59, 59).getTime();
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().datePicker;
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.datePicker;
            this.i18nLocale = data.locale;
            this.i18nCommonText = data.common;
        });
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
DatepickerComponent.DAY_DURATION = 24 * 60 * 60 * 1000;
DatepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DatePickerConfigService }, { token: i0.ChangeDetectorRef }, { token: i2.I18nService }], target: i0.ɵɵFactoryTarget.Component });
DatepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DatepickerComponent, selector: "d-datepicker", inputs: { cssClass: "cssClass", dateConverter: "dateConverter", locale: "locale", disabled: "disabled", customViewTemplate: "customViewTemplate", selectedDate: "selectedDate", mode: "mode", dateFormat: "dateFormat", showTime: "showTime", dateConfig: "dateConfig", minDate: "minDate", maxDate: "maxDate" }, outputs: { selectedDateChange: "selectedDateChange" }, host: { listeners: { "document:click": "onDocumentClick($event)", "click": "onClick($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatepickerComponent),
            multi: true
        }], usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-month-view {{ cssClass }}\">\n  <table class=\"devui-table devui-month-view-table\">\n    <thead class=\"devui-noSelect\">\n      <tr class=\"devui-date-header\">\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onPreYearOption()\"\n            [ngClass]=\"{\n              'devui-year-month-disabled': !hasPreYearOption()\n            }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"10px\"\n              viewBox=\"0 0 10 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -1.000000)\">\n                  <path\n                    d=\"M11,1.83333333 L11,10.1666667 L7,7.38833333 L7,10.1666667 L1,6 L7,1.83333333 L7,4.61033333 L11,1.83333333 Z\"\n                  ></path>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-left\"\n            aria-hidden=\"true\"\n            (click)=\"onPreMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"10px\"\n              viewBox=\"0 0 6 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -1.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.000000) rotate(-90.000000) translate(-6.000000, -6.000000) \"\n                    points=\"6 3 10.1666667 9 1.83333333 9\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td colspan=\"3\" class=\"devui-dropdown\">\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'year')\">{{ i18nText?.yearDisplay(currentYear) }}</span>\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'month')\" *ngIf=\"mode !== 'year'\">{{\n            (i18nText?.monthsOfYear)[currentMonthIndex]\n          }}</span>\n          <ul class=\"devui-monthOption text-center\" [style.display]=\"openChooseMonth ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let month of availableMonths\"\n              [ngClass]=\"{ active: currentMonthIndex == month.index, disabled: month.disabled }\"\n              (click)=\"onSelectMonth(month)\"\n            >\n              {{ month.title }}\n            </li>\n          </ul>\n          <ul class=\"devui-yearOption text-center\" [style.display]=\"openChooseYear ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let item of yearOptions\"\n              [ngClass]=\"{ active: currentYear == item.title, disabled: item.disabled }\"\n              (click)=\"onSelectYear(item, $event)\"\n            >\n              {{ item.title }}\n            </li>\n          </ul>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-right\"\n            aria-hidden=\"true\"\n            (click)=\"onNextMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"9px\"\n              viewBox=\"0 0 6 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -2.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.166667) scale(-1, 1) rotate(-90.000000) translate(-6.000000, -6.166667) \"\n                    points=\"6 3.16666667 10.1666667 9.16666667 1.83333333 9.16666667\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onNextYearOption()\"\n            [ngClass]=\"{\n              'devui-year-month-disabled': !hasNextYearOption()\n            }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"9px\"\n              viewBox=\"0 0 10 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -2.000000)\">\n                  <polygon points=\"5 4.77777778 5 2 11 6.16666667 5 10.3333333 5 7.55555556 1 10.3333333 1 2\"></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n      </tr>\n      <tr class=\"small text-center devui-week-header\">\n        <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n      </tr>\n    </thead>\n    <tbody class=\"devui-noSelect\">\n      <tr *ngFor=\"let week of displayWeeks\">\n        <td\n          *ngFor=\"let day of week\"\n          class=\"devui-day\"\n          [ngClass]=\"{\n            'devui-out-of-month': !day.inMonth,\n            'devui-in-month-day': day.inMonth,\n            active: isSelectDay(day.date),\n            disabled: isDisabledDay(day.date),\n            'devui-today': day.isToday\n          }\"\n          (click)=\"onSelectDate($event, day.date)\"\n        >\n          <div class=\"devui-calendar-date\">{{ day.day }}</div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot [ngClass]=\"{ 'devui-noSelect': !customViewTemplate }\">\n      <tr class=\"time-picker-view\" (click)=\"!customViewTemplate && $event.stopPropagation()\" *ngIf=\"showTime || !customViewTemplate\">\n        <td colspan=\"4\">\n          <div class=\"devui-timepicker\" *ngIf=\"showTime\" [ngClass]=\"{ 'devui-timepicker-disabled': isDisabledTime() }\">\n            <div class=\"devui-time\">\n              <input [ngModel]=\"currentHour\" (keydown)=\"fixTime($event, 'h')\" [disabled]=\"isDisabledTime()\" />\n              <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                <div class=\"btn-up\" (click)=\"timeUp('h')\"></div>\n                <div class=\"btn-down\" (click)=\"timeDown('h')\"></div>\n              </div>\n            </div>\n            <div class=\"devui-time\">\n              <input class=\"devui-minutes\" [ngModel]=\"currentMinute\" (keydown)=\"fixTime($event, 'm')\" [disabled]=\"isDisabledTime()\" />\n              <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                <div class=\"btn-up\" (click)=\"timeUp('m')\"></div>\n                <div class=\"btn-down\" (click)=\"timeDown('m')\"></div>\n              </div>\n            </div>\n            <div class=\"devui-time\">\n              <input class=\"devui-seconds\" [ngModel]=\"currentSecond\" (keydown)=\"fixTime($event, 's')\" [disabled]=\"isDisabledTime()\" />\n              <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                <div class=\"btn-up\" (click)=\"timeUp('s')\"></div>\n                <div class=\"btn-down\" (click)=\"timeDown('s')\"></div>\n              </div>\n            </div>\n          </div>\n        </td>\n        <td colspan=\"3\">\n          <div class=\"devui-btn-wrapper\" *ngIf=\"showTime\">\n            <d-button bsStyle=\"common\" [disabled]=\"disabled\" (btnClick)=\"confirmTime($event)\" bsSize=\"sm\"\n              >{{ i18nCommonText?.btnConfirm }}\n            </d-button>\n          </div>\n          <div class=\"devui-btn-wrapper\" *ngIf=\"!showTime\">\n            <d-button bsStyle=\"common\" [disabled]=\"isTodayDisable() || disabled\" (btnClick)=\"chooseToday()\" bsSize=\"sm\"\n              >{{ i18nText?.today }}\n            </d-button>\n          </div>\n        </td>\n      </tr>\n      <tr class=\"time-picker-view devui-custom-area\" *ngIf=\"customViewTemplate\">\n        <td colspan=\"7\">\n          <ng-template\n            [ngTemplateOutlet]=\"customViewTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: this, chooseDate: chooseDate, clearAll: clearAll }\"\n          ></ng-template>\n        </td>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-date-header{height:38px}.devui-month-view{background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);width:240px;text-align:center;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));border-radius:2px;border-radius:var(--devui-border-radius, 2px);position:relative}.devui-month-view .devui-month-view-table{margin-bottom:0;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);table-layout:fixed;border-collapse:collapse;width:100%}.devui-month-view .devui-date-title{font-weight:700;cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-month-view .devui-date-title:hover{color:#7693f5;color:var(--devui-brand-hover, #7693f5)}.devui-month-view .devui-btn-link{text-decoration:none;cursor:pointer;display:block}.devui-month-view .devui-btn-link.devui-year-month-disabled{cursor:not-allowed}.devui-month-view .devui-btn-link.devui-year-month-disabled svg path,.devui-month-view .devui-btn-link.devui-year-month-disabled svg polygon{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-btn-link svg path,.devui-month-view .devui-btn-link svg polygon{fill:#575d6c;fill:var(--devui-text-weak, #575d6c)}.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg path,.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg polygon{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.devui-month-view .date-select{border:none;background:transparent;outline:none;-moz-appearance:none;-webkit-appearance:none;appearance:none}.devui-month-view .devui-week-header{cursor:default;margin-bottom:16px}.devui-month-view .devui-week-header td{width:32px;height:24px;line-height:24px;color:#252b3a;color:var(--devui-text, #252b3a);border:none}.devui-month-view .devui-day:not(.disabled){cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px);color:#dfe1e6;color:var(--devui-feedback-overlay-text, #dfe1e6)}.devui-month-view .devui-day.disabled{cursor:not-allowed}.devui-calendar-date{display:block;margin:0 3px;width:20px;height:20px;padding:0;line-height:20px;background:transparent;text-align:center;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-out-of-month .devui-calendar-date{opacity:.8;background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);color:#d7d8da;color:var(--devui-line, #d7d8da)}.devui-month-view .devui-out-of-month:not(.disabled):hover .devui-calendar-date{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-minutes:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-month-view .devui-seconds:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-yearOption,.devui-monthOption{width:240px;height:195px;position:absolute;left:-68px;top:30px;background:#ffffff;background:var(--devui-base-bg, #ffffff);z-index:1}.devui-yearOption li,.devui-monthOption li{width:60px;height:68px;line-height:68px;text-align:center;display:inline-block;background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-yearOption li:hover,.devui-monthOption li:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);cursor:pointer}.devui-yearOption li.active:not(.disabled),.devui-monthOption li.active:not(.disabled){color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-yearOption li.active:not(.disabled):hover,.devui-monthOption li.active:not(.disabled):hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-yearOption li.disabled,.devui-monthOption li.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);cursor:not-allowed}.devui-month-view .devui-timepicker{background:#f5f5f5;background:var(--devui-area, #f5f5f5);display:flex;justify-content:space-evenly}.devui-month-view .devui-timepicker input{outline:0;border:0;background:#f5f5f5;background:var(--devui-area, #f5f5f5);color:#252b3a;color:var(--devui-text, #252b3a);width:30px;padding:0 0 0 3px;height:30px;text-align:center}.devui-month-view .devui-timepicker.devui-timepicker-disabled{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker.devui-timepicker-disabled input{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker .devui-time{position:relative;display:inline-block;width:40px}.devui-month-view .devui-timepicker .devui-time:not(:first-child):before{content:\":\"}.devui-month-view .devui-table>tbody>tr>td{vertical-align:middle;padding:4px;border-top:none;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-start{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-end{border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0}.devui-month-view .devui-table>tbody>tr>td:not(.disabled){border-top:none;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:hover:not(.active):not(.disabled):not(.devui-out-of-month){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled):not(.active):not(.devui-out-of-month):not(:hover).devui-today .devui-calendar-date{color:#5e7ce0;color:var(--devui-brand, #5e7ce0);font-weight:700}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled .devui-calendar-date{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled:not(.active){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled.active{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>thead>tr>td{vertical-align:middle;line-height:1.5;padding:4px}.devui-noSelect{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-month-view-table td{border-bottom:none}.devui-month-view .devui-table tfoot,.devui-custom-area{border-top:1px solid #f5f5f5;border-top:1px solid var(--devui-area, #f5f5f5)}.devui-month-view tfoot td{padding:10px;vertical-align:middle;border-top:none}.devui-dropdown-menu{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-btn-wrapper{margin-top:0}.devui-btn-nav{display:none;position:absolute;right:9px;top:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.devui-btn-nav .btn-up,.devui-btn-nav .btn-down{position:absolute;width:0;height:0;border:6px solid}.devui-btn-nav .btn-up{padding-top:2px;padding-bottom:1px;border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-text, #252b3a) transparent}.devui-btn-nav .btn-up:hover{border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-icon-fill-active, #252b3a) transparent}.devui-btn-nav .btn-down{top:16px;padding-bottom:4px;border-color:#252b3a transparent transparent transparent;border-color:var(--devui-text, #252b3a) transparent transparent transparent}.devui-btn-nav .btn-down:hover{border-color:#252b3a transparent transparent transparent;border-color:var(--devui-icon-fill-active, #252b3a) transparent transparent transparent}.devui-time input[type=number]::-webkit-inner-spin-button,.devui-time input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.devui-time input[type=number]{-moz-appearance:textfield}.devui-time:hover .devui-btn-nav{display:block}:host ::ng-deep .cdk-overlay-pane d-datepicker.devui-dropdown-menu{padding:0}:host .devui-form-control{padding-right:0}\n"], components: [{ type: i3.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-datepicker', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatepickerComponent),
                            multi: true
                        }], preserveWhitespaces: false, template: "<div class=\"devui-month-view {{ cssClass }}\">\n  <table class=\"devui-table devui-month-view-table\">\n    <thead class=\"devui-noSelect\">\n      <tr class=\"devui-date-header\">\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onPreYearOption()\"\n            [ngClass]=\"{\n              'devui-year-month-disabled': !hasPreYearOption()\n            }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"10px\"\n              viewBox=\"0 0 10 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -1.000000)\">\n                  <path\n                    d=\"M11,1.83333333 L11,10.1666667 L7,7.38833333 L7,10.1666667 L1,6 L7,1.83333333 L7,4.61033333 L11,1.83333333 Z\"\n                  ></path>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-left\"\n            aria-hidden=\"true\"\n            (click)=\"onPreMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"10px\"\n              viewBox=\"0 0 6 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -1.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.000000) rotate(-90.000000) translate(-6.000000, -6.000000) \"\n                    points=\"6 3 10.1666667 9 1.83333333 9\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td colspan=\"3\" class=\"devui-dropdown\">\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'year')\">{{ i18nText?.yearDisplay(currentYear) }}</span>\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'month')\" *ngIf=\"mode !== 'year'\">{{\n            (i18nText?.monthsOfYear)[currentMonthIndex]\n          }}</span>\n          <ul class=\"devui-monthOption text-center\" [style.display]=\"openChooseMonth ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let month of availableMonths\"\n              [ngClass]=\"{ active: currentMonthIndex == month.index, disabled: month.disabled }\"\n              (click)=\"onSelectMonth(month)\"\n            >\n              {{ month.title }}\n            </li>\n          </ul>\n          <ul class=\"devui-yearOption text-center\" [style.display]=\"openChooseYear ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let item of yearOptions\"\n              [ngClass]=\"{ active: currentYear == item.title, disabled: item.disabled }\"\n              (click)=\"onSelectYear(item, $event)\"\n            >\n              {{ item.title }}\n            </li>\n          </ul>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-right\"\n            aria-hidden=\"true\"\n            (click)=\"onNextMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"9px\"\n              viewBox=\"0 0 6 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -2.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.166667) scale(-1, 1) rotate(-90.000000) translate(-6.000000, -6.166667) \"\n                    points=\"6 3.16666667 10.1666667 9.16666667 1.83333333 9.16666667\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onNextYearOption()\"\n            [ngClass]=\"{\n              'devui-year-month-disabled': !hasNextYearOption()\n            }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"9px\"\n              viewBox=\"0 0 10 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -2.000000)\">\n                  <polygon points=\"5 4.77777778 5 2 11 6.16666667 5 10.3333333 5 7.55555556 1 10.3333333 1 2\"></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n      </tr>\n      <tr class=\"small text-center devui-week-header\">\n        <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n      </tr>\n    </thead>\n    <tbody class=\"devui-noSelect\">\n      <tr *ngFor=\"let week of displayWeeks\">\n        <td\n          *ngFor=\"let day of week\"\n          class=\"devui-day\"\n          [ngClass]=\"{\n            'devui-out-of-month': !day.inMonth,\n            'devui-in-month-day': day.inMonth,\n            active: isSelectDay(day.date),\n            disabled: isDisabledDay(day.date),\n            'devui-today': day.isToday\n          }\"\n          (click)=\"onSelectDate($event, day.date)\"\n        >\n          <div class=\"devui-calendar-date\">{{ day.day }}</div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot [ngClass]=\"{ 'devui-noSelect': !customViewTemplate }\">\n      <tr class=\"time-picker-view\" (click)=\"!customViewTemplate && $event.stopPropagation()\" *ngIf=\"showTime || !customViewTemplate\">\n        <td colspan=\"4\">\n          <div class=\"devui-timepicker\" *ngIf=\"showTime\" [ngClass]=\"{ 'devui-timepicker-disabled': isDisabledTime() }\">\n            <div class=\"devui-time\">\n              <input [ngModel]=\"currentHour\" (keydown)=\"fixTime($event, 'h')\" [disabled]=\"isDisabledTime()\" />\n              <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                <div class=\"btn-up\" (click)=\"timeUp('h')\"></div>\n                <div class=\"btn-down\" (click)=\"timeDown('h')\"></div>\n              </div>\n            </div>\n            <div class=\"devui-time\">\n              <input class=\"devui-minutes\" [ngModel]=\"currentMinute\" (keydown)=\"fixTime($event, 'm')\" [disabled]=\"isDisabledTime()\" />\n              <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                <div class=\"btn-up\" (click)=\"timeUp('m')\"></div>\n                <div class=\"btn-down\" (click)=\"timeDown('m')\"></div>\n              </div>\n            </div>\n            <div class=\"devui-time\">\n              <input class=\"devui-seconds\" [ngModel]=\"currentSecond\" (keydown)=\"fixTime($event, 's')\" [disabled]=\"isDisabledTime()\" />\n              <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                <div class=\"btn-up\" (click)=\"timeUp('s')\"></div>\n                <div class=\"btn-down\" (click)=\"timeDown('s')\"></div>\n              </div>\n            </div>\n          </div>\n        </td>\n        <td colspan=\"3\">\n          <div class=\"devui-btn-wrapper\" *ngIf=\"showTime\">\n            <d-button bsStyle=\"common\" [disabled]=\"disabled\" (btnClick)=\"confirmTime($event)\" bsSize=\"sm\"\n              >{{ i18nCommonText?.btnConfirm }}\n            </d-button>\n          </div>\n          <div class=\"devui-btn-wrapper\" *ngIf=\"!showTime\">\n            <d-button bsStyle=\"common\" [disabled]=\"isTodayDisable() || disabled\" (btnClick)=\"chooseToday()\" bsSize=\"sm\"\n              >{{ i18nText?.today }}\n            </d-button>\n          </div>\n        </td>\n      </tr>\n      <tr class=\"time-picker-view devui-custom-area\" *ngIf=\"customViewTemplate\">\n        <td colspan=\"7\">\n          <ng-template\n            [ngTemplateOutlet]=\"customViewTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: this, chooseDate: chooseDate, clearAll: clearAll }\"\n          ></ng-template>\n        </td>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-date-header{height:38px}.devui-month-view{background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);width:240px;text-align:center;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));border-radius:2px;border-radius:var(--devui-border-radius, 2px);position:relative}.devui-month-view .devui-month-view-table{margin-bottom:0;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);table-layout:fixed;border-collapse:collapse;width:100%}.devui-month-view .devui-date-title{font-weight:700;cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-month-view .devui-date-title:hover{color:#7693f5;color:var(--devui-brand-hover, #7693f5)}.devui-month-view .devui-btn-link{text-decoration:none;cursor:pointer;display:block}.devui-month-view .devui-btn-link.devui-year-month-disabled{cursor:not-allowed}.devui-month-view .devui-btn-link.devui-year-month-disabled svg path,.devui-month-view .devui-btn-link.devui-year-month-disabled svg polygon{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-btn-link svg path,.devui-month-view .devui-btn-link svg polygon{fill:#575d6c;fill:var(--devui-text-weak, #575d6c)}.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg path,.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg polygon{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.devui-month-view .date-select{border:none;background:transparent;outline:none;-moz-appearance:none;-webkit-appearance:none;appearance:none}.devui-month-view .devui-week-header{cursor:default;margin-bottom:16px}.devui-month-view .devui-week-header td{width:32px;height:24px;line-height:24px;color:#252b3a;color:var(--devui-text, #252b3a);border:none}.devui-month-view .devui-day:not(.disabled){cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px);color:#dfe1e6;color:var(--devui-feedback-overlay-text, #dfe1e6)}.devui-month-view .devui-day.disabled{cursor:not-allowed}.devui-calendar-date{display:block;margin:0 3px;width:20px;height:20px;padding:0;line-height:20px;background:transparent;text-align:center;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-out-of-month .devui-calendar-date{opacity:.8;background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);color:#d7d8da;color:var(--devui-line, #d7d8da)}.devui-month-view .devui-out-of-month:not(.disabled):hover .devui-calendar-date{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-minutes:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-month-view .devui-seconds:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-yearOption,.devui-monthOption{width:240px;height:195px;position:absolute;left:-68px;top:30px;background:#ffffff;background:var(--devui-base-bg, #ffffff);z-index:1}.devui-yearOption li,.devui-monthOption li{width:60px;height:68px;line-height:68px;text-align:center;display:inline-block;background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-yearOption li:hover,.devui-monthOption li:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);cursor:pointer}.devui-yearOption li.active:not(.disabled),.devui-monthOption li.active:not(.disabled){color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-yearOption li.active:not(.disabled):hover,.devui-monthOption li.active:not(.disabled):hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-yearOption li.disabled,.devui-monthOption li.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);cursor:not-allowed}.devui-month-view .devui-timepicker{background:#f5f5f5;background:var(--devui-area, #f5f5f5);display:flex;justify-content:space-evenly}.devui-month-view .devui-timepicker input{outline:0;border:0;background:#f5f5f5;background:var(--devui-area, #f5f5f5);color:#252b3a;color:var(--devui-text, #252b3a);width:30px;padding:0 0 0 3px;height:30px;text-align:center}.devui-month-view .devui-timepicker.devui-timepicker-disabled{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker.devui-timepicker-disabled input{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker .devui-time{position:relative;display:inline-block;width:40px}.devui-month-view .devui-timepicker .devui-time:not(:first-child):before{content:\":\"}.devui-month-view .devui-table>tbody>tr>td{vertical-align:middle;padding:4px;border-top:none;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-start{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-end{border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0}.devui-month-view .devui-table>tbody>tr>td:not(.disabled){border-top:none;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:hover:not(.active):not(.disabled):not(.devui-out-of-month){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled):not(.active):not(.devui-out-of-month):not(:hover).devui-today .devui-calendar-date{color:#5e7ce0;color:var(--devui-brand, #5e7ce0);font-weight:700}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled .devui-calendar-date{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled:not(.active){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled.active{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>thead>tr>td{vertical-align:middle;line-height:1.5;padding:4px}.devui-noSelect{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-month-view-table td{border-bottom:none}.devui-month-view .devui-table tfoot,.devui-custom-area{border-top:1px solid #f5f5f5;border-top:1px solid var(--devui-area, #f5f5f5)}.devui-month-view tfoot td{padding:10px;vertical-align:middle;border-top:none}.devui-dropdown-menu{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-btn-wrapper{margin-top:0}.devui-btn-nav{display:none;position:absolute;right:9px;top:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.devui-btn-nav .btn-up,.devui-btn-nav .btn-down{position:absolute;width:0;height:0;border:6px solid}.devui-btn-nav .btn-up{padding-top:2px;padding-bottom:1px;border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-text, #252b3a) transparent}.devui-btn-nav .btn-up:hover{border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-icon-fill-active, #252b3a) transparent}.devui-btn-nav .btn-down{top:16px;padding-bottom:4px;border-color:#252b3a transparent transparent transparent;border-color:var(--devui-text, #252b3a) transparent transparent transparent}.devui-btn-nav .btn-down:hover{border-color:#252b3a transparent transparent transparent;border-color:var(--devui-icon-fill-active, #252b3a) transparent transparent transparent}.devui-time input[type=number]::-webkit-inner-spin-button,.devui-time input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.devui-time input[type=number]{-moz-appearance:textfield}.devui-time:hover .devui-btn-nav{display:block}:host ::ng-deep .cdk-overlay-pane d-datepicker.devui-dropdown-menu{padding:0}:host .devui-form-control{padding-right:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: DatePickerConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.I18nService }]; }, propDecorators: { cssClass: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], locale: [{
                type: Input
            }], selectedDateChange: [{
                type: Output
            }], disabled: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], selectedDate: [{
                type: Input
            }], mode: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], onDocumentClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }] } });

class SingleDateRangePickerComponent extends DatepickerComponent {
    constructor(elementRef, renderer, datePickerConfig, changeDetectorRef, i18n) {
        super(elementRef, renderer, datePickerConfig, changeDetectorRef, i18n);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.datePickerConfig = datePickerConfig;
        this.changeDetectorRef = changeDetectorRef;
        this.i18n = i18n;
        this.selectedRange = Array(2);
        this.rangePicker = false;
        this.isAuxiliary = false;
        this.currentCalendars = Array(2);
        this.hoverOnDate = new EventEmitter();
        this.rangeSelected = new EventEmitter();
        this.rangeSelecting = new EventEmitter();
        this.syncPickerPair = new EventEmitter();
        this.consolidateTime = new EventEmitter();
        this.setI18nText();
    }
    ngOnInit() {
        [this.rangeStart, this.rangeEnd] = this.selectedRange;
        const nowDate = this.selectedDate || new Date();
        this.nowMinYear = (nowDate).getFullYear() - Math.floor(this._yearNumber / 2) < this.minDate.getFullYear() ?
            this.minDate.getFullYear() : (nowDate).getFullYear() - Math.floor(this._yearNumber / 2);
        this.nowMaxYear = (nowDate).getFullYear() + Math.floor(this._yearNumber / 2) > this.maxDate.getFullYear() ?
            this.maxDate.getFullYear() : (nowDate).getFullYear() + Math.floor(this._yearNumber / 2);
        if (!this.isAuxiliary && !this.rangeStart) {
            // 主面板，未选择开始日期的情况
            this.onSelectDateChanged();
            this.onDisplayWeeksChange();
            this.onYearRangeChange();
            this.initDatePicker();
        }
        else if (this.isAuxiliary && !this.rangeEnd) {
            // 副面板，未选择结束日期的情况
            this.onSelectDateChanged();
            this.initDatePicker();
            this.onYearRangeChange();
            this.onNextMonth('init');
            this.selectedDate = new Date(this.currentYear, this.currentMonthIndex);
        }
        else if (!this.isAuxiliary && this.rangeStart) {
            // 主面板，已选择开始日期的情况
            this.selectedDate = this.rangeStart;
            super.ngOnInit();
        }
        else if (this.isAuxiliary && this.rangeEnd) {
            // 副面板，已选择结束日期的情况
            const rangeStart = this.convertDate(this.rangeStart);
            const rangeEnd = this.convertDate(this.rangeEnd);
            this.currentYear = rangeEnd.getFullYear();
            this.currentMonthIndex = rangeEnd.getMonth();
            this.selectedDate = new Date(this.currentYear, this.currentMonthIndex);
            super.ngOnInit();
            // 处理选择的日期范围开始和结束在同一个月的情况
            if (rangeStart && rangeEnd && rangeStart.getFullYear() === rangeEnd.getFullYear() &&
                rangeStart.getMonth() === rangeEnd.getMonth()) {
                this.onNextMonth('init');
            }
            this.selectedDate = new Date(this.currentYear, this.currentMonthIndex);
        }
        this.availableMonths = this.onDisplayMonthsChange();
        this.notifyCalenderChange();
    }
    /*
    **  @param invocation:调用时机
    */
    onSelectDate($event, date, invocation) {
        if ($event.stopPropagation) {
            $event.stopPropagation();
        }
        if (invocation !== 'init') {
            if (this.isDisabledDay(date)) {
                $event.preventDefault();
                return;
            }
            const curDate = this.showTime && date ? this.setTime(date) : date;
            this.selectRange(curDate);
            this.selectedDate = this.isAuxiliary ? this.rangeEnd : this.rangeStart;
        }
    }
    emitHoverDate($event, date) {
        if (this.selectingRange && date.getTime() <= this.maxDate.getTime() && date.getTime() >= this.minDate.getTime()) {
            this.hoverOnDate.emit(date);
        }
    }
    selectStart(date) {
        this.rangeStart = new Date(this.convertDate(date).setHours(0, 0, 0));
    }
    selectEnd(date) {
        this.selectingRange = false;
        this.rangeEnd = new Date(this.convertDate(date).setHours(23, 59, 59));
        if (!!this.rangeStart && !!this.rangeEnd) {
            this.rangeChange(this.ensureRangeValueOrder([this.rangeStart, this.rangeEnd], true), SelectDateRangeChangeReason.date);
        }
    }
    convertDate(date) {
        return date ? this.dateConverter.parse(date) : null;
    }
    selectRange(date, passive = false) {
        if (this.disabled) {
            return;
        }
        if (!this.rangeStart || (!!this.rangeStart && !!this.rangeEnd)) {
            this.rangeEnd = null;
            this.rangeStart = null;
            this.selectStart(date);
            this.selectingRange = true;
            if (!passive) {
                this.rangeSelecting.emit(this.rangeStart);
            }
        }
        else {
            this.selectEnd(date);
        }
    }
    rangeChange(range, reason) {
        this.selectedRange = range;
        this.notifyValueChange(range, reason);
    }
    writeValue(selectedRange) {
        this.selectedRange = selectedRange;
    }
    notifyValueChange(selectedRange, reason) {
        const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.time;
        this.onChange(selectedRange);
        this.rangeSelected.emit({
            reason: currentReason,
            selectedRange: selectedRange
        });
    }
    isSelectDay(date) {
        let rangeSource = this.selectedRange;
        if (this.selectingRange) {
            rangeSource = [this.rangeStart, this.previewEnd];
        }
        if ((!Array.isArray(rangeSource))) {
            return;
        }
        return rangeSource.some((selectedDate) => {
            if (!selectedDate || !date) {
                return false;
            }
            return (date.getFullYear() === selectedDate.getFullYear() &&
                date.getMonth() === selectedDate.getMonth() &&
                date.getDate() === selectedDate.getDate());
        });
    }
    isBetweenDay(date) {
        if (Array.isArray(this.selectedRange) && this.selectedRange.every(day => !!day)) {
            const index = this.selectedRange.findIndex(day => {
                return date.getFullYear() === day.getFullYear() &&
                    date.getMonth() === day.getMonth() &&
                    date.getDate() === day.getDate();
            });
            return ['devui-day-start', 'devui-day-end'][index];
        }
        else {
            return;
        }
    }
    isDisabledTime() {
        const selectedSide = this.isAuxiliary ? this.rangeEnd : this.rangeStart;
        return selectedSide ? super.isDisabledDay(selectedSide) : true;
    }
    timeUp(type) {
        switch (type) {
            case 'h': {
                Number(this.currentHour) < 23 ? this.currentHour = (Number(this.currentHour) + 1) : this.currentHour = 0;
                break;
            }
            case 'm': {
                Number(this.currentMinute) < 59 ? this.currentMinute = (Number(this.currentMinute) + 1) : this.currentMinute = 0;
                break;
            }
            case 's': {
                Number(this.currentSecond) < 59 ? this.currentSecond = (Number(this.currentSecond) + 1) : this.currentSecond = 0;
                break;
            }
        }
        this.timeChange();
    }
    timeDown(type) {
        switch (type) {
            case 'h': {
                Number(this.currentHour) > 0 ? this.currentHour = (Number(this.currentHour) - 1) : this.currentHour = 23;
                break;
            }
            case 'm': {
                Number(this.currentMinute) > 0 ? this.currentMinute = (Number(this.currentMinute) - 1) : this.currentMinute = 59;
                break;
            }
            case 's': {
                Number(this.currentSecond) > 0 ? this.currentSecond = (Number(this.currentSecond) - 1) : this.currentSecond = 59;
                break;
            }
        }
        this.timeChange();
    }
    fixTime(event, type) {
        // 由于keypress不监听微软输入法需要使用keydown
        // 而keydown中微软输入法的key是'Process'，且keydown没有charCode，所以需要用code判断
        // 故退格和输入使用同一个事件
        let timeType;
        const min = 0;
        let max = 59;
        switch (type) {
            case 'h': {
                timeType = 'currentHour';
                max = 23;
                break;
            }
            case 'm': {
                timeType = 'currentMinute';
                break;
            }
            case 's': {
                timeType = 'currentSecond';
                break;
            }
        }
        let value = event.target['value'];
        const selectionStart = event.target['selectionStart'];
        const selectionEnd = event.target['selectionEnd'];
        // 是数字的时候再处理，分为小键盘和数字键
        if (/^(Digit|Numpad)\d$/.test(event.code)) {
            event.preventDefault();
            let input;
            if (event['clipboardData']) {
                input = event['clipboardData'].getData('text');
            }
            else if (event['code']) {
                input = event['code'].slice(event['code'].length - 1);
            }
            value = value.substring(0, selectionStart) + input + value.substring(selectionEnd);
            if (value.length === 3 && value.indexOf('0') === 0) {
                value = value.slice(1);
            }
        }
        else if (event.keyCode === 8) {
            event.preventDefault();
            value = value.substring(0, selectionStart - 1) + value.substring(selectionEnd);
            if (value.length < 2) {
                value = '0' + value;
            }
        }
        else if (!(event.keyCode >= 37 && event.keyCode <= 40)) {
            // 如果不是上下左右，就阻拦，执行自己的处理
            event.preventDefault();
        }
        if (/^(Digit|Numpad)\d$/.test(event.code) || event.keyCode === 8) {
            if (Number(value) >= min && Number(value) <= max) {
                this[timeType] = value;
                // 防抖，防止提前校验导致错误的校验
                clearTimeout(this.timer);
                this.timer = setTimeout(() => {
                    this.timeChange();
                }, 300);
            }
        }
    }
    timeChange() {
        if (!this.isAuxiliary) {
            this.rangeStart = new Date(this.rangeStart.getFullYear(), this.rangeStart.getMonth(), this.rangeStart.getDate(), Number(this.currentHour), Number(this.currentMinute), Number(this.currentSecond));
        }
        else {
            this.rangeEnd = new Date(this.rangeEnd.getFullYear(), this.rangeEnd.getMonth(), this.rangeEnd.getDate(), Number(this.currentHour), Number(this.currentMinute), Number(this.currentSecond));
        }
        this.rangeChange(this.ensureRangeValueOrder([this.rangeStart, this.rangeEnd]));
    }
    isSameDate(date1, date2) {
        return date1?.getFullYear() === date2?.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'selectedRange')) {
            this.selectingRange = false;
            [this.rangeStart, this.rangeEnd] = changes['selectedRange'].currentValue;
        }
    }
    isInRange(date) {
        const rangeStart = this.rangeStart;
        let rangeEnd = this.rangeEnd;
        if (this.selectingRange) {
            rangeEnd = this.previewEnd;
        }
        date = (new Date(date)).getTime();
        return date < Math.max((new Date(rangeStart)).getTime(), (new Date(rangeEnd)).getTime())
            && date > Math.min((new Date(rangeStart)).getTime(), (new Date(rangeEnd)).getTime());
    }
    ensureRangeValueOrder(dateRange, initTime = false) {
        if (Array.isArray(dateRange) && dateRange.length === 2) {
            // 当选择同一天时，判断时间是否顺序错误并修正
            if (this.isSameDate(dateRange[0], dateRange[1]) && dateRange[0].getTime() - dateRange[1].getTime() > 0) {
                this.fixReverseTime(dateRange);
            }
            // 当后一次时间选择比前一次日期靠前时，对时间置换
            if (initTime && dateRange[0].getTime() - dateRange[1].getTime() > 0) {
                dateRange[0] = new Date(dateRange[0].setHours(23, 59, 59));
                dateRange[1] = new Date(dateRange[1].setHours(0, 0, 0));
            }
            if (dateRange.every(day => !!day)) {
                dateRange.sort((a, b) => {
                    return (new Date(a)).getTime() - (new Date(b).getTime());
                });
            }
            else {
                if (!dateRange[0]) {
                    dateRange[0] = dateRange[1];
                    dateRange[1] = null;
                }
            }
        }
        return dateRange;
    }
    fixReverseTime(dateRange) {
        if (this.isAuxiliary) {
            dateRange[1] = dateRange[0];
            this.currentHour = dateRange[1].getHours();
            this.currentMinute = dateRange[1].getMinutes();
            this.currentSecond = dateRange[1].getSeconds();
        }
        else {
            dateRange[0] = dateRange[1];
            this.currentHour = dateRange[0].getHours();
            this.currentMinute = dateRange[0].getMinutes();
            this.currentSecond = dateRange[0].getSeconds();
        }
    }
    onNextMonth(invocation) {
        if (this.hasNextMonth() || invocation === 'init') {
            let maxDateInRange;
            if (invocation === 'init') {
                maxDateInRange = this.selectedRange.reduce((start, end) => new Date(end) > new Date(start) ? end : start);
            }
            super.onNextMonth(maxDateInRange, 'init');
            this.notifyCalenderChange();
        }
    }
    hasNextMonth() {
        let hasNextMonth = true;
        // 副面板只用考虑maxDate的影响
        // 主面板同时考虑maxDate和日历的影响
        // minDate的影响在super.hasNextMonth()中有计算
        if (!this.isAuxiliary && this.currentCalendars[0] && this.currentCalendars[1]) {
            hasNextMonth = this.isBeforeMoreThanOneMonth(this.currentCalendars[0], this.currentCalendars[1]);
        }
        return hasNextMonth && super.hasNextMonth();
    }
    onPreMonth() {
        if (this.hasPreMonth()) {
            super.onPreMonth();
            this.notifyCalenderChange();
        }
    }
    hasPreMonth() {
        let hasPrevMonth = true;
        // 主面板只用考虑minDate的影响
        // 副面板同时考虑minDate和日历的影响
        // minDate的影响在super.hasPreMonth()中有计算
        if (this.isAuxiliary && this.currentCalendars[0] && this.currentCalendars[1]) {
            hasPrevMonth = this.isAfterMoreThanOneMonth(this.currentCalendars[1], this.currentCalendars[0]);
        }
        return hasPrevMonth && super.hasPreMonth();
    }
    hasPreYearOption() {
        let hasPrevYear = true;
        if (this.openChooseYear) {
            if (!this.isAuxiliary) {
                hasPrevYear = this.nowMinYear > this.minDate.getFullYear();
            }
            else {
                hasPrevYear = this.nowMinYear > this.minDate.getFullYear() &&
                    this.isBeforeMoreThanOneYear(this.currentCalendars[0], { year: this.nowMinYear, month: this.currentCalendars[1].month });
            }
        }
        else if (this.currentCalendars[0] && this.currentCalendars[1]) {
            // 主面板只用考虑minDate的影响
            if (!this.isAuxiliary) {
                hasPrevYear = this.currentCalendars[0].year > this.minDate.getFullYear();
            }
            else { // 副面板同时考虑minDate和日历的影响
                hasPrevYear = this.currentCalendars[1].year > this.minDate.getFullYear() &&
                    this.isBeforeMoreThanOneYear(this.currentCalendars[0], this.currentCalendars[1]);
            }
        }
        return hasPrevYear;
    }
    hasNextYearOption() {
        let hasNextYear = true;
        if (this.openChooseYear) {
            if (this.isAuxiliary) {
                hasNextYear = this.nowMaxYear < this.maxDate.getFullYear();
            }
            else {
                hasNextYear = this.nowMaxYear < this.maxDate.getFullYear() &&
                    this.isAfterMoreThanOneYear(this.currentCalendars[1], { year: this.nowMaxYear, month: this.currentCalendars[0].month });
            }
        }
        else if (this.currentCalendars[0] && this.currentCalendars[1]) {
            // 副面板只用考虑maxDate的影响
            if (this.isAuxiliary) {
                hasNextYear = this.currentCalendars[1].year < this.maxDate.getFullYear();
            }
            else { // 主面板同时考虑maxDate和日历的影响
                hasNextYear = this.currentCalendars[0].year < this.maxDate.getFullYear() &&
                    this.isAfterMoreThanOneYear(this.currentCalendars[1], this.currentCalendars[0]);
            }
        }
        return hasNextYear;
    }
    isYearDisable(year) {
        if (this.isAuxiliary) {
            // 先判定主面板是否比附面板小一年以上，是的话disabled为false;
            return !(this.isBeforeMoreThanOneYear(this.currentCalendars[0], { year: year + 1, month: this.currentCalendars[1].month }) ||
                // 主附面板在同一年时，判断主附面板月是否在临界值；
                (this.currentCalendars[0].year === year && this.currentCalendars[0].month !== 11));
        }
        else {
            return !(this.isAfterMoreThanOneYear(this.currentCalendars[1], { year: year - 1, month: this.currentCalendars[0].month }) ||
                (this.currentCalendars[1].year === year && this.currentCalendars[1].month !== 0));
        }
    }
    isMonthDisable(month) {
        if (this.isAuxiliary) {
            return !this.isBeforeMoreThanOneMonth(this.currentCalendars[0], { year: this.currentCalendars[1].year, month: parseInt(month, 10) - 1 + 1 });
        }
        else {
            return !this.isAfterMoreThanOneMonth(this.currentCalendars[1], { year: this.currentCalendars[0].year, month: parseInt(month, 10) - 1 - 1 });
        }
    }
    onPreYear() {
        if (!this.hasPreYearOption()) {
            return;
        }
        if (this.openChooseYear) {
            if (this.nowMinYear - this._yearNumber >= this.minDate.getFullYear()) {
                this.nowMaxYear = this.nowMinYear - 1;
                this.nowMinYear = this.nowMinYear - this._yearNumber;
            }
            else {
                this.nowMaxYear = this.nowMinYear - 1;
                this.nowMinYear = this.minDate.getFullYear();
            }
            this.onYearRangeChange();
        }
        else {
            this.onSelectYear(Number(this.currentYear) - 1);
        }
        this.notifyCalenderChange();
    }
    onNextYear() {
        if (!this.hasNextYearOption()) {
            return;
        }
        if (this.openChooseYear) {
            if (this.nowMaxYear + this._yearNumber <= this.maxDate.getFullYear()) {
                this.nowMinYear = this.nowMaxYear + 1;
                this.nowMaxYear = this.nowMaxYear + this._yearNumber;
            }
            else {
                this.nowMinYear = this.nowMaxYear + 1;
                this.nowMaxYear = this.maxDate.getFullYear();
            }
            this.onYearRangeChange();
        }
        else {
            this.onSelectYear(Number(this.currentYear) + 1);
        }
        this.notifyCalenderChange();
    }
    onSelectMonth(month) {
        if (month.disabled || this.isMonthDisable(month.title)) {
            return;
        }
        this.currentMonthIndex = month.index;
        this.onDisplayWeeksChange();
        this.openChooseMonth = false;
        this.isAuxiliary ? this.currentCalendars[1].month = this.currentMonthIndex : this.currentCalendars[0].month = this.currentMonthIndex;
    }
    onSelectYear(year, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        const yearDisabled = typeof year === 'object' ? year.disabled : false;
        const yearTitle = typeof year === 'object' ? year.title : year;
        if (yearDisabled || this.isYearDisable(year.title)) {
            return;
        }
        this.currentYear = yearTitle;
        this.onDisplayWeeksChange();
        this.availableMonths = this.onDisplayMonthsChange();
        this.openChooseYear = false;
        if (!$event) {
            this.isAuxiliary ? this.currentCalendars[1].year = this.currentYear : this.currentCalendars[0].year = this.currentYear;
            return;
        }
        this.openChooseMonth = true;
        if (this.isAuxiliary) {
            this.currentCalendars[1].year = this.currentYear;
            this.currentCalendars[1].month = 11;
            this.currentMonthIndex = 11;
        }
        else {
            this.currentCalendars[0].year = this.currentYear;
            this.currentCalendars[0].month = 0;
            this.currentMonthIndex = 0;
        }
    }
    isBeforeMoreThanOneMonth(dateA, dateB) {
        if (dateA.year > dateB.year) {
            return false;
        }
        if (dateA.year === dateB.year && dateB.month <= dateA.month + 1) {
            return false;
        }
        // 处理A日期为B日期前一年12月同时B日期为1月的特殊情况
        return !(dateB.year - dateA.year === 1 && dateA.month === 11 && dateB.month === 0);
    }
    isAfterMoreThanOneMonth(dateA, dateB) {
        if (dateA.year < dateB.year) {
            return false;
        }
        if (dateA.year === dateB.year && dateB.month + 1 >= dateA.month) {
            return false;
        }
        // 处理A日期为B日期后一年1月同时B日期为12月的特殊情况
        return !(dateA.year - dateB.year === 1 && dateA.month === 0 && dateB.month === 11);
    }
    isBeforeMoreThanOneYear(dateA, dateB) {
        if (dateA.year >= dateB.year) {
            return false;
        }
        // 处理B日期比A日期大1年同时A日期月份大于B日期月份的情况
        return !(dateB.year - dateA.year === 1 && dateA.month >= dateB.month);
    }
    isAfterMoreThanOneYear(dateA, dateB) {
        if (dateA.year <= dateB.year) {
            return false;
        }
        // 处理A日期比B日期大1年同时A日期月份小于B日期月份的情况
        return (!(dateA.year - dateB.year === 1 && dateA.month <= dateB.month));
    }
    notifyCalenderChange() {
        this.syncPickerPair.emit({
            year: this.currentYear,
            month: this.currentMonthIndex
        });
    }
    confirmTime() {
        this.consolidateTime.emit();
    }
    setTime(date) {
        return (new Date(date.setHours(this.currentHour, this.currentMinute, this.currentSecond)));
    }
    onSelectDateChanged() {
        let date = this.selectedDate || new Date();
        if (date.getTime() < this.minDate.getTime()) {
            date = this.minDate;
        }
        if (date.getTime() > this.maxDate.getTime()) {
            date = this.maxDate;
        }
        this.selectedDate = this.selectedDate || date;
        this.currentYear = date.getFullYear();
        this.currentMonthIndex = date.getMonth();
        if (!this.showTime) {
            return;
        }
        switch (this.isAuxiliary) {
            case false:
                // Left panel
                this.currentHour = this.rangeStart ? this.rangeStart.getHours() : 0;
                this.currentMinute = this.rangeStart ? this.rangeStart.getMinutes() : 0;
                this.currentSecond = this.rangeStart ? this.rangeStart.getSeconds() : 0;
                break;
            case true:
                // Right panel
                this.currentHour = this.rangeEnd ? this.rangeEnd.getHours() : 23;
                this.currentMinute = this.rangeEnd ? this.rangeEnd.getMinutes() : 59;
                this.currentSecond = this.rangeEnd ? this.rangeEnd.getSeconds() : 59;
                break;
        }
    }
    get currentTime() {
        return {
            hour: this.currentHour,
            minute: this.currentMinute,
            second: this.currentSecond
        };
    }
}
SingleDateRangePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleDateRangePickerComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DatePickerConfigService }, { token: i0.ChangeDetectorRef }, { token: i2.I18nService }], target: i0.ɵɵFactoryTarget.Component });
SingleDateRangePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SingleDateRangePickerComponent, selector: "d-datepicker-range-single", inputs: { selectedRange: "selectedRange", rangePicker: "rangePicker", isAuxiliary: "isAuxiliary", currentCalendars: "currentCalendars" }, outputs: { hoverOnDate: "hoverOnDate", rangeSelected: "rangeSelected", rangeSelecting: "rangeSelecting", syncPickerPair: "syncPickerPair", consolidateTime: "consolidateTime" }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => SingleDateRangePickerComponent),
            multi: true
        }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-month-view {{ cssClass }}\">\n  <table class=\"devui-table devui-month-view-table\">\n    <thead>\n      <tr class=\"devui-calender-header\">\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onPreYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"10px\"\n              viewBox=\"0 0 10 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -1.000000)\">\n                  <path\n                    d=\"M11,1.83333333 L11,10.1666667 L7,7.38833333 L7,10.1666667 L1,6 L7,1.83333333 L7,4.61033333 L11,1.83333333 Z\"\n                  ></path>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-left\"\n            aria-hidden=\"true\"\n            (click)=\"onPreMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"10px\"\n              viewBox=\"0 0 6 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -1.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.000000) rotate(-90.000000) translate(-6.000000, -6.000000) \"\n                    points=\"6 3 10.1666667 9 1.83333333 9\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td colspan=\"3\" class=\"devui-dropdown\">\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'year')\">{{ i18nText?.yearDisplay(currentYear) }}</span>\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'month')\">{{ (i18nText?.monthsOfYear)[currentMonthIndex] }}</span>\n          <ul class=\"devui-monthOption text-center\" [style.display]=\"openChooseMonth ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let month of availableMonths\"\n              [ngClass]=\"{ active: currentMonthIndex == month.index, disabled: month.disabled || isMonthDisable(month.title) }\"\n              (click)=\"onSelectMonth(month)\"\n            >\n              {{ month.title }}\n            </li>\n          </ul>\n          <ul class=\"devui-yearOption text-center\" [style.display]=\"openChooseYear ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let item of yearOptions\"\n              [ngClass]=\"{ active: currentYear == item.title, disabled: item.disabled || isYearDisable(item.title) }\"\n              (click)=\"onSelectYear(item, $event)\"\n            >\n              {{ item.title }}\n            </li>\n          </ul>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-right\"\n            aria-hidden=\"true\"\n            (click)=\"onNextMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"9px\"\n              viewBox=\"0 0 6 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -2.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.166667) scale(-1, 1) rotate(-90.000000) translate(-6.000000, -6.166667) \"\n                    points=\"6 3.16666667 10.1666667 9.16666667 1.83333333 9.16666667\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onNextYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"9px\"\n              viewBox=\"0 0 10 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -2.000000)\">\n                  <polygon points=\"5 4.77777778 5 2 11 6.16666667 5 10.3333333 5 7.55555556 1 10.3333333 1 2\"></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n      </tr>\n      <tr class=\"small text-center devui-week-header\">\n        <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let week of displayWeeks\">\n        <td\n          *ngFor=\"let day of week\"\n          class=\"devui-day {{ isBetweenDay(day.date) }}\"\n          [ngClass]=\"{\n            'devui-out-of-month': !day.inMonth,\n            'devui-in-month-day': day.inMonth,\n            active: isSelectDay(day.date),\n            disabled: isDisabledDay(day.date),\n            'devui-in-range': isInRange(day.date),\n            'devui-today': day.isToday\n          }\"\n          (click)=\"onSelectDate($event, day.date)\"\n          (mouseover)=\"emitHoverDate($event, day.date)\"\n        >\n          <div class=\"devui-calendar-date\">{{ day.day }}</div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr class=\"time-picker-view\" *ngIf=\"showTime\">\n        <ng-container *ngIf=\"!customViewTemplate\">\n          <td colspan=\"4\">\n            <div class=\"devui-timepicker\" *ngIf=\"showTime\" [ngClass]=\"{ 'devui-timepicker-disabled': isDisabledTime() }\">\n              <div class=\"devui-time\">\n                <input [ngModel]=\"currentHour\" (keydown)=\"fixTime($event, 'h')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('h')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('h')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-minutes\" [ngModel]=\"currentMinute\" (keydown)=\"fixTime($event, 'm')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('m')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('m')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-seconds\" [ngModel]=\"currentSecond\" (keydown)=\"fixTime($event, 's')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('s')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('s')\"></div>\n                </div>\n              </div>\n            </div>\n          </td>\n          <td colspan=\"3\" *ngIf=\"isAuxiliary\">\n            <div class=\"devui-btn-wrapper\">\n              <d-button bsStyle=\"common\" [disabled]=\"!rangeStart || !rangeEnd || disabled\" (btnClick)=\"confirmTime()\" bsSize=\"sm\">\n                {{ i18nCommonText?.btnConfirm }}\n              </d-button>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-date-header{height:38px}.devui-month-view{background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);width:240px;text-align:center;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));border-radius:2px;border-radius:var(--devui-border-radius, 2px);position:relative}.devui-month-view .devui-month-view-table{margin-bottom:0;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);table-layout:fixed;border-collapse:collapse;width:100%}.devui-month-view .devui-date-title{font-weight:700;cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-month-view .devui-date-title:hover{color:#7693f5;color:var(--devui-brand-hover, #7693f5)}.devui-month-view .devui-btn-link{text-decoration:none;cursor:pointer;display:block}.devui-month-view .devui-btn-link.devui-year-month-disabled{cursor:not-allowed}.devui-month-view .devui-btn-link.devui-year-month-disabled svg path,.devui-month-view .devui-btn-link.devui-year-month-disabled svg polygon{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-btn-link svg path,.devui-month-view .devui-btn-link svg polygon{fill:#575d6c;fill:var(--devui-text-weak, #575d6c)}.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg path,.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg polygon{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.devui-month-view .date-select{border:none;background:transparent;outline:none;-moz-appearance:none;-webkit-appearance:none;appearance:none}.devui-month-view .devui-week-header{cursor:default;margin-bottom:16px}.devui-month-view .devui-week-header td{width:32px;height:24px;line-height:24px;color:#252b3a;color:var(--devui-text, #252b3a);border:none}.devui-month-view .devui-day:not(.disabled){cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px);color:#dfe1e6;color:var(--devui-feedback-overlay-text, #dfe1e6)}.devui-month-view .devui-day.disabled{cursor:not-allowed}.devui-calendar-date{display:block;margin:0 3px;width:20px;height:20px;padding:0;line-height:20px;background:transparent;text-align:center;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-out-of-month .devui-calendar-date{opacity:.8;background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);color:#d7d8da;color:var(--devui-line, #d7d8da)}.devui-month-view .devui-out-of-month:not(.disabled):hover .devui-calendar-date{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-minutes:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-month-view .devui-seconds:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-yearOption,.devui-monthOption{width:240px;height:195px;position:absolute;left:-68px;top:30px;background:#ffffff;background:var(--devui-base-bg, #ffffff);z-index:1}.devui-yearOption li,.devui-monthOption li{width:60px;height:68px;line-height:68px;text-align:center;display:inline-block;background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-yearOption li:hover,.devui-monthOption li:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);cursor:pointer}.devui-yearOption li.active:not(.disabled),.devui-monthOption li.active:not(.disabled){color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-yearOption li.active:not(.disabled):hover,.devui-monthOption li.active:not(.disabled):hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-yearOption li.disabled,.devui-monthOption li.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);cursor:not-allowed}.devui-month-view .devui-timepicker{background:#f5f5f5;background:var(--devui-area, #f5f5f5);display:flex;justify-content:space-evenly}.devui-month-view .devui-timepicker input{outline:0;border:0;background:#f5f5f5;background:var(--devui-area, #f5f5f5);color:#252b3a;color:var(--devui-text, #252b3a);width:30px;padding:0 0 0 3px;height:30px;text-align:center}.devui-month-view .devui-timepicker.devui-timepicker-disabled{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker.devui-timepicker-disabled input{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker .devui-time{position:relative;display:inline-block;width:40px}.devui-month-view .devui-timepicker .devui-time:not(:first-child):before{content:\":\"}.devui-month-view .devui-table>tbody>tr>td{vertical-align:middle;padding:4px;border-top:none;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-start{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-end{border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0}.devui-month-view .devui-table>tbody>tr>td:not(.disabled){border-top:none;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:hover:not(.active):not(.disabled):not(.devui-out-of-month){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled):not(.active):not(.devui-out-of-month):not(:hover).devui-today .devui-calendar-date{color:#5e7ce0;color:var(--devui-brand, #5e7ce0);font-weight:700}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled .devui-calendar-date{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled:not(.active){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled.active{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>thead>tr>td{vertical-align:middle;line-height:1.5;padding:4px}.devui-noSelect{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-month-view-table td{border-bottom:none}.devui-month-view .devui-table tfoot,.devui-custom-area{border-top:1px solid #f5f5f5;border-top:1px solid var(--devui-area, #f5f5f5)}.devui-month-view tfoot td{padding:10px;vertical-align:middle;border-top:none}.devui-dropdown-menu{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-btn-wrapper{margin-top:0}.devui-btn-nav{display:none;position:absolute;right:9px;top:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.devui-btn-nav .btn-up,.devui-btn-nav .btn-down{position:absolute;width:0;height:0;border:6px solid}.devui-btn-nav .btn-up{padding-top:2px;padding-bottom:1px;border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-text, #252b3a) transparent}.devui-btn-nav .btn-up:hover{border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-icon-fill-active, #252b3a) transparent}.devui-btn-nav .btn-down{top:16px;padding-bottom:4px;border-color:#252b3a transparent transparent transparent;border-color:var(--devui-text, #252b3a) transparent transparent transparent}.devui-btn-nav .btn-down:hover{border-color:#252b3a transparent transparent transparent;border-color:var(--devui-icon-fill-active, #252b3a) transparent transparent transparent}.devui-time input[type=number]::-webkit-inner-spin-button,.devui-time input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.devui-time input[type=number]{-moz-appearance:textfield}.devui-time:hover .devui-btn-nav{display:block}:host ::ng-deep .cdk-overlay-pane d-datepicker.devui-dropdown-menu{padding:0}:host .devui-form-control{padding-right:0}.devui-month-view{box-shadow:none}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-text, #252b3a);border-radius:0}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled):hover{background-color:#e9edfa;background-color:var(--devui-range-item-hover-bg, #e9edfa)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range.disabled:not(.active){background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);opacity:.8;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled{background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled .devui-calendar-date{opacity:.8}.devui-month-view .devui-in-month-day.devui-in-range.disabled:not(.active) .devui-calendar-date{color:#252b3a;color:var(--devui-text, #252b3a);cursor:not-allowed}.devui-month-view .devui-day.devui-out-of-month.active:hover .devui-calendar-date{background-color:transparent;color:#71757f;color:var(--devui-icon-text, #71757f)}.devui-month-view .devui-day.devui-out-of-month.active.disabled{background-color:transparent}tr.devui-calender-header{height:38px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-btn-link.devui-btn-right{transform:scale(1);display:inline-block;line-height:1}.devui-monthOption,.devui-yearOption{white-space:normal}\n"], components: [{ type: i3.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleDateRangePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-datepicker-range-single', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => SingleDateRangePickerComponent),
                            multi: true
                        }], preserveWhitespaces: false, template: "<div class=\"devui-month-view {{ cssClass }}\">\n  <table class=\"devui-table devui-month-view-table\">\n    <thead>\n      <tr class=\"devui-calender-header\">\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onPreYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"10px\"\n              viewBox=\"0 0 10 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -1.000000)\">\n                  <path\n                    d=\"M11,1.83333333 L11,10.1666667 L7,7.38833333 L7,10.1666667 L1,6 L7,1.83333333 L7,4.61033333 L11,1.83333333 Z\"\n                  ></path>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-left\"\n            aria-hidden=\"true\"\n            (click)=\"onPreMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"10px\"\n              viewBox=\"0 0 6 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -1.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.000000) rotate(-90.000000) translate(-6.000000, -6.000000) \"\n                    points=\"6 3 10.1666667 9 1.83333333 9\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td colspan=\"3\" class=\"devui-dropdown\">\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'year')\">{{ i18nText?.yearDisplay(currentYear) }}</span>\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'month')\">{{ (i18nText?.monthsOfYear)[currentMonthIndex] }}</span>\n          <ul class=\"devui-monthOption text-center\" [style.display]=\"openChooseMonth ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let month of availableMonths\"\n              [ngClass]=\"{ active: currentMonthIndex == month.index, disabled: month.disabled || isMonthDisable(month.title) }\"\n              (click)=\"onSelectMonth(month)\"\n            >\n              {{ month.title }}\n            </li>\n          </ul>\n          <ul class=\"devui-yearOption text-center\" [style.display]=\"openChooseYear ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let item of yearOptions\"\n              [ngClass]=\"{ active: currentYear == item.title, disabled: item.disabled || isYearDisable(item.title) }\"\n              (click)=\"onSelectYear(item, $event)\"\n            >\n              {{ item.title }}\n            </li>\n          </ul>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-right\"\n            aria-hidden=\"true\"\n            (click)=\"onNextMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"9px\"\n              viewBox=\"0 0 6 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -2.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.166667) scale(-1, 1) rotate(-90.000000) translate(-6.000000, -6.166667) \"\n                    points=\"6 3.16666667 10.1666667 9.16666667 1.83333333 9.16666667\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onNextYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"9px\"\n              viewBox=\"0 0 10 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -2.000000)\">\n                  <polygon points=\"5 4.77777778 5 2 11 6.16666667 5 10.3333333 5 7.55555556 1 10.3333333 1 2\"></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n      </tr>\n      <tr class=\"small text-center devui-week-header\">\n        <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let week of displayWeeks\">\n        <td\n          *ngFor=\"let day of week\"\n          class=\"devui-day {{ isBetweenDay(day.date) }}\"\n          [ngClass]=\"{\n            'devui-out-of-month': !day.inMonth,\n            'devui-in-month-day': day.inMonth,\n            active: isSelectDay(day.date),\n            disabled: isDisabledDay(day.date),\n            'devui-in-range': isInRange(day.date),\n            'devui-today': day.isToday\n          }\"\n          (click)=\"onSelectDate($event, day.date)\"\n          (mouseover)=\"emitHoverDate($event, day.date)\"\n        >\n          <div class=\"devui-calendar-date\">{{ day.day }}</div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr class=\"time-picker-view\" *ngIf=\"showTime\">\n        <ng-container *ngIf=\"!customViewTemplate\">\n          <td colspan=\"4\">\n            <div class=\"devui-timepicker\" *ngIf=\"showTime\" [ngClass]=\"{ 'devui-timepicker-disabled': isDisabledTime() }\">\n              <div class=\"devui-time\">\n                <input [ngModel]=\"currentHour\" (keydown)=\"fixTime($event, 'h')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('h')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('h')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-minutes\" [ngModel]=\"currentMinute\" (keydown)=\"fixTime($event, 'm')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('m')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('m')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-seconds\" [ngModel]=\"currentSecond\" (keydown)=\"fixTime($event, 's')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('s')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('s')\"></div>\n                </div>\n              </div>\n            </div>\n          </td>\n          <td colspan=\"3\" *ngIf=\"isAuxiliary\">\n            <div class=\"devui-btn-wrapper\">\n              <d-button bsStyle=\"common\" [disabled]=\"!rangeStart || !rangeEnd || disabled\" (btnClick)=\"confirmTime()\" bsSize=\"sm\">\n                {{ i18nCommonText?.btnConfirm }}\n              </d-button>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-date-header{height:38px}.devui-month-view{background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);width:240px;text-align:center;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));border-radius:2px;border-radius:var(--devui-border-radius, 2px);position:relative}.devui-month-view .devui-month-view-table{margin-bottom:0;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);table-layout:fixed;border-collapse:collapse;width:100%}.devui-month-view .devui-date-title{font-weight:700;cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-month-view .devui-date-title:hover{color:#7693f5;color:var(--devui-brand-hover, #7693f5)}.devui-month-view .devui-btn-link{text-decoration:none;cursor:pointer;display:block}.devui-month-view .devui-btn-link.devui-year-month-disabled{cursor:not-allowed}.devui-month-view .devui-btn-link.devui-year-month-disabled svg path,.devui-month-view .devui-btn-link.devui-year-month-disabled svg polygon{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-btn-link svg path,.devui-month-view .devui-btn-link svg polygon{fill:#575d6c;fill:var(--devui-text-weak, #575d6c)}.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg path,.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg polygon{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.devui-month-view .date-select{border:none;background:transparent;outline:none;-moz-appearance:none;-webkit-appearance:none;appearance:none}.devui-month-view .devui-week-header{cursor:default;margin-bottom:16px}.devui-month-view .devui-week-header td{width:32px;height:24px;line-height:24px;color:#252b3a;color:var(--devui-text, #252b3a);border:none}.devui-month-view .devui-day:not(.disabled){cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px);color:#dfe1e6;color:var(--devui-feedback-overlay-text, #dfe1e6)}.devui-month-view .devui-day.disabled{cursor:not-allowed}.devui-calendar-date{display:block;margin:0 3px;width:20px;height:20px;padding:0;line-height:20px;background:transparent;text-align:center;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-out-of-month .devui-calendar-date{opacity:.8;background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);color:#d7d8da;color:var(--devui-line, #d7d8da)}.devui-month-view .devui-out-of-month:not(.disabled):hover .devui-calendar-date{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-minutes:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-month-view .devui-seconds:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-yearOption,.devui-monthOption{width:240px;height:195px;position:absolute;left:-68px;top:30px;background:#ffffff;background:var(--devui-base-bg, #ffffff);z-index:1}.devui-yearOption li,.devui-monthOption li{width:60px;height:68px;line-height:68px;text-align:center;display:inline-block;background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-yearOption li:hover,.devui-monthOption li:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);cursor:pointer}.devui-yearOption li.active:not(.disabled),.devui-monthOption li.active:not(.disabled){color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-yearOption li.active:not(.disabled):hover,.devui-monthOption li.active:not(.disabled):hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-yearOption li.disabled,.devui-monthOption li.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);cursor:not-allowed}.devui-month-view .devui-timepicker{background:#f5f5f5;background:var(--devui-area, #f5f5f5);display:flex;justify-content:space-evenly}.devui-month-view .devui-timepicker input{outline:0;border:0;background:#f5f5f5;background:var(--devui-area, #f5f5f5);color:#252b3a;color:var(--devui-text, #252b3a);width:30px;padding:0 0 0 3px;height:30px;text-align:center}.devui-month-view .devui-timepicker.devui-timepicker-disabled{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker.devui-timepicker-disabled input{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker .devui-time{position:relative;display:inline-block;width:40px}.devui-month-view .devui-timepicker .devui-time:not(:first-child):before{content:\":\"}.devui-month-view .devui-table>tbody>tr>td{vertical-align:middle;padding:4px;border-top:none;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-start{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-end{border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0}.devui-month-view .devui-table>tbody>tr>td:not(.disabled){border-top:none;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:hover:not(.active):not(.disabled):not(.devui-out-of-month){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled):not(.active):not(.devui-out-of-month):not(:hover).devui-today .devui-calendar-date{color:#5e7ce0;color:var(--devui-brand, #5e7ce0);font-weight:700}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled .devui-calendar-date{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled:not(.active){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled.active{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>thead>tr>td{vertical-align:middle;line-height:1.5;padding:4px}.devui-noSelect{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-month-view-table td{border-bottom:none}.devui-month-view .devui-table tfoot,.devui-custom-area{border-top:1px solid #f5f5f5;border-top:1px solid var(--devui-area, #f5f5f5)}.devui-month-view tfoot td{padding:10px;vertical-align:middle;border-top:none}.devui-dropdown-menu{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-btn-wrapper{margin-top:0}.devui-btn-nav{display:none;position:absolute;right:9px;top:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.devui-btn-nav .btn-up,.devui-btn-nav .btn-down{position:absolute;width:0;height:0;border:6px solid}.devui-btn-nav .btn-up{padding-top:2px;padding-bottom:1px;border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-text, #252b3a) transparent}.devui-btn-nav .btn-up:hover{border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-icon-fill-active, #252b3a) transparent}.devui-btn-nav .btn-down{top:16px;padding-bottom:4px;border-color:#252b3a transparent transparent transparent;border-color:var(--devui-text, #252b3a) transparent transparent transparent}.devui-btn-nav .btn-down:hover{border-color:#252b3a transparent transparent transparent;border-color:var(--devui-icon-fill-active, #252b3a) transparent transparent transparent}.devui-time input[type=number]::-webkit-inner-spin-button,.devui-time input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.devui-time input[type=number]{-moz-appearance:textfield}.devui-time:hover .devui-btn-nav{display:block}:host ::ng-deep .cdk-overlay-pane d-datepicker.devui-dropdown-menu{padding:0}:host .devui-form-control{padding-right:0}.devui-month-view{box-shadow:none}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-text, #252b3a);border-radius:0}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled):hover{background-color:#e9edfa;background-color:var(--devui-range-item-hover-bg, #e9edfa)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range.disabled:not(.active){background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);opacity:.8;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled{background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled .devui-calendar-date{opacity:.8}.devui-month-view .devui-in-month-day.devui-in-range.disabled:not(.active) .devui-calendar-date{color:#252b3a;color:var(--devui-text, #252b3a);cursor:not-allowed}.devui-month-view .devui-day.devui-out-of-month.active:hover .devui-calendar-date{background-color:transparent;color:#71757f;color:var(--devui-icon-text, #71757f)}.devui-month-view .devui-day.devui-out-of-month.active.disabled{background-color:transparent}tr.devui-calender-header{height:38px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-btn-link.devui-btn-right{transform:scale(1);display:inline-block;line-height:1}.devui-monthOption,.devui-yearOption{white-space:normal}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: DatePickerConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.I18nService }]; }, propDecorators: { selectedRange: [{
                type: Input
            }], rangePicker: [{
                type: Input
            }], isAuxiliary: [{
                type: Input
            }], currentCalendars: [{
                type: Input
            }], hoverOnDate: [{
                type: Output
            }], rangeSelected: [{
                type: Output
            }], rangeSelecting: [{
                type: Output
            }], syncPickerPair: [{
                type: Output
            }], consolidateTime: [{
                type: Output
            }] } });

class DateRangePickerComponent {
    constructor(datePickerConfig, i18n) {
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.selectedRange = [null, null];
        this.selectedRangeChange = new EventEmitter();
        this.hide = new EventEmitter();
        this.currentCalendars = [null, null];
        this.hoverOnDate = new Subject();
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.chooseDate = (range, reason) => {
            const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.custom;
            this.writeValue(range);
            this.notifyValueChange(range, currentReason);
        };
        this.clearAll = (reason) => {
            const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.custom;
            this.chooseDate([null, null], currentReason);
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.setI18nText();
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat) || null;
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat) || null;
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnChanges(changes) {
        if (changes && changes['selectedRange'] && changes['selectedRange'].currentValue) {
            this.writeValue(this.selectedRange);
        }
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.subscribeHoverActions();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(selectedRange) {
        if (selectedRange) {
            this.selectedRange = selectedRange;
            if (this.leftPicker) {
                this.leftPicker['selectedRange'] = selectedRange;
            }
            if (this.rightPicker) {
                this.rightPicker['selectedRange'] = selectedRange;
            }
            [this.rangeStart, this.rangeEnd] = this.selectedRange;
        }
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nText = this.i18n.getI18nText().datePicker;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
            this.i18nText = data.datePicker;
        });
    }
    rangeChange(data) {
        this.chooseDate(data.selectedRange, data.reason);
    }
    selectingDate(event) {
        this.hoverOnDate.next(event);
    }
    subscribeHoverActions() {
        this.hoverOnDate.pipe(distinctUntilChanged()).subscribe((date) => {
            this.previewRangeEnd(date);
        });
    }
    previewRangeEnd(date) {
        this.leftPicker['previewEnd'] = date;
        this.rightPicker['previewEnd'] = date;
    }
    syncRangeStart(rangeStart, picker) {
        picker.selectRange(rangeStart, true);
    }
    syncPickerPair(currentCalender, orientation) {
        switch (orientation) {
            case 'left':
                this.currentCalendars[0] = currentCalender;
                break;
            case 'right':
                this.currentCalendars[1] = currentCalender;
                break;
        }
    }
    notifyValueChange(range, reason) {
        this.onChange(range);
        this.onTouched();
        this.selectedRangeChange.emit({
            reason,
            selectedRange: range
        });
    }
    consolidateTime() {
        const rangeStart = this.rangeStart;
        const rangeEnd = this.rangeEnd;
        const rangeStartTime = this.leftPicker['currentTime'];
        const rangeEndTime = this.rightPicker['currentTime'];
        this.rangeStart = new Date(rangeStart.getFullYear(), rangeStart.getMonth(), rangeStart.getDate(), rangeStartTime.hour, rangeStartTime.minute, rangeStartTime.second);
        this.rangeEnd = new Date(rangeEnd.getFullYear(), rangeEnd.getMonth(), rangeEnd.getDate(), rangeEndTime.hour, rangeEndTime.minute, rangeEndTime.second);
        const newRange = [this.rangeStart, this.rangeEnd];
        this.onTouched();
        this.writeValue(newRange);
        this.notifyValueChange(newRange, SelectDateRangeChangeReason.button);
        this.hide.emit(true);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
DateRangePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerComponent, deps: [{ token: DatePickerConfigService }, { token: i2.I18nService }], target: i0.ɵɵFactoryTarget.Component });
DateRangePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DateRangePickerComponent, selector: "d-date-range-picker", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", selectedRange: "selectedRange", dateFormat: "dateFormat", customViewTemplate: "customViewTemplate", showTime: "showTime", dateConfig: "dateConfig", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedRangeChange: "selectedRangeChange", hide: "hide" }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DateRangePickerComponent),
            multi: true
        }], viewQueries: [{ propertyName: "leftPicker", first: true, predicate: ["leftPicker"], descendants: true }, { propertyName: "rightPicker", first: true, predicate: ["rightPicker"], descendants: true }, { propertyName: "templateWrap", first: true, predicate: ["templateWrap"], descendants: true }], exportAs: ["dateRangePicker"], usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-date-range-picker\">\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    #leftPicker\n  ></d-datepicker-range-single>\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n    [isAuxiliary]=\"true\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    (consolidateTime)=\"consolidateTime()\"\n    #rightPicker\n  ></d-datepicker-range-single>\n</div>\n<div class=\"devui-date-range-custom\" *ngIf=\"customViewTemplate\" #templateWrap>\n  <ng-template\n    [ngTemplateOutlet]=\"customViewTemplate\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      clearAll: clearAll,\n      chooseDate: chooseDate,\n      rangeStart: rangeStart,\n      rangeEnd: rangeEnd\n    }\"\n  ></ng-template>\n</div>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"], components: [{ type: SingleDateRangePickerComponent, selector: "d-datepicker-range-single", inputs: ["selectedRange", "rangePicker", "isAuxiliary", "currentCalendars"], outputs: ["hoverOnDate", "rangeSelected", "rangeSelecting", "syncPickerPair", "consolidateTime"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-date-range-picker', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DateRangePickerComponent),
                            multi: true
                        }], exportAs: 'dateRangePicker', preserveWhitespaces: false, template: "<div class=\"devui-date-range-picker\">\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    #leftPicker\n  ></d-datepicker-range-single>\n  <d-datepicker-range-single\n    [locale]=\"locale || i18nLocale\"\n    class=\"devui-date-picker\"\n    [cssClass]=\"cssClass\"\n    [disabled]=\"disabled\"\n    [dateConverter]=\"dateConverter\"\n    (rangeSelected)=\"rangeChange($event)\"\n    [dateConfig]=\"dateConfig\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    (hoverOnDate)=\"selectingDate($event)\"\n    [rangePicker]=\"true\"\n    [selectedRange]=\"[rangeStart, rangeEnd]\"\n    (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n    (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n    [isAuxiliary]=\"true\"\n    [currentCalendars]=\"currentCalendars\"\n    [showTime]=\"showTime\"\n    (consolidateTime)=\"consolidateTime()\"\n    #rightPicker\n  ></d-datepicker-range-single>\n</div>\n<div class=\"devui-date-range-custom\" *ngIf=\"customViewTemplate\" #templateWrap>\n  <ng-template\n    [ngTemplateOutlet]=\"customViewTemplate\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: this,\n      clearAll: clearAll,\n      chooseDate: chooseDate,\n      rangeStart: rangeStart,\n      rangeEnd: rangeEnd\n    }\"\n  ></ng-template>\n</div>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"] }]
        }], ctorParameters: function () { return [{ type: DatePickerConfigService }, { type: i2.I18nService }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], selectedRange: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], selectedRangeChange: [{
                type: Output
            }], hide: [{
                type: Output
            }], leftPicker: [{
                type: ViewChild,
                args: ['leftPicker']
            }], rightPicker: [{
                type: ViewChild,
                args: ['rightPicker']
            }], templateWrap: [{
                type: ViewChild,
                args: ['templateWrap']
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }] } });

// tslint:disable-next-line: component-class-suffix
class DateRangePickerDirective {
    constructor(elementRef, renderer, datePickerConfig, i18n, cdr, devConfigService, doc) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.cdr = cdr;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.hideOnRangeSelected = false;
        this.splitter = '  -  ';
        this.showAnimation = true;
        this.selectedRangeChange = new EventEmitter();
        this._selectedRange = [null, null];
        this._isOpen = false;
        this.datepickerPosition = 'bottom';
        this.valueList = [];
        this.startAnimation = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.chooseDate = (range, reason, hide = true) => {
            if (this.dateRangePicker && this.dateRangePicker['chooseDate']) {
                this.dateRangePicker['chooseDate'](range, reason);
            }
            else {
                this._selectedRange = [...range];
                this.notifyValueChange({
                    reason: reason,
                    selectedRange: [...range]
                });
            }
            if (!this.showTime && this.hideOnRangeSelected && hide) {
                this.hide();
            }
        };
        this.onDocumentClick = ($event) => {
            let templateWrap;
            if (this.dateRangePicker && this.dateRangePicker['templateWrap']) {
                templateWrap = this.dateRangePicker['templateWrap'];
            }
            if (templateWrap && templateWrap.nativeElement.contains($event.target) && !this.hideOnRangeSelected) {
                this.isOpen = true;
            }
            else if (this.elementRef.nativeElement !== $event.target) {
                this.isOpen = false;
            }
            this.cdr.markForCheck();
        };
        this.clearAll = (reason, hide) => {
            const currentReason = typeof reason === 'number' ? reason : SelectDateRangeChangeReason.custom;
            this.chooseDate([null, null], currentReason, hide);
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.setI18nText();
        this.document = this.doc;
    }
    set maxDate(date) {
        this._maxDate = date;
    }
    get maxDate() {
        if (this.dateRangePicker && this.dateRangePicker['maxDate']) {
            return this.dateRangePicker['maxDate'];
        }
        else {
            return this._maxDate;
        }
    }
    set minDate(date) {
        this._minDate = date;
    }
    get minDate() {
        if (this.dateRangePicker && this.dateRangePicker['minDate']) {
            return this.dateRangePicker['minDate'];
        }
        else {
            return this._minDate;
        }
    }
    set selectedRange(range) {
        if (Array.isArray(range) && range.every(_ => (!!_ || _ === null))) {
            this._selectedRange = range;
        }
    }
    get selectedRange() {
        return this._selectedRange;
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set rangeStart(rangeStart) {
        if (this.dateRangePicker) {
            this.dateRangePicker['rangeStart'] = rangeStart;
        }
    }
    get rangeEnd() {
        if (this.dateRangePicker) {
            return this.dateRangePicker['rangeEnd'];
        }
    }
    set isOpen(isOpen) {
        if (this._isOpen !== isOpen) {
            this._isOpen = isOpen;
            if (!isOpen && !this.rangeEnd) {
                this.rangeStart = null;
            }
            if (!isOpen) {
                this.startAnimation = false;
                removeClassFromOrigin(this.elementRef);
                this.document.removeEventListener('click', this.onDocumentClick);
            }
            else {
                setTimeout(() => {
                    addClassToOrigin(this.elementRef);
                    this.document.addEventListener('click', this.onDocumentClick);
                    this.startAnimation = true;
                    this.cdr.detectChanges();
                });
            }
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    onBlur($event) {
        this.onTouched();
        if (!this.validateDate(this.elementRef.nativeElement.value)) {
            this.resetValue();
        }
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this.updateCdkConnectedOverlayOrigin();
        this.initInputChanges();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    initInputChanges() {
        this.valueChangeSubscrip = fromEvent(this.elementRef.nativeElement, 'keyup').pipe(map((e) => e.target.value), filter(() => !this.disabled), debounceTime(300)).subscribe(value => {
            this.transUserInputToDatepicker(value);
        });
    }
    writeValue(selectedRange) {
        this._selectedRange = selectedRange;
        if (selectedRange) {
            this.writeModelValue(selectedRange);
        }
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
        });
    }
    updateCdkConnectedOverlayOrigin() {
        if (this.elementRef.nativeElement) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(formWithDropDown(this.elementRef) || this.elementRef.nativeElement);
        }
    }
    toggle(clickShow) {
        if (clickShow === undefined) {
            this.isOpen = !this.isOpen;
        }
        else {
            this.isOpen = clickShow;
        }
    }
    hide(event) {
        if (event !== false) {
            this.isOpen = false;
        }
    }
    writeModelValue(input) {
        if (Array.isArray(input) && input.every(_ => !!_)) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.formatDateRange(input));
        }
        else {
            this.renderer.setProperty(this.elementRef.nativeElement, 'value', '');
        }
    }
    formatDateRange(arr) {
        return arr.map((date, i) => {
            return (date ?
                this.dateConverter.format(date, this.dateFormat, this.locale || this.i18nLocale) :
                ['Start', 'End'][i]);
        }).join(this.splitter);
    }
    onPositionChange(position) {
        switch (position.connectionPair.overlayY) {
            case 'top':
            case 'center':
                this.datepickerPosition = 'bottom';
                break;
            case 'bottom':
                this.datepickerPosition = 'top';
        }
    }
    notifyValueChange(dateObj) {
        this.writeValue(dateObj.selectedRange);
        this.onChange(dateObj.selectedRange);
        this.onTouched();
        this.selectedRangeChange.emit({
            reason: dateObj.reason,
            selectedRange: dateObj.selectedRange
        });
        if (!this.showTime && this.hideOnRangeSelected) {
            this.hide();
        }
    }
    transUserInputToDatepicker(value) {
        if (!this.showTime && !this.disabled) {
            const _value = value || this.elementRef.nativeElement.value;
            if (!_value && !this.selectedRange.every(val => !!val)) {
                this.clearAll(undefined, false);
                return;
            }
            if (!_value) {
                this.clearAll(undefined, false);
                return;
            }
            if (this.validateDate(_value)) {
                this.chooseDate(this.valueList, undefined, false);
            }
        }
        else {
            this.resetValue();
        }
    }
    resetValue() {
        this.writeValue(this.selectedRange);
    }
    validateDate(value) {
        if (!value) {
            return true;
        }
        this.valueList = value.split(this.splitter);
        let valueFormat;
        // 如果拆出来6个，则为日期间分隔符和年月日间分隔符相同的情况，此情况允许
        if (this.valueList.length === 6 && this.valueList.every(val => !!val)) {
            const curValueList = [];
            this.valueList.forEach((val, index) => {
                // 根据下标，前三个组装在一起，后三个组装在一起，不需要考虑分隔符，后面会format
                if ((index + 1) % 3 === 1) {
                    curValueList.push(val);
                }
                else {
                    curValueList[Math.ceil(index / 3) - 1] = curValueList[Math.ceil(index / 3) - 1] + '-' + val;
                }
            });
            this.valueList = curValueList;
        }
        // 不管拆出来是6还是2个，都需要组装成2个日期
        if (this.valueList.length === 2 &&
            this.valueList.every(val => !!val) &&
            this.valueList.every((val, index) => new Date(val).getTime() === new Date(this.selectedRange[index]).getTime())) {
            this.valueList = this.valueList.map(t => new Date(t));
            return true;
        }
        if (!this.valueList.every(val => new Date(val).getTime())) {
            return false;
        }
        if (this.valueList.length === 2 && this.valueList.every(val => !!val)) {
            const valueTimeList = this.valueList.map(val => (new Date(`${val} 00:00:00`)).getTime());
            valueFormat = this.formatDateRange(this.valueList.map(numValue => new Date(numValue)));
            if (value === valueFormat &&
                !valueTimeList.every((val) => {
                    return (val >= this.minDate.getTime() && val <= this.maxDate.getTime());
                })) {
                return false;
            }
            else {
                // 判断前后俩日期是否大于最小，小于最大，若是则合法，进行如下操作
                // 此时包括value为NaN既日期格式不正确的情况，对其进行处理下方判断会过滤掉
                this.valueList = this.valueList.map(val => new Date(val).getTime()).sort((a, b) => a - b).map(numValue => new Date(numValue));
            }
            if (valueFormat && value === valueFormat) {
                return true;
            }
            return false;
        }
        else {
            return false;
        }
    }
    ngOnDestroy() {
        this.hide();
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        if (this.valueChangeSubscrip) {
            this.valueChangeSubscrip.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
DateRangePickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DatePickerConfigService }, { token: i2.I18nService }, { token: i0.ChangeDetectorRef }, { token: i3$1.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DateRangePickerDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DateRangePickerDirective, selector: "[dDateRangePicker]", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", hideOnRangeSelected: "hideOnRangeSelected", customViewTemplate: "customViewTemplate", splitter: "splitter", showAnimation: "showAnimation", maxDate: "maxDate", minDate: "minDate", selectedRange: "selectedRange", showTime: "showTime", dateConfig: "dateConfig", dateFormat: "dateFormat" }, outputs: { selectedRangeChange: "selectedRangeChange" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DateRangePickerDirective),
            multi: true
        }], viewQueries: [{ propertyName: "dateRangePicker", first: true, predicate: ["dateRangePicker"], descendants: true }], exportAs: ["dateRangePicker"], ngImport: i0, template: "<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen=false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datepickerPosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-date-range-wrapper\">\n    <d-date-range-picker\n      #dateRangePicker\n      [locale]=\"locale\"\n      [cssClass]=\"cssClass\"\n      [disabled]=\"disabled\"\n      [dateConverter]=\"dateConverter\"\n      [customViewTemplate]=\"customViewTemplate\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [dateFormat]=\"dateFormat\"\n      [showTime]=\"showTime\"\n      [selectedRange]=\"selectedRange\"\n      (selectedRangeChange)=\"notifyValueChange($event)\"\n      (hide)=\"hide($event)\"\n      [(ngModel)]=\"_selectedRange\"\n    ></d-date-range-picker>\n  </div>\n</ng-template>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"], components: [{ type: DateRangePickerComponent, selector: "d-date-range-picker", inputs: ["locale", "cssClass", "disabled", "dateConverter", "selectedRange", "dateFormat", "customViewTemplate", "showTime", "dateConfig", "maxDate", "minDate"], outputs: ["selectedRangeChange", "hide"], exportAs: ["dateRangePicker"] }], directives: [{ type: i5$1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], animations: [
        fadeInOut
    ] });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], DateRangePickerDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DateRangePickerDirective, decorators: [{
            type: Component,
            args: [{ selector: '[dDateRangePicker]', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DateRangePickerDirective),
                            multi: true
                        }], exportAs: 'dateRangePicker', animations: [
                        fadeInOut
                    ], preserveWhitespaces: false, template: "<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen=false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datepickerPosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-date-range-wrapper\">\n    <d-date-range-picker\n      #dateRangePicker\n      [locale]=\"locale\"\n      [cssClass]=\"cssClass\"\n      [disabled]=\"disabled\"\n      [dateConverter]=\"dateConverter\"\n      [customViewTemplate]=\"customViewTemplate\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [dateFormat]=\"dateFormat\"\n      [showTime]=\"showTime\"\n      [selectedRange]=\"selectedRange\"\n      (selectedRangeChange)=\"notifyValueChange($event)\"\n      (hide)=\"hide($event)\"\n      [(ngModel)]=\"_selectedRange\"\n    ></d-date-range-picker>\n  </div>\n</ng-template>\n", styles: [".devui-date-range-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-date-range-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-date-picker:not(:last-child){margin-right:20px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: DatePickerConfigService }, { type: i2.I18nService }, { type: i0.ChangeDetectorRef }, { type: i3$1.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], hideOnRangeSelected: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], splitter: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectedRangeChange: [{
                type: Output
            }], dateRangePicker: [{
                type: ViewChild,
                args: ['dateRangePicker']
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], selectedRange: [{
                type: Input
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });

class DatePickerAppendToBodyComponent {
    constructor(elementRef, viewContainerRef, renderer2, datePickerConfig, i18n, cdr, doc) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.renderer2 = renderer2;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.cdr = cdr;
        this.doc = doc;
        this.appendToBodyDirections = [
            'rightDown', 'leftDown', 'rightUp', 'leftUp'
        ];
        this.autoOpen = false;
        this.showAnimation = true;
        this.selectedDateChange = new EventEmitter();
        this._isOpen = false;
        this.datepickerPosition = 'bottom';
        this.startAnimation = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.onDocumentClick = ($event) => {
            if (this.elementRef.nativeElement !== $event.target) {
                this.isOpen = false;
                this.cdr.markForCheck();
            }
        };
        this.clearAll = (reason) => {
            if (this.disabled) {
                return;
            }
            this.writeValue(null);
            this.selectedDate = null;
            this.onChange(null);
            this.onTouched();
            const currentReason = typeof reason === 'number' ? reason : SelectDateChangeReason.custom;
            this.selectedDateChange.emit({
                reason: currentReason,
                selectedDate: null
            });
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.setI18nText();
        this.document = this.doc;
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
            this.writeModelValue({ selectedDate: this.selectedDate, reason: SelectDateChangeReason.format });
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat, this.locale || this.i18nLocale);
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat, this.locale || this.i18nLocale);
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    set isOpen(open) {
        if (this._isOpen !== open) {
            this._isOpen = open;
            if (!open) {
                this.startAnimation = false;
                removeClassFromOrigin(this.elementRef);
                this.document.removeEventListener('click', this.onDocumentClick);
            }
            else {
                setTimeout(() => {
                    this.startAnimation = true;
                    this.cdr.detectChanges();
                    addClassToOrigin(this.elementRef);
                    this.document.addEventListener('click', this.onDocumentClick);
                });
            }
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    onBlur($event) {
        this.onTouched();
        const value = this.elementRef.nativeElement.value;
        if (!this.validateDate(value)) {
            this.resetValue();
        }
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.setPositions();
        this.updateCdkConnectedOverlayOrigin();
        if (this.autoOpen) {
            this.isOpen = true;
        }
        this.valueChanges = this.registerInputEvent();
        this.userInputSubscription = this.valueChanges.subscribe((source) => this.transUserInputToDatepicker(source));
    }
    ngOnChanges(changes) {
        if (changes['appendToBodyDirections']) {
            this.setPositions();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerInputEvent() {
        return fromEvent(this.elementRef.nativeElement, 'keyup').pipe(map((e) => e.target.value), filter(() => !this.disabled), debounceTime(300));
    }
    writeValue(obj) {
        this.selectedDate = obj ?
            this.dateConverter.parse(obj, this.dateFormat, this.locale || this.i18nLocale) : null;
        const value = this.selectedDate ? this.dateConverter.format(this.selectedDate, this.dateFormat, this.locale || this.i18nLocale) : '';
        this.renderer2.setProperty(this.elementRef.nativeElement, 'value', value);
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
        });
    }
    timeChange(dateObj) {
        this.writeValue(dateObj ? dateObj['selectedDate'] : null);
        this.writeModelValue(dateObj);
        if (dateObj && (dateObj['reason'] === SelectDateChangeReason.date && !this.showTime ||
            dateObj['reason'] === SelectDateChangeReason.button)) {
            this.isOpen = false;
        }
    }
    updateCdkConnectedOverlayOrigin() {
        if (this.elementRef.nativeElement) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(formWithDropDown(this.elementRef) || this.elementRef.nativeElement);
        }
    }
    toggle(clickShow) {
        if (clickShow === undefined) {
            if (this.isOpen) {
                this.hide();
            }
            else {
                this.show();
            }
        }
        else {
            if (clickShow) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    hide() {
        this.isOpen = false;
    }
    show() {
        this.isOpen = true;
    }
    writeModelValue(selectDateObj) {
        let selectDate;
        let dateReason = SelectDateChangeReason.time;
        if (selectDateObj && typeof selectDateObj === 'object' && Object.prototype.hasOwnProperty.call(selectDateObj, 'selectedDate')) {
            selectDate = selectDateObj.selectedDate;
            dateReason = selectDateObj.reason;
        }
        if (selectDate) {
            selectDate = new Date(selectDate);
        }
        else {
            selectDate = null;
        }
        this.onChange(selectDate); // 这行代码能触发ngModel绑定的变量值发生变化
        this.onTouched();
        this.selectedDateChange.emit({
            reason: dateReason,
            selectedDate: this.selectedDate
        });
    }
    onPositionChange(position) {
        switch (position.connectionPair.overlayY) {
            case 'top':
            case 'center':
                this.datepickerPosition = 'bottom';
                break;
            case 'bottom':
                this.datepickerPosition = 'top';
        }
    }
    setPositions() {
        if (this.appendToBodyDirections && this.appendToBodyDirections.length > 0) {
            this.positions = this.appendToBodyDirections.map(position => {
                if (typeof position === 'string') {
                    return AppendToBodyDirectionsConfig[position];
                }
                else {
                    return position;
                }
            }).filter(position => position !== undefined);
        }
        else {
            this.positions = undefined;
        }
    }
    transUserInputToDatepicker(value) {
        if (!value && !this.selectedDate) {
            return;
        }
        if (!value) {
            this.clearAll();
            return;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (new Date(valueFormat).getTime() === new Date(this.selectedDate).getTime() || !this.validateDate(value)) {
            return;
        }
        if (this.showTime || this.disabled) {
            this.resetValue();
        }
        else {
            this.selectedDate = valueDate;
            this.writeModelValue({
                reason: SelectDateChangeReason.custom,
                selectedDate: valueDate
            });
        }
    }
    validateDate(value) {
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat && (valueDate.getTime() < this.minDate.getTime() || valueDate.getTime() > this.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        const resDate = this.selectedDate ?
            this.dateConverter.format(this.selectedDate, this.dateFormat, this.locale || this.i18nLocale) :
            '';
        this.elementRef.nativeElement.value = resDate;
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        if (this.userInputSubscription) {
            this.userInputSubscription.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
DatePickerAppendToBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerAppendToBodyComponent, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }, { token: DatePickerConfigService }, { token: i2.I18nService }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DatePickerAppendToBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: DatePickerAppendToBodyComponent, selector: "[dDatepicker][appendToBody]", inputs: { appendToBodyDirections: "appendToBodyDirections", locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", customViewTemplate: "customViewTemplate", autoOpen: "autoOpen", showAnimation: "showAnimation", showTime: "showTime", dateConfig: "dateConfig", dateFormat: "dateFormat", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedDateChange: "selectedDateChange" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatePickerAppendToBodyComponent),
            multi: true
        }], exportAs: ["datepicker"], usesOnChanges: true, ngImport: i0, template: `
    <ng-template cdk-connected-overlay
                 [cdkConnectedOverlayOrigin]="cdkConnectedOverlayOrigin"
                 [cdkConnectedOverlayPositions]="positions"
                 [cdkConnectedOverlayOpen]="isOpen"
                 (backdropClick)="isOpen=false"
                 (positionChange)="onPositionChange($event)">
      <d-datepicker [@fadeInOut]="startAnimation ? datepickerPosition : 'void'"
                      [locale]="locale || i18nLocale" [@.disabled]="!showAnimation"
                      [showTime]="showTime" [cssClass]="cssClass" [selectedDate]="selectedDate"
                      [disabled]="disabled" [dateConverter]="dateConverter" (selectedDateChange)="timeChange($event)"
                      [dateConfig]="dateConfig"
                      [customViewTemplate]="customViewTemplate" [maxDate]="maxDate"
                      [minDate]="minDate" class="devui-datepicker"></d-datepicker>
    </ng-template>
  `, isInline: true, styles: [".devui-datepicker{border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}\n"], components: [{ type: DatepickerComponent, selector: "d-datepicker", inputs: ["cssClass", "dateConverter", "locale", "disabled", "customViewTemplate", "selectedDate", "mode", "dateFormat", "showTime", "dateConfig", "minDate", "maxDate"], outputs: ["selectedDateChange"] }], directives: [{ type: i5$1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }], animations: [
        fadeInOut
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatePickerAppendToBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dDatepicker][appendToBody]', providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatePickerAppendToBodyComponent),
                            multi: true
                        }], exportAs: 'datepicker', template: `
    <ng-template cdk-connected-overlay
                 [cdkConnectedOverlayOrigin]="cdkConnectedOverlayOrigin"
                 [cdkConnectedOverlayPositions]="positions"
                 [cdkConnectedOverlayOpen]="isOpen"
                 (backdropClick)="isOpen=false"
                 (positionChange)="onPositionChange($event)">
      <d-datepicker [@fadeInOut]="startAnimation ? datepickerPosition : 'void'"
                      [locale]="locale || i18nLocale" [@.disabled]="!showAnimation"
                      [showTime]="showTime" [cssClass]="cssClass" [selectedDate]="selectedDate"
                      [disabled]="disabled" [dateConverter]="dateConverter" (selectedDateChange)="timeChange($event)"
                      [dateConfig]="dateConfig"
                      [customViewTemplate]="customViewTemplate" [maxDate]="maxDate"
                      [minDate]="minDate" class="devui-datepicker"></d-datepicker>
    </ng-template>
  `, animations: [
                        fadeInOut
                    ], preserveWhitespaces: false, styles: [".devui-datepicker{border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: DatePickerConfigService }, { type: i2.I18nService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { appendToBodyDirections: [{
                type: Input
            }], locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], autoOpen: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectedDateChange: [{
                type: Output
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });

class DatepickerDirective {
    constructor(elementRef, viewContainerRef, componentFactoryResolver, renderer2, injector, datePickerConfig, i18n, builder, cdr, devConfigService, doc) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer2 = renderer2;
        this.injector = injector;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.builder = builder;
        this.cdr = cdr;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.mode = 'date';
        this.yearNumber = 12;
        this.direction = 'down';
        this.autoOpen = false;
        this.showAnimation = true;
        this.selectedDateChange = new EventEmitter();
        this._isOpen = false;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.onDocumentClick = ($event) => {
            if (this.elementRef.nativeElement !== $event.target) {
                this.hide();
                this.cdr.markForCheck();
            }
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.selectedDate = null;
        const factory = this.componentFactoryResolver.resolveComponentFactory(DatepickerComponent);
        this.cmpRef = this.viewContainerRef.createComponent(factory, this.viewContainerRef.length, this.injector);
        this.setI18nText();
        this.document = this.doc;
    }
    set isOpen(val) {
        this._isOpen = val;
        if (val) {
            addClassToOrigin(this.elementRef);
            setTimeout(() => {
                this.document.addEventListener('click', this.onDocumentClick);
            });
        }
        else {
            removeClassFromOrigin(this.elementRef);
            this.document.removeEventListener('click', this.onDocumentClick);
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    set showTime(showTime) {
        this._showTime = showTime;
    }
    get showTime() {
        return typeof this._showTime === 'boolean' ? this._showTime : this.dateConfig.timePicker;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
            this.writeModelValue({ selectedDate: this.selectedDate, reason: SelectDateChangeReason.format });
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set maxDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat);
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.dateConverter.parse(date, this.dateFormat);
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    onBlur($event) {
        this.onTouched();
        const value = this.elementRef.nativeElement.value;
        if (!this.validateDate(value)) {
            this.resetValue();
        }
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof dateConfig.timePicker !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        const target = this.cmpRef.location.nativeElement;
        this.applyPopupStyling(target);
        const component = this.cmpRef.instance;
        component.dateFormat = this.dateFormat;
        this.renderer2.setStyle(target, 'display', 'none');
        component.writeValue(this.selectedDate);
        this.fillPopupData();
        component.ngOnInit();
        component.registerOnChange((selectedDateObj) => {
            this.writeValue(selectedDateObj);
            this.onChange(selectedDateObj.selectedDate);
        });
        component.selectedDateChange.subscribe((arg) => {
            if ((arg.reason === SelectDateChangeReason.date && !this.showTime) || arg.reason === SelectDateChangeReason.button) {
                this.hide();
            }
        });
        if (this.autoOpen) {
            this.show();
        }
        this.valueChanges = this.registerInputEvent();
        this.userInputSubscription = this.valueChanges.subscribe((source) => this.transUserInputToDatepicker(source));
    }
    writeValue(obj) {
        let curDate;
        if (obj && typeof obj === 'object' && Object.prototype.hasOwnProperty.call(obj, 'selectedDate')) {
            curDate = obj.selectedDate;
        }
        else {
            curDate = obj;
        }
        this.selectedDate = curDate ? this.dateConverter.parse(curDate, this.dateFormat) : null;
        this.writeModelValue(obj);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerInputEvent() {
        return fromEvent(this.elementRef.nativeElement, 'keyup').pipe(map((e) => e.target.value), filter(() => !this.disabled), debounceTime(300));
    }
    setI18nText() {
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nLocale = data.locale;
        });
    }
    applyPopupStyling(nativeElement) {
        this.renderer2.addClass(nativeElement, 'devui-dropdown-menu');
        this.renderer2.setStyle(nativeElement, 'padding', '0px');
        this.renderer2.setStyle(nativeElement, 'left', '-1px');
        this.renderer2.setStyle(nativeElement, 'top', 'calc(100% + 1px)');
        if (this.direction === 'up') {
            this.renderer2.setStyle(nativeElement, 'top', 'auto');
            this.renderer2.setStyle(nativeElement, 'bottom', 'calc(100% + 1px)');
        }
    }
    hide() {
        const playAnimation = this.isOpen !== false;
        this.isOpen = false;
        if (playAnimation) {
            this.playAnimation();
        }
    }
    writeModelValue(selectDateObj) {
        let selectDate;
        let dateReason = SelectDateChangeReason.time;
        if (selectDateObj && typeof selectDateObj === 'object' && Object.prototype.hasOwnProperty.call(selectDateObj, 'selectedDate')) {
            selectDate = selectDateObj.selectedDate;
            dateReason = selectDateObj.reason;
        }
        else {
            selectDate = selectDateObj;
        }
        if (selectDate) {
            selectDate = new Date(selectDate);
        }
        else {
            selectDate = null;
        }
        const value = selectDate ? this.dateConverter.format(selectDate, this.dateFormat, this.locale || this.i18nLocale) : '';
        this.renderer2.setProperty(this.elementRef.nativeElement, 'value', value);
        if (this.isOpen) {
            this.cmpRef.instance.writeValue(this.selectedDate);
        }
        if (selectDateObj && typeof selectDateObj === 'object' && Object.prototype.hasOwnProperty.call(selectDateObj, 'selectedDate')) {
            this.selectedDateChange.emit({
                reason: dateReason,
                selectedDate: this.selectedDate,
            });
            this.onTouched();
        }
    }
    show() {
        const component = this.cmpRef.instance;
        component.writeValue(this.selectedDate);
        this.fillPopupData();
        const playAnimation = this.isOpen !== true;
        this.isOpen = true;
        if (playAnimation) {
            setTimeout(() => {
                this.playAnimation();
            });
        }
    }
    toggle(clickShow) {
        if (clickShow === undefined) {
            if (this.isOpen) {
                this.hide();
            }
            else {
                this.show();
            }
        }
        else {
            if (clickShow) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    fillPopupData() {
        [
            'showTime',
            'maxDate',
            'minDate',
            'cssClass',
            'disabled',
            'dateConverter',
            'locale',
            'dateFormat',
            'yearNumber',
            'dateConfig',
            'mode',
            'customViewTemplate',
        ].forEach((key) => {
            if (this[key] !== undefined) {
                this.cmpRef.instance[key] = this[key];
            }
        });
    }
    clearAll(reason) {
        if (this.disabled) {
            return;
        }
        this.onTouched();
        this.cmpRef.instance.clearAll(reason);
    }
    popIn(direction) {
        switch (direction) {
            case 'top':
                return [
                    style({ transform: 'scaleY(0.8) translateY(4px)', opacity: 0.8, transformOrigin: '0% 100%', display: 'block' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT}`, style({ transform: 'scaleY(0.9999) translateY(0)', opacity: 1, transformOrigin: '0% 100%', display: 'block' })),
                ];
            case 'bottom':
            default:
                return [
                    style({ transform: 'scaleY(0.8)  translateY(-4px)', opacity: 0.8, transformOrigin: '0% 0%', display: 'block' }),
                    animate(`${AnimationDuration.BASE}  ${AnimationCurves.EASE_OUT}`, style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 0%', display: 'block' })),
                ];
        }
    }
    popOut(direction) {
        switch (direction) {
            case 'top':
                return [
                    style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 100%', display: 'block' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.8)  translateY(4px)', opacity: 0.8, transformOrigin: '0% 100%', display: 'block' })),
                ];
            case 'bottom':
            default:
                return [
                    style({ transform: 'scaleY(0.9999)  translateY(0)', opacity: 1, transformOrigin: '0% 0%', display: 'block' }),
                    animate(`${AnimationDuration.BASE} ${AnimationCurves.EASE_IN}`, style({ transform: 'scaleY(0.8)  translateY(-4px)', opacity: 0.8, transformOrigin: '0% 0%', display: 'block' })),
                ];
        }
    }
    playAnimation() {
        if (this.player) {
            this.player.destroy();
        }
        let direction = '';
        switch (this.direction) {
            case 'down':
                direction = 'bottom';
                break;
            case 'up':
                direction = 'top';
                break;
            default:
                direction = 'bottom';
        }
        if (this.showAnimation) {
            const metadata = this.isOpen ? this.popIn(direction) : this.popOut(direction);
            const factory = this.builder.build(metadata);
            this.player = factory.create(this.cmpRef.location.nativeElement);
            this.renderer2.setStyle(this.cmpRef.location.nativeElement, 'display', 'block');
            this.player.onDone(() => {
                if (!this.isOpen) {
                    const targetElement = this.cmpRef.location.nativeElement;
                    this.renderer2.setStyle(targetElement, 'display', 'none');
                }
            });
            this.player.play();
        }
        else {
            this.renderer2.setStyle(this.cmpRef.location.nativeElement, 'display', this.isOpen ? 'block' : 'none');
        }
    }
    transUserInputToDatepicker(value) {
        if (!value && !this.selectedDate) {
            return;
        }
        if (!value) {
            this.clearAll();
            return;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate instanceof Date &&
            !isNaN(valueDate.getTime()) &&
            this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (new Date(valueFormat).getTime() === new Date(this.selectedDate).getTime() || !this.validateDate(value)) {
            return;
        }
        if (this.showTime || this.disabled) {
            this.resetValue();
        }
        else {
            this.cmpRef.instance.chooseDate(value);
        }
    }
    validateDate(value) {
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) && this.dateConverter.format(valueDate, this.dateFormat, this.locale || this.i18nLocale);
        if (!valueDate ||
            value !== valueFormat ||
            (value === valueFormat && (valueDate.getTime() < this.minDate.getTime() || valueDate.getTime() > this.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        const resDate = this.selectedDate ? this.dateConverter.format(this.selectedDate, this.dateFormat, this.locale || this.i18nLocale) : '';
        this.elementRef.nativeElement.value = resDate;
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        if (this.userInputSubscription) {
            this.userInputSubscription.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
DatepickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Renderer2 }, { token: i0.Injector }, { token: DatePickerConfigService }, { token: i2.I18nService }, { token: i3$2.AnimationBuilder }, { token: i0.ChangeDetectorRef }, { token: i3$1.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
DatepickerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DatepickerDirective, selector: "[dDatepicker]:not([appendToBody])", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", mode: "mode", dateConverter: "dateConverter", direction: "direction", customViewTemplate: "customViewTemplate", autoOpen: "autoOpen", showAnimation: "showAnimation", showTime: "showTime", dateConfig: "dateConfig", dateFormat: "dateFormat", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedDateChange: "selectedDateChange" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatepickerDirective),
            multi: true,
        },
    ], exportAs: ["datepicker"], ngImport: i0 });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], DatepickerDirective.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dDatepicker]:not([appendToBody])',
                    exportAs: 'datepicker',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatepickerDirective),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Renderer2 }, { type: i0.Injector }, { type: DatePickerConfigService }, { type: i2.I18nService }, { type: i3$2.AnimationBuilder }, { type: i0.ChangeDetectorRef }, { type: i3$1.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], mode: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], direction: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], autoOpen: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], selectedDateChange: [{
                type: Output
            }], showTime: [{
                type: Input
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });

class TwoDatepickerSingleComponent extends DatepickerComponent {
    constructor(elementRef, renderer, datePickerConfig, changeDetectorRef, i18n) {
        super(elementRef, renderer, datePickerConfig, changeDetectorRef, i18n);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.datePickerConfig = datePickerConfig;
        this.changeDetectorRef = changeDetectorRef;
        this.i18n = i18n;
        this.selectedRange = Array(2);
        this.rangePicker = false;
        this.isAuxiliary = false;
        this.currentCalendars = Array(2);
        this.hoverOnDate = new EventEmitter();
        this.rangeSelected = new EventEmitter();
        this.rangeSelecting = new EventEmitter();
        this.syncPickerPair = new EventEmitter();
        this.consolidateTime = new EventEmitter();
        this.setI18nText();
    }
    ngOnInit() {
        [this.rangeStart, this.rangeEnd] = this.selectedRange;
        if (!this.isAuxiliary && !this.rangeStart) {
            // 主面板，未选择开始日期的情况
            this.onSelectDateChanged();
            this.onDisplayWeeksChange();
            this.initDatePicker();
        }
        else if (this.isAuxiliary && !this.rangeEnd) {
            // 副面板，未选择结束日期的情况
            this.onSelectDateChanged();
            this.initDatePicker();
            this.onNextMonth('init');
            this.selectedDate = new Date(this.currentYear, this.currentMonthIndex);
        }
        else if (!this.isAuxiliary && this.rangeStart) {
            // 主面板，已选择开始日期的情况
            this.selectedDate = this.rangeStart;
            super.ngOnInit();
        }
        else if (this.isAuxiliary && this.rangeEnd) {
            // 副面板，已选择结束日期的情况
            const rangeStart = this.convertDate(this.rangeStart);
            const rangeEnd = this.convertDate(this.rangeEnd);
            this.currentYear = rangeEnd.getFullYear();
            this.currentMonthIndex = rangeEnd.getMonth();
            this.selectedDate = this.rangeEnd;
            super.ngOnInit();
            // 处理选择的日期范围开始和结束在同一个月的情况
            if (rangeStart && rangeEnd && rangeStart.getFullYear() === rangeEnd.getFullYear() &&
                rangeStart.getMonth() === rangeEnd.getMonth()) {
                this.onNextMonth('init');
            }
            this.selectedDate = new Date(this.currentYear, this.currentMonthIndex);
        }
        if (!this.selectedRange.every(curDate => !!curDate)) {
            this.selectingRange = true;
        }
        this.availableMonths = this.onDisplayMonthsChange();
        this.notifyCalenderChange();
    }
    /*
    **  @param invocation:调用时机
    */
    onSelectDate($event, date, invocation) {
        if ($event.stopPropagation) {
            $event.stopPropagation();
        }
        if (invocation !== 'init') {
            if (this.isDisabledDay(date)) {
                $event.preventDefault();
                return;
            }
            this.selectRange(date);
        }
    }
    emitHoverDate($event, date) {
        if (this.selectingRange && date.getTime() <= this.maxDate.getTime() && date.getTime() >= this.minDate.getTime()) {
            this.hoverOnDate.emit(date);
        }
    }
    selectSingle(date) {
        if (date) {
            const ensureRange = this.ensureRangeValueOrder([this.rangeStart, this.rangeEnd]);
            this.rangeChange(ensureRange);
        }
    }
    convertDate(date) {
        return date ? this.dateConverter.parse(date) : null;
    }
    selectRange(date, passive = false) {
        if (this.whichOpen === 'start') {
            if (!this.rangeEnd) {
                this.rangeEnd = null;
                this.selectingRange = true;
            }
            else {
                this.selectingRange = false;
            }
            if (!passive) {
                this.rangeStart = this.convertDate(date);
                this.selectSingle(date);
                this.rangeSelecting.emit(this.rangeStart);
            }
        }
        else if (this.whichOpen === 'end') {
            if (this.rangeStart && this.rangeEnd || (!this.rangeStart && !this.rangeEnd)) {
                this.selectingRange = false;
            }
            else {
                this.selectingRange = true;
                if (!this.rangeStart) {
                    this.rangeStart = null;
                }
                if (!this.rangeEnd) {
                    this.rangeEnd = null;
                }
            }
            if (!passive) {
                this.rangeEnd = this.convertDate(date);
                this.selectSingle(date);
                this.rangeSelecting.emit(this.rangeEnd);
            }
        }
    }
    rangeChange(range) {
        [this.rangeStart, this.rangeEnd] = this.selectedRange = range;
        this.notifyValueChange(range);
    }
    writeValue(selectedRange) {
        this.selectedRange = selectedRange;
    }
    notifyValueChange(selectedRange) {
        this.onChange(selectedRange);
        this.rangeSelected.emit({
            reason: SelectDateRangeChangeReason.date,
            selectedRange: selectedRange
        });
    }
    isSelectDay(date) {
        let rangeSource = this.selectedRange;
        if (this.selectingRange) {
            rangeSource = [this.rangeStart || this.rangeEnd, this.previewEnd];
        }
        if ((!Array.isArray(rangeSource))) {
            return;
        }
        return rangeSource.some((selectedDate) => {
            if (!selectedDate || !date) {
                return false;
            }
            return (date.getFullYear() === selectedDate.getFullYear() &&
                date.getMonth() === selectedDate.getMonth() &&
                date.getDate() === selectedDate.getDate());
        });
    }
    isBetweenDay(date) {
        if (Array.isArray(this.selectedRange) && this.selectedRange.every(day => !!day)) {
            const index = this.selectedRange.findIndex(day => {
                return date.getFullYear() === day.getFullYear() &&
                    date.getMonth() === day.getMonth() &&
                    date.getDate() === day.getDate();
            });
            return ['devui-day-start', 'devui-day-end'][index];
        }
        else {
            return;
        }
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'selectedRange')) {
            [this.rangeStart, this.rangeEnd] = changes['selectedRange'].currentValue;
            if (this.rangeStart && this.rangeEnd) {
                this.selectingRange = false;
            }
        }
    }
    isInRange(date) {
        let rangeStart = this.rangeStart;
        let rangeEnd = this.rangeEnd;
        if (this.selectingRange) {
            if (rangeEnd) {
                rangeStart = this.previewEnd;
            }
            else if (rangeStart) {
                rangeEnd = this.previewEnd;
            }
        }
        date = (new Date(date)).getTime();
        return date < Math.max((new Date(rangeStart)).getTime(), (new Date(rangeEnd)).getTime())
            && date > Math.min((new Date(rangeStart)).getTime(), (new Date(rangeEnd)).getTime());
    }
    ensureRangeValueOrder(dateRange) {
        if (Array.isArray(dateRange) && dateRange.length === 2 && dateRange.every(curDate => !!curDate)) {
            if (dateRange[0].getTime() > dateRange[1].getTime()) {
                if (this.whichOpen === 'start') {
                    return [dateRange[0], null];
                }
                else {
                    return [null, dateRange[1]];
                }
            }
        }
        return dateRange;
    }
    onNextMonth(invocation) {
        if (this.hasNextMonth() || invocation === 'init') {
            let maxDateInRange;
            if (invocation === 'init') {
                maxDateInRange = this.selectedRange.reduce((start, end) => new Date(end) > new Date(start) ? end : start);
            }
            super.onNextMonth(maxDateInRange, 'init');
            this.notifyCalenderChange();
        }
    }
    hasNextMonth() {
        let hasNextMonth = true;
        // 副面板只用考虑maxDate的影响
        // 主面板同时考虑maxDate和日历的影响
        // minDate的影响在super.hasNextMonth()中有计算
        if (!this.isAuxiliary && this.currentCalendars[0] && this.currentCalendars[1]) {
            hasNextMonth = this.isBeforeMoreThanOneMonth(this.currentCalendars[0], this.currentCalendars[1]);
        }
        return hasNextMonth && super.hasNextMonth();
    }
    onPreMonth() {
        if (this.hasPreMonth()) {
            super.onPreMonth();
            this.notifyCalenderChange();
        }
    }
    hasPreMonth() {
        let hasPrevMonth = true;
        // 主面板只用考虑minDate的影响
        // 副面板同时考虑minDate和日历的影响
        // minDate的影响在super.hasPreMonth()中有计算
        if (this.isAuxiliary && this.currentCalendars[0] && this.currentCalendars[1]) {
            hasPrevMonth = this.isAfterMoreThanOneMonth(this.currentCalendars[1], this.currentCalendars[0]);
        }
        return hasPrevMonth && super.hasPreMonth();
    }
    hasPreYearOption() {
        let hasPrevYear = true;
        if (this.openChooseYear) {
            if (!this.isAuxiliary) {
                hasPrevYear = this.nowMinYear > this.minDate.getFullYear();
            }
            else {
                hasPrevYear = this.nowMinYear > this.minDate.getFullYear() &&
                    this.isBeforeMoreThanOneYear(this.currentCalendars[0], { year: this.nowMinYear, month: this.currentCalendars[1].month });
            }
        }
        else if (this.currentCalendars[0] && this.currentCalendars[1]) {
            // 主面板只用考虑minDate的影响
            if (!this.isAuxiliary) {
                hasPrevYear = this.currentCalendars[0].year > this.minDate.getFullYear();
            }
            else { // 副面板同时考虑minDate和日历的影响
                hasPrevYear = this.currentCalendars[1].year > this.minDate.getFullYear() &&
                    this.isBeforeMoreThanOneYear(this.currentCalendars[0], this.currentCalendars[1]);
            }
        }
        return hasPrevYear;
    }
    hasNextYearOption() {
        let hasNextYear = true;
        if (this.openChooseYear) {
            if (this.isAuxiliary) {
                hasNextYear = this.nowMaxYear < this.maxDate.getFullYear();
            }
            else {
                hasNextYear = this.nowMaxYear < this.maxDate.getFullYear() &&
                    this.isAfterMoreThanOneYear(this.currentCalendars[1], { year: this.nowMaxYear, month: this.currentCalendars[0].month });
            }
        }
        else if (this.currentCalendars[0] && this.currentCalendars[1]) {
            // 副面板只用考虑maxDate的影响
            if (this.isAuxiliary) {
                hasNextYear = this.currentCalendars[1].year < this.maxDate.getFullYear();
            }
            else { // 主面板同时考虑maxDate和日历的影响
                hasNextYear = this.currentCalendars[0].year < this.maxDate.getFullYear() &&
                    this.isAfterMoreThanOneYear(this.currentCalendars[1], this.currentCalendars[0]);
            }
        }
        return hasNextYear;
    }
    onPreYear() {
        if (!this.hasPreYearOption()) {
            return;
        }
        if (this.openChooseYear) {
            if (this.nowMinYear - this._yearNumber >= this.minDate.getFullYear()) {
                this.nowMaxYear = this.nowMinYear - 1;
                this.nowMinYear = this.nowMinYear - this._yearNumber;
            }
            else {
                this.nowMaxYear = this.nowMinYear - 1;
                this.nowMinYear = this.minDate.getFullYear();
            }
            this.onYearRangeChange();
        }
        else {
            this.onSelectYear(Number(this.currentYear) - 1);
        }
        this.notifyCalenderChange();
    }
    onNextYear() {
        if (!this.hasNextYearOption()) {
            return;
        }
        if (this.openChooseYear) {
            if (this.nowMaxYear + this._yearNumber <= this.maxDate.getFullYear()) {
                this.nowMinYear = this.nowMaxYear + 1;
                this.nowMaxYear = this.nowMaxYear + this._yearNumber;
            }
            else {
                this.nowMinYear = this.nowMaxYear + 1;
                this.nowMaxYear = this.maxDate.getFullYear();
            }
            this.onYearRangeChange();
        }
        else {
            this.onSelectYear(Number(this.currentYear) + 1);
        }
        this.notifyCalenderChange();
    }
    isBeforeMoreThanOneMonth(dateA, dateB) {
        if (dateA.year > dateB.year) {
            return false;
        }
        if (dateA.year === dateB.year && dateB.month <= dateA.month + 1) {
            return false;
        }
        // 处理A日期为B日期前一年12月同时B日期为1月的特殊情况
        return !(dateB.year - dateA.year === 1 && dateA.month === 11 && dateB.month === 0);
    }
    isAfterMoreThanOneMonth(dateA, dateB) {
        if (dateA.year < dateB.year) {
            return false;
        }
        if (dateA.year === dateB.year && dateB.month + 1 >= dateA.month) {
            return false;
        }
        // 处理A日期为B日期后一年1月同时B日期为12月的特殊情况
        return !(dateA.year - dateB.year === 1 && dateA.month === 0 && dateB.month === 11);
    }
    isBeforeMoreThanOneYear(dateA, dateB) {
        if (dateA.year >= dateB.year) {
            return false;
        }
        // 处理B日期比A日期大1年同时A日期月份大于B日期月份的情况
        return !(dateB.year - dateA.year === 1 && dateA.month >= dateB.month);
    }
    isAfterMoreThanOneYear(dateA, dateB) {
        if (dateA.year <= dateB.year) {
            return false;
        }
        // 处理A日期比B日期大1年同时A日期月份小于B日期月份的情况
        return (!(dateA.year - dateB.year === 1 && dateA.month <= dateB.month));
    }
    isYearDisable(year) {
        if (this.isAuxiliary) {
            // 先判定主面板是否比附面板小一年以上，是的话disabled为false;
            return !(this.isBeforeMoreThanOneYear(this.currentCalendars[0], { year: year + 1, month: this.currentCalendars[1].month }) ||
                // 主附面板在同一年时，判断主附面板月是否在临界值；
                (this.currentCalendars[0].year === year && this.currentCalendars[0].month !== 11));
        }
        else {
            return !(this.isAfterMoreThanOneYear(this.currentCalendars[1], { year: year - 1, month: this.currentCalendars[0].month }) ||
                (this.currentCalendars[1].year === year && this.currentCalendars[1].month !== 0));
        }
    }
    isMonthDisable(month) {
        if (this.isAuxiliary) {
            return !this.isBeforeMoreThanOneMonth(this.currentCalendars[0], { year: this.currentCalendars[1].year, month: parseInt(month, 10) - 1 + 1 });
        }
        else {
            return !this.isAfterMoreThanOneMonth(this.currentCalendars[1], { year: this.currentCalendars[0].year, month: parseInt(month, 10) - 1 - 1 });
        }
    }
    onSelectMonth(month) {
        if (month.disabled || this.isMonthDisable(month.title)) {
            return;
        }
        this.currentMonthIndex = month.index;
        this.onDisplayWeeksChange();
        this.openChooseMonth = false;
        this.isAuxiliary ? this.currentCalendars[1].month = this.currentMonthIndex : this.currentCalendars[0].month = this.currentMonthIndex;
    }
    onSelectYear(year, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        const yearDisabled = typeof year === 'object' ? year.disabled : false;
        const yearTitle = typeof year === 'object' ? year.title : year;
        if (yearDisabled || this.isYearDisable(year.title)) {
            return;
        }
        this.currentYear = yearTitle;
        this.onDisplayWeeksChange();
        this.availableMonths = this.onDisplayMonthsChange();
        this.openChooseYear = false;
        if (!$event) {
            this.isAuxiliary ? this.currentCalendars[1].year = this.currentYear : this.currentCalendars[0].year = this.currentYear;
            return;
        }
        this.openChooseMonth = true;
        if (this.isAuxiliary) {
            this.currentCalendars[1].year = this.currentYear;
            this.currentCalendars[1].month = 11;
            this.currentMonthIndex = 11;
        }
        else {
            this.currentCalendars[0].year = this.currentYear;
            this.currentCalendars[0].month = 0;
            this.currentMonthIndex = 0;
        }
    }
    notifyCalenderChange() {
        this.syncPickerPair.emit({
            year: this.currentYear,
            month: this.currentMonthIndex
        });
    }
    confirmTime() {
        this.consolidateTime.emit();
    }
    onSelectDateChanged() {
        let date = this.selectedDate || new Date();
        if (date.getTime() < this.minDate.getTime()) {
            date = this.minDate;
        }
        if (date.getTime() > this.maxDate.getTime()) {
            date = this.maxDate;
        }
        if (!this.isAuxiliary && this.rangeEnd && !this.rangeStart) {
            date = new Date(this.rangeEnd);
            date.setMonth(date.getMonth() - 1);
        }
        this.selectedDate = this.selectedDate || date;
        this.currentYear = date.getFullYear();
        this.currentMonthIndex = date.getMonth();
    }
}
TwoDatepickerSingleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatepickerSingleComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DatePickerConfigService }, { token: i0.ChangeDetectorRef }, { token: i2.I18nService }], target: i0.ɵɵFactoryTarget.Component });
TwoDatepickerSingleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatepickerSingleComponent, selector: "d-two-datepicker-single", inputs: { selectedRange: "selectedRange", rangePicker: "rangePicker", isAuxiliary: "isAuxiliary", currentCalendars: "currentCalendars", whichOpen: "whichOpen" }, outputs: { hoverOnDate: "hoverOnDate", rangeSelected: "rangeSelected", rangeSelecting: "rangeSelecting", syncPickerPair: "syncPickerPair", consolidateTime: "consolidateTime" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TwoDatepickerSingleComponent),
            multi: true,
        }
    ], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-month-view {{ cssClass }}\">\n  <table class=\"devui-table devui-month-view-table\">\n    <thead>\n      <tr class=\"devui-calender-header\">\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onPreYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"10px\"\n              viewBox=\"0 0 10 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -1.000000)\">\n                  <path\n                    d=\"M11,1.83333333 L11,10.1666667 L7,7.38833333 L7,10.1666667 L1,6 L7,1.83333333 L7,4.61033333 L11,1.83333333 Z\"\n                  ></path>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-left\"\n            aria-hidden=\"true\"\n            (click)=\"onPreMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"10px\"\n              viewBox=\"0 0 6 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -1.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.000000) rotate(-90.000000) translate(-6.000000, -6.000000) \"\n                    points=\"6 3 10.1666667 9 1.83333333 9\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td colspan=\"3\" class=\"devui-dropdown\">\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'year')\">{{ i18nText?.yearDisplay(currentYear) }}</span>\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'month')\">{{ (i18nText?.monthsOfYear)[currentMonthIndex] }}</span>\n          <ul class=\"devui-monthOption text-center\" [style.display]=\"openChooseMonth ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let month of availableMonths\"\n              [ngClass]=\"{ active: currentMonthIndex == month.index, disabled: month.disabled || isMonthDisable(month.title) }\"\n              (click)=\"onSelectMonth(month)\"\n            >\n              {{ month.title }}\n            </li>\n          </ul>\n          <ul class=\"devui-yearOption text-center\" [style.display]=\"openChooseYear ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let item of yearOptions\"\n              [ngClass]=\"{ active: currentYear == item.title, disabled: item.disabled || isYearDisable(item.title) }\"\n              (click)=\"onSelectYear(item, $event)\"\n            >\n              {{ item.title }}\n            </li>\n          </ul>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-right\"\n            aria-hidden=\"true\"\n            (click)=\"onNextMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"9px\"\n              viewBox=\"0 0 6 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -2.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.166667) scale(-1, 1) rotate(-90.000000) translate(-6.000000, -6.166667) \"\n                    points=\"6 3.16666667 10.1666667 9.16666667 1.83333333 9.16666667\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onNextYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"9px\"\n              viewBox=\"0 0 10 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -2.000000)\">\n                  <polygon points=\"5 4.77777778 5 2 11 6.16666667 5 10.3333333 5 7.55555556 1 10.3333333 1 2\"></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n      </tr>\n      <tr class=\"small text-center devui-week-header\">\n        <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let week of displayWeeks\">\n        <td\n          *ngFor=\"let day of week\"\n          class=\"devui-day {{ isBetweenDay(day.date) }}\"\n          [ngClass]=\"{\n            'devui-out-of-month': !day.inMonth,\n            'devui-in-month-day': day.inMonth,\n            active: isSelectDay(day.date),\n            disabled: isDisabledDay(day.date),\n            'devui-in-range': isInRange(day.date),\n            'devui-today': day.isToday\n          }\"\n          (click)=\"onSelectDate($event, day.date)\"\n          (mouseover)=\"emitHoverDate($event, day.date)\"\n        >\n          <div class=\"devui-calendar-date\">{{ day.day }}</div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr class=\"time-picker-view\" *ngIf=\"showTime\">\n        <ng-container *ngIf=\"!customViewTemplate\">\n          <td colspan=\"4\">\n            <div class=\"devui-timepicker\" *ngIf=\"showTime\" [ngClass]=\"{ 'devui-timepicker-disabled': isDisabledTime() }\">\n              <div class=\"devui-time\">\n                <input [ngModel]=\"currentHour\" (keydown)=\"fixTime($event, 'h')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('h')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('h')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-minutes\" [ngModel]=\"currentMinute\" (keydown)=\"fixTime($event, 'm')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('m')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('m')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-seconds\" [ngModel]=\"currentSecond\" (keydown)=\"fixTime($event, 's')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('s')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('s')\"></div>\n                </div>\n              </div>\n            </div>\n          </td>\n          <td colspan=\"3\" *ngIf=\"isAuxiliary\">\n            <div class=\"devui-btn-wrapper\">\n              <d-button bsStyle=\"common\" [disabled]=\"!rangeStart || !rangeEnd || disabled\" (btnClick)=\"confirmTime()\" bsSize=\"sm\">\n                {{ i18nCommonText?.btnConfirm }}\n              </d-button>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-date-header{height:38px}.devui-month-view{background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);width:240px;text-align:center;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));border-radius:2px;border-radius:var(--devui-border-radius, 2px);position:relative}.devui-month-view .devui-month-view-table{margin-bottom:0;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);table-layout:fixed;border-collapse:collapse;width:100%}.devui-month-view .devui-date-title{font-weight:700;cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-month-view .devui-date-title:hover{color:#7693f5;color:var(--devui-brand-hover, #7693f5)}.devui-month-view .devui-btn-link{text-decoration:none;cursor:pointer;display:block}.devui-month-view .devui-btn-link.devui-year-month-disabled{cursor:not-allowed}.devui-month-view .devui-btn-link.devui-year-month-disabled svg path,.devui-month-view .devui-btn-link.devui-year-month-disabled svg polygon{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-btn-link svg path,.devui-month-view .devui-btn-link svg polygon{fill:#575d6c;fill:var(--devui-text-weak, #575d6c)}.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg path,.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg polygon{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.devui-month-view .date-select{border:none;background:transparent;outline:none;-moz-appearance:none;-webkit-appearance:none;appearance:none}.devui-month-view .devui-week-header{cursor:default;margin-bottom:16px}.devui-month-view .devui-week-header td{width:32px;height:24px;line-height:24px;color:#252b3a;color:var(--devui-text, #252b3a);border:none}.devui-month-view .devui-day:not(.disabled){cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px);color:#dfe1e6;color:var(--devui-feedback-overlay-text, #dfe1e6)}.devui-month-view .devui-day.disabled{cursor:not-allowed}.devui-calendar-date{display:block;margin:0 3px;width:20px;height:20px;padding:0;line-height:20px;background:transparent;text-align:center;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-out-of-month .devui-calendar-date{opacity:.8;background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);color:#d7d8da;color:var(--devui-line, #d7d8da)}.devui-month-view .devui-out-of-month:not(.disabled):hover .devui-calendar-date{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-minutes:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-month-view .devui-seconds:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-yearOption,.devui-monthOption{width:240px;height:195px;position:absolute;left:-68px;top:30px;background:#ffffff;background:var(--devui-base-bg, #ffffff);z-index:1}.devui-yearOption li,.devui-monthOption li{width:60px;height:68px;line-height:68px;text-align:center;display:inline-block;background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-yearOption li:hover,.devui-monthOption li:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);cursor:pointer}.devui-yearOption li.active:not(.disabled),.devui-monthOption li.active:not(.disabled){color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-yearOption li.active:not(.disabled):hover,.devui-monthOption li.active:not(.disabled):hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-yearOption li.disabled,.devui-monthOption li.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);cursor:not-allowed}.devui-month-view .devui-timepicker{background:#f5f5f5;background:var(--devui-area, #f5f5f5);display:flex;justify-content:space-evenly}.devui-month-view .devui-timepicker input{outline:0;border:0;background:#f5f5f5;background:var(--devui-area, #f5f5f5);color:#252b3a;color:var(--devui-text, #252b3a);width:30px;padding:0 0 0 3px;height:30px;text-align:center}.devui-month-view .devui-timepicker.devui-timepicker-disabled{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker.devui-timepicker-disabled input{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker .devui-time{position:relative;display:inline-block;width:40px}.devui-month-view .devui-timepicker .devui-time:not(:first-child):before{content:\":\"}.devui-month-view .devui-table>tbody>tr>td{vertical-align:middle;padding:4px;border-top:none;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-start{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-end{border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0}.devui-month-view .devui-table>tbody>tr>td:not(.disabled){border-top:none;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:hover:not(.active):not(.disabled):not(.devui-out-of-month){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled):not(.active):not(.devui-out-of-month):not(:hover).devui-today .devui-calendar-date{color:#5e7ce0;color:var(--devui-brand, #5e7ce0);font-weight:700}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled .devui-calendar-date{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled:not(.active){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled.active{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>thead>tr>td{vertical-align:middle;line-height:1.5;padding:4px}.devui-noSelect{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-month-view-table td{border-bottom:none}.devui-month-view .devui-table tfoot,.devui-custom-area{border-top:1px solid #f5f5f5;border-top:1px solid var(--devui-area, #f5f5f5)}.devui-month-view tfoot td{padding:10px;vertical-align:middle;border-top:none}.devui-dropdown-menu{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-btn-wrapper{margin-top:0}.devui-btn-nav{display:none;position:absolute;right:9px;top:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.devui-btn-nav .btn-up,.devui-btn-nav .btn-down{position:absolute;width:0;height:0;border:6px solid}.devui-btn-nav .btn-up{padding-top:2px;padding-bottom:1px;border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-text, #252b3a) transparent}.devui-btn-nav .btn-up:hover{border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-icon-fill-active, #252b3a) transparent}.devui-btn-nav .btn-down{top:16px;padding-bottom:4px;border-color:#252b3a transparent transparent transparent;border-color:var(--devui-text, #252b3a) transparent transparent transparent}.devui-btn-nav .btn-down:hover{border-color:#252b3a transparent transparent transparent;border-color:var(--devui-icon-fill-active, #252b3a) transparent transparent transparent}.devui-time input[type=number]::-webkit-inner-spin-button,.devui-time input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.devui-time input[type=number]{-moz-appearance:textfield}.devui-time:hover .devui-btn-nav{display:block}:host ::ng-deep .cdk-overlay-pane d-datepicker.devui-dropdown-menu{padding:0}:host .devui-form-control{padding-right:0}.devui-month-view{box-shadow:none}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-text, #252b3a);border-radius:0}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled):hover{background-color:#e9edfa;background-color:var(--devui-range-item-hover-bg, #e9edfa)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range.disabled:not(.active){background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);opacity:.8;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled{background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled .devui-calendar-date{opacity:.8}.devui-month-view .devui-in-month-day.devui-in-range.disabled:not(.active) .devui-calendar-date{color:#252b3a;color:var(--devui-text, #252b3a);cursor:not-allowed}.devui-month-view .devui-day.devui-out-of-month.active:hover .devui-calendar-date{background-color:transparent;color:#71757f;color:var(--devui-icon-text, #71757f)}.devui-month-view .devui-day.devui-out-of-month.active.disabled{background-color:transparent}tr.devui-calender-header{height:38px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-btn-link.devui-btn-right{transform:scale(1);display:inline-block;line-height:1}.devui-monthOption,.devui-yearOption{white-space:normal}\n"], components: [{ type: i3.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatepickerSingleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-two-datepicker-single', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TwoDatepickerSingleComponent),
                            multi: true,
                        }
                    ], template: "<div class=\"devui-month-view {{ cssClass }}\">\n  <table class=\"devui-table devui-month-view-table\">\n    <thead>\n      <tr class=\"devui-calender-header\">\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onPreYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"10px\"\n              viewBox=\"0 0 10 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -1.000000)\">\n                  <path\n                    d=\"M11,1.83333333 L11,10.1666667 L7,7.38833333 L7,10.1666667 L1,6 L7,1.83333333 L7,4.61033333 L11,1.83333333 Z\"\n                  ></path>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-left\"\n            aria-hidden=\"true\"\n            (click)=\"onPreMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasPreMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"10px\"\n              viewBox=\"0 0 6 10\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -1.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.000000) rotate(-90.000000) translate(-6.000000, -6.000000) \"\n                    points=\"6 3 10.1666667 9 1.83333333 9\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td colspan=\"3\" class=\"devui-dropdown\">\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'year')\">{{ i18nText?.yearDisplay(currentYear) }}</span>\n          <span class=\"devui-date-title\" (click)=\"toggle($event, 'month')\">{{ (i18nText?.monthsOfYear)[currentMonthIndex] }}</span>\n          <ul class=\"devui-monthOption text-center\" [style.display]=\"openChooseMonth ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let month of availableMonths\"\n              [ngClass]=\"{ active: currentMonthIndex == month.index, disabled: month.disabled || isMonthDisable(month.title) }\"\n              (click)=\"onSelectMonth(month)\"\n            >\n              {{ month.title }}\n            </li>\n          </ul>\n          <ul class=\"devui-yearOption text-center\" [style.display]=\"openChooseYear ? 'block' : 'none'\">\n            <li\n              *ngFor=\"let item of yearOptions\"\n              [ngClass]=\"{ active: currentYear == item.title, disabled: item.disabled || isYearDisable(item.title) }\"\n              (click)=\"onSelectYear(item, $event)\"\n            >\n              {{ item.title }}\n            </li>\n          </ul>\n        </td>\n        <td>\n          <a\n            *ngIf=\"!openChooseYear && !openChooseMonth\"\n            class=\"devui-btn-link devui-btn-right\"\n            aria-hidden=\"true\"\n            (click)=\"onNextMonth()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextMonth() }\"\n          >\n            <svg\n              width=\"6px\"\n              height=\"9px\"\n              viewBox=\"0 0 6 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-3.000000, -2.000000)\">\n                  <polygon\n                    transform=\"translate(6.000000, 6.166667) scale(-1, 1) rotate(-90.000000) translate(-6.000000, -6.166667) \"\n                    points=\"6 3.16666667 10.1666667 9.16666667 1.83333333 9.16666667\"\n                  ></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n        <td>\n          <a\n            class=\"devui-btn-link\"\n            aria-hidden=\"true\"\n            (click)=\"onNextYear()\"\n            [ngClass]=\"{ 'devui-year-month-disabled': !hasNextYearOption() }\"\n          >\n            <svg\n              width=\"10px\"\n              height=\"9px\"\n              viewBox=\"0 0 10 9\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-1.000000, -2.000000)\">\n                  <polygon points=\"5 4.77777778 5 2 11 6.16666667 5 10.3333333 5 7.55555556 1 10.3333333 1 2\"></polygon>\n                </g>\n              </g>\n            </svg>\n          </a>\n        </td>\n      </tr>\n      <tr class=\"small text-center devui-week-header\">\n        <td *ngFor=\"let item of i18nText?.daysOfWeek\">{{ item }}</td>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let week of displayWeeks\">\n        <td\n          *ngFor=\"let day of week\"\n          class=\"devui-day {{ isBetweenDay(day.date) }}\"\n          [ngClass]=\"{\n            'devui-out-of-month': !day.inMonth,\n            'devui-in-month-day': day.inMonth,\n            active: isSelectDay(day.date),\n            disabled: isDisabledDay(day.date),\n            'devui-in-range': isInRange(day.date),\n            'devui-today': day.isToday\n          }\"\n          (click)=\"onSelectDate($event, day.date)\"\n          (mouseover)=\"emitHoverDate($event, day.date)\"\n        >\n          <div class=\"devui-calendar-date\">{{ day.day }}</div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr class=\"time-picker-view\" *ngIf=\"showTime\">\n        <ng-container *ngIf=\"!customViewTemplate\">\n          <td colspan=\"4\">\n            <div class=\"devui-timepicker\" *ngIf=\"showTime\" [ngClass]=\"{ 'devui-timepicker-disabled': isDisabledTime() }\">\n              <div class=\"devui-time\">\n                <input [ngModel]=\"currentHour\" (keydown)=\"fixTime($event, 'h')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('h')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('h')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-minutes\" [ngModel]=\"currentMinute\" (keydown)=\"fixTime($event, 'm')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('m')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('m')\"></div>\n                </div>\n              </div>\n              <div class=\"devui-time\">\n                <input class=\"devui-seconds\" [ngModel]=\"currentSecond\" (keydown)=\"fixTime($event, 's')\" [disabled]=\"isDisabledTime()\" />\n                <div class=\"devui-btn-nav\" *ngIf=\"!isDisabledTime()\">\n                  <div class=\"btn-up\" (click)=\"timeUp('s')\"></div>\n                  <div class=\"btn-down\" (click)=\"timeDown('s')\"></div>\n                </div>\n              </div>\n            </div>\n          </td>\n          <td colspan=\"3\" *ngIf=\"isAuxiliary\">\n            <div class=\"devui-btn-wrapper\">\n              <d-button bsStyle=\"common\" [disabled]=\"!rangeStart || !rangeEnd || disabled\" (btnClick)=\"confirmTime()\" bsSize=\"sm\">\n                {{ i18nCommonText?.btnConfirm }}\n              </d-button>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-date-header{height:38px}.devui-month-view{background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);width:240px;text-align:center;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));border-radius:2px;border-radius:var(--devui-border-radius, 2px);position:relative}.devui-month-view .devui-month-view-table{margin-bottom:0;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff);table-layout:fixed;border-collapse:collapse;width:100%}.devui-month-view .devui-date-title{font-weight:700;cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-month-view .devui-date-title:hover{color:#7693f5;color:var(--devui-brand-hover, #7693f5)}.devui-month-view .devui-btn-link{text-decoration:none;cursor:pointer;display:block}.devui-month-view .devui-btn-link.devui-year-month-disabled{cursor:not-allowed}.devui-month-view .devui-btn-link.devui-year-month-disabled svg path,.devui-month-view .devui-btn-link.devui-year-month-disabled svg polygon{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-btn-link svg path,.devui-month-view .devui-btn-link svg polygon{fill:#575d6c;fill:var(--devui-text-weak, #575d6c)}.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg path,.devui-month-view .devui-btn-link:not(.devui-year-month-disabled):hover svg polygon{fill:#252b3a;fill:var(--devui-icon-fill-active-hover, #252b3a)}.devui-month-view .date-select{border:none;background:transparent;outline:none;-moz-appearance:none;-webkit-appearance:none;appearance:none}.devui-month-view .devui-week-header{cursor:default;margin-bottom:16px}.devui-month-view .devui-week-header td{width:32px;height:24px;line-height:24px;color:#252b3a;color:var(--devui-text, #252b3a);border:none}.devui-month-view .devui-day:not(.disabled){cursor:pointer;font-size:12px;font-size:var(--devui-font-size, 12px);color:#dfe1e6;color:var(--devui-feedback-overlay-text, #dfe1e6)}.devui-month-view .devui-day.disabled{cursor:not-allowed}.devui-calendar-date{display:block;margin:0 3px;width:20px;height:20px;padding:0;line-height:20px;background:transparent;text-align:center;font-size:12px;font-size:var(--devui-font-size, 12px);color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-out-of-month .devui-calendar-date{opacity:.8;background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);color:#d7d8da;color:var(--devui-line, #d7d8da)}.devui-month-view .devui-out-of-month:not(.disabled):hover .devui-calendar-date{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-minutes:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-month-view .devui-seconds:before{content:\":\";text-align:center;position:absolute;margin-left:-13px}.devui-yearOption,.devui-monthOption{width:240px;height:195px;position:absolute;left:-68px;top:30px;background:#ffffff;background:var(--devui-base-bg, #ffffff);z-index:1}.devui-yearOption li,.devui-monthOption li{width:60px;height:68px;line-height:68px;text-align:center;display:inline-block;background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-yearOption li:hover,.devui-monthOption li:hover{background:#f2f2f3;background:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a);cursor:pointer}.devui-yearOption li.active:not(.disabled),.devui-monthOption li.active:not(.disabled){color:#252b3a;color:var(--devui-list-item-active-text, #252b3a);background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}.devui-yearOption li.active:not(.disabled):hover,.devui-monthOption li.active:not(.disabled):hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-yearOption li.disabled,.devui-monthOption li.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);cursor:not-allowed}.devui-month-view .devui-timepicker{background:#f5f5f5;background:var(--devui-area, #f5f5f5);display:flex;justify-content:space-evenly}.devui-month-view .devui-timepicker input{outline:0;border:0;background:#f5f5f5;background:var(--devui-area, #f5f5f5);color:#252b3a;color:var(--devui-text, #252b3a);width:30px;padding:0 0 0 3px;height:30px;text-align:center}.devui-month-view .devui-timepicker.devui-timepicker-disabled{background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker.devui-timepicker-disabled input{cursor:not-allowed;color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-timepicker .devui-time{position:relative;display:inline-block;width:40px}.devui-month-view .devui-timepicker .devui-time:not(:first-child):before{content:\":\"}.devui-month-view .devui-table>tbody>tr>td{vertical-align:middle;padding:4px;border-top:none;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-start{border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px)}.devui-month-view .devui-table>tbody>tr>td.devui-day-end{border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0}.devui-month-view .devui-table>tbody>tr>td:not(.disabled){border-top:none;background:#ffffff;background:var(--devui-connected-overlay-bg, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:hover:not(.active):not(.disabled):not(.devui-out-of-month){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover{background-color:#f2f5fc;background-color:var(--devui-list-item-active-hover-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled).active:hover>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>tbody>tr>td.devui-day:not(.disabled):not(.active):not(.devui-out-of-month):not(:hover).devui-today .devui-calendar-date{color:#5e7ce0;color:var(--devui-brand, #5e7ce0);font-weight:700}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled .devui-calendar-date{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled:not(.active){background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.disabled.active{background-color:#dfe1e6;background-color:var(--devui-disabled-line, #dfe1e6)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active{background:#f2f5fc;background:var(--devui-list-item-active-bg, #f2f5fc)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day:not(.disabled).active>.devui-calendar-date{color:#fff;color:var(--devui-light-text, #ffffff)}.devui-month-view .devui-table>thead>tr>td{vertical-align:middle;line-height:1.5;padding:4px}.devui-noSelect{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-month-view-table td{border-bottom:none}.devui-month-view .devui-table tfoot,.devui-custom-area{border-top:1px solid #f5f5f5;border-top:1px solid var(--devui-area, #f5f5f5)}.devui-month-view tfoot td{padding:10px;vertical-align:middle;border-top:none}.devui-dropdown-menu{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-btn-wrapper{margin-top:0}.devui-btn-nav{display:none;position:absolute;right:9px;top:0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.devui-btn-nav .btn-up,.devui-btn-nav .btn-down{position:absolute;width:0;height:0;border:6px solid}.devui-btn-nav .btn-up{padding-top:2px;padding-bottom:1px;border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-text, #252b3a) transparent}.devui-btn-nav .btn-up:hover{border-color:transparent transparent #252b3a transparent;border-color:transparent transparent var(--devui-icon-fill-active, #252b3a) transparent}.devui-btn-nav .btn-down{top:16px;padding-bottom:4px;border-color:#252b3a transparent transparent transparent;border-color:var(--devui-text, #252b3a) transparent transparent transparent}.devui-btn-nav .btn-down:hover{border-color:#252b3a transparent transparent transparent;border-color:var(--devui-icon-fill-active, #252b3a) transparent transparent transparent}.devui-time input[type=number]::-webkit-inner-spin-button,.devui-time input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.devui-time input[type=number]{-moz-appearance:textfield}.devui-time:hover .devui-btn-nav{display:block}:host ::ng-deep .cdk-overlay-pane d-datepicker.devui-dropdown-menu{padding:0}:host .devui-form-control{padding-right:0}.devui-month-view{box-shadow:none}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled){background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-text, #252b3a);border-radius:0}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range:not(.active):not(.disabled):hover{background-color:#e9edfa;background-color:var(--devui-range-item-hover-bg, #e9edfa)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.devui-in-range.disabled:not(.active){background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);opacity:.8;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled{background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-month-view .devui-table>tbody>tr>td.devui-in-month-day.active.disabled .devui-calendar-date{opacity:.8}.devui-month-view .devui-in-month-day.devui-in-range.disabled:not(.active) .devui-calendar-date{color:#252b3a;color:var(--devui-text, #252b3a);cursor:not-allowed}.devui-month-view .devui-day.devui-out-of-month.active:hover .devui-calendar-date{background-color:transparent;color:#71757f;color:var(--devui-icon-text, #71757f)}.devui-month-view .devui-day.devui-out-of-month.active.disabled{background-color:transparent}tr.devui-calender-header{height:38px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-month-view .devui-btn-link.devui-btn-right{transform:scale(1);display:inline-block;line-height:1}.devui-monthOption,.devui-yearOption{white-space:normal}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: DatePickerConfigService }, { type: i0.ChangeDetectorRef }, { type: i2.I18nService }]; }, propDecorators: { selectedRange: [{
                type: Input
            }], rangePicker: [{
                type: Input
            }], isAuxiliary: [{
                type: Input
            }], currentCalendars: [{
                type: Input
            }], whichOpen: [{
                type: Input
            }], hoverOnDate: [{
                type: Output
            }], rangeSelected: [{
                type: Output
            }], rangeSelecting: [{
                type: Output
            }], syncPickerPair: [{
                type: Output
            }], consolidateTime: [{
                type: Output
            }] } });

class TwoDatePickerComponent {
    constructor(el, datePickerConfig, i18n, cdr, devConfigService, doc) {
        this.el = el;
        this.datePickerConfig = datePickerConfig;
        this.i18n = i18n;
        this.cdr = cdr;
        this.devConfigService = devConfigService;
        this.doc = doc;
        this.showAnimation = true;
        this.showTime = false;
        this.selectedRange = [null, null];
        this.hideOnRangeSelected = true;
        this.selectedRangeChange = new EventEmitter();
        this.datePosition = 'bottom';
        this.selectDateSubject = new Subject();
        this.hoverOnDate = new Subject();
        this.switchOriginPositionSub = new Subject();
        this.today = new Date();
        this.startAnimation = false;
        this.currentCalendars = [null, null];
        this._isOpen = false;
        this.onDocumentClick = ($event) => {
            if (!this.el.nativeElement.contains($event.target)) {
                this.whichOpen = false;
                this.isOpen = false;
            }
            this.cdr.markForCheck();
        };
        this.toggle = (side = 'start') => {
            if (this.isOpen) {
                if (side === 'start') {
                    if (this.whichOpen === 'start') {
                        this.whichOpen = false;
                        this.isOpen = false;
                    }
                    else { // this.whichOpen === 'end'
                        this.whichOpen = 'start';
                    }
                }
                else { // side === 'end'
                    if (this.whichOpen === 'start') {
                        this.whichOpen = 'end';
                    }
                    else { // this.whichOpen === 'end'
                        this.whichOpen = false;
                        this.isOpen = false;
                    }
                }
            }
            else {
                this.whichOpen = side;
                this.isOpen = true;
            }
        };
        this.chooseDate = (range) => {
            if (range && Array.isArray(this.selectedRange)) {
                this.selectedRange = range;
                [this.rangeStart, this.rangeEnd] = this.selectedRange;
                this.notifyValueChange();
            }
        };
        this.clear = (side) => {
            if (this.disabled) {
                return;
            }
            if (side === 'start') {
                this.selectStart(null);
            }
            else if (side === 'end') {
                this.selectEnd(null);
            }
            [this.rangeStart, this.rangeEnd] = this.selectedRange;
        };
        this._dateConfig = datePickerConfig['dateConfig'];
        this.dateConverter = datePickerConfig['dateConfig'].dateConverter || new DefaultDateConverter();
        this.setI18nText();
        this.document = this.doc;
    }
    set dateConfig(dateConfig) {
        if (this.checkDateConfig(dateConfig)) {
            this._dateConfig = dateConfig;
        }
        else {
            this._dateConfig = this.datePickerConfig.dateConfig;
        }
        this._dateFormat = this.showTime ? this._dateConfig.format.time : this._dateConfig.format.date;
    }
    get dateConfig() {
        return this._dateConfig;
    }
    set dateFormat(dateFormat) {
        if (dateFormat && this._dateFormat !== dateFormat) {
            this._dateFormat = dateFormat;
        }
    }
    get dateFormat() {
        return this._dateFormat || this.datePickerConfig.defaultFormat;
    }
    set maxDate(date) {
        const parseDate = this.convertDate(date);
        if (parseDate) {
            this._maxDate = parseDate;
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    set minDate(date) {
        const parseDate = this.convertDate(date);
        if (parseDate) {
            this._minDate = parseDate;
        }
    }
    get minDate() {
        return this._minDate;
    }
    set whichOpen(side) {
        this._whichOpen = side;
        this.switchOriginPositionSub.next(side);
    }
    get whichOpen() {
        return this._whichOpen;
    }
    set isOpen(isOpen) {
        this._isOpen = isOpen;
        if (!isOpen) {
            this.startAnimation = false;
            this.document.removeEventListener('click', this.onDocumentClick);
        }
        else {
            setTimeout(() => {
                this.startAnimation = true;
                this.cdr.detectChanges();
                this.document.addEventListener('click', this.onDocumentClick);
            });
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    checkDateConfig(dateConfig) {
        if (!dateConfig) {
            return false;
        }
        if (typeof (dateConfig.timePicker) !== 'boolean' || !dateConfig.max || !dateConfig.min || !dateConfig.format) {
            return false;
        }
        return true;
    }
    ngOnInit() {
        this._minDate = this.minDate ? new Date(this.minDate) : new Date(this.dateConfig.min, 0, 1, 0, 0, 0);
        this._maxDate = this.maxDate ? new Date(this.maxDate) : new Date(this.dateConfig.max, 11, 31, 23, 59, 59);
        this.updateCdkConnectedOverlayOrigin(this.el.nativeElement);
        this.subscribeHoverActions();
    }
    isDisableToday() {
        if ((this.minDate.getTime() >= (this.today).getTime()) || (this.maxDate.getTime() <= (this.today).getTime())) {
            this.disableToday = true;
        }
        else {
            this.disableToday = false;
        }
    }
    onPositionChange(position) {
        switch (position.connectionPair.overlayY) {
            case 'top':
            case 'center':
                this.datePosition = 'bottom';
                break;
            case 'bottom':
                this.datePosition = 'top';
        }
        this.switchOriginPositionSub.next(this.whichOpen);
    }
    convertDate(date) {
        return date ?
            this.dateConverter.parse(date, this.dateFormat) : null;
    }
    formatDate(date) {
        return date ?
            this.dateConverter.format(date, this.dateFormat, this.locale || this.i18nLocale) : null;
    }
    updateCdkConnectedOverlayOrigin(el) {
        if (el) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(el);
        }
        else {
            this.cdkConnectedOverlayOrigin = undefined;
        }
    }
    syncPickerPair(currentCalender, orientation) {
        switch (orientation) {
            case 'left':
                this.currentCalendars[0] = currentCalender;
                break;
            case 'right':
                this.currentCalendars[1] = currentCalender;
                break;
        }
    }
    rangeChange(data) {
        this.chooseDate(data.selectedRange);
        this.selectDateSubject.next({ side: 'start', date: this.rangeStart, onlyWrite: true });
        this.selectDateSubject.next({ side: 'end', date: this.rangeEnd, onlyWrite: true });
    }
    notifyValueChange() {
        this.selectedRangeChange.emit(this.selectedRange);
    }
    selectingDate(event) {
        this.hoverOnDate.next(event);
    }
    subscribeHoverActions() {
        this.hoverOnDate.pipe(distinctUntilChanged()).subscribe((date) => {
            this.previewRangeEnd(date);
        });
    }
    previewRangeEnd(date) {
        this.leftPicker['previewEnd'] = date;
        this.rightPicker['previewEnd'] = date;
    }
    syncRangeStart(rangeStart, picker) {
        if (this.whichOpen === 'end') {
            this.selectEnd(rangeStart);
        }
        else { // this.whichOpen === 'start'
            this.selectStart(rangeStart);
        }
        picker.selectRange(rangeStart, true);
    }
    selectStart(date, passive = false) {
        this.selectedRange[0] = date;
        this.rangeStart = date;
        this.isDisableToday();
        if (!passive) {
            this.selectDateSubject.next({ side: 'start', date });
            this.whichOpen = 'end';
        }
    }
    selectEnd(date, passive = false) {
        this.selectedRange[1] = date;
        this.rangeEnd = date;
        this.isDisableToday();
        if (!passive) {
            this.selectDateSubject.next({ side: 'end', date: date });
            if (!this.showTime && this.hideOnRangeSelected) {
                this.isOpen = false;
                this.whichOpen = false;
            }
        }
    }
    chooseToday(event) {
        event.preventDefault();
        event.stopPropagation();
        if ((this.minDate.getTime() <= (this.today).getTime()) && (this.maxDate.getTime() >= (this.today).getTime())) {
            if (this.whichOpen === 'start') {
                this.selectStart(this.today);
            }
            else if (this.whichOpen === 'end') {
                this.selectEnd(this.today);
            }
            [this.rangeStart, this.rangeEnd] = this.selectedRange;
        }
    }
    clearBtn(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.whichOpen) {
            this.clear(this.whichOpen);
        }
    }
    setI18nText() {
        this.i18nText = this.i18n.getI18nText().datePicker;
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.datePicker;
            this.i18nLocale = data.locale;
        });
    }
    ngOnDestroy() {
        this.isOpen = false;
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
        this.document.removeEventListener('click', this.onDocumentClick);
    }
}
TwoDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerComponent, deps: [{ token: i0.ElementRef }, { token: DatePickerConfigService }, { token: i2.I18nService }, { token: i0.ChangeDetectorRef }, { token: i3$1.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
TwoDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatePickerComponent, selector: "[dTwoDatePicker]", inputs: { locale: "locale", cssClass: "cssClass", disabled: "disabled", dateConverter: "dateConverter", showAnimation: "showAnimation", hideOnRangeSelected: "hideOnRangeSelected", dateConfig: "dateConfig", dateFormat: "dateFormat", maxDate: "maxDate", minDate: "minDate" }, outputs: { selectedRangeChange: "selectedRangeChange" }, viewQueries: [{ propertyName: "leftPicker", first: true, predicate: ["leftPicker"], descendants: true }, { propertyName: "rightPicker", first: true, predicate: ["rightPicker"], descendants: true }, { propertyName: "templateWrap", first: true, predicate: ["templateWrap"], descendants: true }], exportAs: ["twoDatePicker"], ngImport: i0, template: "<ng-content></ng-content>\n<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen = false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datePosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-two-date-wrapper\">\n    <div class=\"devui-two-date-picker\">\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n        [whichOpen]=\"whichOpen\"\n        #leftPicker\n      >\n      </d-two-datepicker-single>\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n        [isAuxiliary]=\"true\"\n        [whichOpen]=\"whichOpen\"\n        #rightPicker\n      >\n      </d-two-datepicker-single>\n    </div>\n    <div *ngIf=\"!customViewTemplate\" class=\"devui-two-date-footer devui-two-date-custom\">\n      <a\n        [ngClass]=\"{\n          disabled: disableToday\n        }\"\n        (click)=\"chooseToday($event)\"\n        >{{ i18nText.today }}</a\n      >\n      <d-button bsStyle=\"common\" (btnClick)=\"clearBtn($event)\" bsSize=\"sm\">{{ i18nText.clear }}</d-button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-two-date-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}.devui-two-date-wrapper .devui-two-date-picker{display:inline-flex!important;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-two-date-wrapper .devui-two-date-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-two-date-wrapper .devui-two-date-footer{padding:10px;display:flex;justify-content:space-between;align-items:center}.devui-two-date-wrapper .devui-two-date-footer a{color:#526ecc;color:var(--devui-link, #526ecc);text-decoration:none;cursor:pointer}.devui-two-date-wrapper .devui-two-date-footer a.disabled{color:#d7d8da;color:var(--devui-line, #d7d8da);cursor:not-allowed}.devui-date-picker:not(:last-child){margin-right:20px}.host-wrapper{color:red}\n"], components: [{ type: TwoDatepickerSingleComponent, selector: "d-two-datepicker-single", inputs: ["selectedRange", "rangePicker", "isAuxiliary", "currentCalendars", "whichOpen"], outputs: ["hoverOnDate", "rangeSelected", "rangeSelecting", "syncPickerPair", "consolidateTime"] }, { type: i3.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }], directives: [{ type: i5$1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [
        fadeInOut
    ] });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], TwoDatePickerComponent.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: '[dTwoDatePicker]', exportAs: 'twoDatePicker', animations: [
                        fadeInOut
                    ], template: "<ng-content></ng-content>\n<ng-template\n  cdk-connected-overlay\n  [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n  (backdropClick)=\"isOpen = false\"\n  (positionChange)=\"onPositionChange($event)\"\n>\n  <div [@fadeInOut]=\"startAnimation ? datePosition : 'void'\" [@.disabled]=\"!showAnimation\" class=\"devui-two-date-wrapper\">\n    <div class=\"devui-two-date-picker\">\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, rightPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'left')\"\n        [whichOpen]=\"whichOpen\"\n        #leftPicker\n      >\n      </d-two-datepicker-single>\n      <d-two-datepicker-single\n        class=\"devui-date-picker\"\n        [locale]=\"locale\"\n        [cssClass]=\"cssClass\"\n        [disabled]=\"disabled\"\n        [dateConverter]=\"dateConverter\"\n        [dateConfig]=\"dateConfig\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [rangePicker]=\"true\"\n        [selectedRange]=\"[rangeStart, rangeEnd]\"\n        [currentCalendars]=\"currentCalendars\"\n        [showTime]=\"showTime\"\n        (rangeSelected)=\"rangeChange($event)\"\n        (hoverOnDate)=\"selectingDate($event)\"\n        (rangeSelecting)=\"syncRangeStart($event, leftPicker)\"\n        (syncPickerPair)=\"syncPickerPair($event, 'right')\"\n        [isAuxiliary]=\"true\"\n        [whichOpen]=\"whichOpen\"\n        #rightPicker\n      >\n      </d-two-datepicker-single>\n    </div>\n    <div *ngIf=\"!customViewTemplate\" class=\"devui-two-date-footer devui-two-date-custom\">\n      <a\n        [ngClass]=\"{\n          disabled: disableToday\n        }\"\n        (click)=\"chooseToday($event)\"\n        >{{ i18nText.today }}</a\n      >\n      <d-button bsStyle=\"common\" (btnClick)=\"clearBtn($event)\" bsSize=\"sm\">{{ i18nText.clear }}</d-button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".devui-two-date-wrapper{display:inline-flex!important;box-shadow:0 2px 8px rgba(37,43,58,.2);box-shadow:var(--devui-shadow-connected-overlay, 0 2px 8px 0) var(--devui-shadow, rgba(37, 43, 58, .2));background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);transform:perspective(1px) translate(0);flex-direction:column;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px 0}.devui-two-date-wrapper .devui-two-date-picker{display:inline-flex!important;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.devui-two-date-wrapper .devui-two-date-custom{width:500px;border-top:1px solid #d7d8da;border-top:1px solid var(--devui-line, #d7d8da)}.devui-two-date-wrapper .devui-two-date-footer{padding:10px;display:flex;justify-content:space-between;align-items:center}.devui-two-date-wrapper .devui-two-date-footer a{color:#526ecc;color:var(--devui-link, #526ecc);text-decoration:none;cursor:pointer}.devui-two-date-wrapper .devui-two-date-footer a.disabled{color:#d7d8da;color:var(--devui-line, #d7d8da);cursor:not-allowed}.devui-date-picker:not(:last-child){margin-right:20px}.host-wrapper{color:red}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DatePickerConfigService }, { type: i2.I18nService }, { type: i0.ChangeDetectorRef }, { type: i3$1.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateConverter: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], hideOnRangeSelected: [{
                type: Input
            }], selectedRangeChange: [{
                type: Output
            }], leftPicker: [{
                type: ViewChild,
                args: ['leftPicker']
            }], rightPicker: [{
                type: ViewChild,
                args: ['rightPicker']
            }], templateWrap: [{
                type: ViewChild,
                args: ['templateWrap']
            }], dateConfig: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }] } });

class TwoDatePickerEndDirective {
    constructor(twoDatePicker, renderer, el) {
        this.twoDatePicker = twoDatePicker;
        this.renderer = renderer;
        this.el = el;
        this.selectEnd = new EventEmitter();
        this.onChange = (_) => null;
        this.clear = () => {
            this.twoDatePicker.clear('end');
        };
        this.twoDateSub = this.twoDatePicker.selectDateSubject.subscribe(data => {
            if (data.side === 'end') {
                if (this.el.nativeElement.tagName === 'INPUT') {
                    this.writeValue(data.date);
                }
                else {
                    this.el.nativeElement.innerHTML = data.date ? this.twoDatePicker.formatDate(data.date) : this.userHtml;
                }
                if (!data.onlyWrite) {
                    this.selectEnd.emit(data.date);
                    this.onChange(data.date);
                }
            }
        });
        this.switchOriginSub = this.twoDatePicker.switchOriginPositionSub.subscribe(side => {
            if (side === 'end') {
                addClassToOrigin(this.el);
            }
            else {
                removeClassFromOrigin(this.el);
            }
        });
    }
    toggle(event) {
        this.twoDatePicker.toggle('end');
    }
    onBlur($event) {
        if (!this.validDate(this.el.nativeElement.value)) {
            this.resetValue();
        }
    }
    ngOnInit() {
        this.userHtml = this.el.nativeElement.innerHTML;
        this.initInputChanges();
    }
    initInputChanges() {
        this.valueChangeSubscrip = fromEvent(this.el.nativeElement, 'keyup').pipe(map((e) => {
            console.log(e);
            return e.target.value;
        }), debounceTime(300)).subscribe(value => {
            this.transUserInputToDatePicker(value);
        });
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        return;
    }
    writeValue(selectedEnd) {
        selectedEnd = selectedEnd || null;
        const formatEnd = selectedEnd ?
            this.twoDatePicker.dateConverter.format(selectedEnd, this.twoDatePicker.dateFormat, this.twoDatePicker.locale) :
            '';
        this.renderer.setProperty(this.el.nativeElement, 'value', formatEnd);
        this.twoDatePicker.selectEnd(selectedEnd, true);
    }
    transUserInputToDatePicker(value) {
        if (!this.twoDatePicker.showTime) {
            const _value = value || this.el.nativeElement.value;
            if (!_value && !this.twoDatePicker.rangeEnd || !_value) {
                this.clear();
                return;
            }
            const valueDate = new Date(_value);
            if (_value && this.validDate(_value)) {
                this.twoDatePicker.selectEnd(valueDate);
                [this.twoDatePicker.rangeStart, this.twoDatePicker.rangeEnd] = this.twoDatePicker.selectedRange;
            }
        }
        else {
            this.resetValue();
        }
    }
    validDate(value) {
        if (!value) {
            return true;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.twoDatePicker.dateConverter.format(valueDate, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat &&
                (valueDate.getTime() < this.twoDatePicker.minDate.getTime() || valueDate.getTime() > this.twoDatePicker.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        if (this.twoDatePicker.rangeEnd) {
            this.el.nativeElement.value =
                this.twoDatePicker.dateConverter.format(this.twoDatePicker.rangeEnd, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        }
    }
    ngOnDestroy() {
        if (this.twoDateSub) {
            this.twoDateSub.unsubscribe();
        }
        if (this.switchOriginSub) {
            this.switchOriginSub.unsubscribe();
        }
        if (this.valueChangeSubscrip) {
            this.valueChangeSubscrip.unsubscribe();
        }
    }
}
TwoDatePickerEndDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerEndDirective, deps: [{ token: TwoDatePickerComponent }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TwoDatePickerEndDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatePickerEndDirective, selector: "[dTwoDatePickerEnd]", outputs: { selectEnd: "selectEnd" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TwoDatePickerEndDirective),
            multi: true
        }], exportAs: ["twoDatePickerEnd"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerEndDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dTwoDatePickerEnd]',
                    exportAs: 'twoDatePickerEnd',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TwoDatePickerEndDirective),
                            multi: true
                        }]
                }]
        }], ctorParameters: function () { return [{ type: TwoDatePickerComponent }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { selectEnd: [{
                type: Output
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });

class TwoDatePickerStartDirective {
    constructor(twoDatePicker, renderer, el) {
        this.twoDatePicker = twoDatePicker;
        this.renderer = renderer;
        this.el = el;
        this.selectStart = new EventEmitter();
        this.onChange = (_) => null;
        this.clear = () => {
            this.twoDatePicker.clear('start');
        };
        this.twoDateSub = this.twoDatePicker.selectDateSubject.subscribe(data => {
            if (data.side === 'start') {
                if (this.el.nativeElement.tagName === 'INPUT') {
                    this.writeValue(data.date);
                }
                else {
                    this.el.nativeElement.innerHTML = data.date ? this.twoDatePicker.formatDate(data.date) : this.userHtml;
                }
                if (!data.onlyWrite) {
                    this.selectStart.emit(data.date);
                    this.onChange(data.date);
                }
            }
        });
        this.switchOriginSub = this.twoDatePicker.switchOriginPositionSub.subscribe(side => {
            if (side === 'start') {
                addClassToOrigin(this.el);
            }
            else {
                removeClassFromOrigin(this.el);
            }
        });
    }
    toggle(event) {
        this.twoDatePicker.toggle('start');
    }
    onBlur($event) {
        if (!this.validDate(this.el.nativeElement.value)) {
            this.resetValue();
        }
    }
    ngOnInit() {
        this.userHtml = this.el.nativeElement.innerHTML;
        this.initInputChanges();
    }
    initInputChanges() {
        this.valueChangeSubscrip = fromEvent(this.el.nativeElement, 'keyup').pipe(map((e) => e.target.value), debounceTime(300)).subscribe(value => {
            this.transUserInputToDatePicker(value);
        });
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        return;
    }
    writeValue(selectedStart) {
        selectedStart = selectedStart || null;
        const formatStart = selectedStart ?
            this.twoDatePicker.dateConverter.format(selectedStart, this.twoDatePicker.dateFormat, this.twoDatePicker.locale) :
            '';
        this.renderer.setProperty(this.el.nativeElement, 'value', formatStart);
        this.twoDatePicker.selectStart(selectedStart, true);
    }
    transUserInputToDatePicker(value) {
        if (!this.twoDatePicker.showTime) {
            const _value = value || this.el.nativeElement.value;
            if (!_value && !this.twoDatePicker.rangeStart || !_value) {
                this.clear();
                return;
            }
            const valueDate = new Date(_value);
            if (_value && this.validDate(_value)) {
                this.twoDatePicker.selectStart(valueDate);
                [this.twoDatePicker.rangeStart, this.twoDatePicker.rangeEnd] = this.twoDatePicker.selectedRange;
            }
        }
        else {
            this.resetValue();
        }
    }
    validDate(value) {
        if (!value) {
            return true;
        }
        const valueDate = new Date(value);
        const valueFormat = valueDate && !isNaN(valueDate.getTime()) &&
            this.twoDatePicker.dateConverter.format(valueDate, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        if (!valueDate || value !== valueFormat ||
            (value === valueFormat &&
                (valueDate.getTime() < this.twoDatePicker.minDate.getTime() || valueDate.getTime() > this.twoDatePicker.maxDate.getTime()))) {
            return false;
        }
        else {
            return true;
        }
    }
    resetValue() {
        if (this.twoDatePicker.rangeStart) {
            this.el.nativeElement.value =
                this.twoDatePicker.dateConverter.format(this.twoDatePicker.rangeStart, this.twoDatePicker.dateFormat, this.twoDatePicker.locale);
        }
    }
    ngOnDestroy() {
        if (this.twoDateSub) {
            this.twoDateSub.unsubscribe();
        }
        if (this.switchOriginSub) {
            this.switchOriginSub.unsubscribe();
        }
        if (this.valueChangeSubscrip) {
            this.valueChangeSubscrip.unsubscribe();
        }
    }
}
TwoDatePickerStartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerStartDirective, deps: [{ token: TwoDatePickerComponent }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TwoDatePickerStartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: TwoDatePickerStartDirective, selector: "[dTwoDatePickerStart]", outputs: { selectStart: "selectStart" }, host: { listeners: { "blur": "onBlur($event)" } }, providers: [{
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TwoDatePickerStartDirective),
            multi: true
        }], exportAs: ["twoDatePickerStart"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TwoDatePickerStartDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dTwoDatePickerStart]',
                    exportAs: 'twoDatePickerStart',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TwoDatePickerStartDirective),
                            multi: true
                        }]
                }]
        }], ctorParameters: function () { return [{ type: TwoDatePickerComponent }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { selectStart: [{
                type: Output
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }] } });

class DatepickerModule {
}
DatepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DatepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerModule, declarations: [DatepickerComponent,
        DatepickerDirective,
        DatePickerAppendToBodyComponent,
        DateRangePickerComponent,
        DateRangePickerDirective,
        SingleDateRangePickerComponent,
        TwoDatePickerComponent,
        TwoDatepickerSingleComponent,
        TwoDatePickerStartDirective,
        TwoDatePickerEndDirective], imports: [CommonModule,
        FormsModule,
        OverlayModule,
        ButtonModule], exports: [DatepickerComponent,
        DatepickerDirective,
        DatePickerAppendToBodyComponent,
        DateRangePickerComponent,
        DateRangePickerDirective,
        SingleDateRangePickerComponent,
        TwoDatePickerComponent,
        TwoDatepickerSingleComponent,
        TwoDatePickerStartDirective,
        TwoDatePickerEndDirective] });
DatepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerModule, providers: [DatePickerConfigService], imports: [[
            CommonModule,
            FormsModule,
            OverlayModule,
            ButtonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DatepickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        OverlayModule,
                        ButtonModule
                    ],
                    exports: [
                        DatepickerComponent,
                        DatepickerDirective,
                        DatePickerAppendToBodyComponent,
                        DateRangePickerComponent,
                        DateRangePickerDirective,
                        SingleDateRangePickerComponent,
                        TwoDatePickerComponent,
                        TwoDatepickerSingleComponent,
                        TwoDatePickerStartDirective,
                        TwoDatePickerEndDirective
                    ],
                    declarations: [
                        DatepickerComponent,
                        DatepickerDirective,
                        DatePickerAppendToBodyComponent,
                        DateRangePickerComponent,
                        DateRangePickerDirective,
                        SingleDateRangePickerComponent,
                        TwoDatePickerComponent,
                        TwoDatepickerSingleComponent,
                        TwoDatePickerStartDirective,
                        TwoDatePickerEndDirective
                    ],
                    providers: [DatePickerConfigService]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DatePickerAppendToBodyComponent, DatePickerConfigService, DateRangePickerComponent, DateRangePickerDirective, DatepickerComponent, DatepickerDirective, DatepickerModule, SelectDateChangeReason, SelectDateRangeChangeReason, SingleDateRangePickerComponent, TwoDatePickerComponent, TwoDatePickerEndDirective, TwoDatePickerStartDirective, TwoDatepickerSingleComponent };
//# sourceMappingURL=ng-devui-datepicker.mjs.map
