import * as i0 from '@angular/core';
import { Component, Input, Directive, HostBinding, Injectable, Inject, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Subscription, Observable, from, forkJoin, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i1$1 from 'ng-devui/overlay-container';

class LoadingBackdropComponent {
    constructor() {
        this.backdrop = true;
    }
    ngOnInit() {
        if (this.target) {
            this.targetName = this.target.nodeName;
        }
    }
    ngOnChanges(changes) {
        if (changes['target']) {
            if (this.target) {
                this.targetName = this.target.nodeName;
            }
        }
    }
}
LoadingBackdropComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingBackdropComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadingBackdropComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: LoadingBackdropComponent, selector: "d-loading-backdrop", inputs: { backdrop: "backdrop", target: "target", zIndex: "zIndex" }, usesOnChanges: true, ngImport: i0, template: `<div class="devui-loading-backdrop" [ngStyle]="{ 'z-index': zIndex }"
                  [ngClass]="{ 'devui-loading-full': targetName === 'BODY' }"
                  *ngIf="backdrop">
             </div>`, isInline: true, styles: [".devui-loading-backdrop{position:absolute;z-index:1079;z-index:calc(var(--devui-z-index-full-page-overlay, 1080) - 1);background-color:#d7d8da;background-color:var(--devui-line, #d7d8da);opacity:.3;left:0;top:0;bottom:0;right:0}.devui-loading-backdrop.devui-loading-full{position:fixed;width:100vw;height:100vh}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingBackdropComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-loading-backdrop', template: `<div class="devui-loading-backdrop" [ngStyle]="{ 'z-index': zIndex }"
                  [ngClass]="{ 'devui-loading-full': targetName === 'BODY' }"
                  *ngIf="backdrop">
             </div>`, preserveWhitespaces: false, styles: [".devui-loading-backdrop{position:absolute;z-index:1079;z-index:calc(var(--devui-z-index-full-page-overlay, 1080) - 1);background-color:#d7d8da;background-color:var(--devui-line, #d7d8da);opacity:.3;left:0;top:0;bottom:0;right:0}.devui-loading-backdrop.devui-loading-full{position:fixed;width:100vw;height:100vh}\n"] }]
        }], propDecorators: { backdrop: [{
                type: Input
            }], target: [{
                type: Input
            }], zIndex: [{
                type: Input
            }] } });

class LoadingComponent {
    ngOnInit() {
        if (this.target) {
            this.targetName = this.target.nodeName;
        }
    }
    ngOnChanges(changes) {
        if (changes['target']) {
            if (this.target) {
                this.targetName = this.target.nodeName;
            }
        }
    }
    // Will overwrite this method in modal service
    close() { }
}
LoadingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: LoadingComponent, selector: "d-loading", inputs: { loadingTemplateRef: "loadingTemplateRef", message: "message", top: "top", left: "left", customPosition: "customPosition", target: "target", zIndex: "zIndex" }, usesOnChanges: true, ngImport: i0, template: `<div class="devui-loading-wrapper" [ngClass]="{ 'devui-loading-full': targetName === 'BODY' }" >
                <ng-container *ngTemplateOutlet="loadingTemplateRef ? loadingTemplateRef : default;">
                </ng-container>
                <ng-template #default>
                    <div class="devui-spinner-wrapper"
                         [ngClass]="{'devui-fix-loading-position': !customPosition,'devui-message-wrapper':!!message}"
                         [ngStyle]="{'z-index':zIndex, 'top': top ,'left': left }">
                        <div class="devui-busy-default-sign">
                            <div class="devui-busy-default-spinner">
                                <div class="devui-loading-bar1"></div>
                                <div class="devui-loading-bar2"></div>
                                <div class="devui-loading-bar3"></div>
                                <div class="devui-loading-bar4"></div>
                            </div>
                            <div class="devui-busy-default-text" *ngIf="!!message">{{message}}</div>
                        </div>
                     </div>
                </ng-template>
             </div>`, isInline: true, styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-loading-wrapper{display:flex;flex:1 1 auto}.devui-loading-wrapper.devui-loading-full{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1080;z-index:var(--devui-z-index-full-page-overlay, 1080)}.devui-spinner-wrapper{position:absolute;z-index:1080;z-index:var(--devui-z-index-full-page-overlay, 1080);width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;display:flex}.devui-message-wrapper{background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:6px;border-radius:var(--devui-border-radius-card, 6px)}.devui-fix-loading-position{transform:translate(-50%,-50%)}.devui-busy-default-sign{position:relative;display:inline-flex;z-index:1080;z-index:var(--devui-z-index-full-page-overlay, 1080);padding:12px;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-busy-default-text{display:inline-block;margin-left:8px;max-width:400px;font-size:12px;font-size:var(--devui-font-size, 12px);text-align:left}.devui-busy-default-spinner{position:relative;display:inline-block;width:15px;height:15px;-webkit-animation:devui-busy-spinner-anim 1s linear infinite;animation:devui-busy-spinner-anim 1s linear infinite}.devui-busy-default-spinner div{position:absolute;left:44.5%;top:37%;width:6px;height:6px;border-radius:50%}.devui-busy-default-spinner .devui-loading-bar1{top:0;left:0;background:#5e7ce0;background:var(--devui-brand, #5e7ce0)}.devui-busy-default-spinner .devui-loading-bar2{top:0;left:9px;background:#f2f2f3;background:var(--devui-brand-foil, #f2f2f3)}.devui-busy-default-spinner .devui-loading-bar3{top:9px;left:0;background:#f2f2f3;background:var(--devui-brand-foil, #f2f2f3)}.devui-busy-default-spinner .devui-loading-bar4{top:9px;left:9px;background:#5e7ce0;background:var(--devui-brand, #5e7ce0)}@-webkit-keyframes devui-busy-spinner-anim{0%{transform:rotate(0) scale(1)}50%{transform:rotate(180deg) scale(1.5)}to{transform:rotate(360deg) scale(1)}}@keyframes devui-busy-spinner-anim{0%{transform:rotate(0) scale(1)}50%{transform:rotate(180deg) scale(1.5)}to{transform:rotate(360deg) scale(1)}}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-loading', template: `<div class="devui-loading-wrapper" [ngClass]="{ 'devui-loading-full': targetName === 'BODY' }" >
                <ng-container *ngTemplateOutlet="loadingTemplateRef ? loadingTemplateRef : default;">
                </ng-container>
                <ng-template #default>
                    <div class="devui-spinner-wrapper"
                         [ngClass]="{'devui-fix-loading-position': !customPosition,'devui-message-wrapper':!!message}"
                         [ngStyle]="{'z-index':zIndex, 'top': top ,'left': left }">
                        <div class="devui-busy-default-sign">
                            <div class="devui-busy-default-spinner">
                                <div class="devui-loading-bar1"></div>
                                <div class="devui-loading-bar2"></div>
                                <div class="devui-loading-bar3"></div>
                                <div class="devui-loading-bar4"></div>
                            </div>
                            <div class="devui-busy-default-text" *ngIf="!!message">{{message}}</div>
                        </div>
                     </div>
                </ng-template>
             </div>`, preserveWhitespaces: false, styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-loading-wrapper{display:flex;flex:1 1 auto}.devui-loading-wrapper.devui-loading-full{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1080;z-index:var(--devui-z-index-full-page-overlay, 1080)}.devui-spinner-wrapper{position:absolute;z-index:1080;z-index:var(--devui-z-index-full-page-overlay, 1080);width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;display:flex}.devui-message-wrapper{background:#ffffff;background:var(--devui-base-bg, #ffffff);border-radius:6px;border-radius:var(--devui-border-radius-card, 6px)}.devui-fix-loading-position{transform:translate(-50%,-50%)}.devui-busy-default-sign{position:relative;display:inline-flex;z-index:1080;z-index:var(--devui-z-index-full-page-overlay, 1080);padding:12px;color:#252b3a;color:var(--devui-text, #252b3a)}.devui-busy-default-text{display:inline-block;margin-left:8px;max-width:400px;font-size:12px;font-size:var(--devui-font-size, 12px);text-align:left}.devui-busy-default-spinner{position:relative;display:inline-block;width:15px;height:15px;-webkit-animation:devui-busy-spinner-anim 1s linear infinite;animation:devui-busy-spinner-anim 1s linear infinite}.devui-busy-default-spinner div{position:absolute;left:44.5%;top:37%;width:6px;height:6px;border-radius:50%}.devui-busy-default-spinner .devui-loading-bar1{top:0;left:0;background:#5e7ce0;background:var(--devui-brand, #5e7ce0)}.devui-busy-default-spinner .devui-loading-bar2{top:0;left:9px;background:#f2f2f3;background:var(--devui-brand-foil, #f2f2f3)}.devui-busy-default-spinner .devui-loading-bar3{top:9px;left:0;background:#f2f2f3;background:var(--devui-brand-foil, #f2f2f3)}.devui-busy-default-spinner .devui-loading-bar4{top:9px;left:9px;background:#5e7ce0;background:var(--devui-brand, #5e7ce0)}@-webkit-keyframes devui-busy-spinner-anim{0%{transform:rotate(0) scale(1)}50%{transform:rotate(180deg) scale(1.5)}to{transform:rotate(360deg) scale(1)}}@keyframes devui-busy-spinner-anim{0%{transform:rotate(0) scale(1)}50%{transform:rotate(180deg) scale(1.5)}to{transform:rotate(360deg) scale(1)}}\n"] }]
        }], propDecorators: { loadingTemplateRef: [{
                type: Input
            }], message: [{
                type: Input
            }], top: [{
                type: Input
            }], left: [{
                type: Input
            }], customPosition: [{
                type: Input
            }], target: [{
                type: Input
            }], zIndex: [{
                type: Input
            }] } });

class LoadingDirective {
    constructor(triggerElementRef, viewContainerRef, injector, elementRef) {
        this.triggerElementRef = triggerElementRef;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.elementRef = elementRef;
        this.active = true;
    }
    ngOnChanges(changes) {
        if (changes['showLoading'] || changes['loading'] || changes['backdrop'] || changes['loadingTemplateRef']
            || changes['message'] || changes['positionType'] || changes['view'] || changes['zIndex']) {
            if (this.showLoading !== undefined) {
                this.showLoadingChangeEvent(this.showLoading);
            }
            if (this.loading !== undefined) {
                this.loadingChangeEvent(this.loading);
            }
        }
    }
    loadingChangeEvent(loading) {
        if (loading instanceof Subscription) {
            this.startLoading();
            loading.add(() => this.endLoading());
            return;
        }
        const loadingArr = [].concat(loading).map(item => {
            if (item instanceof Observable) {
                return item;
            }
            return from(item);
        });
        if (loadingArr.length > 0) {
            this.startLoading();
            forkJoin(loadingArr)
                .pipe(catchError(error => {
                return throwError(error);
            }))
                .subscribe({
                next: null,
                error: () => {
                    this.endLoading();
                },
                complete: () => {
                    this.endLoading();
                }
            });
        }
    }
    showLoadingChangeEvent(showLoading) {
        if (showLoading === true) {
            this.startLoading();
        }
        else {
            this.endLoading();
        }
    }
    startLoading() {
        this.position = this.positionType || 'relative';
        if (this.backdrop && !this.backdropRef) {
            this.createLoadingBackdrop();
        }
        if (!this.backdrop && this.backdropRef) {
            this.backdropRef.destroy();
            this.backdropRef = null;
        }
        if (!this.loadingRef) {
            this.loadingRef = this.viewContainerRef.createComponent(LoadingComponent, {
                index: null,
                injector: this.injector,
            });
            this.insert(this.loadingRef.hostView);
        }
        Object.assign(this.loadingRef.instance, {
            message: this.message,
            loadingTemplateRef: this.loadingTemplateRef,
            top: this.view ? this.view.top : '50%',
            left: this.view ? this.view.left : '50%',
            isCustomPosition: !!this.view,
            zIndex: this.zIndex ? this.zIndex : '',
        });
    }
    endLoading() {
        if (this.loadingRef) {
            this.loadingRef.destroy();
            this.loadingRef = null;
        }
        if (this.backdropRef) {
            this.backdropRef.destroy();
            this.backdropRef = null;
        }
        this.position = '';
    }
    createLoadingBackdrop() {
        this.backdropRef =
            !this.backdropRef &&
                this.viewContainerRef.createComponent(LoadingBackdropComponent, {
                    index: null,
                    injector: this.injector,
                });
        this.insert(this.backdropRef.hostView);
        Object.assign(this.backdropRef.instance, {
            triggerElementRef: this.triggerElementRef,
            backdrop: this.backdrop,
            zIndex: this.zIndex ? this.zIndex : ''
        });
    }
    insert(viewRef) {
        viewRef.rootNodes.forEach(node => this.elementRef.nativeElement.appendChild(node));
        return viewRef;
    }
}
LoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.Injector }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
LoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: LoadingDirective, selector: "[dLoading]", inputs: { message: "message", backdrop: "backdrop", loadingTemplateRef: "loadingTemplateRef", positionType: "positionType", view: "view", showLoading: "showLoading", loading: "loading", zIndex: "zIndex" }, host: { properties: { "style.position": "this.position" } }, exportAs: ["dLoading"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dLoading]',
                    exportAs: 'dLoading'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.Injector }, { type: i0.ElementRef }]; }, propDecorators: { message: [{
                type: Input
            }], backdrop: [{
                type: Input
            }], loadingTemplateRef: [{
                type: Input
            }], positionType: [{
                type: Input
            }], view: [{
                type: Input
            }], position: [{
                type: HostBinding,
                args: ['style.position']
            }], showLoading: [{
                type: Input
            }], loading: [{
                type: Input
            }], zIndex: [{
                type: Input
            }] } });

class LoadingService {
    constructor(overlayContainerRef, componentFactoryResolver, rendererFactory, doc) {
        this.overlayContainerRef = overlayContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.rendererFactory = rendererFactory;
        this.doc = doc;
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.document = this.doc;
    }
    // loading 服务内的函数，外部就可以传入ILoadingOptions类型的参数调用它
    open({ target = this.document.body, backdrop = true, message, loadingTemplateRef, positionType = 'relative', view, injector, zIndex, } = {}) {
        const finalComponentFactoryResolver = this.componentFactoryResolver;
        let positionTypeOld = '';
        positionTypeOld = '' || target['style']['position'];
        let backdropRef;
        if (backdrop) {
            backdropRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(LoadingBackdropComponent), injector);
            Object.assign(backdropRef.instance, {
                backdrop: backdrop,
                zIndex: zIndex,
                target: target ? target : this.document.body,
            });
            const viewRef = backdropRef.hostView;
            viewRef.rootNodes.forEach((node) => target.appendChild(node));
        }
        const loadingRef = this.overlayContainerRef.createComponent(finalComponentFactoryResolver.resolveComponentFactory(LoadingComponent), injector);
        Object.assign(loadingRef.instance, {
            message: message,
            zIndex: zIndex,
            loadingTemplateRef: loadingTemplateRef,
            top: view ? view.top : '50%',
            left: view ? view.left : '50%',
            isCustomPosition: !!view,
            target: target ? target : this.document.body,
        });
        this.renderer.setStyle(target, 'position', positionType);
        const viewRef1 = loadingRef.hostView;
        viewRef1.rootNodes.forEach((node) => target.appendChild(node));
        loadingRef.instance.close = () => {
            if (loadingRef) {
                loadingRef.destroy();
            }
            if (backdropRef) {
                backdropRef.destroy();
                backdropRef = null;
            }
            this.renderer.setStyle(target, 'position', positionTypeOld);
        };
        //  返回一个对象内含2个实例loadingInstance和backdropInstance
        return {
            loadingInstance: loadingRef.instance,
            backdropInstance: backdropRef ? backdropRef.instance : null,
        };
    }
}
LoadingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingService, deps: [{ token: i1$1.OverlayContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i0.RendererFactory2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
LoadingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.OverlayContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i0.RendererFactory2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

class LoadingModule {
}
LoadingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoadingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingModule, declarations: [LoadingDirective,
        LoadingBackdropComponent,
        LoadingComponent], imports: [CommonModule], exports: [LoadingDirective,
        LoadingBackdropComponent,
        LoadingComponent] });
LoadingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingModule, providers: [LoadingService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: LoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [
                        LoadingDirective,
                        LoadingBackdropComponent,
                        LoadingComponent,
                    ],
                    declarations: [
                        LoadingDirective,
                        LoadingBackdropComponent,
                        LoadingComponent
                    ],
                    providers: [LoadingService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LoadingBackdropComponent, LoadingComponent, LoadingDirective, LoadingModule, LoadingService };
//# sourceMappingURL=ng-devui-loading.mjs.map
