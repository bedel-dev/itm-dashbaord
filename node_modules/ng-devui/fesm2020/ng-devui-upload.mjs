import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, Output, HostListener, Component, ViewChild, Injectable, Inject, forwardRef, NgModule } from '@angular/core';
import * as i1 from 'ng-devui/i18n';
import { from, of, merge, Observable } from 'rxjs';
import { catchError, toArray, mergeMap, map, debounceTime, last } from 'rxjs/operators';
import * as i8 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i3 from 'ng-devui/toast';
import { ToastModule } from 'ng-devui/toast';
import * as i4 from 'ng-devui/progress';
import { ProgressModule } from 'ng-devui/progress';
import * as i5 from 'ng-devui/button';
import { ButtonModule } from 'ng-devui/button';

class FileDropDirective {
    constructor(element) {
        this.enableDrop = false;
        this.isSingle = false;
        this.fileOver = new EventEmitter();
        this.fileDrop = new EventEmitter();
        this.element = element;
    }
    onDrop(event) {
        if (!this.enableDrop) {
            return;
        }
        const transfer = this._getTransfer(event);
        if (!transfer) {
            return;
        }
        this._preventAndStop(event);
        if (this.isSingle) {
            this.fileDrop.emit([transfer.files[0]]);
        }
        else {
            this.fileDrop.emit(transfer.files);
        }
    }
    onDragOver(event) {
        if (!this.enableDrop) {
            return;
        }
        const transfer = this._getTransfer(event);
        if (!this._haveFiles(transfer.types)) {
            return;
        }
        this._preventAndStop(event);
        this.fileOver.emit(true);
    }
    onDragLeave(event) {
        if (!this.enableDrop) {
            return;
        }
        if (this.element) {
            if (event.currentTarget === this.element[0]) {
                return;
            }
        }
        this._preventAndStop(event);
        this.fileOver.emit(false);
    }
    _getTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;
    }
    _preventAndStop(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    _haveFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        else if (types.contains) {
            return types.contains('Files');
        }
        else {
            return false;
        }
    }
}
FileDropDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FileDropDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FileDropDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: FileDropDirective, selector: "[d-file-drop]", inputs: { enableDrop: "enableDrop", isSingle: "isSingle" }, outputs: { fileOver: "fileOver", fileDrop: "fileDrop" }, host: { listeners: { "drop": "onDrop($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FileDropDirective, decorators: [{
            type: Directive,
            args: [{
                    /* eslint-disable-next-line @angular-eslint/directive-selector*/
                    selector: '[d-file-drop]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { enableDrop: [{
                type: Input
            }], isSingle: [{
                type: Input
            }], fileOver: [{
                type: Output
            }], fileDrop: [{
                type: Output
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }] } });

class IUploadOptions {
}
class IFileOptions {
}
var UploadStatus;
(function (UploadStatus) {
    UploadStatus[UploadStatus["preLoad"] = 0] = "preLoad";
    UploadStatus[UploadStatus["uploading"] = 1] = "uploading";
    UploadStatus[UploadStatus["uploaded"] = 2] = "uploaded";
    UploadStatus[UploadStatus["failed"] = 3] = "failed";
})(UploadStatus || (UploadStatus = {}));

class FileUploader {
    constructor(file, uploadOptions) {
        this.file = file;
        this.uploadOptions = uploadOptions;
        this.percentage = 0;
        this.file = file;
        this.uploadOptions = uploadOptions;
        this.status = UploadStatus.preLoad;
    }
    sendCommonHandle(uploadFiles) {
        const { uri, method, headers, authToken, authTokenHeader, additionalParameter, fileFieldName, withCredentials, responseType } = this.uploadOptions;
        const authTokenHeader_ = authTokenHeader || 'Authorization';
        const fileFieldName_ = fileFieldName || 'file';
        this.xhr = new XMLHttpRequest();
        this.xhr.open(method || 'POST', uri);
        if (withCredentials) {
            this.xhr.withCredentials = withCredentials;
        }
        if (responseType) {
            this.xhr.responseType = responseType;
        }
        if (authToken) {
            this.xhr.setRequestHeader(authTokenHeader_, authToken);
        }
        if (headers) {
            Object.keys(headers).forEach((key) => {
                this.xhr.setRequestHeader(key, headers[key]);
            });
        }
        this.xhr.upload.onprogress = e => {
            this.percentage = Math.round(e.loaded * 100 / e.total);
        };
        const formData = uploadFiles && uploadFiles.length ?
            this.oneTimeUploadFiles(fileFieldName_, additionalParameter, uploadFiles) :
            this.parallelUploadFiles(fileFieldName_, additionalParameter);
        this.xhr.send(formData);
        this.status = UploadStatus.uploading;
        this.xhr.onabort = () => {
            this.status = UploadStatus.preLoad;
            this.xhr = null;
        };
    }
    sendErrorAndLoadHandle(resolve, reject, isMultiple = false) {
        this.xhr.onerror = () => {
            this.response = this.xhr.response;
            this.status = UploadStatus.failed;
            if (isMultiple) {
                reject({ file: this.file, response: this.xhr.response, status: UploadStatus.failed });
            }
            else {
                reject({ file: this.file, response: this.xhr.response });
            }
        };
        this.xhr.onload = () => {
            if (this.xhr.readyState === 4 && this.xhr.status >= 200 && this.xhr.status < 300) {
                this.response = this.xhr.response;
                this.status = UploadStatus.uploaded;
                if (isMultiple) {
                    resolve({ file: this.file, response: this.xhr.response, status: UploadStatus.uploaded });
                }
                else {
                    resolve({ file: this.file, response: this.xhr.response });
                }
            }
            else {
                this.response = this.xhr.response;
                this.status = UploadStatus.failed;
                if (isMultiple) {
                    reject({ file: this.file, response: this.xhr.response, status: UploadStatus.failed });
                }
                else {
                    reject({ file: this.file, response: this.xhr.response });
                }
            }
        };
    }
    send(uploadFiles) {
        return new Promise((resolve, reject) => {
            this.sendCommonHandle(uploadFiles);
            this.sendErrorAndLoadHandle(resolve, reject);
        });
    }
    sendMultiple(uploadFiles) {
        return new Promise((resolve, reject) => {
            this.sendCommonHandle(uploadFiles);
            this.sendErrorAndLoadHandle(resolve, reject, true);
        });
    }
    parallelUploadFiles(fileFieldName_, additionalParameter) {
        const formData = new FormData();
        formData.append(fileFieldName_, this.file, this.file.name);
        if (additionalParameter) {
            Object.keys(additionalParameter).forEach((key) => {
                formData.append(key, additionalParameter[key]);
            });
        }
        return formData;
    }
    oneTimeUploadFiles(fileFieldName_, additionalParameter, uploadFiles) {
        const formData = new FormData();
        uploadFiles.forEach(element => {
            formData.append(fileFieldName_, element.file, element.file.name);
            if (additionalParameter) {
                Object.keys(additionalParameter).forEach((key) => {
                    formData.append(key, additionalParameter[key]);
                });
            }
        });
        return formData;
    }
    cancel() {
        if (this.xhr) {
            this.xhr.abort();
        }
    }
}

class UploadComponent {
    constructor() {
        this.fileUploaders = [];
        this.filesWithSameName = [];
    }
    addFile(file, options) {
        if (options && options.checkSameName) {
            if (this.checkFileSame(file.name)) {
                this.fileUploaders.push(new FileUploader(file, options));
            }
        }
        else {
            this.fileUploaders.push(new FileUploader(file, options));
        }
    }
    checkFileSame(fileName) {
        let checkRel = true;
        for (let i = 0; i < this.fileUploaders.length; i++) {
            if (fileName === this.fileUploaders[i].file.name) {
                checkRel = false;
                if (this.filesWithSameName.indexOf(fileName) === -1) {
                    this.filesWithSameName.push(fileName);
                }
                break;
            }
        }
        return checkRel;
    }
    getFiles() {
        return this.fileUploaders.map(fileUploader => {
            return fileUploader.file;
        });
    }
    getFullFiles() {
        return this.fileUploaders.map(fileUploader => {
            return fileUploader;
        });
    }
    upload(oneFile, isMultipleUpload = false) {
        let uploads = [];
        if (oneFile) {
            oneFile.percentage = 0;
            uploads.push(from(oneFile.send()));
        }
        else {
            const preFiles = this.fileUploaders.filter((fileUploader) => (fileUploader.status === UploadStatus.preLoad));
            const failedFiles = this.fileUploaders.filter((fileUploader) => (fileUploader.status === UploadStatus.failed));
            const uploadFiles = preFiles.length > 0 ? preFiles : failedFiles;
            uploads = uploadFiles.map((fileUploader) => {
                fileUploader.percentage = 0;
                if (isMultipleUpload) {
                    return from(fileUploader.sendMultiple()).pipe(catchError(error => of(error)));
                }
                else {
                    return from(fileUploader.send());
                }
            });
        }
        if (uploads.length > 0) {
            return merge(...uploads).pipe(toArray());
        }
        return from(Promise.reject('no files'));
    }
    oneTimeUpload() {
        const uploads = this.fileUploaders
            .filter((fileUploader) => fileUploader.status !== UploadStatus.uploaded);
        return from(this.dealOneTimeUploadFiles(uploads));
    }
    async dealOneTimeUploadFiles(uploads) {
        if (!uploads || !uploads.length) {
            return Promise.reject('no files');
        }
        // 触发文件上传
        let finalUploads = [];
        await uploads[0].send(uploads).finally(() => {
            finalUploads = uploads.map((file) => {
                file.status = uploads[0].status;
                file.percentage = uploads[0].percentage;
                return { file: file.file, response: uploads[0].response };
            });
        });
        return finalUploads;
    }
    deleteFile(file) {
        this.fileUploaders = this.fileUploaders.filter((fileUploader) => {
            return file !== fileUploader.file;
        });
    }
    removeFiles() {
        this.fileUploaders = [];
        this.filesWithSameName = [];
    }
    getSameNameFiles() {
        return this.filesWithSameName.join();
    }
    resetSameNameFiles() {
        this.filesWithSameName = [];
    }
}

class UploadedFilesComponent {
    constructor(i18n) {
        this.i18n = i18n;
        this.uploadedFiles = [];
        this.deleteUploadedFileEvent = new EventEmitter();
        // 解决templateContext 传递method.bind(this)引发模板中内嵌组件initialize问题
        this.deleteFileProxy = filePath => {
            this.deleteFile(filePath);
        };
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    cleanUploadedFiles() {
        this.uploadedFiles = [];
    }
    addAndOverwriteFile(file) {
        this.cleanUploadedFiles();
        this.uploadedFiles.push(file);
    }
    addFile(file) {
        this.uploadedFiles.push(file);
    }
    deleteFile(filePath) {
        this.uploadedFiles = this.uploadedFiles.filter((file) => {
            return filePath !== file[this.filePath];
        });
        this.deleteUploadedFileEvent.emit(filePath);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
UploadedFilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadedFilesComponent, deps: [{ token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
UploadedFilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: UploadedFilesComponent, selector: "d-uploaded-files", inputs: { uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", filePath: "filePath" }, outputs: { deleteUploadedFileEvent: "deleteUploadedFileEvent" }, exportAs: ["dUploadFiles"], ngImport: i0, template: "<ng-template\n  [ngTemplateOutlet]=\"uploadedFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, uploadedFiles: uploadedFiles, filePath: filePath, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n", directives: [{ type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadedFilesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-uploaded-files', exportAs: 'dUploadFiles', preserveWhitespaces: false, template: "<ng-template\n  [ngTemplateOutlet]=\"uploadedFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, uploadedFiles: uploadedFiles, filePath: filePath, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }]; }, propDecorators: { uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], deleteUploadedFileEvent: [{
                type: Output
            }] } });

class MultipleUploadViewComponent extends UploadComponent {
    constructor(i18n) {
        super();
        this.i18n = i18n;
        this.uploadedFiles = [];
        this.deleteUploadedFileEvent = new EventEmitter();
        this.UploadStatus = UploadStatus;
        this.fileUploaders = [];
        // 解决templateContext 传递method.bind(this)引发模板中内嵌组件initialize问题
        this.deleteFileProxy = file => {
            this.deleteFile(file);
        };
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    addFile(file) {
        let uploadOptions = this.uploadOptions;
        if (this.setCustomUploadOptions) {
            uploadOptions = this.setCustomUploadOptions(file, this.uploadOptions);
        }
        super.addFile(file, uploadOptions);
    }
    deleteFile(file) {
        super.deleteFile(file);
        this.deleteUploadedFileEvent.emit(file);
    }
    deletePreUploadFile(file) {
        super.deleteFile(file);
    }
    removeFiles() {
        super.removeFiles();
    }
    _onDeleteUploadedFile(filePath) {
        this.deleteUploadedFileEvent.emit(filePath);
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
MultipleUploadViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MultipleUploadViewComponent, deps: [{ token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
MultipleUploadViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: MultipleUploadViewComponent, selector: "d-multiple-upload-view", inputs: { uploadOptions: "uploadOptions", preloadFilesRef: "preloadFilesRef", uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", filePath: "filePath", setCustomUploadOptions: "setCustomUploadOptions" }, outputs: { deleteUploadedFileEvent: "deleteUploadedFileEvent" }, viewQueries: [{ propertyName: "uploadedFilesComponent", first: true, predicate: ["dUploadedFiles"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n", components: [{ type: UploadedFilesComponent, selector: "d-uploaded-files", inputs: ["uploadedFiles", "uploadedFilesRef", "filePath"], outputs: ["deleteUploadedFileEvent"], exportAs: ["dUploadFiles"] }], directives: [{ type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MultipleUploadViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-multiple-upload-view', preserveWhitespaces: false, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }]; }, propDecorators: { uploadedFilesComponent: [{
                type: ViewChild,
                args: ['dUploadedFiles', { static: true }]
            }], uploadOptions: [{
                type: Input
            }], preloadFilesRef: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], deleteUploadedFileEvent: [{
                type: Output
            }], setCustomUploadOptions: [{
                type: Input
            }] } });

class SelectFiles {
    constructor(i18n, doc) {
        this.i18n = i18n;
        this.doc = doc;
        this.selectFiles = ({ multiple, accept, webkitdirectory }) => {
            return new Promise((resolve) => {
                const tempNode = this.document.getElementById('d-upload-temp');
                if (tempNode) {
                    this.document.body.removeChild(tempNode);
                }
                const input = this.document.createElement('input');
                input.style.position = 'fixed';
                input.style.left = '-2000px';
                input.style.top = '-2000px';
                input.setAttribute('id', 'd-upload-temp');
                input.setAttribute('type', 'file');
                if (multiple) {
                    input.setAttribute('multiple', '');
                }
                if (accept) {
                    input.setAttribute('accept', accept);
                }
                if (webkitdirectory) {
                    input.setAttribute('webkitdirectory', '');
                }
                input.addEventListener('change', event => {
                    resolve(Array.prototype.slice.call(event.target.files));
                });
                this.document.body.appendChild(input); // Fix compatibility issue with Internet Explorer 11
                this.simulateClickEvent(input);
            });
        };
        this.isAllowedFileType = (accept, file) => {
            if (accept) {
                const acceptArr = accept.split(',');
                const baseMimeType = file.type.replace(/\/.*$/, '');
                return acceptArr.some((type) => {
                    const validType = type.trim();
                    //  suffix name (e.g. '.png,.xlsx')
                    if (validType.startsWith('.')) {
                        return (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.toLowerCase().length - validType.toLowerCase().length) > -1);
                        // mime type like 'image/*'
                    }
                    else if (/\/\*$/.test(validType)) {
                        return baseMimeType === validType.replace(/\/.*$/, '');
                    }
                    //  mime type like 'text/plain,application/json'
                    return file.type === validType;
                });
            }
            return true;
        };
        this.beyondMaximalSize = (fileSize, maximumSize) => {
            if (maximumSize) {
                return fileSize > 1024 * 1024 * maximumSize;
            }
            return false;
        };
        this.beyondAllFilesMaximalSize = (fileSize, maximumSize) => {
            if (maximumSize) {
                return fileSize > 1024 * 1024 * maximumSize;
            }
            return false;
        };
        this.triggerSelectFiles = (fileOptions, uploadOptions) => {
            const { multiple, accept, webkitdirectory } = fileOptions;
            return from(this.selectFiles({ multiple, accept, webkitdirectory })).pipe(mergeMap(file => file));
        };
        this.triggerDropFiles = (fileOptions, uploadOptions, files) => {
            return new Observable(observer => observer.next(files)).pipe(mergeMap(file => file));
        };
        this.document = this.doc;
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    checkAllFilesSize(fileSize, maximumSize) {
        if (this.beyondMaximalSize(fileSize, maximumSize)) {
            this.BEYOND_MAXIMAL_FILE_SIZE_MSG = this.i18nText.getAllFilesBeyondMaximalFileSizeMsg(maximumSize);
            return { checkError: true, errorMsg: this.BEYOND_MAXIMAL_FILE_SIZE_MSG };
        }
    }
    _validateFiles(file, accept, uploadOptions) {
        if (!this.isAllowedFileType(accept, file)) {
            this.NOT_ALLOWED_FILE_TYPE_MSG = this.i18nText.getNotAllowedFileTypeMsg(file.name, accept);
            return { checkError: true, errorMsg: this.NOT_ALLOWED_FILE_TYPE_MSG };
        }
        if (this.beyondMaximalSize(file.size, uploadOptions.maximumSize)) {
            this.BEYOND_MAXIMAL_FILE_SIZE_MSG = this.i18nText.getBeyondMaximalFileSizeMsg(file.name, uploadOptions.maximumSize);
            return { checkError: true, errorMsg: this.BEYOND_MAXIMAL_FILE_SIZE_MSG };
        }
        return { checkError: false, errorMsg: undefined };
    }
    simulateClickEvent(input) {
        const evt = this.document.createEvent('MouseEvents');
        evt.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
        input.dispatchEvent(evt);
    }
}
SelectFiles.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SelectFiles, deps: [{ token: i1.I18nService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
SelectFiles.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SelectFiles });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SelectFiles, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });

class MultipleUploadComponent {
    constructor(selectFiles, i18n, doc, toastService) {
        this.selectFiles = selectFiles;
        this.i18n = i18n;
        this.doc = doc;
        this.toastService = toastService;
        this.autoUpload = false;
        this.withoutBtn = false;
        this.showTip = false;
        this.uploadedFiles = [];
        this.oneTimeUpload = false;
        this.disabled = false;
        this.enableDrop = false;
        this.successEvent = new EventEmitter();
        this.errorEvent = new EventEmitter();
        this.deleteUploadedFileEvent = new EventEmitter();
        this.fileDrop = new EventEmitter();
        this.fileOver = new EventEmitter();
        this.fileSelect = new EventEmitter();
        this.isDropOVer = false;
        this.errorMsg = [];
        this.UploadStatus = UploadStatus;
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.document = this.doc;
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
            this.i18nCommonText = data.common;
        });
    }
    writeValue(files) {
        if (files) {
            const simulateFiles = from(this.simulateSelectFiles(files)).pipe(mergeMap(file => file));
            this._dealFiles(simulateFiles);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    simulateSelectFiles(files) {
        return new Promise((resolve) => {
            resolve(Array.prototype.slice.call(files));
        });
    }
    _dealFiles(observale) {
        this.multipleUploadViewComponent.resetSameNameFiles();
        observale.pipe(map(file => this.multipleUploadViewComponent.addFile(file)), debounceTime(100))
            .subscribe(() => {
            this.checkValid();
            const sameNameFiles = this.multipleUploadViewComponent.getSameNameFiles();
            if (this.uploadOptions.checkSameName && sameNameFiles.length) {
                this.alertMsg(this.i18nText.getExistSameNameFilesMsg(sameNameFiles));
            }
            this.onChange(this.multipleUploadViewComponent.fileUploaders.map(fileUploader => fileUploader.file));
            const selectedFiles = this.multipleUploadViewComponent.fileUploaders
                .filter(fileUploader => fileUploader.status === UploadStatus.preLoad)
                .map(fileUploader => fileUploader.file);
            this.onFileSelect(selectedFiles);
            if (this.autoUpload) {
                this.upload();
            }
        }, (error) => {
            this.alertMsg(error.message);
        });
    }
    checkValid() {
        let totalFileSize = 0;
        this.multipleUploadViewComponent.fileUploaders.forEach(fileUploader => {
            totalFileSize += fileUploader.file.size;
            const checkResult = this.selectFiles._validateFiles(fileUploader.file, this.fileOptions.accept, fileUploader.uploadOptions);
            if (checkResult && checkResult.checkError) {
                this.multipleUploadViewComponent.deletePreUploadFile(fileUploader.file);
                this.alertMsg(checkResult.errorMsg);
                return;
            }
        });
        if (this.oneTimeUpload) {
            const checkResult = this.selectFiles.checkAllFilesSize(totalFileSize, this.uploadOptions.maximumSize);
            if (checkResult && checkResult.checkError) {
                this.multipleUploadViewComponent.removeFiles();
                this.alertMsg(checkResult.errorMsg);
            }
        }
    }
    onClick(event) {
        if (this.disabled) {
            return;
        }
        this._dealFiles(this.selectFiles.triggerSelectFiles(this.fileOptions, this.uploadOptions));
    }
    onFileDrop(files) {
        this.isDropOVer = false;
        this._dealFiles(this.selectFiles.triggerDropFiles(this.fileOptions, this.uploadOptions, files));
        this.fileDrop.emit(files);
    }
    onFileOver(event) {
        this.isDropOVer = event;
        this.fileOver.emit(event);
    }
    onFileSelect(files) {
        this.fileSelect.emit(files);
    }
    handleOneTimeUpload(uploadObservable) {
        uploadObservable
            .pipe(last())
            .subscribe((results) => {
            this.successEvent.emit(results);
            results.forEach((result) => {
                this.multipleUploadViewComponent.uploadedFilesComponent.addFile(result.file);
            });
        }, (error) => {
            this.errorEvent.emit(error);
        });
    }
    handleUpload(uploadObservable) {
        uploadObservable
            .pipe(last())
            .subscribe((results) => {
            const successResult = results.filter(item => item.status === UploadStatus.uploaded).map(item => {
                return { file: item.file, response: item.response };
            });
            const failResult = results.filter(item => item.status === UploadStatus.failed).map(item => {
                return { file: item.file, response: item.response };
            });
            if (failResult.length) {
                this.errorEvent.emit(failResult);
            }
            if (successResult.length) {
                this.successEvent.emit(successResult);
                successResult.forEach((result) => {
                    this.multipleUploadViewComponent.uploadedFilesComponent.addFile(result.file);
                });
            }
        });
    }
    upload(event, fileUploader) {
        if (event) {
            event.stopPropagation();
        }
        this.canUpload().then((canUpload) => {
            if (!canUpload) {
                this.multipleUploadViewComponent.removeFiles();
                return;
            }
            const tempNode = this.document.getElementById('d-upload-temp');
            if (tempNode) {
                this.document.body.removeChild(tempNode);
            }
            const uploadObservable = this.oneTimeUpload ?
                this.multipleUploadViewComponent.oneTimeUpload() :
                this.multipleUploadViewComponent.upload(fileUploader, true);
            if (this.oneTimeUpload) {
                this.handleOneTimeUpload(uploadObservable);
            }
            else {
                this.handleUpload(uploadObservable);
            }
        });
    }
    canUpload() {
        let uploadResult = Promise.resolve(true);
        if (this.beforeUpload) {
            const result = this.beforeUpload(this.multipleUploadViewComponent.getFullFiles());
            if (typeof result !== 'undefined') {
                if (result.then) {
                    uploadResult = result;
                }
                else if (result.subscribe) {
                    uploadResult = result.toPromise();
                }
                else {
                    uploadResult = Promise.resolve(result);
                }
            }
        }
        return uploadResult;
    }
    _onDeleteUploadedFile(filePath) {
        this.deleteUploadedFileEvent.emit(filePath);
        this.onChange(this.multipleUploadViewComponent.fileUploaders.map(fileUploader => fileUploader.file));
    }
    deleteFile($event, file) {
        $event.stopPropagation();
        this.multipleUploadViewComponent.deleteFile(file);
    }
    alertMsg(errorMsg) {
        this.toastService.open({
            value: [{ severity: 'warn', content: errorMsg }],
        });
    }
    getStatus() {
        let uploadingCount = 0;
        let uploadedCount = 0;
        let failedCount = 0;
        const filesCount = this.multipleUploadViewComponent.fileUploaders.length;
        this.multipleUploadViewComponent.fileUploaders.forEach((fileUploader) => {
            if (fileUploader.status === UploadStatus.uploading) {
                uploadingCount++;
            }
            else if (fileUploader.status === UploadStatus.uploaded) {
                uploadedCount++;
            }
            else if (fileUploader.status === UploadStatus.failed) {
                failedCount++;
            }
        });
        if (failedCount > 0) {
            this.uploadTips = this.i18nText.getFailedFilesCount(failedCount);
            return 'failed';
        }
        if (uploadingCount > 0) {
            this.uploadTips = this.i18nText.getUploadingFilesCount(uploadingCount, filesCount);
            return 'uploading';
        }
        if (uploadedCount === filesCount && uploadedCount !== 0) {
            return 'uploaded';
        }
        if (filesCount !== 0) {
            this.uploadTips = this.i18nText.getSelectedFilesCount(filesCount);
            return 'selected';
        }
    }
    cancelUpload() {
        this.multipleUploadViewComponent.fileUploaders.filter((fileUploader) => fileUploader.status === UploadStatus.uploading)
            .forEach((fileUploader) => {
            fileUploader.status = UploadStatus.failed;
        });
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
MultipleUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MultipleUploadComponent, deps: [{ token: SelectFiles }, { token: i1.I18nService }, { token: DOCUMENT }, { token: i3.ToastService }], target: i0.ɵɵFactoryTarget.Component });
MultipleUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: MultipleUploadComponent, selector: "d-multiple-upload", inputs: { uploadOptions: "uploadOptions", fileOptions: "fileOptions", autoUpload: "autoUpload", withoutBtn: "withoutBtn", showTip: "showTip", uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", preloadFilesRef: "preloadFilesRef", filePath: "filePath", placeholderText: "placeholderText", uploadText: "uploadText", confirmText: "confirmText", oneTimeUpload: "oneTimeUpload", disabled: "disabled", beforeUpload: "beforeUpload", setCustomUploadOptions: "setCustomUploadOptions", enableDrop: "enableDrop" }, outputs: { successEvent: "successEvent", errorEvent: "errorEvent", deleteUploadedFileEvent: "deleteUploadedFileEvent", fileDrop: "fileDrop", fileOver: "fileOver", fileSelect: "fileSelect" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MultipleUploadComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "multipleUploadViewComponent", first: true, predicate: ["dMultipleUploadView"], descendants: true, static: true }], exportAs: ["dMultipleUpload"], ngImport: i0, template: "<div\n  d-file-drop\n  [enableDrop]=\"enableDrop\"\n  (fileDrop)=\"onFileDrop($event)\"\n  (fileOver)=\"onFileOver($event)\"\n  (fileSelect)=\"onFileSelect($event)\"\n  [ngStyle]=\"{ border: isDropOVer ? '1px solid #15bf15' : '0' }\"\n  style=\"display: flex\"\n>\n  <div class=\"devui-input-group\" [class.disabled]=\"disabled\" (click)=\"onClick($event)\">\n    <div *ngIf=\"dMultipleUploadView.fileUploaders.length === 0\" class=\"devui-form-control devui-upload-placeholder\">\n      {{ placeholderText ? placeholderText : i18nText?.chooseFile }}\n    </div>\n    <ul *ngIf=\"dMultipleUploadView.fileUploaders.length > 0\" class=\"devui-form-control devui-files-list\">\n      <li\n        *ngFor=\"let fileUploader of dMultipleUploadView.fileUploaders; let index = index\"\n        class=\"devui-file-item devui-file-tag\"\n        style=\"display: inline-block; margin: 0 2px 2px 0\"\n        title=\"{{ fileUploader.file.name }}\"\n      >\n        <span class=\"devui-filename {{ fileUploader.status === UploadStatus.failed ? 'devui-failed-color' : '' }}\">\n          {{ fileUploader.file.name }}\n        </span>\n        <span\n          class=\"icon icon-close {{ fileUploader.status === UploadStatus.failed ? 'devui-upload-delete-file-button' : '' }}\n          {{\n            fileUploader.status === UploadStatus.uploading || fileUploader.status === UploadStatus.uploaded ? 'devui-uploading-delete' : ''\n          }}\"\n          (click)=\"deleteFile($event, fileUploader.file)\"\n        >\n        </span>\n        <div *ngIf=\"fileUploader.status === UploadStatus.uploading\" class=\"icon devui-upload-progress\">\n          <d-progress\n            [type]=\"'circle'\"\n            [percentage]=\"fileUploader.percentage\"\n            [strokeColor]=\"'#50D4AB'\"\n            [strokeWidth]=\"8\"\n            [showContent]=\"false\"\n          >\n          </d-progress>\n        </div>\n        <span *ngIf=\"fileUploader.status === UploadStatus.failed\" class=\"icon icon-running\" (click)=\"upload($event, fileUploader)\"> </span>\n        <span *ngIf=\"fileUploader.status === UploadStatus.uploaded\" class=\"icon icon-right\"></span>\n      </li>\n    </ul>\n    <span class=\"devui-input-group-addon\">\n      <svg class=\"svg-icon-dot\" height=\"1em\" width=\"1em\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"m400.31892 176.970574c0-61.574381 50.113351-111.680569 111.679545-111.680569 61.576427 0 111.680569 50.106188 111.680569 111.680569 0 61.568241-50.104141 111.679545-111.680569 111.679545-61.566194 0-111.679545-50.111304-111.679545-111.679545zm0 335.028403c0-61.568241 50.113351-111.678522 111.679545-111.678522 61.576427 0 111.680569 50.110281 111.680569 111.678522 0 61.574381-50.105165 111.682615-111.680569 111.682615-61.566194 0-111.679545-50.108235-111.679545-111.682615zm0 335.037612c0-61.572334 50.113351-111.679545 111.679545-111.679545 61.575404 0 111.680569 50.107211 111.680569 111.679545 0 61.567217-50.105165 111.672382-111.680569 111.672382-61.566194 0-111.679545-50.105164-111.679545-111.672382zm0 0\"\n        />\n      </svg>\n    </span>\n  </div>\n  <d-button\n    *ngIf=\"!autoUpload && !withoutBtn\"\n    [disabled]=\"disabled\"\n    (btnClick)=\"upload($event)\"\n    [style.margin-left.px]=\"8\"\n    bsStyle=\"common\"\n  >\n    {{ uploadText || i18nText?.upload }}\n  </d-button>\n</div>\n<ng-container *ngIf=\"showTip\">\n  <div class=\"devui-upload-tip\">\n    <span *ngIf=\"getStatus() === 'selected'\" class=\"devui-loading\">{{ uploadTips }}</span>\n    <span *ngIf=\"getStatus() === 'uploading'\" class=\"devui-loading\">\n      <span style=\"margin-right: 8px\">{{ uploadTips }}</span>\n      <a (click)=\"cancelUpload()\">{{ i18nText?.cancelUpload }}</a>\n    </span>\n    <div *ngIf=\"getStatus() === 'uploaded'\" class=\"devui-loaded\">\n      <i class=\"icon icon-right-o\"></i>\n      <span style=\"vertical-align: middle\">{{ i18nText?.uploadSuccess }}</span>\n    </div>\n    <div *ngIf=\"getStatus() === 'failed'\" class=\"devui-upload-failed\">\n      <i class=\"icon icon-info-o\"></i>\n      <span style=\"vertical-align: middle\">\n        <span style=\"margin-right: 8px\">{{ uploadTips }}</span>\n        <a (click)=\"upload($event)\">{{ i18nText?.reUpload }}</a>\n      </span>\n    </div>\n  </div>\n</ng-container>\n<d-multiple-upload-view\n  #dMultipleUploadView\n  [uploadedFiles]=\"uploadedFiles\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  [preloadFilesRef]=\"preloadFilesRef\"\n  [uploadOptions]=\"uploadOptions\"\n  [filePath]=\"filePath\"\n  [setCustomUploadOptions]=\"setCustomUploadOptions\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-multiple-upload-view>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-input-group{position:relative;display:flex;align-items:center;border-collapse:separate;width:100%}.devui-input-group:not(.disabled):hover .devui-input-group-addon{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);font-weight:700}.devui-input-group:not(.disabled):hover .devui-form-control{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da)}.devui-input-group:not(.disabled) .devui-input-group-addon:active{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-input-group .devui-input-group-addon{width:36px;white-space:nowrap;font-size:16px;font-size:var(--devui-font-size-icon, 16px);font-weight:400;line-height:1;color:#252b3a;color:var(--devui-text, #252b3a);background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5);border-top:1px solid #d7d8da;border-top:1px solid var(--devui-form-control-line, #d7d8da);border-bottom:1px solid #d7d8da;border-bottom:1px solid var(--devui-form-control-line, #d7d8da);border-right:1px solid #d7d8da;border-right:1px solid var(--devui-form-control-line, #d7d8da);border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0;transition:border-color .3s cubic-bezier(.645,.045,.355,1),background-color .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),background-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));cursor:pointer;height:100%;position:relative;display:inline-block}.devui-input-group .devui-input-group-addon svg{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}.devui-input-group .devui-form-control{cursor:pointer;display:block;width:100%;min-height:28px;height:unset;padding:4px 8px;font-size:12px;font-size:var(--devui-font-size, 12px);line-height:1.5;background-image:none;border:1px solid #d7d8da;border:1px solid var(--devui-form-control-line, #d7d8da);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px);transition:border-color .3s cubic-bezier(.645,.045,.355,1),box-shadow .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),box-shadow var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}.devui-input-group .devui-form-control.devui-files-list{max-height:52px;padding:2px 2px 0;overflow-x:hidden;overflow-y:auto;max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-item{height:22px;line-height:22px;padding:0 48px 0 12px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag{position:relative;background-color:#e9edfa;background-color:var(--devui-label-bg, #e9edfa);border-radius:2px;border-radius:var(--devui-border-radius, 2px);max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .devui-filename{height:100%;display:inline-block;vertical-align:middle;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon{position:absolute;cursor:pointer;right:8px;top:50%;transform:translateY(-50%)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-right{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-running{font-size:16px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-upload-delete-file-button{margin-right:20px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-uploading-delete,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .devui-upload-progress,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-right{display:none}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-close{display:inline-block}.devui-input-group.disabled .devui-upload-placeholder{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-input-group .devui-upload-placeholder{max-height:28px;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#babbc0;color:var(--devui-placeholder, #babbc0)}:host ::ng-deep .devui-upload-progress{width:16px;height:16px}.devui-input-group.disabled .devui-form-control,.devui-input-group.disabled .devui-input-group-addon{cursor:not-allowed;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6);color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}svg.svg-icon-dot>path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.devui-form-control{outline:none}.devui-input-group.disabled .devui-upload-delete-file-button{cursor:not-allowed;pointer-events:none}.devui-loading{color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-failed-color{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip{height:18px;margin-top:8px;font-size:12px}.devui-upload-tip .icon{margin-right:8px;font-size:16px;vertical-align:middle}.devui-upload-tip .icon-right-o{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-upload-tip .devui-upload-failed{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip a{color:#526ecc;color:var(--devui-link, #526ecc);cursor:pointer}\n"], components: [{ type: i4.ProgressComponent, selector: "d-progress", inputs: ["percentage", "percentageText", "barbgcolor", "strokeColor", "height", "strokeWidth", "isCircle", "type", "showContent"] }, { type: i5.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }, { type: MultipleUploadViewComponent, selector: "d-multiple-upload-view", inputs: ["uploadOptions", "preloadFilesRef", "uploadedFiles", "uploadedFilesRef", "filePath", "setCustomUploadOptions"], outputs: ["deleteUploadedFileEvent"] }], directives: [{ type: FileDropDirective, selector: "[d-file-drop]", inputs: ["enableDrop", "isSingle"], outputs: ["fileOver", "fileDrop"] }, { type: i8.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: MultipleUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-multiple-upload', exportAs: 'dMultipleUpload', preserveWhitespaces: false, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MultipleUploadComponent),
                            multi: true
                        }
                    ], template: "<div\n  d-file-drop\n  [enableDrop]=\"enableDrop\"\n  (fileDrop)=\"onFileDrop($event)\"\n  (fileOver)=\"onFileOver($event)\"\n  (fileSelect)=\"onFileSelect($event)\"\n  [ngStyle]=\"{ border: isDropOVer ? '1px solid #15bf15' : '0' }\"\n  style=\"display: flex\"\n>\n  <div class=\"devui-input-group\" [class.disabled]=\"disabled\" (click)=\"onClick($event)\">\n    <div *ngIf=\"dMultipleUploadView.fileUploaders.length === 0\" class=\"devui-form-control devui-upload-placeholder\">\n      {{ placeholderText ? placeholderText : i18nText?.chooseFile }}\n    </div>\n    <ul *ngIf=\"dMultipleUploadView.fileUploaders.length > 0\" class=\"devui-form-control devui-files-list\">\n      <li\n        *ngFor=\"let fileUploader of dMultipleUploadView.fileUploaders; let index = index\"\n        class=\"devui-file-item devui-file-tag\"\n        style=\"display: inline-block; margin: 0 2px 2px 0\"\n        title=\"{{ fileUploader.file.name }}\"\n      >\n        <span class=\"devui-filename {{ fileUploader.status === UploadStatus.failed ? 'devui-failed-color' : '' }}\">\n          {{ fileUploader.file.name }}\n        </span>\n        <span\n          class=\"icon icon-close {{ fileUploader.status === UploadStatus.failed ? 'devui-upload-delete-file-button' : '' }}\n          {{\n            fileUploader.status === UploadStatus.uploading || fileUploader.status === UploadStatus.uploaded ? 'devui-uploading-delete' : ''\n          }}\"\n          (click)=\"deleteFile($event, fileUploader.file)\"\n        >\n        </span>\n        <div *ngIf=\"fileUploader.status === UploadStatus.uploading\" class=\"icon devui-upload-progress\">\n          <d-progress\n            [type]=\"'circle'\"\n            [percentage]=\"fileUploader.percentage\"\n            [strokeColor]=\"'#50D4AB'\"\n            [strokeWidth]=\"8\"\n            [showContent]=\"false\"\n          >\n          </d-progress>\n        </div>\n        <span *ngIf=\"fileUploader.status === UploadStatus.failed\" class=\"icon icon-running\" (click)=\"upload($event, fileUploader)\"> </span>\n        <span *ngIf=\"fileUploader.status === UploadStatus.uploaded\" class=\"icon icon-right\"></span>\n      </li>\n    </ul>\n    <span class=\"devui-input-group-addon\">\n      <svg class=\"svg-icon-dot\" height=\"1em\" width=\"1em\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"m400.31892 176.970574c0-61.574381 50.113351-111.680569 111.679545-111.680569 61.576427 0 111.680569 50.106188 111.680569 111.680569 0 61.568241-50.104141 111.679545-111.680569 111.679545-61.566194 0-111.679545-50.111304-111.679545-111.679545zm0 335.028403c0-61.568241 50.113351-111.678522 111.679545-111.678522 61.576427 0 111.680569 50.110281 111.680569 111.678522 0 61.574381-50.105165 111.682615-111.680569 111.682615-61.566194 0-111.679545-50.108235-111.679545-111.682615zm0 335.037612c0-61.572334 50.113351-111.679545 111.679545-111.679545 61.575404 0 111.680569 50.107211 111.680569 111.679545 0 61.567217-50.105165 111.672382-111.680569 111.672382-61.566194 0-111.679545-50.105164-111.679545-111.672382zm0 0\"\n        />\n      </svg>\n    </span>\n  </div>\n  <d-button\n    *ngIf=\"!autoUpload && !withoutBtn\"\n    [disabled]=\"disabled\"\n    (btnClick)=\"upload($event)\"\n    [style.margin-left.px]=\"8\"\n    bsStyle=\"common\"\n  >\n    {{ uploadText || i18nText?.upload }}\n  </d-button>\n</div>\n<ng-container *ngIf=\"showTip\">\n  <div class=\"devui-upload-tip\">\n    <span *ngIf=\"getStatus() === 'selected'\" class=\"devui-loading\">{{ uploadTips }}</span>\n    <span *ngIf=\"getStatus() === 'uploading'\" class=\"devui-loading\">\n      <span style=\"margin-right: 8px\">{{ uploadTips }}</span>\n      <a (click)=\"cancelUpload()\">{{ i18nText?.cancelUpload }}</a>\n    </span>\n    <div *ngIf=\"getStatus() === 'uploaded'\" class=\"devui-loaded\">\n      <i class=\"icon icon-right-o\"></i>\n      <span style=\"vertical-align: middle\">{{ i18nText?.uploadSuccess }}</span>\n    </div>\n    <div *ngIf=\"getStatus() === 'failed'\" class=\"devui-upload-failed\">\n      <i class=\"icon icon-info-o\"></i>\n      <span style=\"vertical-align: middle\">\n        <span style=\"margin-right: 8px\">{{ uploadTips }}</span>\n        <a (click)=\"upload($event)\">{{ i18nText?.reUpload }}</a>\n      </span>\n    </div>\n  </div>\n</ng-container>\n<d-multiple-upload-view\n  #dMultipleUploadView\n  [uploadedFiles]=\"uploadedFiles\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  [preloadFilesRef]=\"preloadFilesRef\"\n  [uploadOptions]=\"uploadOptions\"\n  [filePath]=\"filePath\"\n  [setCustomUploadOptions]=\"setCustomUploadOptions\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-multiple-upload-view>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-input-group{position:relative;display:flex;align-items:center;border-collapse:separate;width:100%}.devui-input-group:not(.disabled):hover .devui-input-group-addon{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);font-weight:700}.devui-input-group:not(.disabled):hover .devui-form-control{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da)}.devui-input-group:not(.disabled) .devui-input-group-addon:active{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-input-group .devui-input-group-addon{width:36px;white-space:nowrap;font-size:16px;font-size:var(--devui-font-size-icon, 16px);font-weight:400;line-height:1;color:#252b3a;color:var(--devui-text, #252b3a);background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5);border-top:1px solid #d7d8da;border-top:1px solid var(--devui-form-control-line, #d7d8da);border-bottom:1px solid #d7d8da;border-bottom:1px solid var(--devui-form-control-line, #d7d8da);border-right:1px solid #d7d8da;border-right:1px solid var(--devui-form-control-line, #d7d8da);border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0;transition:border-color .3s cubic-bezier(.645,.045,.355,1),background-color .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),background-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));cursor:pointer;height:100%;position:relative;display:inline-block}.devui-input-group .devui-input-group-addon svg{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}.devui-input-group .devui-form-control{cursor:pointer;display:block;width:100%;min-height:28px;height:unset;padding:4px 8px;font-size:12px;font-size:var(--devui-font-size, 12px);line-height:1.5;background-image:none;border:1px solid #d7d8da;border:1px solid var(--devui-form-control-line, #d7d8da);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px);transition:border-color .3s cubic-bezier(.645,.045,.355,1),box-shadow .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),box-shadow var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}.devui-input-group .devui-form-control.devui-files-list{max-height:52px;padding:2px 2px 0;overflow-x:hidden;overflow-y:auto;max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-item{height:22px;line-height:22px;padding:0 48px 0 12px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag{position:relative;background-color:#e9edfa;background-color:var(--devui-label-bg, #e9edfa);border-radius:2px;border-radius:var(--devui-border-radius, 2px);max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .devui-filename{height:100%;display:inline-block;vertical-align:middle;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon{position:absolute;cursor:pointer;right:8px;top:50%;transform:translateY(-50%)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-right{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-running{font-size:16px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-upload-delete-file-button{margin-right:20px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-uploading-delete,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .devui-upload-progress,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-right{display:none}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-close{display:inline-block}.devui-input-group.disabled .devui-upload-placeholder{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-input-group .devui-upload-placeholder{max-height:28px;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#babbc0;color:var(--devui-placeholder, #babbc0)}:host ::ng-deep .devui-upload-progress{width:16px;height:16px}.devui-input-group.disabled .devui-form-control,.devui-input-group.disabled .devui-input-group-addon{cursor:not-allowed;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6);color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}svg.svg-icon-dot>path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.devui-form-control{outline:none}.devui-input-group.disabled .devui-upload-delete-file-button{cursor:not-allowed;pointer-events:none}.devui-loading{color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-failed-color{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip{height:18px;margin-top:8px;font-size:12px}.devui-upload-tip .icon{margin-right:8px;font-size:16px;vertical-align:middle}.devui-upload-tip .icon-right-o{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-upload-tip .devui-upload-failed{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip a{color:#526ecc;color:var(--devui-link, #526ecc);cursor:pointer}\n"] }]
        }], ctorParameters: function () { return [{ type: SelectFiles }, { type: i1.I18nService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i3.ToastService }]; }, propDecorators: { uploadOptions: [{
                type: Input
            }], fileOptions: [{
                type: Input
            }], autoUpload: [{
                type: Input
            }], withoutBtn: [{
                type: Input
            }], showTip: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], preloadFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], placeholderText: [{
                type: Input
            }], uploadText: [{
                type: Input
            }], confirmText: [{
                type: Input
            }], oneTimeUpload: [{
                type: Input
            }], disabled: [{
                type: Input
            }], beforeUpload: [{
                type: Input
            }], setCustomUploadOptions: [{
                type: Input
            }], enableDrop: [{
                type: Input
            }], successEvent: [{
                type: Output
            }], errorEvent: [{
                type: Output
            }], deleteUploadedFileEvent: [{
                type: Output
            }], fileDrop: [{
                type: Output
            }], fileOver: [{
                type: Output
            }], fileSelect: [{
                type: Output
            }], multipleUploadViewComponent: [{
                type: ViewChild,
                args: ['dMultipleUploadView', { static: true }]
            }] } });

class SingleUploadViewComponent extends UploadComponent {
    constructor() {
        super(...arguments);
        this.uploadedFiles = [];
        this.deleteUploadedFileEvent = new EventEmitter();
        this.UploadStatus = UploadStatus;
        this.fileUploaders = [];
        // 解决templateContext 传递method.bind(this)引发模板中内嵌组件initialize问题
        this.deleteFileProxy = file => {
            this.deleteFile(file);
        };
    }
    addFile(file) {
        this.fileUploaders = [];
        let uploadOptions = this.uploadOptions;
        if (this.dynamicUploadOptionsFn) {
            uploadOptions = this.dynamicUploadOptionsFn(file, this.uploadOptions);
        }
        super.addFile(file, uploadOptions);
    }
    deleteFile(file) {
        super.deleteFile(file);
        this.deleteUploadedFileEvent.emit(file);
    }
    deletePreUploadFile(file) {
        super.deleteFile(file);
    }
    _onDeleteUploadedFile(filePath) {
        this.deleteUploadedFileEvent.emit(filePath);
    }
}
SingleUploadViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleUploadViewComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SingleUploadViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SingleUploadViewComponent, selector: "d-single-upload-view", inputs: { uploadOptions: "uploadOptions", preloadFilesRef: "preloadFilesRef", uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", filePath: "filePath", dynamicUploadOptionsFn: "dynamicUploadOptionsFn" }, outputs: { deleteUploadedFileEvent: "deleteUploadedFileEvent" }, viewQueries: [{ propertyName: "uploadedFilesComponent", first: true, predicate: ["dUploadedFiles"], descendants: true, static: true }], exportAs: ["dSingleUploadView"], usesInheritance: true, ngImport: i0, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n", components: [{ type: UploadedFilesComponent, selector: "d-uploaded-files", inputs: ["uploadedFiles", "uploadedFilesRef", "filePath"], outputs: ["deleteUploadedFileEvent"], exportAs: ["dUploadFiles"] }], directives: [{ type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleUploadViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-single-upload-view', exportAs: 'dSingleUploadView', preserveWhitespaces: false, template: "<d-uploaded-files\n  #dUploadedFiles\n  [uploadedFiles]=\"uploadedFiles\"\n  [filePath]=\"filePath\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-uploaded-files>\n<ng-template\n  [ngTemplateOutlet]=\"preloadFilesRef\"\n  [ngTemplateOutletContext]=\"{ $implicit: this, fileUploaders: fileUploaders, UploadStatus: UploadStatus, deleteFile: deleteFileProxy }\"\n>\n</ng-template>\n" }]
        }], propDecorators: { uploadOptions: [{
                type: Input
            }], preloadFilesRef: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], dynamicUploadOptionsFn: [{
                type: Input
            }], deleteUploadedFileEvent: [{
                type: Output
            }], uploadedFilesComponent: [{
                type: ViewChild,
                args: ['dUploadedFiles', { static: true }]
            }] } });

class SingleUploadComponent {
    constructor(i18n, selectFiles, doc, toastService) {
        this.i18n = i18n;
        this.selectFiles = selectFiles;
        this.doc = doc;
        this.toastService = toastService;
        this.autoUpload = false;
        this.withoutBtn = false;
        this.showTip = false;
        this.uploadedFiles = [];
        this.enableDrop = false;
        this.disabled = false;
        this.successEvent = new EventEmitter();
        this.errorEvent = new EventEmitter();
        this.errorChunkEvent = new EventEmitter();
        this.deleteUploadedFileEvent = new EventEmitter();
        this.fileDrop = new EventEmitter();
        this.fileOver = new EventEmitter();
        this.fileSelect = new EventEmitter();
        this.UploadStatus = UploadStatus;
        this.isDropOVer = false;
        this.defaultChunkSize = 1024 * 1024 * 20; // 单位是byte 默认分片大小 20兆。
        this.errorMsg = [];
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.document = this.doc;
    }
    writeValue(files) {
        if (files) {
            const simulateFiles = from(this.simulateSelectFiles(files)).pipe(mergeMap((file) => file));
            this._dealFiles(simulateFiles);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    simulateSelectFiles(files) {
        return new Promise((resolve) => {
            resolve(Array.prototype.slice.call(files));
        });
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
            this.i18nCommonText = data.common;
        });
    }
    _dealFiles(observale) {
        observale
            .pipe(map((file) => {
            this.singleUploadViewComponent.addFile(file);
            return file;
        }))
            .subscribe(() => {
            this.singleUploadViewComponent.uploadedFilesComponent.cleanUploadedFiles();
            this.checkValid();
            const file = this.singleUploadViewComponent.fileUploaders[0]?.file;
            this.onChange(file);
            if (file) {
                this.onFileSelect(file);
            }
            if (this.autoUpload) {
                this.upload();
            }
        }, (error) => {
            this.alertMsg(error.message);
        });
    }
    checkValid() {
        this.singleUploadViewComponent.fileUploaders.forEach((fileUploader) => {
            const checkResult = this.selectFiles._validateFiles(fileUploader.file, this.fileOptions.accept, fileUploader.uploadOptions);
            if (checkResult.checkError) {
                this.singleUploadViewComponent.deletePreUploadFile(fileUploader.file);
                this.alertMsg(checkResult.errorMsg);
            }
        });
    }
    onClick($event) {
        if (this.disabled ||
            (this.singleUploadViewComponent.fileUploaders[0] && this.singleUploadViewComponent.fileUploaders[0].status === UploadStatus.uploading)) {
            return;
        }
        this._dealFiles(this.selectFiles.triggerSelectFiles(this.fileOptions, this.uploadOptions));
    }
    get filename() {
        return (this.singleUploadViewComponent.getFiles()[0] || {}).name || '';
    }
    onFileDrop(files) {
        this.isDropOVer = false;
        this._dealFiles(this.selectFiles.triggerDropFiles(this.fileOptions, this.uploadOptions, files));
        this.fileDrop.emit(files[0]);
    }
    onFileOver(event) {
        this.isDropOVer = event;
        this.fileOver.emit(event);
    }
    onFileSelect(file) {
        this.fileSelect.emit(file);
    }
    upload() {
        this.canUpload().then((canUpload) => {
            if (!canUpload) {
                return;
            }
            const tempNode = this.document.getElementById('d-upload-temp');
            if (tempNode) {
                this.document.body.removeChild(tempNode);
            }
            if (this.uploadOptions.isChunked && this.isNeedChunk()) {
                this.sliceUpload();
            }
            else {
                this.singleUploadViewComponent
                    .upload()
                    .pipe(last())
                    .subscribe((results) => {
                    this.successEvent.emit(results);
                    results.forEach((result) => {
                        this.singleUploadViewComponent.uploadedFilesComponent.addAndOverwriteFile(result.file);
                    });
                }, (error) => {
                    if (this.singleUploadViewComponent.fileUploaders[0]) {
                        this.singleUploadViewComponent.fileUploaders[0].percentage = 0;
                    }
                    this.singleUploadViewComponent.uploadedFilesComponent.cleanUploadedFiles();
                    this.errorEvent.emit(error);
                });
            }
        });
    }
    isNeedChunk() {
        if (this.singleUploadViewComponent.fileUploaders[0]?.file) {
            return this.singleUploadViewComponent.fileUploaders[0].file.size > this.uploadOptions.chunkSize || this.defaultChunkSize;
        }
    }
    async sliceUpload() {
        const fileUploaders = this.singleUploadViewComponent.fileUploaders;
        for (let i = 0; i < fileUploaders.length; i++) {
            const fileChunkList = this.createFileChunk(fileUploaders[i].file);
            const currentFile = fileUploaders[i];
            // 并发上传
            const uploadObservable = this.uploadChunkList(fileChunkList, currentFile);
            (await uploadObservable).subscribe((results) => {
                currentFile.percentage = 100;
                currentFile.status = UploadStatus.uploaded;
                const successRes = [{
                        file: currentFile.file,
                        response: results[0].response,
                        chunkList: results
                    }];
                this.successEvent.emit(successRes);
                results.forEach((result) => {
                    this.singleUploadViewComponent.uploadedFilesComponent.addAndOverwriteFile(result.file);
                });
            }, (error) => {
                error.file = currentFile.file;
                currentFile.status = UploadStatus.failed;
                this.singleUploadViewComponent.uploadedFilesComponent.cleanUploadedFiles();
                this.errorEvent.emit(error);
            });
        }
    }
    async uploadChunkList(fileChunkList, currentFile) {
        currentFile.status = UploadStatus.uploading;
        currentFile.percentage = 0;
        let uploads = [];
        const chunkPercentage = (1 / fileChunkList.length) * 100;
        uploads = fileChunkList.map((fileUploader) => {
            fileUploader.percentage = 0;
            return from(fileUploader.send());
        });
        if (uploads.length > 0) {
            const uploadObservable = merge(...uploads);
            (await uploadObservable).subscribe((results) => {
                currentFile.percentage = currentFile.percentage + chunkPercentage;
            }, (error) => {
                currentFile.status = UploadStatus.failed;
                this.singleUploadViewComponent.uploadedFilesComponent.cleanUploadedFiles();
                this.errorChunkEvent.emit(error);
            });
            return merge(...uploads).pipe(toArray());
        }
        return from(Promise.reject(new Error('no files')));
    }
    // 生成分片上传的数组
    createFileChunk(file) {
        const chunkSize = this.uploadOptions.chunkSize || this.defaultChunkSize;
        const { name, type, lastModified, size } = file;
        const fileId = new Date().getTime();
        const fileChunkList = [];
        let fileSliceStart = 0;
        let chunkedFileIndex = 0;
        const chunks = Math.ceil(size / chunkSize);
        while (fileSliceStart < file.size) {
            chunkedFileIndex = chunkedFileIndex + 1;
            const slicedFile = file.slice(fileSliceStart, fileSliceStart + chunkSize);
            const newChunkFile = new File([slicedFile], `${fileId}-${chunkedFileIndex}-${chunks}-${size}-${lastModified}-${name}`, { type });
            fileChunkList.push(new FileUploader(newChunkFile, this.uploadOptions));
            fileSliceStart += chunkSize;
        }
        return fileChunkList;
    }
    canUpload() {
        let uploadResult = Promise.resolve(true);
        if (this.beforeUpload) {
            const result = this.beforeUpload(this.singleUploadViewComponent.getFullFiles()[0] || {});
            if (typeof result !== 'undefined') {
                if (result.then) {
                    uploadResult = result;
                }
                else if (result.subscribe) {
                    uploadResult = result.toPromise();
                }
                else {
                    uploadResult = Promise.resolve(result);
                }
            }
        }
        return uploadResult;
    }
    _onDeleteUploadedFile(filePath) {
        this.deleteUploadedFileEvent.emit(filePath);
        this.onChange(null);
    }
    deleteFile($event) {
        $event.stopPropagation();
        const files = this.singleUploadViewComponent.getFiles();
        this.singleUploadViewComponent.deleteFile(files[0]);
    }
    alertMsg(errorMsg) {
        this.toastService.open({
            value: [{ severity: 'warn', content: errorMsg }],
        });
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
SingleUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleUploadComponent, deps: [{ token: i1.I18nService }, { token: SelectFiles }, { token: DOCUMENT }, { token: i3.ToastService }], target: i0.ɵɵFactoryTarget.Component });
SingleUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: SingleUploadComponent, selector: "d-single-upload", inputs: { uploadOptions: "uploadOptions", fileOptions: "fileOptions", autoUpload: "autoUpload", withoutBtn: "withoutBtn", showTip: "showTip", uploadedFiles: "uploadedFiles", uploadedFilesRef: "uploadedFilesRef", preloadFilesRef: "preloadFilesRef", filePath: "filePath", placeholderText: "placeholderText", uploadText: "uploadText", confirmText: "confirmText", beforeUpload: "beforeUpload", dynamicUploadOptionsFn: "dynamicUploadOptionsFn", enableDrop: "enableDrop", disabled: "disabled" }, outputs: { successEvent: "successEvent", errorEvent: "errorEvent", errorChunkEvent: "errorChunkEvent", deleteUploadedFileEvent: "deleteUploadedFileEvent", fileDrop: "fileDrop", fileOver: "fileOver", fileSelect: "fileSelect" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => SingleUploadComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "singleUploadViewComponent", first: true, predicate: ["dSingleUploadView"], descendants: true, static: true }], exportAs: ["dSingleUpload"], ngImport: i0, template: "<div\n  d-file-drop\n  [enableDrop]=\"enableDrop\"\n  [isSingle]=\"true\"\n  (fileDrop)=\"onFileDrop($event)\"\n  (fileOver)=\"onFileOver($event)\"\n  (fileSelect)=\"onFileSelect($event)\"\n  [ngStyle]=\"{ border: isDropOVer ? '1px solid #15bf15' : '0' }\"\n  style=\"display: flex\"\n>\n  <div\n    [class.disabled]=\"this.disabled || dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\"\n    (click)=\"onClick($event)\"\n    class=\"devui-input-group\"\n  >\n    <div class=\"devui-form-control devui-files-list\">\n      <div *ngIf=\"!filename\" class=\"devui-file-item devui-upload-placeholder\">\n        {{ placeholderText ? placeholderText : i18nText?.chooseFile }}\n      </div>\n      <div *ngIf=\"!!filename\" class=\"devui-file-tag devui-file-item\" title=\"{{ filename }}\">\n        <span class=\"devui-filename {{ dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed ? 'devui-failed-color' : '' }}\">\n          {{ filename }}\n        </span>\n        <span\n          class=\"icon icon-close\n            {{ dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed ? 'devui-upload-delete-file-button' : '' }}\n            {{\n            dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading ||\n            dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\n              ? 'devui-uploading-delete'\n              : ''\n          }}\"\n          (click)=\"deleteFile($event)\"\n        >\n        </span>\n        <div *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\" class=\"icon devui-upload-progress\">\n          <d-progress\n            [type]=\"'circle'\"\n            [percentage]=\"dSingleUploadView.fileUploaders[0].percentage\"\n            [strokeColor]=\"'#50D4AB'\"\n            [strokeWidth]=\"8\"\n            [showContent]=\"false\"\n          >\n          </d-progress>\n        </div>\n        <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed\" class=\"icon icon-running\" (click)=\"upload()\">\n        </span>\n        <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\" class=\"icon icon-right\"></span>\n      </div>\n    </div>\n    <span class=\"devui-input-group-addon\">\n      <svg class=\"svg-icon-dot\" height=\"1em\" width=\"1em\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"m400.31892 176.970574c0-61.574381 50.113351-111.680569 111.679545-111.680569 61.576427 0 111.680569 50.106188 111.680569 111.680569 0 61.568241-50.104141 111.679545-111.680569 111.679545-61.566194 0-111.679545-50.111304-111.679545-111.679545zm0 335.028403c0-61.568241 50.113351-111.678522 111.679545-111.678522 61.576427 0 111.680569 50.110281 111.680569 111.678522 0 61.574381-50.105165 111.682615-111.680569 111.682615-61.566194 0-111.679545-50.108235-111.679545-111.682615zm0 335.037612c0-61.572334 50.113351-111.679545 111.679545-111.679545 61.575404 0 111.680569 50.107211 111.680569 111.679545 0 61.567217-50.105165 111.672382-111.680569 111.672382-61.566194 0-111.679545-50.105164-111.679545-111.672382zm0 0\"\n        />\n      </svg>\n    </span>\n  </div>\n  <d-button\n    *ngIf=\"!autoUpload && !withoutBtn\"\n    (btnClick)=\"upload()\"\n    bsStyle=\"common\"\n    [style.margin-left.px]=\"8\"\n    [disabled]=\"\n      disabled ||\n      dSingleUploadView.uploadedFilesComponent.uploadedFiles.length > 0 ||\n      dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\n    \"\n  >\n    <span *ngIf=\"!dSingleUploadView.fileUploaders[0] || dSingleUploadView.fileUploaders[0]?.status === UploadStatus.preLoad\">{{\n      uploadText || i18nText?.upload\n    }}</span>\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\">{{ i18nText?.uploading }}</span>\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\">{{ i18nText?.uploaded }}</span>\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed\">{{ i18nText?.uploadFailed }}</span>\n  </d-button>\n</div>\n<ng-container *ngIf=\"showTip\">\n  <div class=\"devui-upload-tip\">\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\" class=\"devui-loading\">\n      {{ i18nText?.uploading }}\n    </span>\n    <div *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\" class=\"devui-loaded\">\n      <i class=\"icon icon-right-o\"></i>\n      <span style=\"vertical-align: middle\">{{ i18nText?.uploadSuccess }}</span>\n    </div>\n    <div *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed\" class=\"devui-upload-failed\">\n      <i class=\"icon icon-info-o\"></i>\n      <span style=\"vertical-align: middle\">\n        <span style=\"margin-right: 8px\">{{ i18nText?.uploadFailed }}</span>\n        <a (click)=\"upload()\">{{ i18nText?.reUpload }}</a>\n      </span>\n    </div>\n  </div>\n</ng-container>\n<d-single-upload-view\n  #dSingleUploadView=\"dSingleUploadView\"\n  [uploadOptions]=\"uploadOptions\"\n  [filePath]=\"filePath\"\n  [uploadedFiles]=\"uploadedFiles\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  [preloadFilesRef]=\"preloadFilesRef\"\n  [dynamicUploadOptionsFn]=\"dynamicUploadOptionsFn\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-single-upload-view>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-input-group{position:relative;display:flex;align-items:center;border-collapse:separate;width:100%}.devui-input-group:not(.disabled):hover .devui-input-group-addon{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);font-weight:700}.devui-input-group:not(.disabled):hover .devui-form-control{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da)}.devui-input-group:not(.disabled) .devui-input-group-addon:active{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-input-group .devui-input-group-addon{width:36px;white-space:nowrap;font-size:16px;font-size:var(--devui-font-size-icon, 16px);font-weight:400;line-height:1;color:#252b3a;color:var(--devui-text, #252b3a);background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5);border-top:1px solid #d7d8da;border-top:1px solid var(--devui-form-control-line, #d7d8da);border-bottom:1px solid #d7d8da;border-bottom:1px solid var(--devui-form-control-line, #d7d8da);border-right:1px solid #d7d8da;border-right:1px solid var(--devui-form-control-line, #d7d8da);border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0;transition:border-color .3s cubic-bezier(.645,.045,.355,1),background-color .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),background-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));cursor:pointer;height:100%;position:relative;display:inline-block}.devui-input-group .devui-input-group-addon svg{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}.devui-input-group .devui-form-control{cursor:pointer;display:block;width:100%;min-height:28px;height:unset;padding:4px 8px;font-size:12px;font-size:var(--devui-font-size, 12px);line-height:1.5;background-image:none;border:1px solid #d7d8da;border:1px solid var(--devui-form-control-line, #d7d8da);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px);transition:border-color .3s cubic-bezier(.645,.045,.355,1),box-shadow .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),box-shadow var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}.devui-input-group .devui-form-control.devui-files-list{max-height:52px;padding:2px 2px 0;overflow-x:hidden;overflow-y:auto;max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-item{height:22px;line-height:22px;padding:0 48px 0 12px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag{position:relative;background-color:#e9edfa;background-color:var(--devui-label-bg, #e9edfa);border-radius:2px;border-radius:var(--devui-border-radius, 2px);max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .devui-filename{height:100%;display:inline-block;vertical-align:middle;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon{position:absolute;cursor:pointer;right:8px;top:50%;transform:translateY(-50%)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-right{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-running{font-size:16px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-upload-delete-file-button{margin-right:20px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-uploading-delete,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .devui-upload-progress,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-right{display:none}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-close{display:inline-block}.devui-input-group.disabled .devui-upload-placeholder{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-input-group .devui-upload-placeholder{max-height:28px;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#babbc0;color:var(--devui-placeholder, #babbc0)}:host ::ng-deep .devui-upload-progress{width:16px;height:16px}.devui-input-group.disabled .devui-form-control,.devui-input-group.disabled .devui-input-group-addon{cursor:not-allowed;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6);color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}svg.svg-icon-dot>path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.devui-form-control{outline:none}.devui-input-group.disabled .devui-upload-delete-file-button{cursor:not-allowed;pointer-events:none}.devui-loading{color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-failed-color{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip{height:18px;margin-top:8px;font-size:12px}.devui-upload-tip .icon{margin-right:8px;font-size:16px;vertical-align:middle}.devui-upload-tip .icon-right-o{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-upload-tip .devui-upload-failed{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip a{color:#526ecc;color:var(--devui-link, #526ecc);cursor:pointer}\n"], components: [{ type: i4.ProgressComponent, selector: "d-progress", inputs: ["percentage", "percentageText", "barbgcolor", "strokeColor", "height", "strokeWidth", "isCircle", "type", "showContent"] }, { type: i5.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }, { type: SingleUploadViewComponent, selector: "d-single-upload-view", inputs: ["uploadOptions", "preloadFilesRef", "uploadedFiles", "uploadedFilesRef", "filePath", "dynamicUploadOptionsFn"], outputs: ["deleteUploadedFileEvent"], exportAs: ["dSingleUploadView"] }], directives: [{ type: FileDropDirective, selector: "[d-file-drop]", inputs: ["enableDrop", "isSingle"], outputs: ["fileOver", "fileDrop"] }, { type: i8.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: SingleUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-single-upload', exportAs: 'dSingleUpload', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => SingleUploadComponent),
                            multi: true
                        }
                    ], preserveWhitespaces: false, template: "<div\n  d-file-drop\n  [enableDrop]=\"enableDrop\"\n  [isSingle]=\"true\"\n  (fileDrop)=\"onFileDrop($event)\"\n  (fileOver)=\"onFileOver($event)\"\n  (fileSelect)=\"onFileSelect($event)\"\n  [ngStyle]=\"{ border: isDropOVer ? '1px solid #15bf15' : '0' }\"\n  style=\"display: flex\"\n>\n  <div\n    [class.disabled]=\"this.disabled || dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\"\n    (click)=\"onClick($event)\"\n    class=\"devui-input-group\"\n  >\n    <div class=\"devui-form-control devui-files-list\">\n      <div *ngIf=\"!filename\" class=\"devui-file-item devui-upload-placeholder\">\n        {{ placeholderText ? placeholderText : i18nText?.chooseFile }}\n      </div>\n      <div *ngIf=\"!!filename\" class=\"devui-file-tag devui-file-item\" title=\"{{ filename }}\">\n        <span class=\"devui-filename {{ dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed ? 'devui-failed-color' : '' }}\">\n          {{ filename }}\n        </span>\n        <span\n          class=\"icon icon-close\n            {{ dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed ? 'devui-upload-delete-file-button' : '' }}\n            {{\n            dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading ||\n            dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\n              ? 'devui-uploading-delete'\n              : ''\n          }}\"\n          (click)=\"deleteFile($event)\"\n        >\n        </span>\n        <div *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\" class=\"icon devui-upload-progress\">\n          <d-progress\n            [type]=\"'circle'\"\n            [percentage]=\"dSingleUploadView.fileUploaders[0].percentage\"\n            [strokeColor]=\"'#50D4AB'\"\n            [strokeWidth]=\"8\"\n            [showContent]=\"false\"\n          >\n          </d-progress>\n        </div>\n        <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed\" class=\"icon icon-running\" (click)=\"upload()\">\n        </span>\n        <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\" class=\"icon icon-right\"></span>\n      </div>\n    </div>\n    <span class=\"devui-input-group-addon\">\n      <svg class=\"svg-icon-dot\" height=\"1em\" width=\"1em\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"m400.31892 176.970574c0-61.574381 50.113351-111.680569 111.679545-111.680569 61.576427 0 111.680569 50.106188 111.680569 111.680569 0 61.568241-50.104141 111.679545-111.680569 111.679545-61.566194 0-111.679545-50.111304-111.679545-111.679545zm0 335.028403c0-61.568241 50.113351-111.678522 111.679545-111.678522 61.576427 0 111.680569 50.110281 111.680569 111.678522 0 61.574381-50.105165 111.682615-111.680569 111.682615-61.566194 0-111.679545-50.108235-111.679545-111.682615zm0 335.037612c0-61.572334 50.113351-111.679545 111.679545-111.679545 61.575404 0 111.680569 50.107211 111.680569 111.679545 0 61.567217-50.105165 111.672382-111.680569 111.672382-61.566194 0-111.679545-50.105164-111.679545-111.672382zm0 0\"\n        />\n      </svg>\n    </span>\n  </div>\n  <d-button\n    *ngIf=\"!autoUpload && !withoutBtn\"\n    (btnClick)=\"upload()\"\n    bsStyle=\"common\"\n    [style.margin-left.px]=\"8\"\n    [disabled]=\"\n      disabled ||\n      dSingleUploadView.uploadedFilesComponent.uploadedFiles.length > 0 ||\n      dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\n    \"\n  >\n    <span *ngIf=\"!dSingleUploadView.fileUploaders[0] || dSingleUploadView.fileUploaders[0]?.status === UploadStatus.preLoad\">{{\n      uploadText || i18nText?.upload\n    }}</span>\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\">{{ i18nText?.uploading }}</span>\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\">{{ i18nText?.uploaded }}</span>\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed\">{{ i18nText?.uploadFailed }}</span>\n  </d-button>\n</div>\n<ng-container *ngIf=\"showTip\">\n  <div class=\"devui-upload-tip\">\n    <span *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploading\" class=\"devui-loading\">\n      {{ i18nText?.uploading }}\n    </span>\n    <div *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.uploaded\" class=\"devui-loaded\">\n      <i class=\"icon icon-right-o\"></i>\n      <span style=\"vertical-align: middle\">{{ i18nText?.uploadSuccess }}</span>\n    </div>\n    <div *ngIf=\"dSingleUploadView.fileUploaders[0]?.status === UploadStatus.failed\" class=\"devui-upload-failed\">\n      <i class=\"icon icon-info-o\"></i>\n      <span style=\"vertical-align: middle\">\n        <span style=\"margin-right: 8px\">{{ i18nText?.uploadFailed }}</span>\n        <a (click)=\"upload()\">{{ i18nText?.reUpload }}</a>\n      </span>\n    </div>\n  </div>\n</ng-container>\n<d-single-upload-view\n  #dSingleUploadView=\"dSingleUploadView\"\n  [uploadOptions]=\"uploadOptions\"\n  [filePath]=\"filePath\"\n  [uploadedFiles]=\"uploadedFiles\"\n  [uploadedFilesRef]=\"uploadedFilesRef\"\n  [preloadFilesRef]=\"preloadFilesRef\"\n  [dynamicUploadOptionsFn]=\"dynamicUploadOptionsFn\"\n  (deleteUploadedFileEvent)=\"_onDeleteUploadedFile($event)\"\n>\n</d-single-upload-view>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-input-group{position:relative;display:flex;align-items:center;border-collapse:separate;width:100%}.devui-input-group:not(.disabled):hover .devui-input-group-addon{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);font-weight:700}.devui-input-group:not(.disabled):hover .devui-form-control{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da)}.devui-input-group:not(.disabled) .devui-input-group-addon:active{border-color:#5e7ce0;border-color:var(--devui-form-control-line-active, #5e7ce0);border-right-color:#d7d8da;border-right-color:var(--devui-form-control-line, #d7d8da);background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3)}.devui-input-group .devui-input-group-addon{width:36px;white-space:nowrap;font-size:16px;font-size:var(--devui-font-size-icon, 16px);font-weight:400;line-height:1;color:#252b3a;color:var(--devui-text, #252b3a);background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5);border-top:1px solid #d7d8da;border-top:1px solid var(--devui-form-control-line, #d7d8da);border-bottom:1px solid #d7d8da;border-bottom:1px solid var(--devui-form-control-line, #d7d8da);border-right:1px solid #d7d8da;border-right:1px solid var(--devui-form-control-line, #d7d8da);border-radius:0 2px 2px 0;border-radius:0 var(--devui-border-radius, 2px) var(--devui-border-radius, 2px) 0;transition:border-color .3s cubic-bezier(.645,.045,.355,1),background-color .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),background-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));cursor:pointer;height:100%;position:relative;display:inline-block}.devui-input-group .devui-input-group-addon svg{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}.devui-input-group .devui-form-control{cursor:pointer;display:block;width:100%;min-height:28px;height:unset;padding:4px 8px;font-size:12px;font-size:var(--devui-font-size, 12px);line-height:1.5;background-image:none;border:1px solid #d7d8da;border:1px solid var(--devui-form-control-line, #d7d8da);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px);transition:border-color .3s cubic-bezier(.645,.045,.355,1),box-shadow .3s cubic-bezier(.645,.045,.355,1);transition:border-color var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)),box-shadow var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}.devui-input-group .devui-form-control.devui-files-list{max-height:52px;padding:2px 2px 0;overflow-x:hidden;overflow-y:auto;max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-item{height:22px;line-height:22px;padding:0 48px 0 12px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag{position:relative;background-color:#e9edfa;background-color:var(--devui-label-bg, #e9edfa);border-radius:2px;border-radius:var(--devui-border-radius, 2px);max-width:100%}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .devui-filename{height:100%;display:inline-block;vertical-align:middle;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon{position:absolute;cursor:pointer;right:8px;top:50%;transform:translateY(-50%)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-right{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.icon-running{font-size:16px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-upload-delete-file-button{margin-right:20px}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag .icon.devui-uploading-delete,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .devui-upload-progress,.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-right{display:none}.devui-input-group .devui-form-control.devui-files-list .devui-file-tag:hover .icon-close{display:inline-block}.devui-input-group.disabled .devui-upload-placeholder{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}.devui-input-group .devui-upload-placeholder{max-height:28px;max-width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#babbc0;color:var(--devui-placeholder, #babbc0)}:host ::ng-deep .devui-upload-progress{width:16px;height:16px}.devui-input-group.disabled .devui-form-control,.devui-input-group.disabled .devui-input-group-addon{cursor:not-allowed;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6);color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3)}svg.svg-icon-dot>path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}.devui-form-control{outline:none}.devui-input-group.disabled .devui-upload-delete-file-button{cursor:not-allowed;pointer-events:none}.devui-loading{color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-failed-color{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip{height:18px;margin-top:8px;font-size:12px}.devui-upload-tip .icon{margin-right:8px;font-size:16px;vertical-align:middle}.devui-upload-tip .icon-right-o{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-upload-tip .devui-upload-failed{color:#f66f6a;color:var(--devui-danger, #f66f6a)}.devui-upload-tip a{color:#526ecc;color:var(--devui-link, #526ecc);cursor:pointer}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: SelectFiles }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i3.ToastService }]; }, propDecorators: { uploadOptions: [{
                type: Input
            }], fileOptions: [{
                type: Input
            }], autoUpload: [{
                type: Input
            }], withoutBtn: [{
                type: Input
            }], showTip: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], uploadedFilesRef: [{
                type: Input
            }], preloadFilesRef: [{
                type: Input
            }], filePath: [{
                type: Input
            }], placeholderText: [{
                type: Input
            }], uploadText: [{
                type: Input
            }], confirmText: [{
                type: Input
            }], beforeUpload: [{
                type: Input
            }], dynamicUploadOptionsFn: [{
                type: Input
            }], enableDrop: [{
                type: Input
            }], disabled: [{
                type: Input
            }], successEvent: [{
                type: Output
            }], errorEvent: [{
                type: Output
            }], errorChunkEvent: [{
                type: Output
            }], deleteUploadedFileEvent: [{
                type: Output
            }], fileDrop: [{
                type: Output
            }], fileOver: [{
                type: Output
            }], fileSelect: [{
                type: Output
            }], singleUploadViewComponent: [{
                type: ViewChild,
                args: ['dSingleUploadView', { static: true }]
            }] } });

class UploadDirective extends UploadComponent {
    constructor(selectFiles, i18n, element) {
        super();
        this.selectFiles = selectFiles;
        this.i18n = i18n;
        this.uploadedFiles = [];
        this.fileUploaders = [];
        this.enableDrop = false;
        this.fileOver = new EventEmitter();
        this.fileDrop = new EventEmitter();
        this.successEvent = new EventEmitter();
        this.errorEvent = new EventEmitter();
        this.alertMsgEvent = new EventEmitter();
        this.fileSelect = new EventEmitter();
        this.errorMsg = [];
        this.onChange = (_) => null;
        this.onTouched = () => null;
        this.element = element;
        this.i18nText = this.i18n.getI18nText().upload;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.upload;
        });
    }
    writeValue(files) {
        if (files) {
            const simulateFiles = from(this.simulateSelectFiles(files)).pipe(mergeMap(file => file));
            this._dealFiles(simulateFiles);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    simulateSelectFiles(files) {
        return new Promise((resolve) => {
            resolve(Array.prototype.slice.call(files));
        });
    }
    onClick() {
        this._dealFiles(this.selectFiles.triggerSelectFiles(this.fileOptions, this.uploadOptions));
    }
    _dealFiles(observale) {
        super.resetSameNameFiles();
        observale.pipe(map(file => {
            let uploadOptions = this.uploadOptions;
            if (this.dynamicUploadOptionsFn) {
                uploadOptions = this.dynamicUploadOptionsFn(file, this.uploadOptions);
            }
            super.addFile(file, uploadOptions);
        }), debounceTime(100))
            .subscribe(() => {
            this.checkValid();
            this.checkSameName();
            const selectedFiles = this.fileUploaders
                .filter(fileUploader => fileUploader.status === UploadStatus.preLoad)
                .map(fileUploader => fileUploader.file);
            this.onFileSelect(selectedFiles);
            this.uploadFiles();
        }, (error) => {
            this.errorMsg = [{ severity: 'warn', detail: error.message }];
            this.alertMsgEvent.emit(this.errorMsg);
        });
    }
    checkSameName() {
        const sameNameFiles = super.getSameNameFiles();
        if (this.uploadOptions.checkSameName && sameNameFiles.length) {
            this.errorMsg = [{
                    severity: 'warn',
                    detail: this.i18nText.getExistSameNameFilesMsg(sameNameFiles)
                }];
            this.alertMsgEvent.emit(this.errorMsg);
        }
    }
    // 文件大小、类型是否符合上传条件
    checkValid() {
        let totalFileSize = 0;
        this.fileUploaders.forEach(fileUploader => {
            totalFileSize += fileUploader.file.size;
            const checkResult = this.selectFiles._validateFiles(fileUploader.file, this.fileOptions.accept, fileUploader.uploadOptions);
            if (checkResult && checkResult.checkError) {
                super.deleteFile(fileUploader.file);
                this.errorMsg = [{ severity: 'warn', detail: checkResult.errorMsg }];
                this.alertMsgEvent.emit(this.errorMsg);
                return;
            }
        });
    }
    uploadFiles() {
        this.canUpload().then((canUpload) => {
            if (!canUpload) {
                return;
            }
            const uploadObservable = super.upload();
            uploadObservable
                .pipe(last())
                .subscribe((results) => {
                this.successEvent.emit(results);
                results.forEach((result) => {
                    this.uploadedFiles.push(result.file);
                });
            }, (error) => {
                this.errorEvent.emit(error);
            });
        });
    }
    onFileSelect(files) {
        this.fileSelect.emit(files);
    }
    onDrop(event) {
        if (!this.enableDrop) {
            return;
        }
        const transfer = this._getTransfer(event);
        if (!transfer) {
            return;
        }
        this._preventAndStop(event);
        this._dealFiles(this.selectFiles.triggerDropFiles(this.fileOptions, this.uploadOptions, transfer.files));
        this.fileDrop.emit(transfer.files);
    }
    onDragOver(event) {
        if (!this.enableDrop) {
            return;
        }
        const transfer = this._getTransfer(event);
        if (!this._haveFiles(transfer.types)) {
            return;
        }
        this._preventAndStop(event);
        this.fileOver.emit(true);
    }
    onDragLeave(event) {
        if (!this.enableDrop) {
            return;
        }
        if (this.element) {
            if (event.currentTarget === this.element[0]) {
                return;
            }
        }
        this._preventAndStop(event);
        this.fileOver.emit(false);
    }
    _getTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;
    }
    _preventAndStop(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    _haveFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        else if (types.contains) {
            return types.contains('Files');
        }
        else {
            return false;
        }
    }
    canUpload() {
        let uploadResult = Promise.resolve(true);
        if (this.beforeUpload) {
            const result = this.beforeUpload(this.fileUploaders);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    uploadResult = result;
                }
                else if (result.subscribe) {
                    uploadResult = result.toPromise();
                }
                else {
                    uploadResult = Promise.resolve(result);
                }
            }
        }
        return uploadResult;
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
}
UploadDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadDirective, deps: [{ token: SelectFiles }, { token: i1.I18nService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
UploadDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: UploadDirective, selector: "[dUpload]", inputs: { uploadOptions: "uploadOptions", fileOptions: "fileOptions", uploadedFiles: "uploadedFiles", fileUploaders: "fileUploaders", enableDrop: "enableDrop", dynamicUploadOptionsFn: "dynamicUploadOptionsFn", beforeUpload: "beforeUpload" }, outputs: { fileOver: "fileOver", fileDrop: "fileDrop", successEvent: "successEvent", errorEvent: "errorEvent", alertMsgEvent: "alertMsgEvent", fileSelect: "fileSelect" }, host: { listeners: { "click": "onClick()", "drop": "onDrop($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => UploadDirective),
            multi: true
        }
    ], exportAs: ["dUpload"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dUpload]',
                    exportAs: 'dUpload',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => UploadDirective),
                            multi: true
                        }
                    ],
                }]
        }], ctorParameters: function () { return [{ type: SelectFiles }, { type: i1.I18nService }, { type: i0.ElementRef }]; }, propDecorators: { uploadOptions: [{
                type: Input
            }], fileOptions: [{
                type: Input
            }], uploadedFiles: [{
                type: Input
            }], fileUploaders: [{
                type: Input
            }], enableDrop: [{
                type: Input
            }], dynamicUploadOptionsFn: [{
                type: Input
            }], beforeUpload: [{
                type: Input
            }], fileOver: [{
                type: Output
            }], fileDrop: [{
                type: Output
            }], successEvent: [{
                type: Output
            }], errorEvent: [{
                type: Output
            }], alertMsgEvent: [{
                type: Output
            }], fileSelect: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }] } });

class UploadModule {
}
UploadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
UploadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadModule, declarations: [MultipleUploadViewComponent,
        SingleUploadViewComponent,
        SingleUploadComponent,
        MultipleUploadComponent,
        UploadedFilesComponent,
        FileDropDirective,
        UploadDirective], imports: [CommonModule,
        ButtonModule,
        ToastModule,
        ProgressModule], exports: [MultipleUploadViewComponent,
        SingleUploadViewComponent,
        SingleUploadComponent,
        MultipleUploadComponent,
        UploadedFilesComponent,
        FileDropDirective,
        UploadDirective] });
UploadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadModule, providers: [SelectFiles], imports: [[
            CommonModule,
            ButtonModule,
            ToastModule,
            ProgressModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: UploadModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ButtonModule,
                        ToastModule,
                        ProgressModule
                    ],
                    exports: [
                        MultipleUploadViewComponent,
                        SingleUploadViewComponent,
                        SingleUploadComponent,
                        MultipleUploadComponent,
                        UploadedFilesComponent,
                        FileDropDirective,
                        UploadDirective
                    ],
                    declarations: [
                        MultipleUploadViewComponent,
                        SingleUploadViewComponent,
                        SingleUploadComponent,
                        MultipleUploadComponent,
                        UploadedFilesComponent,
                        FileDropDirective,
                        UploadDirective
                    ],
                    providers: [SelectFiles],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FileDropDirective, FileUploader, IFileOptions, IUploadOptions, MultipleUploadComponent, MultipleUploadViewComponent, SelectFiles, SingleUploadComponent, SingleUploadViewComponent, UploadComponent, UploadDirective, UploadModule, UploadStatus, UploadedFilesComponent };
//# sourceMappingURL=ng-devui-upload.mjs.map
