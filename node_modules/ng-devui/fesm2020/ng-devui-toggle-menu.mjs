import { __decorate, __metadata } from 'tslib';
import * as i4$1 from '@angular/cdk/overlay';
import { CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';
import * as i2$1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, Inject, ContentChild, HostListener, HostBinding, NgModule } from '@angular/core';
import * as i1$1 from 'ng-devui/utils';
import { fadeInOut, addClassToOrigin, removeClassFromOrigin, AppendToBodyDirectionsConfig, formWithDropDown, WithConfig, HighlightModule, LazyLoadModule } from 'ng-devui/utils';
import * as i1$2 from 'ng-devui/window-ref';
import { WindowRefModule } from 'ng-devui/window-ref';
import * as i2 from '@angular/cdk/scrolling';
import { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';
import * as i1 from 'ng-devui/i18n';
import * as i3 from 'ng-devui/checkbox';
import { CheckBoxModule } from 'ng-devui/checkbox';
import * as i4 from 'ng-devui/loading';
import { LoadingModule } from 'ng-devui/loading';
import * as i7 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i1$3 from 'ng-devui/tags';
import { TagsModule } from 'ng-devui/tags';
import { of, fromEvent } from 'rxjs';
import { map, filter, debounceTime } from 'rxjs/operators';

class ToggleMenuListComponent {
    constructor(changeDetectorRef, i18n) {
        this.changeDetectorRef = changeDetectorRef;
        this.i18n = i18n;
        /**
         * 【必选】下拉选项资源，支持Array<string>, Array<{key: value}>
         */
        this.options = [];
        /**
         * 【当传入资源（options）类型为Array<{key: value}，必选】针对传入资源options的每项对应字段做禁用操作的key
         */
        this.optionDisabledKey = '';
        /**
         * 【当传入资源（options）类型为Array<{key: value}，必选】针对传入资源options的每项对应字段禁止变更的key
         */
        this.optionImmutableKey = '';
        /**
         * 【当传入资源（options）类型为Array<{key: value}，可选】如使用分组需设置
         */
        this.optionGroupKey = '';
        /**
         * 【可选】是否在搜索过滤状态中
         */
        this.isFiltering = false;
        /**
         *  【可选】启用数据懒加载，默认不启用
         */
        this.enableLazyLoad = false;
        /**
         * 【可选】是否虚拟滚动
         */
        this.virtualScroll = false;
        /**
         * customViewTemplate的方向，支持下方和右方
         */
        this.customViewDirection = 'bottom';
        this.selectIndex = -1;
        this.multiItems = [];
        /**
         * 【可选】是否支持全选
         */
        this.isSelectAll = false;
        /**
         * 【可选】配置多选的时候是否维持原数组排序还是用户选择的顺序排序，默认是用户顺序
         */
        this.keepMultipleOrder = 'user-select';
        this.closeScope = 'all';
        /**
         * select下拉toggle事件，值为true或false
         */
        this.toggleChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.loadMore = new EventEmitter();
        this._scrollHeight = '300px';
        this.availableOptions = [];
        this.activeIndex = -1;
        this.allChecked = false;
        this.halfChecked = false;
        this.showLoading = false;
        this.virtualScrollViewportSizeMightChange = false;
        this.virtualScrollItemSize = {
            sm: 30,
            normal: 36,
            lg: 50,
            space: 4,
        };
        this.choose = ({ option, index, event }) => {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            if (typeof option === 'object' && Object.keys(option).length === 0) {
                this.toggleChange.emit(false);
                return;
            }
            if (this.optionDisabledKey && option[this.optionDisabledKey]) {
                return;
            }
            if (this.optionImmutableKey && option[this.optionImmutableKey]) {
                return;
            }
            if (this.optionGroupKey && option[this.optionGroupKey]) {
                return;
            }
            if (this.multiple) {
                const indexOfOption = this.multiItems.findIndex((item) => JSON.stringify(item.option) === JSON.stringify(option));
                if (indexOfOption === -1) {
                    this.multiItems.push({ id: index, option });
                }
                else {
                    this.multiItems.splice(indexOfOption, 1);
                }
                if (this.keepMultipleOrder === 'origin') {
                    this.multiItems.sort((a, b) => a.id - b.id);
                }
                this.value = this.multiItems.map((item) => item.option);
            }
            else {
                this.value = option;
                this.activeIndex = index;
                this.selectIndex = index;
                if (this.closeScope === 'all') {
                    this.toggleChange.emit(false);
                }
                if (this.virtualScrollViewportSizeMightChange) {
                    // 解决虚拟滚动更新options长度展开前无法获取正确高度影响
                    setTimeout(() => {
                        if (this.virtualScrollViewportSizeMightChange && this.virtualScrollViewport) {
                            this.virtualScrollViewportSizeMightChange = false;
                            this.virtualScrollViewport.checkViewportSize();
                        }
                    }, 0);
                }
            }
            this.valueChange.emit({ value: this.value, multiItems: this.multiItems, option, event, index });
            this.setAvailableOptions();
            this.setChecked(this.value);
        };
    }
    /**
     * 【可选】下拉菜单高度，建议使用px作为高度单位
     */
    set scrollHeight(value) {
        this._scrollHeight = `${parseInt(value, 10)}px`;
    }
    get scrollHeight() {
        return this._scrollHeight;
    }
    get realVirtualScrollItemSize() {
        const itemSize = (this.templateItemSize || this.virtualScrollItemSize[this.size || 'normal']) + this.virtualScrollItemSize.space;
        const num = Math.round(this.scrollHeightNum / itemSize) || 10;
        this.minBuffer = num * 1.5 * itemSize;
        this.maxBuffer = num * 2.5 * itemSize;
        return itemSize;
    }
    ngOnInit() {
        this.setI18nText();
    }
    ngOnChanges(changes) {
        if (changes.options) {
            this.availableOptions = this.options;
            this.setAvailableOptions();
            // 显示数据变更，需要判断全选半选状态
            if (this.isSelectAll) {
                const selectedItemForFilterOptions = [];
                this.multiItems.forEach((item) => {
                    this.availableOptions.forEach((option) => {
                        if (item['id'] === option['id']) {
                            selectedItemForFilterOptions.push(item);
                        }
                    });
                });
                this.setChecked(selectedItemForFilterOptions);
            }
            if (!this.hasSelectIndex &&
                !this.multiple &&
                (!this.value || (this.availableOptions && !this.availableOptions.find((option) => option.option === this.value)))) {
                this.selectIndex = this.isFiltering && this.availableOptions && this.availableOptions.length > 0 ? 0 : -1;
            }
            if (this.virtualScroll && this.virtualScrollViewport) {
                this.virtualScrollViewportSizeMightChange = true;
                this.virtualScrollViewport.checkViewportSize();
            }
            this.changeDetectorRef.markForCheck();
        }
        if (changes.value) {
            this.setAvailableOptions();
        }
        if (changes.eventHandle && changes.eventHandle.currentValue) {
            const evt = changes['eventHandle'].currentValue;
            const { event, type } = evt;
            switch (type) {
                case 'keydown.esc':
                    this.onEscKeyup(event);
                    break;
                case 'keydown.ArrowUp':
                    this.handleKeyUpEvent(event);
                    break;
                case 'keydown.ArrowDown':
                    this.handleKeyDownEvent(event);
                    break;
                case 'keydown.enter':
                    this.handleKeyEnterEvent(event);
                    break;
            }
        }
    }
    ngOnDestroy() {
        if (this.i18nSubscription) {
            this.i18nSubscription.unsubscribe();
        }
    }
    setI18nText() {
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nCommonText = data.common;
        });
    }
    setAvailableOptions() {
        if (!Array.isArray(this.availableOptions)) {
            return;
        }
        const _value = this.value ? (this.multiple ? this.value : [this.value]) : [];
        this.availableOptions = this.availableOptions.map((item, index) => item.id >= 0 && item.option
            ? {
                isChecked: _value.findIndex((i) => JSON.stringify(i) === JSON.stringify(item.option)) > -1,
                id: item.id,
                option: item.option,
            }
            : { isChecked: _value.findIndex((i) => JSON.stringify(i) === JSON.stringify(item)) > -1, id: index, option: item });
    }
    setChecked(selectedItem) {
        if (!selectedItem) {
            return;
        }
        if (!this.isSelectAll) {
            return;
        }
        this.halfChecked = false;
        if (selectedItem.length === this.availableOptions.length) {
            this.allChecked = true;
        }
        else if (selectedItem.length === 0) {
            this.allChecked = false;
        }
        else {
            this.halfChecked = true;
        }
    }
    selectAll() {
        const mutableOption = this.optionImmutableKey
            ? this.availableOptions.filter((item) => !item.option[this.optionImmutableKey])
            : this.availableOptions;
        const selectedImmutableOption = this.optionImmutableKey ? this.multiItems.filter((item) => item.option[this.optionImmutableKey]) : [];
        if (mutableOption && mutableOption.length > this.multiItems.length - selectedImmutableOption.length) {
            mutableOption.forEach((item) => {
                const indexOfOption = this.multiItems.findIndex((i) => JSON.stringify(i.option) === JSON.stringify(item.option));
                if (indexOfOption === -1) {
                    this.multiItems.push({ id: item.id, option: item.option });
                }
            });
        }
        else {
            this.multiItems = [...selectedImmutableOption];
        }
        this.value = this.multiItems.map((item) => item.option);
        this.valueChange.emit({ value: this.value, multiItems: this.multiItems });
        this.setChecked(this.value);
    }
    trackByFn(index, item) {
        return index;
    }
    onEscKeyup(event) {
        if (event) {
            event.stopPropagation();
        }
        this.toggleChange.emit(false);
    }
    handleKeyUpEvent(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.selectIndex = this.selectIndex === 0 || this.selectIndex === -1 ? this.availableOptions.length - 1 : this.selectIndex - 1;
        this.scrollToActive();
    }
    handleKeyDownEvent(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.selectIndex = this.selectIndex === this.availableOptions.length - 1 ? 0 : this.selectIndex + 1;
        this.scrollToActive();
    }
    handleKeyEnterEvent(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        const item = this.availableOptions[this.selectIndex];
        if (item) {
            this.choose({ option: item.option, index: item.id, event: null });
        }
        else if (this.closeScope === 'all') {
            this.toggleChange.emit(false);
        }
    }
    scrollToActive() {
        const that = this;
        setTimeout(() => {
            try {
                const selectIndex = that.selectIndex + (that.isSelectAll ? 1 : 0); // 多了个全选会导致问题，index需要加1
                const scrollPane = that.dropdownUl.nativeElement.children[selectIndex];
                if (scrollPane.scrollIntoViewIfNeeded) {
                    scrollPane.scrollIntoViewIfNeeded(false);
                }
                else {
                    const containerInfo = that.dropdownUl.nativeElement.getBoundingClientRect();
                    const elementInfo = scrollPane.getBoundingClientRect();
                    if (elementInfo.bottom > containerInfo.bottom || elementInfo.top < containerInfo.top) {
                        scrollPane.scrollIntoView(false);
                    }
                }
            }
            catch (e) { }
        });
    }
    resetIndex(resetSelectIndex = true) {
        this.selectIndex = resetSelectIndex ? -1 : 0;
        this.activeIndex = -1;
        this.changeDetectorRef.markForCheck();
    }
    showSelectAll() {
        return this.isSelectAll && this.multiple && this.availableOptions.length > 0;
    }
    getVirtualScrollHeight(len, size) {
        if (len > 0) {
            let height = (this.templateItemSize || this.virtualScrollItemSize[size || 'normal']) * len + this.virtualScrollItemSize.space * (len - 1);
            if (this.isSelectAll && this.multiple) {
                height += this.virtualScrollItemSize[size ? size : 'normal'] + this.virtualScrollItemSize.space;
            }
            const scrollHeight = parseInt(this.scrollHeight, 10);
            this.scrollHeightNum = height > scrollHeight ? scrollHeight : height;
            return `${this.scrollHeightNum}px`;
        }
    }
    loadMoreEvent(event) {
        this.showLoading = true;
        this.loadMore.emit({ instance: this, event });
    }
    loadStart() {
        this.showLoading = true;
        this.changeDetectorRef.detectChanges();
    }
    loadFinish() {
        this.showLoading = false;
        this.changeDetectorRef.detectChanges();
    }
}
ToggleMenuListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuListComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuListComponent, selector: "d-toggle-menu-list", inputs: { options: "options", optionDisabledKey: "optionDisabledKey", optionImmutableKey: "optionImmutableKey", optionGroupKey: "optionGroupKey", size: "size", keyword: "keyword", isFiltering: "isFiltering", enableLazyLoad: "enableLazyLoad", virtualScroll: "virtualScroll", listItemTemplate: "listItemTemplate", loadingTemplateRef: "loadingTemplateRef", noResultItemTemplate: "noResultItemTemplate", customViewTemplate: "customViewTemplate", customViewDirection: "customViewDirection", templateItemSize: "templateItemSize", scrollHeight: "scrollHeight", selectIndex: "selectIndex", hasSelectIndex: "hasSelectIndex", multiple: "multiple", multiItems: "multiItems", value: "value", isSelectAll: "isSelectAll", keepMultipleOrder: "keepMultipleOrder", eventHandle: "eventHandle", closeScope: "closeScope" }, outputs: { toggleChange: "toggleChange", valueChange: "valueChange", loadMore: "loadMore" }, viewQueries: [{ propertyName: "dropdownUl", first: true, predicate: ["dropdownUl"], descendants: true }, { propertyName: "virtualScrollViewport", first: true, predicate: CdkVirtualScrollViewport, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ul\n  class=\"devui-dropdown-menu-wrap {{ size ? 'devui-dropdown-menu-' + size : '' }}\"\n  dLoading\n  positionType=\"relative\"\n  [showLoading]=\"showLoading\"\n  [message]=\"i18nCommonText?.loading\"\n  [loadingTemplateRef]=\"loadingTemplateRef\"\n  [backdrop]=\"true\"\n  (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n>\n  <ng-content></ng-content>\n  <ul\n    #dropdownUl\n    *ngIf=\"!virtualScroll || enableLazyLoad; else scrollViewTpl\"\n    class=\"devui-select-list-unstyled devui-scrollbar\"\n    [ngStyle]=\"{ 'max-height': scrollHeight, width: '100%' }\"\n    dLazyLoad\n    [enableLazyLoad]=\"enableLazyLoad\"\n    (loadMore)=\"loadMoreEvent($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *ngFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <!--list-item \u5355\u4E2A\u9009\u9879\u6A21\u677F-->\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n    <div *ngIf=\"availableOptions?.length === 0\" class=\"devui-no-data-tip\">\n      <ng-container *ngIf=\"noResultItemTemplate; else noResultDefaultTpl\">\n        <ng-template [ngTemplateOutlet]=\"noResultItemTemplate\" [ngTemplateOutletContext]=\"{ options: options }\"></ng-template>\n      </ng-container>\n    </div>\n  </ul>\n</ul>\n<ng-container *ngIf=\"customViewTemplate\">\n  <div class=\"devui-select-custom-area\">\n    <ng-template [ngTemplateOutlet]=\"customViewTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this, choose: choose }\"></ng-template>\n  </div>\n</ng-container>\n\n<!--\u865A\u62DF\u6EDA\u52A8\u6A21\u677F-->\n<ng-template #scrollViewTpl>\n  <cdk-virtual-scroll-viewport\n    [ngStyle]=\"{\n      height: getVirtualScrollHeight(availableOptions.length, size),\n      width: '100%',\n      'max-height': scrollHeight\n    }\"\n    [itemSize]=\"realVirtualScrollItemSize\"\n    [minBufferPx]=\"minBuffer\"\n    [maxBufferPx]=\"maxBuffer\"\n    class=\"viewport-wrapper devui-select-list-unstyled devui-scrollbar\"\n    #dropdownUl\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *cdkVirtualFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<!--\u5168\u9009\u6A21\u677F-->\n<ng-template #selectAllTpl>\n  <li class=\"devui-dropdown-item\" *ngIf=\"showSelectAll()\" (click)=\"selectAll()\">\n    <span>\n      <d-checkbox [label]=\"i18nCommonText.checkAll\" [isShowTitle]=\"false\" [halfchecked]=\"halfChecked\" [(ngModel)]=\"allChecked\"></d-checkbox>\n    </span>\n  </li>\n</ng-template>\n\n<!--\u65E0\u5185\u5BB9\u6A21\u677F-->\n<ng-template #noResultDefaultTpl>{{ isFiltering ? i18nCommonText?.noRecordsFound : i18nCommonText?.noData }}</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host li{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px;padding:8px 12px;width:100%;display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:0;background-color:transparent;color:#252b3a;color:var(--devui-text, #252b3a);cursor:pointer}:host li:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}:host ::ng-deep d-toggle-menu-search .devui-toggle-menu-search>input{background-color:#f2f2f3;background-color:var(--devui-embed-search-bg, #f2f2f3)}\n"], components: [{ type: i2.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: i3.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }], directives: [{ type: i4.LoadingDirective, selector: "[dLoading]", inputs: ["message", "backdrop", "loadingTemplateRef", "positionType", "view", "showLoading", "loading", "zIndex"], exportAs: ["dLoading"] }, { type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.LazyLoadDirective, selector: "[dLazyLoad]", inputs: ["enableLazyLoad", "contentMode", "target", "imgLoadSrc"], outputs: ["loadMore"] }, { type: i2$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], animations: [fadeInOut], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-list', animations: [fadeInOut], changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, template: "<ul\n  class=\"devui-dropdown-menu-wrap {{ size ? 'devui-dropdown-menu-' + size : '' }}\"\n  dLoading\n  positionType=\"relative\"\n  [showLoading]=\"showLoading\"\n  [message]=\"i18nCommonText?.loading\"\n  [loadingTemplateRef]=\"loadingTemplateRef\"\n  [backdrop]=\"true\"\n  (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n>\n  <ng-content></ng-content>\n  <ul\n    #dropdownUl\n    *ngIf=\"!virtualScroll || enableLazyLoad; else scrollViewTpl\"\n    class=\"devui-select-list-unstyled devui-scrollbar\"\n    [ngStyle]=\"{ 'max-height': scrollHeight, width: '100%' }\"\n    dLazyLoad\n    [enableLazyLoad]=\"enableLazyLoad\"\n    (loadMore)=\"loadMoreEvent($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *ngFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <!--list-item \u5355\u4E2A\u9009\u9879\u6A21\u677F-->\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n    <div *ngIf=\"availableOptions?.length === 0\" class=\"devui-no-data-tip\">\n      <ng-container *ngIf=\"noResultItemTemplate; else noResultDefaultTpl\">\n        <ng-template [ngTemplateOutlet]=\"noResultItemTemplate\" [ngTemplateOutletContext]=\"{ options: options }\"></ng-template>\n      </ng-container>\n    </div>\n  </ul>\n</ul>\n<ng-container *ngIf=\"customViewTemplate\">\n  <div class=\"devui-select-custom-area\">\n    <ng-template [ngTemplateOutlet]=\"customViewTemplate\" [ngTemplateOutletContext]=\"{ $implicit: this, choose: choose }\"></ng-template>\n  </div>\n</ng-container>\n\n<!--\u865A\u62DF\u6EDA\u52A8\u6A21\u677F-->\n<ng-template #scrollViewTpl>\n  <cdk-virtual-scroll-viewport\n    [ngStyle]=\"{\n      height: getVirtualScrollHeight(availableOptions.length, size),\n      width: '100%',\n      'max-height': scrollHeight\n    }\"\n    [itemSize]=\"realVirtualScrollItemSize\"\n    [minBufferPx]=\"minBuffer\"\n    [maxBufferPx]=\"maxBuffer\"\n    class=\"viewport-wrapper devui-select-list-unstyled devui-scrollbar\"\n    #dropdownUl\n  >\n    <ng-template [ngTemplateOutlet]=\"selectAllTpl\"></ng-template>\n    <ng-container *cdkVirtualFor=\"let item of availableOptions; let index = index; trackBy: trackByFn\">\n      <ng-template\n        [ngTemplateOutlet]=\"listItemTemplate\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          index: index,\n          selectIndex: selectIndex,\n          activeIndex: activeIndex,\n          choose: choose\n        }\"\n      ></ng-template>\n    </ng-container>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<!--\u5168\u9009\u6A21\u677F-->\n<ng-template #selectAllTpl>\n  <li class=\"devui-dropdown-item\" *ngIf=\"showSelectAll()\" (click)=\"selectAll()\">\n    <span>\n      <d-checkbox [label]=\"i18nCommonText.checkAll\" [isShowTitle]=\"false\" [halfchecked]=\"halfChecked\" [(ngModel)]=\"allChecked\"></d-checkbox>\n    </span>\n  </li>\n</ng-template>\n\n<!--\u65E0\u5185\u5BB9\u6A21\u677F-->\n<ng-template #noResultDefaultTpl>{{ isFiltering ? i18nCommonText?.noRecordsFound : i18nCommonText?.noData }}</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host li{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px;padding:8px 12px;width:100%;display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:0;background-color:transparent;color:#252b3a;color:var(--devui-text, #252b3a);cursor:pointer}:host li:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3);color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}:host ::ng-deep d-toggle-menu-search .devui-toggle-menu-search>input{background-color:#f2f2f3;background-color:var(--devui-embed-search-bg, #f2f2f3)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.I18nService }]; }, propDecorators: { options: [{
                type: Input
            }], optionDisabledKey: [{
                type: Input
            }], optionImmutableKey: [{
                type: Input
            }], optionGroupKey: [{
                type: Input
            }], size: [{
                type: Input
            }], keyword: [{
                type: Input
            }], isFiltering: [{
                type: Input
            }], enableLazyLoad: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], listItemTemplate: [{
                type: Input
            }], loadingTemplateRef: [{
                type: Input
            }], noResultItemTemplate: [{
                type: Input
            }], customViewTemplate: [{
                type: Input
            }], customViewDirection: [{
                type: Input
            }], templateItemSize: [{
                type: Input
            }], scrollHeight: [{
                type: Input
            }], selectIndex: [{
                type: Input
            }], hasSelectIndex: [{
                type: Input
            }], multiple: [{
                type: Input
            }], multiItems: [{
                type: Input
            }], value: [{
                type: Input
            }], isSelectAll: [{
                type: Input
            }], keepMultipleOrder: [{
                type: Input
            }], eventHandle: [{
                type: Input
            }], closeScope: [{
                type: Input
            }], toggleChange: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], loadMore: [{
                type: Output
            }], dropdownUl: [{
                type: ViewChild,
                args: ['dropdownUl']
            }], virtualScrollViewport: [{
                type: ViewChild,
                args: [CdkVirtualScrollViewport]
            }] } });

class ToggleMenuContainerComponent {
    constructor(element, windowRef, ngZone, renderer, changeDetectorRef, devConfigService, doc) {
        this.element = element;
        this.windowRef = windowRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.devConfigService = devConfigService;
        this.doc = doc;
        /**
         * 【可选】是否appendToBody
         */
        this.appendToBody = false;
        this.appendToBodyDirections = ['rightDown', 'leftDown', 'rightUp', 'leftUp'];
        /**
         * 【可选】是否禁用下拉框
         */
        this.disabled = false;
        /**
         * 【可选】是否展示动效
         */
        this.showAnimation = true;
        /**
         * 【可选】是否支持聚焦自动展开下拉
         */
        this.toggleOnFocus = false;
        this.closeScope = 'all';
        this.direction = 'down';
        /**
         * select下拉toggle事件，值为true或false
         */
        this.toggleChange = new EventEmitter();
        this.passEvent = new EventEmitter();
        this._isOpen = false;
        this.isInit = true;
        this.isMouseEvent = false;
        this.startAnimation = false;
        this.labelMinHeight = 20; // position.top小于20px时候，表示光标在第一行
        this.popDirection = 'bottom';
        this.menuPosition = 'bottom';
        this.onDocumentClick = (event) => {
            if (this.listInstance && this.isOpen && this.selectBoxElement && !this.selectBoxElement.nativeElement.contains(event.target)) {
                this.isOpen = false;
                this.listInstance.selectIndex = this.listInstance.activeIndex ? this.listInstance.activeIndex : -1;
                this.changeDetectorRef.detectChanges();
            }
        };
        this.document = this.doc;
    }
    set isOpen(value) {
        if (this._isOpen === value) {
            // 如果toggle-container自身触发开关，父级组件的isOpen随toggleChange改变，会通过input再次返回导致重复触发，通过值是否变化屏蔽该次触发
            return;
        }
        this._isOpen = value;
        this.toggleChange.emit(value);
        this.setDocumentClickListener();
        if (this.selectWrapper) {
            this.dropDownWidth = this.width ? this.width : this.selectWrapper.nativeElement.offsetWidth;
        }
        if (value) {
            addClassToOrigin(this.selectWrapper);
            setTimeout(() => {
                this.startAnimation = true;
                this.changeDetectorRef.detectChanges();
            });
        }
        else {
            removeClassFromOrigin(this.selectWrapper);
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    ngOnInit() {
        this.isInit = false;
        this.setPositions();
    }
    ngOnChanges(changes) {
        if (changes['appendToBodyDirections']) {
            this.setPositions();
        }
    }
    animationEnd() {
        if (!this.isOpen && this.selectMenuElement && this.showAnimation) {
            const targetElement = this.selectMenuElement.nativeElement;
            this.startAnimation = false;
            setTimeout(() => {
                // 动画会覆盖导致display还是block， 所以要等动画覆盖完
                this.renderer.setStyle(targetElement, 'display', 'none');
            });
        }
    }
    setPositions() {
        if (this.appendToBodyDirections && this.appendToBodyDirections.length > 0) {
            this.overlayPositions = this.appendToBodyDirections
                .map((position) => {
                if (typeof position === 'string') {
                    return AppendToBodyDirectionsConfig[position];
                }
                else {
                    return position;
                }
            })
                .filter((position) => position !== undefined);
        }
        else {
            this.overlayPositions = undefined;
        }
    }
    updatePosition() {
        if (this.appendToBody) {
            setTimeout(() => {
                if (this.connectedOverlay && this.connectedOverlay.overlayRef) {
                    this.connectedOverlay.overlayRef.updatePosition();
                }
            });
        }
    }
    setPassEvent(event, type) {
        if (this.isOpen) {
            this.passEvent.emit({ event, type });
        }
    }
    onPositionChange(position) {
        this.menuPosition = position.connectionPair.originY;
    }
    setDocumentClickListener() {
        this.ngZone.runOutsideAngular(() => {
            if (this.isOpen) {
                this.document.addEventListener('click', this.onDocumentClick);
            }
            else {
                this.document.removeEventListener('click', this.onDocumentClick);
            }
        });
    }
    // mousedown mouseup解决focus与click冲突问题
    setMouseEventTrue(event) {
        this.isMouseEvent = true;
    }
    setMouseEventFalse(event) {
        this.isMouseEvent = false;
    }
    autoToggle(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.toggleOnFocus && !this.disabled && !this.isOpen && !this.isMouseEvent) {
            this.toggle();
        }
    }
    toggle(event) {
        if (this.disabled) {
            this.isOpen = false;
            return;
        }
        if (!this.isOpen) {
            if (!this.appendToBody) {
                let direction = '';
                switch (this.direction) {
                    case 'auto':
                        direction = this.isBottomRectEnough() ? 'bottom' : 'top';
                        break;
                    case 'down':
                        direction = 'bottom';
                        break;
                    case 'up':
                        direction = 'top';
                        break;
                    default:
                        direction = 'bottom';
                }
                this.popDirection = direction;
            }
            else {
                this.updateCdkConnectedOverlayOrigin();
            }
        }
        else {
            if (!this.showAnimation) {
                this.startAnimation = false;
            }
            if (this.closeScope === 'none' || (this.closeScope === 'blank' && this.element.nativeElement.contains(event.target))) {
                return;
            }
        }
        this.isOpen = !this.isOpen;
    }
    isBottomRectEnough() {
        const selectMenuElement = this.selectWrapper.nativeElement;
        const selectInputElement = this.selectBoxElement;
        const displayStyle = selectMenuElement.style['display'] || window.getComputedStyle(selectMenuElement).display;
        let tempStyle;
        if (displayStyle === 'none') {
            // 必要， 否则首次展开必有问题， 如果animationEnd之后设置为none也会有问题
            tempStyle = {
                visibility: selectMenuElement.style.visibility,
                display: selectMenuElement.style.display,
                transform: selectMenuElement.style.transform,
            };
            this.renderer.setStyle(selectMenuElement, 'visibility', 'hidden');
            this.renderer.setStyle(selectMenuElement, 'display', 'block');
            this.renderer.setStyle(selectMenuElement, 'transform', 'translate(0, -9999)');
        }
        const elementHeight = selectMenuElement.offsetHeight;
        const bottomDistance = this.windowRef.innerHeight - selectInputElement.nativeElement.getBoundingClientRect().bottom;
        const isBottomEnough = bottomDistance >= elementHeight;
        if (displayStyle === 'none') {
            this.renderer.setStyle(selectMenuElement, 'visibility', tempStyle.visibility);
            this.renderer.setStyle(selectMenuElement, 'display', tempStyle.display);
            this.renderer.setStyle(selectMenuElement, 'transform', tempStyle.transform);
        }
        return isBottomEnough;
    }
    updateCdkConnectedOverlayOrigin() {
        if (this.selectWrapper?.nativeElement) {
            this.cdkConnectedOverlayOrigin = new CdkOverlayOrigin(formWithDropDown(this.selectWrapper) || this.selectWrapper.nativeElement);
        }
    }
    toggleChangeFn(event) {
        this.isOpen = event;
    }
}
ToggleMenuContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuContainerComponent, deps: [{ token: i0.ElementRef }, { token: i1$2.WindowRef }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i1$1.DevConfigService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuContainerComponent, selector: "d-toggle-menu-container", inputs: { isOpen: "isOpen", appendToBody: "appendToBody", appendToBodyDirections: "appendToBodyDirections", width: "width", size: "size", overview: "overview", position: "position", disabled: "disabled", showAnimation: "showAnimation", toggleOnFocus: "toggleOnFocus", closeScope: "closeScope", direction: "direction", selectWrapper: "selectWrapper" }, outputs: { toggleChange: "toggleChange", passEvent: "passEvent" }, host: { listeners: { "mousedown": "setMouseEventTrue($event)", "mouseup": "setMouseEventFalse($event)" } }, queries: [{ propertyName: "listInstance", first: true, predicate: ToggleMenuListComponent, descendants: true }], viewQueries: [{ propertyName: "selectBoxElement", first: true, predicate: ["selectBox"], descendants: true, static: true }, { propertyName: "selectMenuElement", first: true, predicate: ["selectMenu"], descendants: true, static: true }, { propertyName: "connectedOverlay", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  #selectBox\n  class=\"devui-toggle-menu-container devui-toggle-menu{{ size ? '-' + size : '' }} {{ disabled ? 'disabled' : '' }}\"\n  [tabindex]=\"0\"\n  (click)=\"toggle($event)\"\n  (focus)=\"autoToggle($event); setPassEvent($event, 'focus')\"\n  (blur)=\"setPassEvent($event, 'blur')\"\n  (keydown.esc)=\"setPassEvent($event, 'keydown.esc')\"\n  (keydown.ArrowUp)=\"setPassEvent($event, 'keydown.ArrowUp')\"\n  (keydown.ArrowDown)=\"setPassEvent($event, 'keydown.ArrowDown')\"\n  (keydown.enter)=\"setPassEvent($event, 'keydown.enter')\"\n  (keydown)=\"setPassEvent($event, 'keydown')\"\n>\n  <ng-content></ng-content>\n  <ng-container *ngIf=\"appendToBody; else selectDropdownTpl\">\n    <ng-template\n      cdk-connected-overlay\n      [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n      [cdkConnectedOverlayWidth]=\"dropDownWidth\"\n      [cdkConnectedOverlayOpen]=\"isOpen\"\n      [cdkConnectedOverlayPositions]=\"overlayPositions\"\n      (positionChange)=\"onPositionChange($event)\"\n      (backdropClick)=\"toggleChangeFn(false)\"\n    >\n      <ng-template [ngTemplateOutlet]=\"selectDropdownTpl\"></ng-template>\n    </ng-template>\n  </ng-container>\n  <ng-template #selectDropdownTpl>\n    <div\n      #selectMenu\n      class=\"devui-dropdown-menu\"\n      [ngClass]=\"{\n        'devui-dropdown-menu-cdk': appendToBody,\n        'devui-custom-right': listInstance?.customViewDirection === 'right',\n        'devui-custom-left': listInstance?.customViewDirection === 'left',\n        'devui-custom-top': listInstance?.customViewDirection === 'top',\n        'devui-dropdown-menu-multiple': listInstance?.multiple,\n        'devui-reset-min-width': width\n      }\"\n      [@fadeInOut]=\"isOpen && startAnimation ? (appendToBody ? menuPosition : popDirection) : 'void'\"\n      (@fadeInOut.done)=\"animationEnd()\"\n      [@.disabled]=\"!showAnimation\"\n    >\n      <ng-content select=\"d-toggle-menu-list\"></ng-content>\n    </div>\n  </ng-template>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host .devui-toggle-menu-container{padding:0;width:100%;height:auto;outline:none;display:flex;flex-direction:row;justify-content:space-between;align-items:center;border-radius:2px;border-radius:var(--devui-border-radius, 2px);border:solid 1px #d7d8da;border:solid 1px var(--devui-form-control-line, #d7d8da);background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}:host .devui-toggle-menu-container.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}:host ::ng-deep d-toggle-menu-label{max-width:100%}:host ::ng-deep .devui-toggle-menu{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px}:host ::ng-deep .devui-toggle-menu d-toggle-menu-input,:host ::ng-deep .devui-toggle-menu d-toggle-menu-placeholder,:host ::ng-deep .devui-toggle-menu d-toggle-menu-search{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px;line-height:18px}:host ::ng-deep .devui-toggle-menu-lg{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px}:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-input,:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-placeholder,:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-search{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px;line-height:46px}:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-list-item{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px}:host ::ng-deep .devui-toggle-menu-sm{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px}:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-input,:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-placeholder,:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-search,:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-list-item{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px;line-height:14px}:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-list-item{min-height:26px}.devui-dropdown-menu{width:100%;padding-bottom:0}.devui-dropdown-menu:not(.devui-dropdown-menu-cdk){width:calc(100% + 2px);left:-1px;margin:4px 0}.devui-dropdown-menu-cdk{position:static;display:block;width:100%}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk d-toggle-menu-input,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk d-toggle-menu-placeholder,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk d-toggle-menu-search{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px;line-height:18px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-input,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-placeholder,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-search{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px;line-height:46px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-list-item{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-input,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-placeholder,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-search,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-list-item{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px;line-height:14px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-list-item{min-height:26px}::ng-deep .devui-dropdown-menu.devui-custom-right,::ng-deep .devui-dropdown-menu.devui-custom-left,::ng-deep .devui-dropdown-menu.devui-custom-top{min-width:400px}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list{width:100%;display:flex!important}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list .devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list .devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list .devui-dropdown-menu-wrap{display:inline-block}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list .devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list .devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list .devui-select-custom-area{display:inline-block;overflow:auto}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list:not(.devui-custom-top)>.devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list:not(.devui-custom-top)>.devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list:not(.devui-custom-top)>.devui-dropdown-menu-wrap{width:calc(50% - 1px)}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area{width:50%}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area>.devui-select-custom-area:before,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area>.devui-select-custom-area:before,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area>.devui-select-custom-area:before{display:none}::ng-deep .devui-dropdown-menu.devui-custom-top{flex-direction:column-reverse}::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list .devui-select-custom-area{border-right:1px solid #f2f2f3;border-right:1px solid var(--devui-dividing-line, #f2f2f3);order:-1}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list .devui-select-custom-area{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}::ng-deep .devui-dropdown-menu.devui-custom-top>.devui-select-custom-area{border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3)}::ng-deep .devui-dropdown-menu.devui-reset-min-width{min-width:auto}\n"], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [fadeInOut], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], ToggleMenuContainerComponent.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-container', animations: [fadeInOut], changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, template: "<div\n  #selectBox\n  class=\"devui-toggle-menu-container devui-toggle-menu{{ size ? '-' + size : '' }} {{ disabled ? 'disabled' : '' }}\"\n  [tabindex]=\"0\"\n  (click)=\"toggle($event)\"\n  (focus)=\"autoToggle($event); setPassEvent($event, 'focus')\"\n  (blur)=\"setPassEvent($event, 'blur')\"\n  (keydown.esc)=\"setPassEvent($event, 'keydown.esc')\"\n  (keydown.ArrowUp)=\"setPassEvent($event, 'keydown.ArrowUp')\"\n  (keydown.ArrowDown)=\"setPassEvent($event, 'keydown.ArrowDown')\"\n  (keydown.enter)=\"setPassEvent($event, 'keydown.enter')\"\n  (keydown)=\"setPassEvent($event, 'keydown')\"\n>\n  <ng-content></ng-content>\n  <ng-container *ngIf=\"appendToBody; else selectDropdownTpl\">\n    <ng-template\n      cdk-connected-overlay\n      [cdkConnectedOverlayOrigin]=\"cdkConnectedOverlayOrigin\"\n      [cdkConnectedOverlayWidth]=\"dropDownWidth\"\n      [cdkConnectedOverlayOpen]=\"isOpen\"\n      [cdkConnectedOverlayPositions]=\"overlayPositions\"\n      (positionChange)=\"onPositionChange($event)\"\n      (backdropClick)=\"toggleChangeFn(false)\"\n    >\n      <ng-template [ngTemplateOutlet]=\"selectDropdownTpl\"></ng-template>\n    </ng-template>\n  </ng-container>\n  <ng-template #selectDropdownTpl>\n    <div\n      #selectMenu\n      class=\"devui-dropdown-menu\"\n      [ngClass]=\"{\n        'devui-dropdown-menu-cdk': appendToBody,\n        'devui-custom-right': listInstance?.customViewDirection === 'right',\n        'devui-custom-left': listInstance?.customViewDirection === 'left',\n        'devui-custom-top': listInstance?.customViewDirection === 'top',\n        'devui-dropdown-menu-multiple': listInstance?.multiple,\n        'devui-reset-min-width': width\n      }\"\n      [@fadeInOut]=\"isOpen && startAnimation ? (appendToBody ? menuPosition : popDirection) : 'void'\"\n      (@fadeInOut.done)=\"animationEnd()\"\n      [@.disabled]=\"!showAnimation\"\n    >\n      <ng-content select=\"d-toggle-menu-list\"></ng-content>\n    </div>\n  </ng-template>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host .devui-toggle-menu-container{padding:0;width:100%;height:auto;outline:none;display:flex;flex-direction:row;justify-content:space-between;align-items:center;border-radius:2px;border-radius:var(--devui-border-radius, 2px);border:solid 1px #d7d8da;border:solid 1px var(--devui-form-control-line, #d7d8da);background-color:#fff;background-color:var(--devui-base-bg, #ffffff)}:host .devui-toggle-menu-container.disabled{color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);border-color:#dfe1e6;border-color:var(--devui-disabled-line, #dfe1e6);background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}:host ::ng-deep d-toggle-menu-label{max-width:100%}:host ::ng-deep .devui-toggle-menu{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px}:host ::ng-deep .devui-toggle-menu d-toggle-menu-input,:host ::ng-deep .devui-toggle-menu d-toggle-menu-placeholder,:host ::ng-deep .devui-toggle-menu d-toggle-menu-search{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px;line-height:18px}:host ::ng-deep .devui-toggle-menu-lg{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px}:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-input,:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-placeholder,:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-search{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px;line-height:46px}:host ::ng-deep .devui-toggle-menu-lg d-toggle-menu-list-item{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px}:host ::ng-deep .devui-toggle-menu-sm{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px}:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-input,:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-placeholder,:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-search,:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-list-item{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px;line-height:14px}:host ::ng-deep .devui-toggle-menu-sm d-toggle-menu-list-item{min-height:26px}.devui-dropdown-menu{width:100%;padding-bottom:0}.devui-dropdown-menu:not(.devui-dropdown-menu-cdk){width:calc(100% + 2px);left:-1px;margin:4px 0}.devui-dropdown-menu-cdk{position:static;display:block;width:100%}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk d-toggle-menu-input,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk d-toggle-menu-placeholder,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk d-toggle-menu-search{font-size:12px;font-size:var(--devui-font-size-md, 12px);min-height:26px;line-height:18px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-input,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-placeholder,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-search{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:46px;line-height:46px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-lg d-toggle-menu-list-item{font-size:14px;font-size:var(--devui-font-size-lg, 14px);min-height:40px;line-height:28px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-input,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-placeholder,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-search,::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-list-item{font-size:12px;font-size:var(--devui-font-size-sm, 12px);min-height:24px;line-height:14px}::ng-deep .devui-dropdown-menu.devui-dropdown-menu-cdk-sm d-toggle-menu-list-item{min-height:26px}::ng-deep .devui-dropdown-menu.devui-custom-right,::ng-deep .devui-dropdown-menu.devui-custom-left,::ng-deep .devui-dropdown-menu.devui-custom-top{min-width:400px}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list{width:100%;display:flex!important}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list .devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list .devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list .devui-dropdown-menu-wrap{display:inline-block}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list .devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list .devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list .devui-select-custom-area{display:inline-block;overflow:auto}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list:not(.devui-custom-top)>.devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list:not(.devui-custom-top)>.devui-dropdown-menu-wrap,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list:not(.devui-custom-top)>.devui-dropdown-menu-wrap{width:calc(50% - 1px)}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area{width:50%}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area>.devui-select-custom-area:before,::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area>.devui-select-custom-area:before,::ng-deep .devui-dropdown-menu.devui-custom-top d-toggle-menu-list:not(.devui-custom-top)>.devui-select-custom-area>.devui-select-custom-area:before{display:none}::ng-deep .devui-dropdown-menu.devui-custom-top{flex-direction:column-reverse}::ng-deep .devui-dropdown-menu.devui-custom-left d-toggle-menu-list .devui-select-custom-area{border-right:1px solid #f2f2f3;border-right:1px solid var(--devui-dividing-line, #f2f2f3);order:-1}::ng-deep .devui-dropdown-menu.devui-custom-right d-toggle-menu-list .devui-select-custom-area{border-left:1px solid #f2f2f3;border-left:1px solid var(--devui-dividing-line, #f2f2f3)}::ng-deep .devui-dropdown-menu.devui-custom-top>.devui-select-custom-area{border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3)}::ng-deep .devui-dropdown-menu.devui-reset-min-width{min-width:auto}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$2.WindowRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1$1.DevConfigService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { isOpen: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], appendToBodyDirections: [{
                type: Input
            }], width: [{
                type: Input
            }], size: [{
                type: Input
            }], overview: [{
                type: Input
            }], position: [{
                type: Input
            }], disabled: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], toggleOnFocus: [{
                type: Input
            }], closeScope: [{
                type: Input
            }], direction: [{
                type: Input
            }], selectWrapper: [{
                type: Input
            }], toggleChange: [{
                type: Output
            }], passEvent: [{
                type: Output
            }], selectBoxElement: [{
                type: ViewChild,
                args: ['selectBox', { static: true }]
            }], selectMenuElement: [{
                type: ViewChild,
                args: ['selectMenu', { static: true }]
            }], connectedOverlay: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }], listInstance: [{
                type: ContentChild,
                args: [ToggleMenuListComponent]
            }], setMouseEventTrue: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], setMouseEventFalse: [{
                type: HostListener,
                args: ['mouseup', ['$event']]
            }] } });

class ToggleMenuInputComponent {
    constructor() {
        this.disabled = false;
        this.readonly = false;
        this.isDisabledCustomTemplate = false;
    }
    get width() {
        return this.inputWidth || 'inherit';
    }
}
ToggleMenuInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuInputComponent, selector: "d-toggle-menu-input", inputs: { value: "value", inputValue: "inputValue", inputWidth: "inputWidth", disabled: "disabled", readonly: "readonly", filterKey: "filterKey", isDisabledCustomTemplate: "isDisabledCustomTemplate", customTemplate: "customTemplate" }, host: { properties: { "style.width": "this.width" } }, ngImport: i0, template: "<ng-container *ngIf=\"!isDisabledCustomTemplate; else defaultInputTemplate\">\n  <div class=\"devui-toggle-menu-input-template-container\">\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate\"\n      [ngTemplateOutletContext]=\"{\n        option: value,\n        filterKey: filterKey,\n        position: 'result',\n        inputValue: inputValue\n      }\"\n    ></ng-template>\n  </div>\n</ng-container>\n\n<ng-template #defaultInputTemplate>\n  <input\n    type=\"text\"\n    class=\"devui-form-control devui-select-input devui-input\"\n    autocomplete=\"off\"\n    [disabled]=\"disabled\"\n    [minLength]=\"0\"\n    [tabindex]=\"-1\"\n    [readonly]=\"readonly\"\n    [value]=\"inputValue || ''\"\n  />\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host .devui-toggle-menu-input-template-container{height:24px;line-height:24px;padding:0 10px}:host input.devui-select-input{cursor:pointer;font-size:inherit;height:inherit;min-height:inherit;line-height:inherit;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:none!important;padding:0 10px;margin:0;outline:0}\n"], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-input', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"!isDisabledCustomTemplate; else defaultInputTemplate\">\n  <div class=\"devui-toggle-menu-input-template-container\">\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate\"\n      [ngTemplateOutletContext]=\"{\n        option: value,\n        filterKey: filterKey,\n        position: 'result',\n        inputValue: inputValue\n      }\"\n    ></ng-template>\n  </div>\n</ng-container>\n\n<ng-template #defaultInputTemplate>\n  <input\n    type=\"text\"\n    class=\"devui-form-control devui-select-input devui-input\"\n    autocomplete=\"off\"\n    [disabled]=\"disabled\"\n    [minLength]=\"0\"\n    [tabindex]=\"-1\"\n    [readonly]=\"readonly\"\n    [value]=\"inputValue || ''\"\n  />\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host .devui-toggle-menu-input-template-container{height:24px;line-height:24px;padding:0 10px}:host input.devui-select-input{cursor:pointer;font-size:inherit;height:inherit;min-height:inherit;line-height:inherit;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:none!important;padding:0 10px;margin:0;outline:0}\n"] }]
        }], propDecorators: { value: [{
                type: Input
            }], inputValue: [{
                type: Input
            }], inputWidth: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], filterKey: [{
                type: Input
            }], isDisabledCustomTemplate: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], width: [{
                type: HostBinding,
                args: ['style.width']
            }] } });

class ToggleMenuLabelComponent {
    constructor() {
        this.multiItems = [];
        this.disabled = false;
        this.optionDisabledKey = '';
        this.removeChange = new EventEmitter();
    }
    trackByOptionPointer(index, item) {
        return item.option;
    }
    removeItem(item, event, index) {
        this.removeChange.emit({ ...item, event, index });
    }
}
ToggleMenuLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuLabelComponent, selector: "d-toggle-menu-label", inputs: { mode: "mode", multiItems: "multiItems", disabled: "disabled", maxWidth: "maxWidth", maxHeight: "maxHeight", optionDisabledKey: "optionDisabledKey", valueParser: "valueParser" }, outputs: { removeChange: "removeChange" }, ngImport: i0, template: "<ul class=\"devui-select-tag-list {{ mode }}\" [style.maxHeight]=\"maxHeight\" *ngIf=\"multiItems.length > 0\">\n  <li\n    class=\"devui-select-tag-item\"\n    *ngFor=\"let item of multiItems; let index = index; trackBy: trackByOptionPointer\"\n    [style.maxWidth]=\"maxWidth\"\n    [ngClass]=\"{\n      disabled: disabled || (optionDisabledKey && item.option[optionDisabledKey])\n    }\"\n  >\n    <d-tag\n      [deletable]=\"!(disabled || (optionDisabledKey && item.option[optionDisabledKey]))\"\n      [tag]=\"valueParser(item.option)\"\n      (tagDelete)=\"removeItem(item, $event?.event, index)\"\n    ></d-tag>\n  </li>\n</ul>\n", styles: [".devui-select-tag-list{height:26px;margin:0;padding:0;list-style-type:none;overflow:hidden}.devui-select-tag-list.normal{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.devui-select-tag-list.scroll-y{overflow-y:auto;overflow-x:hidden}.devui-select-tag-list.multiple-line{height:auto;overflow-y:auto;overflow-x:hidden;line-height:1;max-height:48px;min-height:24px}.devui-select-tag-item{display:inline-block;margin:2px 0 0 2px}:host ::ng-deep .devui-select-tag-item d-tag{width:100%}:host ::ng-deep .devui-select-tag-item d-tag .devui-tag-item>span{vertical-align:top;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:inline-block;width:100%}:host ::ng-deep .devui-select-tag-item.disabled{line-height:18px}:host ::ng-deep .devui-select-tag-item.disabled d-tag .devui-tag-item{border:solid 1px #dfe1e6;border:solid 1px var(--devui-disabled-line, #dfe1e6);line-height:18px;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}\n"], components: [{ type: i1$3.TagComponent, selector: "d-tag", inputs: ["tag", "labelStyle", "customColor", "deletable", "titleContent", "mode", "checked", "maxWidth", "customViewTemplate"], outputs: ["tagDelete", "checkedChange"], exportAs: ["Tag"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-label', template: "<ul class=\"devui-select-tag-list {{ mode }}\" [style.maxHeight]=\"maxHeight\" *ngIf=\"multiItems.length > 0\">\n  <li\n    class=\"devui-select-tag-item\"\n    *ngFor=\"let item of multiItems; let index = index; trackBy: trackByOptionPointer\"\n    [style.maxWidth]=\"maxWidth\"\n    [ngClass]=\"{\n      disabled: disabled || (optionDisabledKey && item.option[optionDisabledKey])\n    }\"\n  >\n    <d-tag\n      [deletable]=\"!(disabled || (optionDisabledKey && item.option[optionDisabledKey]))\"\n      [tag]=\"valueParser(item.option)\"\n      (tagDelete)=\"removeItem(item, $event?.event, index)\"\n    ></d-tag>\n  </li>\n</ul>\n", styles: [".devui-select-tag-list{height:26px;margin:0;padding:0;list-style-type:none;overflow:hidden}.devui-select-tag-list.normal{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.devui-select-tag-list.scroll-y{overflow-y:auto;overflow-x:hidden}.devui-select-tag-list.multiple-line{height:auto;overflow-y:auto;overflow-x:hidden;line-height:1;max-height:48px;min-height:24px}.devui-select-tag-item{display:inline-block;margin:2px 0 0 2px}:host ::ng-deep .devui-select-tag-item d-tag{width:100%}:host ::ng-deep .devui-select-tag-item d-tag .devui-tag-item>span{vertical-align:top;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:inline-block;width:100%}:host ::ng-deep .devui-select-tag-item.disabled{line-height:18px}:host ::ng-deep .devui-select-tag-item.disabled d-tag .devui-tag-item{border:solid 1px #dfe1e6;border:solid 1px var(--devui-disabled-line, #dfe1e6);line-height:18px;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5);color:#cfd0d3;color:var(--devui-disabled-text, #cfd0d3);cursor:not-allowed}\n"] }]
        }], propDecorators: { mode: [{
                type: Input
            }], multiItems: [{
                type: Input
            }], disabled: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], optionDisabledKey: [{
                type: Input
            }], valueParser: [{
                type: Input
            }], removeChange: [{
                type: Output
            }] } });

class ToggleMenuListItemComponent {
    constructor() {
        /**
         * 【当传入资源（options）类型为Array<{key: value}，必选】针对传入资源options的每项对应字段做禁用操作的key
         */
        this.optionDisabledKey = '';
        /**
         * 【当传入资源（options）类型为Array<{key: value}，可选】如使用分组需设置
         */
        this.optionGroupKey = '';
        /**
         * 【可选】是否允许高亮选项
         */
        this.highlightToggle = true;
        /**
         * 【可选】下拉高亮css
         */
        this.highlightItemClass = 'active';
        this.chooseItem = new EventEmitter();
        this.formatter = (item) => (item ? item[this.filterKey] || item.label || item.toString() : '');
    }
    choose(option, index, event) {
        this.chooseItem.emit({ option, index, event });
    }
}
ToggleMenuListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuListItemComponent, selector: "d-toggle-menu-list-item", inputs: { item: "item", index: "index", selectIndex: "selectIndex", activeIndex: "activeIndex", formatter: "formatter", filterKey: "filterKey", optionDisabledKey: "optionDisabledKey", optionGroupKey: "optionGroupKey", highlightToggle: "highlightToggle", highlightItemClass: "highlightItemClass", multiple: "multiple", isShowKeyword: "isShowKeyword", keyword: "keyword", customTemplate: "customTemplate", color: "color" }, outputs: { chooseItem: "chooseItem" }, ngImport: i0, template: "<li\n  title=\"{{ formatter(item.option) }}\"\n  class=\"devui-dropdown-item devui-toggle-menu{{ multiple ? '-multiple-' : '-' }}item {{\n    highlightToggle && item.isChecked ? highlightItemClass : ''\n  }}\"\n  [class.selected]=\"selectIndex === index && item.id !== activeIndex\"\n  [class.disabled]=\"optionDisabledKey && item.option[optionDisabledKey]\"\n  [class.group]=\"optionGroupKey && item.option[optionGroupKey]\"\n  (click)=\"choose(item.option, item.id, $event)\"\n>\n  <ng-template\n    [ngTemplateOutlet]=\"customTemplate || (multiple ? checkBoxItem : isShowKeyword ? defaultHighlight : defaultItem)\"\n    [ngTemplateOutletContext]=\"\n      isShowKeyword\n        ? {\n            item: item.option,\n            formatter: formatter,\n            keyword: keyword,\n            $index: index\n          }\n        : multiple\n        ? {\n            option: item.option,\n            checked: item.isChecked,\n            filterKey: filterKey,\n            position: 'list',\n            template: checkBoxItem,\n            $index: index\n          }\n        : {\n            option: item.option,\n            filterKey: filterKey,\n            position: 'list',\n            template: defaultItem,\n            $index: index\n          }\n    \"\n  >\n  </ng-template>\n</li>\n\n<ng-template #defaultItem let-option=\"option\">\n  {{ formatter(option) }}\n</ng-template>\n\n<ng-template #defaultHighlight let-item=\"item\" let-keyword=\"keyword\">\n  <d-highlight [value]=\"formatter(item)\" [term]=\"keyword\"></d-highlight>\n</ng-template>\n\n<ng-template #checkBoxItem let-option=\"option\" let-checked=\"checked\">\n  <d-checkbox\n    [color]=\"color\"\n    [cssClass]=\"'devui-select-checkbox'\"\n    [disabled]=\"option[optionDisabledKey]\"\n    [label]=\"formatter(option)\"\n    [ngModel]=\"checked\"\n  >\n  </d-checkbox>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host:first-of-type>li{margin-top:0}:host>li{margin-top:4px;font-size:inherit;min-height:inherit}\n"], components: [{ type: i1$1.HighlightComponent, selector: "d-highlight", inputs: ["value", "term", "highlightClass"] }, { type: i3.CheckBoxComponent, selector: "d-checkbox", inputs: ["name", "label", "cssClass", "color", "disabled", "isShowTitle", "title", "labelTemplate", "halfchecked", "showAnimation", "beforeChange"], outputs: ["change"] }], directives: [{ type: i2$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuListItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-list-item', changeDetection: ChangeDetectionStrategy.OnPush, template: "<li\n  title=\"{{ formatter(item.option) }}\"\n  class=\"devui-dropdown-item devui-toggle-menu{{ multiple ? '-multiple-' : '-' }}item {{\n    highlightToggle && item.isChecked ? highlightItemClass : ''\n  }}\"\n  [class.selected]=\"selectIndex === index && item.id !== activeIndex\"\n  [class.disabled]=\"optionDisabledKey && item.option[optionDisabledKey]\"\n  [class.group]=\"optionGroupKey && item.option[optionGroupKey]\"\n  (click)=\"choose(item.option, item.id, $event)\"\n>\n  <ng-template\n    [ngTemplateOutlet]=\"customTemplate || (multiple ? checkBoxItem : isShowKeyword ? defaultHighlight : defaultItem)\"\n    [ngTemplateOutletContext]=\"\n      isShowKeyword\n        ? {\n            item: item.option,\n            formatter: formatter,\n            keyword: keyword,\n            $index: index\n          }\n        : multiple\n        ? {\n            option: item.option,\n            checked: item.isChecked,\n            filterKey: filterKey,\n            position: 'list',\n            template: checkBoxItem,\n            $index: index\n          }\n        : {\n            option: item.option,\n            filterKey: filterKey,\n            position: 'list',\n            template: defaultItem,\n            $index: index\n          }\n    \"\n  >\n  </ng-template>\n</li>\n\n<ng-template #defaultItem let-option=\"option\">\n  {{ formatter(option) }}\n</ng-template>\n\n<ng-template #defaultHighlight let-item=\"item\" let-keyword=\"keyword\">\n  <d-highlight [value]=\"formatter(item)\" [term]=\"keyword\"></d-highlight>\n</ng-template>\n\n<ng-template #checkBoxItem let-option=\"option\" let-checked=\"checked\">\n  <d-checkbox\n    [color]=\"color\"\n    [cssClass]=\"'devui-select-checkbox'\"\n    [disabled]=\"option[optionDisabledKey]\"\n    [label]=\"formatter(option)\"\n    [ngModel]=\"checked\"\n  >\n  </d-checkbox>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host:first-of-type>li{margin-top:0}:host>li{margin-top:4px;font-size:inherit;min-height:inherit}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { item: [{
                type: Input
            }], index: [{
                type: Input
            }], selectIndex: [{
                type: Input
            }], activeIndex: [{
                type: Input
            }], formatter: [{
                type: Input
            }], filterKey: [{
                type: Input
            }], optionDisabledKey: [{
                type: Input
            }], optionGroupKey: [{
                type: Input
            }], highlightToggle: [{
                type: Input
            }], highlightItemClass: [{
                type: Input
            }], multiple: [{
                type: Input
            }], isShowKeyword: [{
                type: Input
            }], keyword: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], color: [{
                type: Input
            }], chooseItem: [{
                type: Output
            }] } });

class ToggleMenuOperationComponent {
    constructor(devConfigService) {
        this.devConfigService = devConfigService;
        this.showAnimation = true;
        this.chevronStatus = false;
        this.operationChangeEvent = new EventEmitter();
    }
    operationFn(event, operate) {
        this.operationChangeEvent.emit({ event, operate });
    }
}
ToggleMenuOperationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuOperationComponent, deps: [{ token: i1$1.DevConfigService }], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuOperationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuOperationComponent, selector: "d-toggle-menu-operation", inputs: { controlConfig: "controlConfig", showAnimation: "showAnimation", chevronStatus: "chevronStatus" }, outputs: { operationChangeEvent: "operationChangeEvent" }, ngImport: i0, template: "<div class=\"devui-toggle-menu-operation-container\">\n  <span\n    *ngIf=\"controlConfig?.clear\"\n    class=\"devui-select-clear-icon\"\n    (mousedown)=\"$event.preventDefault()\"\n    (click)=\"operationFn($event, 'clear')\"\n  >\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n          fill-rule=\"nonzero\"\n        ></path>\n      </g>\n    </svg>\n  </span>\n  <span\n    *ngIf=\"controlConfig?.chevron\"\n    class=\"devui-toggle-menu-chevron-icon\"\n    [ngClass]=\"{ 'devui-toggle-menu-chevron-icon-animation': showAnimation, 'devui-toggle-menu-chevron-icon-open': chevronStatus }\"\n  >\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M12.1464466,6.85355339 L8.35355339,10.6464466 C8.15829124,10.8417088 7.84170876,10.8417088 7.64644661,10.6464466 L3.85355339,6.85355339 C3.65829124,6.65829124 3.65829124,6.34170876 3.85355339,6.14644661 C3.94732158,6.05267842 4.07449854,6 4.20710678,6 L11.7928932,6 C12.0690356,6 12.2928932,6.22385763 12.2928932,6.5 C12.2928932,6.63260824 12.2402148,6.7597852 12.1464466,6.85355339 Z\"\n          fill-rule=\"nonzero\"\n        ></path>\n      </g>\n    </svg>\n  </span>\n</div>\n", styles: [":host .devui-toggle-menu-operation-container{min-height:inherit}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon{width:28px;height:100%;padding:0;display:flex;align-items:center;justify-content:center;cursor:pointer}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon-open{transform:rotate(180deg)}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon-animation{transition:transform .3s cubic-bezier(.645,.045,.355,1);transition:transform var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon>svg path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host .devui-toggle-menu-operation-container.disabled{cursor:not-allowed;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}:host .devui-toggle-menu-operation-container.disabled .devui-toggle-menu-clear-icon svg path,:host .devui-toggle-menu-operation-container.disabled .devui-toggle-menu-chevron-icon svg path{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}\n"], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    WithConfig(),
    __metadata("design:type", Object)
], ToggleMenuOperationComponent.prototype, "showAnimation", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuOperationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-operation', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"devui-toggle-menu-operation-container\">\n  <span\n    *ngIf=\"controlConfig?.clear\"\n    class=\"devui-select-clear-icon\"\n    (mousedown)=\"$event.preventDefault()\"\n    (click)=\"operationFn($event, 'clear')\"\n  >\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 Z M5.87867966,5.17157288 C5.68341751,4.97631073 5.36683502,4.97631073 5.17157288,5.17157288 C4.99800652,5.34513923 4.97872137,5.61456363 5.11371742,5.80943177 L5.17157288,5.87867966 L7.29218611,7.99929289 L5.17157288,10.1213203 C4.97631073,10.3165825 4.97631073,10.633165 5.17157288,10.8284271 C5.34513923,11.0019935 5.61456363,11.0212786 5.80943177,10.8862826 L5.87867966,10.8284271 L7.99929289,8.70639967 L10.1213203,10.8284271 C10.3165825,11.0236893 10.633165,11.0236893 10.8284271,10.8284271 C11.0019935,10.6548608 11.0212786,10.3854364 10.8862826,10.1905682 L10.8284271,10.1213203 L8.70710678,8 L10.8284271,5.87867966 C11.0236893,5.68341751 11.0236893,5.36683502 10.8284271,5.17157288 C10.6548608,4.99800652 10.3854364,4.97872137 10.1905682,5.11371742 L10.1213203,5.17157288 L8,7.29289322 L5.87867966,5.17157288 Z\"\n          fill-rule=\"nonzero\"\n        ></path>\n      </g>\n    </svg>\n  </span>\n  <span\n    *ngIf=\"controlConfig?.chevron\"\n    class=\"devui-toggle-menu-chevron-icon\"\n    [ngClass]=\"{ 'devui-toggle-menu-chevron-icon-animation': showAnimation, 'devui-toggle-menu-chevron-icon-open': chevronStatus }\"\n  >\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M12.1464466,6.85355339 L8.35355339,10.6464466 C8.15829124,10.8417088 7.84170876,10.8417088 7.64644661,10.6464466 L3.85355339,6.85355339 C3.65829124,6.65829124 3.65829124,6.34170876 3.85355339,6.14644661 C3.94732158,6.05267842 4.07449854,6 4.20710678,6 L11.7928932,6 C12.0690356,6 12.2928932,6.22385763 12.2928932,6.5 C12.2928932,6.63260824 12.2402148,6.7597852 12.1464466,6.85355339 Z\"\n          fill-rule=\"nonzero\"\n        ></path>\n      </g>\n    </svg>\n  </span>\n</div>\n", styles: [":host .devui-toggle-menu-operation-container{min-height:inherit}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon{width:28px;height:100%;padding:0;display:flex;align-items:center;justify-content:center;cursor:pointer}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon-open{transform:rotate(180deg)}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon-animation{transition:transform .3s cubic-bezier(.645,.045,.355,1);transition:transform var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}:host .devui-toggle-menu-operation-container .devui-toggle-menu-chevron-icon>svg path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}:host .devui-toggle-menu-operation-container.disabled{cursor:not-allowed;background-color:#f5f5f5;background-color:var(--devui-disabled-bg, #f5f5f5)}:host .devui-toggle-menu-operation-container.disabled .devui-toggle-menu-clear-icon svg path,:host .devui-toggle-menu-operation-container.disabled .devui-toggle-menu-chevron-icon svg path{fill:#cfd0d3;fill:var(--devui-disabled-text, #cfd0d3)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$1.DevConfigService }]; }, propDecorators: { controlConfig: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], chevronStatus: [{
                type: Input
            }], operationChangeEvent: [{
                type: Output
            }] } });

class ToggleMenuPlaceholderComponent {
    get isTemplate() {
        return this.placeholder && typeof this.placeholder !== 'string';
    }
}
ToggleMenuPlaceholderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuPlaceholderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuPlaceholderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuPlaceholderComponent, selector: "d-toggle-menu-placeholder", inputs: { placeholder: "placeholder" }, ngImport: i0, template: `
    <ng-container *ngIf="isTemplate; else defaultTemplate"></ng-container>
    <ng-template #defaultTemplate
      ><span class="devui-placeholder">{{ placeholder }}</span></ng-template
    >
  `, isInline: true, styles: [":host{display:flex;align-items:center}:host .devui-placeholder{color:#babbc0;color:var(--devui-placeholder, #babbc0);line-height:inherit;padding:0 10px}\n"], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuPlaceholderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-placeholder', template: `
    <ng-container *ngIf="isTemplate; else defaultTemplate"></ng-container>
    <ng-template #defaultTemplate
      ><span class="devui-placeholder">{{ placeholder }}</span></ng-template
    >
  `, styles: [":host{display:flex;align-items:center}:host .devui-placeholder{color:#babbc0;color:var(--devui-placeholder, #babbc0);line-height:inherit;padding:0 10px}\n"] }]
        }], propDecorators: { placeholder: [{
                type: Input
            }] } });

class ToggleMenuSearchComponent {
    constructor(el) {
        this.el = el;
        this.isShowSearchIcon = true;
        this.disabled = false;
        this.spellcheck = false;
        this.options = [];
        this.delay = 300;
        this.searchInputValueChange = new EventEmitter();
        this.formatter = (item) => (typeof item === 'object' ? item[this.filterKey] || '' : String(item) ? item.toString() : '');
    }
    get width() {
        return this.inputWidth || 'inherit';
    }
    ngOnInit() {
        if (!this.searchFn) {
            this.searchFn = (term) => {
                return of((this.options ? this.options : [])
                    .map((option, index) => ({ id: index, option }))
                    .filter((item) => this.formatter(item.option).toLowerCase().indexOf(term.toLowerCase()) !== -1));
            };
        }
    }
    ngAfterViewInit() {
        this.el.nativeElement.focus();
        if (!this.filterSubscription) {
            // 避免重复订阅
            this.filterSubscription = fromEvent(this.el.nativeElement, 'input')
                .pipe(map((e) => e.target.value), filter((term) => !this.disabled && this.searchFn && term.length >= 0), debounceTime(this.delay))
                .subscribe((term) => this.searchInputValueChange.emit(term));
        }
    }
    ngOnDestroy() {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
    }
}
ToggleMenuSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuSearchComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ToggleMenuSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: ToggleMenuSearchComponent, selector: "d-toggle-menu-search", inputs: { searchPlaceholder: "searchPlaceholder", isShowSearchIcon: "isShowSearchIcon", inputValue: "inputValue", inputWidth: "inputWidth", filterKey: "filterKey", disabled: "disabled", spellcheck: "spellcheck", options: "options", delay: "delay", formatter: "formatter", searchFn: "searchFn" }, outputs: { searchInputValueChange: "searchInputValueChange" }, host: { properties: { "style.width": "this.width" } }, ngImport: i0, template: "<div class=\"devui-toggle-menu-search\">\n  <input\n    name=\"search\"\n    type=\"text\"\n    autocomplete=\"off\"\n    class=\"devui-form-control devui-select-search devui-select-input\"\n    [value]=\"inputValue || ''\"\n    [disabled]=\"disabled\"\n    [spellcheck]=\"spellcheck\"\n    [placeholder]=\"searchPlaceholder\"\n    (trim)=\"(false)\"\n  />\n  <span class=\"devui-toggle-menu-search-icon\">\n    <svg\n      *ngIf=\"isShowSearchIcon\"\n      width=\"14px\"\n      height=\"14px\"\n      viewBox=\"0 0 14 14\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      class=\"svg-icon-search\"\n      style=\"vertical-align: middle; margin-top: -4px\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(-1.000000, -1.000000)\">\n          <path\n            d=\"M7.30811922,1 C10.7919973,1 13.6162384,3.82424117 13.6162384,7.30811922 C13.6162384,8.72507634 13.149053,10.0329164 12.3603151,11.0860065 L14.7360564,13.4616238 C15.0879812,13.8135487 15.0879812,14.3841316 14.7360564,14.7360564 C14.3841316,15.0879812 13.8135487,15.0879812 13.4616238,14.7360564 L11.0860065,12.3603151 C10.0329164,13.149053 8.72507634,13.6162384 7.30811922,13.6162384 C3.82424117,13.6162384 1,10.7919973 1,7.30811922 C1,3.82424117 3.82424117,1 7.30811922,1 Z M7.31,2.51 C4.6590332,2.51 2.51,4.6590332 2.51,7.31 C2.51,9.9609668 4.6590332,12.11 7.31,12.11 C9.9609668,12.11 12.11,9.9609668 12.11,7.31 C12.11,4.6590332 9.9609668,2.51 7.31,2.51 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  </span>\n  <ng-content></ng-content>\n</div>\n", styles: [":host .devui-toggle-menu-search{position:relative;background:transparent}:host .devui-toggle-menu-search input{cursor:pointer;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:none!important;outline:0}:host .devui-toggle-menu-search-icon{position:absolute;top:0;right:0;z-index:2;display:block;width:28px;height:28px;line-height:28px;text-align:center;pointer-events:none}:host .devui-toggle-menu-search-icon path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}\n"], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuSearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-toggle-menu-search', changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, template: "<div class=\"devui-toggle-menu-search\">\n  <input\n    name=\"search\"\n    type=\"text\"\n    autocomplete=\"off\"\n    class=\"devui-form-control devui-select-search devui-select-input\"\n    [value]=\"inputValue || ''\"\n    [disabled]=\"disabled\"\n    [spellcheck]=\"spellcheck\"\n    [placeholder]=\"searchPlaceholder\"\n    (trim)=\"(false)\"\n  />\n  <span class=\"devui-toggle-menu-search-icon\">\n    <svg\n      *ngIf=\"isShowSearchIcon\"\n      width=\"14px\"\n      height=\"14px\"\n      viewBox=\"0 0 14 14\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      class=\"svg-icon-search\"\n      style=\"vertical-align: middle; margin-top: -4px\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g transform=\"translate(-1.000000, -1.000000)\">\n          <path\n            d=\"M7.30811922,1 C10.7919973,1 13.6162384,3.82424117 13.6162384,7.30811922 C13.6162384,8.72507634 13.149053,10.0329164 12.3603151,11.0860065 L14.7360564,13.4616238 C15.0879812,13.8135487 15.0879812,14.3841316 14.7360564,14.7360564 C14.3841316,15.0879812 13.8135487,15.0879812 13.4616238,14.7360564 L11.0860065,12.3603151 C10.0329164,13.149053 8.72507634,13.6162384 7.30811922,13.6162384 C3.82424117,13.6162384 1,10.7919973 1,7.30811922 C1,3.82424117 3.82424117,1 7.30811922,1 Z M7.31,2.51 C4.6590332,2.51 2.51,4.6590332 2.51,7.31 C2.51,9.9609668 4.6590332,12.11 7.31,12.11 C9.9609668,12.11 12.11,9.9609668 12.11,7.31 C12.11,4.6590332 9.9609668,2.51 7.31,2.51 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  </span>\n  <ng-content></ng-content>\n</div>\n", styles: [":host .devui-toggle-menu-search{position:relative;background:transparent}:host .devui-toggle-menu-search input{cursor:pointer;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;border:none!important;outline:0}:host .devui-toggle-menu-search-icon{position:absolute;top:0;right:0;z-index:2;display:block;width:28px;height:28px;line-height:28px;text-align:center;pointer-events:none}:host .devui-toggle-menu-search-icon path{fill:#71757f;fill:var(--devui-icon-text, #71757f)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { searchPlaceholder: [{
                type: Input
            }], isShowSearchIcon: [{
                type: Input
            }], inputValue: [{
                type: Input
            }], inputWidth: [{
                type: Input
            }], filterKey: [{
                type: Input
            }], disabled: [{
                type: Input
            }], spellcheck: [{
                type: Input
            }], options: [{
                type: Input
            }], delay: [{
                type: Input
            }], formatter: [{
                type: Input
            }], searchFn: [{
                type: Input
            }], searchInputValueChange: [{
                type: Output
            }], width: [{
                type: HostBinding,
                args: ['style.width']
            }] } });

class ToggleMenuModule {
}
ToggleMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ToggleMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuModule, declarations: [ToggleMenuContainerComponent,
        ToggleMenuOperationComponent,
        ToggleMenuInputComponent,
        ToggleMenuLabelComponent,
        ToggleMenuListItemComponent,
        ToggleMenuListComponent,
        ToggleMenuPlaceholderComponent,
        ToggleMenuSearchComponent], imports: [CommonModule,
        FormsModule,
        CheckBoxModule,
        HighlightModule,
        LazyLoadModule,
        LoadingModule,
        OverlayModule,
        ScrollingModule,
        WindowRefModule,
        TagsModule], exports: [ToggleMenuContainerComponent,
        ToggleMenuOperationComponent,
        ToggleMenuInputComponent,
        ToggleMenuLabelComponent,
        ToggleMenuListItemComponent,
        ToggleMenuListComponent,
        ToggleMenuPlaceholderComponent,
        ToggleMenuSearchComponent] });
ToggleMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuModule, imports: [[
            CommonModule,
            FormsModule,
            CheckBoxModule,
            HighlightModule,
            LazyLoadModule,
            LoadingModule,
            OverlayModule,
            ScrollingModule,
            WindowRefModule,
            TagsModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ToggleMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        CheckBoxModule,
                        HighlightModule,
                        LazyLoadModule,
                        LoadingModule,
                        OverlayModule,
                        ScrollingModule,
                        WindowRefModule,
                        TagsModule,
                    ],
                    declarations: [
                        ToggleMenuContainerComponent,
                        ToggleMenuOperationComponent,
                        ToggleMenuInputComponent,
                        ToggleMenuLabelComponent,
                        ToggleMenuListItemComponent,
                        ToggleMenuListComponent,
                        ToggleMenuPlaceholderComponent,
                        ToggleMenuSearchComponent,
                    ],
                    exports: [
                        ToggleMenuContainerComponent,
                        ToggleMenuOperationComponent,
                        ToggleMenuInputComponent,
                        ToggleMenuLabelComponent,
                        ToggleMenuListItemComponent,
                        ToggleMenuListComponent,
                        ToggleMenuPlaceholderComponent,
                        ToggleMenuSearchComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ToggleMenuContainerComponent, ToggleMenuInputComponent, ToggleMenuLabelComponent, ToggleMenuListComponent, ToggleMenuListItemComponent, ToggleMenuModule, ToggleMenuOperationComponent, ToggleMenuPlaceholderComponent, ToggleMenuSearchComponent };
//# sourceMappingURL=ng-devui-toggle-menu.mjs.map
