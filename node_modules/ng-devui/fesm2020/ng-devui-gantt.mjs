import * as i0 from '@angular/core';
import { Injectable, Component, ViewChild, Input, EventEmitter, Output, Directive, Inject, HostListener, NgModule } from '@angular/core';
import { Subject, ReplaySubject, Observable, fromEvent, merge } from 'rxjs';
import { pluck, tap, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as i2 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i3 from 'ng-devui/tooltip';
import { TooltipModule } from 'ng-devui/tooltip';
import * as i3$1 from '@angular/cdk/overlay';
import { OverlayModule } from '@angular/cdk/overlay';
import * as i2$1 from 'ng-devui/i18n';
import * as i2$2 from 'ng-devui/button';
import { ButtonModule } from 'ng-devui/button';
import * as i3$2 from 'ng-devui/dropdown';
import { DropDownModule } from 'ng-devui/dropdown';
import { PopoverModule } from 'ng-devui/popover';

var GanttScaleUnit;
(function (GanttScaleUnit) {
    GanttScaleUnit["day"] = "day";
    GanttScaleUnit["week"] = "week";
    GanttScaleUnit["month"] = "month";
})(GanttScaleUnit || (GanttScaleUnit = {}));
var GanttMarkerType;
(function (GanttMarkerType) {
    GanttMarkerType["milestone"] = "milestone";
    GanttMarkerType["month"] = "month";
    GanttMarkerType["week"] = "week";
})(GanttMarkerType || (GanttMarkerType = {}));
var UnitRole;
(function (UnitRole) {
    UnitRole[UnitRole["day"] = 10] = "day";
    UnitRole[UnitRole["week"] = 20] = "week";
    UnitRole[UnitRole["month"] = 30] = "month";
})(UnitRole || (UnitRole = {}));

class GanttService {
    constructor() {
        this.scaleUnit = GanttScaleUnit.day;
        this.ganttBarStatusChange = new Subject();
        this.ganttScaleConfigChange = new ReplaySubject(1);
        this.mouseMoveListener = new Observable();
        this.mouseEndListener = new Observable();
    }
    changeGanttBarStatus(status) {
        this.ganttBarStatusChange.next(status);
    }
    registContainerEvents(scrollContainer) {
        // 背景拖拽
        this.mouseDownListener = fromEvent(scrollContainer, 'mousedown').pipe(pluck('pageX'));
        this.mouseMoveListener = fromEvent(scrollContainer, 'mousemove').pipe(pluck('pageX'));
        this.mouseEndListener = merge(fromEvent(scrollContainer, 'mouseup'), fromEvent(scrollContainer, 'mouseout')).pipe(pluck('pageX'));
    }
    changeGanttScaleConfig(status) {
        this.ganttScaleConfigChange.next(status);
    }
    setScaleConfig(config) {
        if (config.startDate) {
            this.scaleStartDate = config.startDate;
        }
        if (config.endDate) {
            this.scaleEndDate = config.endDate;
        }
        if (config.unit) {
            this.scaleUnit = config.unit;
        }
        this.changeGanttScaleConfig(config);
    }
    getScaleUnitPixel() {
        switch (this.scaleUnit) {
            case GanttScaleUnit.day:
                return 40;
                break;
            case GanttScaleUnit.week:
                return 30;
                break;
            case GanttScaleUnit.month:
                return 20;
                break;
            default:
                break;
        }
    }
    getDatePostionOffset(date) {
        if (date && this.scaleStartDate) {
            const timeOffset = date.getTime() - this.scaleStartDate.getTime();
            const units = timeOffset / GanttService.DAY_DURATION;
            return units * this.getScaleUnitPixel();
        }
    }
    getDuration(startDate, endDate) {
        if (startDate && endDate) {
            const timeOffset = endDate.getTime() - startDate.getTime();
            const duration = timeOffset / GanttService.DAY_DURATION + 1;
            return Math.round(duration);
        }
    }
    getDurationWidth(startDate, endDate) {
        if (startDate && endDate) {
            const duration = this.getDuration(startDate, endDate);
            return duration * this.getScaleUnitPixel();
        }
    }
    isSomeDate(date, compareDate) {
        if (date.getFullYear() !== compareDate.getFullYear()) {
            return false;
        }
        if (date.getMonth() !== compareDate.getMonth()) {
            return false;
        }
        if (date.getDate() !== compareDate.getDate()) {
            return false;
        }
        return true;
    }
    roundDate(date) {
        if (date.getHours() >= 12) {
            date.setDate(date.getDate() + 1);
            date.setHours(0, 0, 0);
        }
        else if (date.getHours() < 12) {
            date.setHours(0, 0, 0);
        }
    }
    unRegistContainerEvents() { }
}
GanttService.DAY_DURATION = 24 * 60 * 60 * 1000;
GanttService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
GanttService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

class GanttBarParentComponent {
    constructor(cdr, ganttService) {
        this.cdr = cdr;
        this.ganttService = ganttService;
        this.progressRate = 0;
        this.tipHovered = false;
        this.left = 0;
        this.width = 0;
        this.max = 100;
        this.min = 0;
    }
    ngOnInit() {
        if (this.progressRate === null) {
            this.setValue(this.ensureValueInRange(null));
        }
        this.duration = this.ganttService.getDuration(this.startDate, this.endDate) + 'd';
        this.ganttScaleStatusHandler = this.ganttService.ganttScaleConfigChange.subscribe((config) => {
            if (config.startDate) {
                this.left = this.ganttService.getDatePostionOffset(this.startDate);
            }
            if (config.unit) {
                this.left = this.ganttService.getDatePostionOffset(this.startDate);
                this.width = this.ganttService.getDurationWidth(this.startDate, this.endDate);
            }
        });
    }
    ngOnChanges(changes) {
        if (changes['progressRate'] && this.progressRate > 0) {
            this.updateTrackAndHandle();
        }
        if (changes['startDate']) {
            this.left = this.ganttService.getDatePostionOffset(this.startDate);
            this.width = this.ganttService.getDurationWidth(this.startDate, this.endDate);
        }
        if (changes['endDate']) {
            this.width = this.ganttService.getDurationWidth(this.startDate, this.endDate);
        }
    }
    ngAfterViewInit() {
        if (this.progressRate && this.progressRate > 0) {
            this.updateTrackAndHandle();
        }
    }
    setValue(value) {
        if (this.progressRate !== value) {
            this.progressRate = value;
            this.updateTrackAndHandle();
        }
    }
    ensureValueInRange(value) {
        let safeValue;
        if (!this.valueMustBeValid(value)) {
            safeValue = this.min;
        }
        else {
            safeValue = this.clamp(this.min, value, this.max);
        }
        return safeValue;
    }
    valueMustBeValid(value) {
        return !isNaN(typeof value !== 'number' ? parseFloat(value) : value);
    }
    clamp(min, n, max) {
        return Math.max(min, Math.min(n, max));
    }
    updateTrackAndHandle() {
        const value = this.progressRate;
        const offset = this.valueToOffset(value);
        this.updateStyle(offset / 100);
        this.cdr.markForCheck();
    }
    valueToOffset(value) {
        return ((value - this.min) / (this.max - this.min)) * 100;
    }
    updateStyle(percentage) {
        this.percentage = Math.min(1, Math.max(0, percentage));
        if (this.ganttBarTrack && this.ganttBarTrack.nativeElement) {
            this.ganttBarTrack.nativeElement.style.width = `${this.percentage * 100}%`;
        }
        if (this.ganttBarProgress && this.ganttBarProgress.nativeElement) {
            this.ganttBarProgress.nativeElement.style.left = `${this.percentage * 100}%`;
        }
    }
    ngOnDestroy() {
        if (this.ganttScaleStatusHandler) {
            this.ganttScaleStatusHandler.unsubscribe();
            this.ganttScaleStatusHandler = null;
        }
    }
}
GanttBarParentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttBarParentComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: GanttService }], target: i0.ɵɵFactoryTarget.Component });
GanttBarParentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: GanttBarParentComponent, selector: "d-gantt-bar-parent", inputs: { startDate: "startDate", endDate: "endDate", progressRate: "progressRate", data: "data", id: "id", tip: "tip" }, viewQueries: [{ propertyName: "ganttBarProgress", first: true, predicate: ["ganttBarProgress"], descendants: true }, { propertyName: "ganttBarTrack", first: true, predicate: ["ganttBarTrack"], descendants: true }, { propertyName: "ganttBarRail", first: true, predicate: ["ganttBarRail"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  *ngIf=\"startDate && endDate\"\n  #ganttBar\n  class=\"devui-gantt-bar-parent\"\n  [style.left]=\"left + 'px'\"\n  [style.width]=\"width + 'px'\"\n  dTooltip\n  [content]=\"tip\"\n>\n  <div class=\"devui-gantt-bar-rail\" #ganttBarRail></div>\n  <div class=\"devui-gantt-bar-track\" [ngClass]=\"{ head: percentage > 0, tail: percentage === 1 }\" #ganttBarTrack></div>\n</div>\n", styles: [".devui-gantt-bar-parent{width:100%;box-sizing:border-box;height:24px;z-index:3;position:relative}.devui-gantt-bar-parent .devui-gantt-bar-rail{position:absolute;background:#eaecf0;height:12px;width:100%;margin-top:4px}.devui-gantt-bar-parent .devui-gantt-bar-rail:before{width:0;height:0;border:3px transparent solid;border-top-color:#eaecf0;border-left-color:#eaecf0;position:absolute;left:0;bottom:-6px;content:\"\"}.devui-gantt-bar-parent .devui-gantt-bar-rail:after{width:0;height:0;border:3px transparent solid;border-top-color:#eaecf0;border-right-color:#eaecf0;position:absolute;right:0;bottom:-6px;content:\"\"}.devui-gantt-bar-parent .devui-gantt-bar-track{position:absolute;background-color:#cacfd8;height:12px;margin-top:4px;width:0}.devui-gantt-bar-parent .devui-gantt-bar-track.head:before{width:0;height:0;border:3px transparent solid;border-top-color:#cacfd8;border-left-color:#cacfd8;position:absolute;left:0;bottom:-6px;content:\"\"}.devui-gantt-bar-parent .devui-gantt-bar-track.tail:after{width:0;height:0;border:3px transparent solid;border-top-color:#cacfd8;border-right-color:#cacfd8;position:absolute;right:0;bottom:-6px;content:\"\"}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TooltipDirective, selector: "[dTooltip]", inputs: ["content", "position", "showAnimation", "showAnimate", "mouseEnterDelay", "mouseLeaveDelay"], exportAs: ["dTooltip"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttBarParentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-gantt-bar-parent', template: "<div\n  *ngIf=\"startDate && endDate\"\n  #ganttBar\n  class=\"devui-gantt-bar-parent\"\n  [style.left]=\"left + 'px'\"\n  [style.width]=\"width + 'px'\"\n  dTooltip\n  [content]=\"tip\"\n>\n  <div class=\"devui-gantt-bar-rail\" #ganttBarRail></div>\n  <div class=\"devui-gantt-bar-track\" [ngClass]=\"{ head: percentage > 0, tail: percentage === 1 }\" #ganttBarTrack></div>\n</div>\n", styles: [".devui-gantt-bar-parent{width:100%;box-sizing:border-box;height:24px;z-index:3;position:relative}.devui-gantt-bar-parent .devui-gantt-bar-rail{position:absolute;background:#eaecf0;height:12px;width:100%;margin-top:4px}.devui-gantt-bar-parent .devui-gantt-bar-rail:before{width:0;height:0;border:3px transparent solid;border-top-color:#eaecf0;border-left-color:#eaecf0;position:absolute;left:0;bottom:-6px;content:\"\"}.devui-gantt-bar-parent .devui-gantt-bar-rail:after{width:0;height:0;border:3px transparent solid;border-top-color:#eaecf0;border-right-color:#eaecf0;position:absolute;right:0;bottom:-6px;content:\"\"}.devui-gantt-bar-parent .devui-gantt-bar-track{position:absolute;background-color:#cacfd8;height:12px;margin-top:4px;width:0}.devui-gantt-bar-parent .devui-gantt-bar-track.head:before{width:0;height:0;border:3px transparent solid;border-top-color:#cacfd8;border-left-color:#cacfd8;position:absolute;left:0;bottom:-6px;content:\"\"}.devui-gantt-bar-parent .devui-gantt-bar-track.tail:after{width:0;height:0;border:3px transparent solid;border-top-color:#cacfd8;border-right-color:#cacfd8;position:absolute;right:0;bottom:-6px;content:\"\"}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: GanttService }]; }, propDecorators: { ganttBarProgress: [{
                type: ViewChild,
                args: ['ganttBarProgress']
            }], ganttBarTrack: [{
                type: ViewChild,
                args: ['ganttBarTrack']
            }], ganttBarRail: [{
                type: ViewChild,
                args: ['ganttBarRail']
            }], startDate: [{
                type: Input
            }], endDate: [{
                type: Input
            }], progressRate: [{
                type: Input
            }], data: [{
                type: Input
            }], id: [{
                type: Input
            }], tip: [{
                type: Input
            }] } });

class GanttBarComponent {
    constructor(cdr, ganttService, ele) {
        this.cdr = cdr;
        this.ganttService = ganttService;
        this.ele = ele;
        this.mouseMoveTimer = null;
        this.mouseLeaveTimer = null;
        this.barHovering = false;
        this.progressHovering = false;
        this.focused = false;
        this.MIN_WIDTH = 10;
        this.left = 0;
        this.width = 0;
        this.EARLYOFFSET = 3;
        this.cdkOverlayOffsetX = 0;
        this.max = 100;
        this.min = 0;
        this.step = 1;
        this.mouseEventDalay = 100;
        this.tipHovered = false;
        this.mouseMoveOnBar = false;
        this.movedOut = false;
        this.scrollTimer = null;
        this.SCROLL_STEP = 10;
        this.outDirection = 'right';
        this.scrollViewRange = [0, 0];
        this.barMoveDisabled = false;
        this.barResizeDisabled = false;
        this.progressDisabled = false;
        this.progressRate = 0;
        this.originOffsetX = 0;
        this.showTitle = false;
        this.customBarClass = '';
        this.customBgClass = '';
        this.customTitleClass = '';
        this.barMoveStartEvent = new EventEmitter();
        this.barMovingEvent = new EventEmitter();
        this.barMoveEndEvent = new EventEmitter();
        this.barResizeStartEvent = new EventEmitter();
        this.barResizingEvent = new EventEmitter();
        this.barResizeEndEvent = new EventEmitter();
        this.barProgressEvent = new EventEmitter();
        this.onTouchedCallback = (v) => { };
        this.onChangeCallback = (v) => { };
    }
    ngOnInit() {
        this.checkRangeValues(this.min, this.max);
        this.checkStepValue();
        if (this.progressRate === null) {
            this.setValue(this.ensureValueInRange(null));
        }
        this.originStartDate = this.startDate;
        this.originEndDate = this.endDate;
        this.duration = this.ganttService.getDuration(this.startDate, this.endDate) + 'd';
        this.ganttScaleStatusHandler = this.ganttService.ganttScaleConfigChange.subscribe((config) => {
            if (config.startDate) {
                this.left = this.ganttService.getDatePostionOffset(this.startDate);
            }
            if (config.unit) {
                this.left = this.ganttService.getDatePostionOffset(this.startDate);
                this.width = this.ganttService.getDurationWidth(this.startDate, this.endDate);
            }
        });
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'min')
            || Object.prototype.hasOwnProperty.call(changes, 'max')
            || Object.prototype.hasOwnProperty.call(changes, 'step')) {
            this.checkRangeValues(this.min, this.max);
            this.checkStepValue();
        }
        if (changes['progressRate'] && this.progressRate >= 0) {
            this.updateTrackAndHandle();
        }
        if (changes['startDate']) {
            this.left = this.ganttService.getDatePostionOffset(this.startDate);
            this.width = this.ganttService.getDurationWidth(this.startDate, this.endDate);
        }
        if (changes['endDate']) {
            this.width = this.ganttService.getDurationWidth(this.startDate, this.endDate);
        }
        if (changes['barMoveDisabled']) {
            if (this.barMoveDisabled) {
                this.unsubscribeMouseActions(['start'], ['barMove']);
            }
            else {
                this.subscribeMouseActions(['start'], ['barMove']);
            }
        }
        if (changes['barResizeDisabled']) {
            if (this.barResizeDisabled) {
                this.unsubscribeMouseActions(['start'], ['barResize']);
            }
            else {
                this.subscribeMouseActions(['start'], ['barResize']);
            }
        }
        if (changes['progressDisabled']) {
            if (this.progressDisabled) {
                this.unsubscribeMouseActions(['start'], ['progress']);
            }
            else {
                this.subscribeMouseActions(['start'], ['progress']);
            }
        }
    }
    ngAfterViewInit() {
        if (this.startDate && this.endDate) {
            this.registerMouseEventsListeners();
            this.registerHandleHoverPopoverListener();
            if (!this.barMoveDisabled) {
                this.subscribeMouseActions(['start'], ['barMove']);
            }
            if (!this.barResizeDisabled) {
                this.subscribeMouseActions(['start'], ['barResize']);
            }
            if (!this.progressDisabled) {
                this.subscribeMouseActions(['start'], ['progress']);
            }
        }
        if (this.progressRate && this.progressRate > 0) {
            this.updateTrackAndHandle();
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    writeValue(newValue) {
        this.setValue(this.ensureValueInRange(newValue));
    }
    checkRangeValues(minValue, maxValue) {
        if (maxValue <= minValue) {
            throw new Error(`max value must be greater than min value`);
        }
    }
    checkStepValue() {
        if (this.step < 0 || !this.step) {
            throw new Error('step value must be greater than 0.');
        }
        else if ((this.max - this.min) % this.step) {
            throw new Error('(max - min) must be divisible by step.');
        }
    }
    ratioToValue(ratio, min, max, step) {
        let value = (max - min) * ratio + min;
        if (step > 0) {
            value = Math.round(value / step) * step;
        }
        return this.clamp(min, value, max);
    }
    convertHandlePositionToRatio(handleX, startX, totalLength) {
        return this.clamp(0, (handleX - startX) / totalLength, 1);
    }
    clamp(min, n, max) {
        return Math.max(min, Math.min(n, max));
    }
    updateStyle(percentage) {
        this.percentage = Math.min(1, Math.max(0, percentage));
        if (this.ganttBarTrack && this.ganttBarTrack.nativeElement) {
            this.ganttBarTrack.nativeElement.style.width = `${this.percentage * 100}%`;
        }
        if (this.ganttBarProgress && this.ganttBarProgress.nativeElement) {
            this.ganttBarProgress.nativeElement.style.left = `${this.percentage * 100}%`;
        }
    }
    registerMouseEventsListeners() {
        this.moveBarStartListener = fromEvent(this.ganttBarMain.nativeElement, 'mousedown').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'));
        this.dragProgressStartListener = fromEvent(this.ganttBarProgress.nativeElement, 'mousedown').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'), map((position) => this.mousePositionToAdaptiveValue(position)));
        this.resizeBarLeftStartListener = fromEvent(this.ganttBarDarggerLeft.nativeElement, 'mousedown').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'));
        this.resizeBarRightStartListener = fromEvent(this.ganttBarDarggerRight.nativeElement, 'mousedown').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'));
        this.mouseEndListener = fromEvent(document, 'mouseup');
        this.mouseMoveListener = fromEvent(document, 'mousemove').pipe(tap((e) => {
            e.stopPropagation();
            e.preventDefault();
        }), pluck('pageX'), distinctUntilChanged(), takeUntil(this.mouseEndListener));
    }
    getSliderPagePosition() {
        const rect = this.ganttBar.nativeElement.getBoundingClientRect();
        const window = this.ganttBar.nativeElement.ownerDocument.defaultView;
        return rect.left + window.pageXOffset;
    }
    getRailLength() {
        return this.ganttBarRail.nativeElement.clientWidth;
    }
    mousePositionToAdaptiveValue(handleX) {
        const sliderStartX = this.getSliderPagePosition();
        const sliderLength = this.getRailLength();
        const ratio = this.convertHandlePositionToRatio(handleX, sliderStartX, sliderLength);
        const value = this.ratioToValue(ratio, this.min, this.max, this.step);
        return parseFloat(value.toFixed(this.getDecimals(this.step)));
    }
    getDecimals(value) {
        const valueString = value.toString();
        const integerLength = valueString.indexOf('.') + 1;
        return integerLength >= 0 ? valueString.length - integerLength : 0;
    }
    progressStartDrag(value) {
        this.dragProgressStart = true;
        this.handleController(true);
        this.setValue(value);
    }
    barStartMoving(value) {
        this.scrollViewRange = [
            this.scrollElement.getBoundingClientRect().left + this.originOffsetX,
            this.scrollElement.getBoundingClientRect().right,
        ];
        this.moveBarStart = true;
        this.barMoveStartPageX = value;
        this.barOriginLeft = parseInt(this.ganttBar.nativeElement.style.left, 10);
        this.handleController(true);
        this.barMoveStartEvent.emit(this.getGanttTaskInfo());
    }
    barLeftStartResizing(value) {
        this.resizeBarLeftStart = true;
        this.barResizeStartPageX = value;
        this.barOriginLeft = parseInt(this.ganttBar.nativeElement.style.left, 10);
        this.barOriginWidth = this.ganttBar.nativeElement.style.width;
        this.handleController(true);
        this.barResizeStartEvent.emit(this.getGanttTaskInfo());
    }
    barRightStartResizing(value) {
        this.resizeBarRightStart = true;
        this.barResizeStartPageX = value;
        this.barOriginLeft = parseInt(this.ganttBar.nativeElement.style.left, 10);
        this.barOriginWidth = this.ganttBar.nativeElement.style.width;
        this.handleController(true);
        this.barResizeStartEvent.emit(this.getGanttTaskInfo());
    }
    mouseMoving(value) {
        if (this.dragProgressStart) {
            this.setValue(this.mousePositionToAdaptiveValue(value));
            this.cdr.markForCheck();
        }
        if (this.resizeBarLeftStart) {
            this.mouseMoveOnBar = true;
            const offset = value - this.barResizeStartPageX;
            const finalWidth = parseInt(this.barOriginWidth, 10) - Math.round(offset);
            if (finalWidth < this.MIN_WIDTH) {
                return;
            }
            const timeOffset = Math.round((offset / this.ganttService.getScaleUnitPixel()) * GanttService.DAY_DURATION);
            this.startDate = new Date(this.originStartDate.getTime() + timeOffset);
            this.ganttService.roundDate(this.startDate);
            if (this.endDate < this.startDate) {
                this.startDate = this.endDate;
            }
            const earlyDateTime = this.startDate.getTime() - this.EARLYOFFSET * GanttService.DAY_DURATION;
            if (offset < 0 && earlyDateTime < this.ganttService.scaleStartDate.getTime()) {
                this.ganttService.setScaleConfig({ startDate: new Date(earlyDateTime) });
                this.barOriginLeft = this.EARLYOFFSET * this.ganttService.getScaleUnitPixel() - Math.round(offset);
            }
            const finalLeft = this.barOriginLeft + Math.round(offset);
            this.left = finalLeft;
            this.width = finalWidth;
            this.dispatchGanttBarStatus();
            const info = this.getGanttTaskInfo();
            info.moveOffset = offset;
            this.barResizingEvent.emit(info);
        }
        if (this.resizeBarRightStart) {
            this.mouseMoveOnBar = true;
            const offset = value - this.barResizeStartPageX;
            const finalWidth = parseInt(this.barOriginWidth, 10) + Math.round(offset);
            if (finalWidth < this.MIN_WIDTH) {
                return;
            }
            const timeOffset = Math.round((offset / this.ganttService.getScaleUnitPixel()) * GanttService.DAY_DURATION);
            this.endDate = new Date(this.originEndDate.getTime() + timeOffset);
            this.ganttService.roundDate(this.endDate);
            if (this.endDate < this.startDate) {
                this.endDate = this.startDate;
            }
            const lateDateTime = this.endDate.getTime() + this.EARLYOFFSET * GanttService.DAY_DURATION;
            if (offset > 0 && lateDateTime > this.ganttService.scaleEndDate.getTime()) {
                this.ganttService.setScaleConfig({ endDate: new Date(lateDateTime) });
            }
            this.width = finalWidth;
            this.dispatchGanttBarStatus();
            const info = this.getGanttTaskInfo();
            info.moveOffset = offset;
            this.barResizingEvent.emit(info);
        }
        if (this.moveBarStart) {
            this.checkIsOut(value);
            if (this.movedOut) {
                return;
            }
            this.mouseMoveOnBar = true;
            const offset = value - this.barMoveStartPageX;
            const timeOffset = Math.round((Math.round(offset) / this.ganttService.getScaleUnitPixel()) * GanttService.DAY_DURATION);
            const newStartDate = new Date(this.originStartDate.getTime() + timeOffset);
            this.ganttService.roundDate(newStartDate);
            this.startDate = newStartDate;
            const newEndDate = new Date(this.originEndDate.getTime() + timeOffset);
            this.ganttService.roundDate(newEndDate);
            this.endDate = newEndDate;
            const earlyDateTime = this.startDate.getTime() - this.EARLYOFFSET * GanttService.DAY_DURATION;
            const lateDateTime = this.endDate.getTime() + this.EARLYOFFSET * GanttService.DAY_DURATION;
            if (earlyDateTime < this.ganttService.scaleStartDate.getTime()) {
                this.ganttService.setScaleConfig({ startDate: new Date(earlyDateTime) });
            }
            else if (lateDateTime > this.ganttService.scaleEndDate.getTime()) {
                this.ganttService.setScaleConfig({ endDate: new Date(lateDateTime) });
            }
            const finalLeft = this.barOriginLeft + Math.round(offset);
            this.left = finalLeft;
            this.dispatchGanttBarStatus();
            const info = this.getGanttTaskInfo();
            info.moveOffset = offset;
            this.barMovingEvent.emit(info);
        }
    }
    checkIsOut(value) {
        this.outDirection = value - this.barMoveStartPageX > 0 ? 'right' : 'left';
        if (this.outDirection === 'left') {
            this.movedOut = value < this.scrollViewRange[0];
        }
        else {
            this.movedOut = value > this.scrollViewRange[1];
        }
        if (this.movedOut) {
            this.autoScroll();
        }
        else if (this.scrollTimer) {
            const left = this.outDirection === 'left'
                ? this.scrollElement.scrollLeft + (value - this.scrollElement.getBoundingClientRect().left) - this.originOffsetX
                : this.scrollElement.scrollLeft + this.scrollElement.clientWidth - this.originOffsetX;
            this.setLeft(Math.round(left));
            this.stopAutoScroll();
            this.barMoveStartPageX = value;
        }
    }
    autoScroll() {
        if (!this.scrollTimer) {
            this.scrollTimer = setInterval(() => {
                this.outDirection === 'left'
                    ? (this.scrollElement.scrollLeft -= this.SCROLL_STEP)
                    : (this.scrollElement.scrollLeft += this.SCROLL_STEP);
            }, 10);
        }
    }
    stopAutoScroll() {
        clearInterval(this.scrollTimer);
        this.scrollTimer = null;
    }
    setLeft(left) {
        const offset = left - this.left;
        const timeOffset = (Math.round(offset) / this.ganttService.getScaleUnitPixel()) * GanttService.DAY_DURATION;
        const newStartDate = new Date(this.startDate.getTime() + timeOffset);
        this.ganttService.roundDate(newStartDate);
        this.startDate = newStartDate;
        const newEndDate = new Date(this.endDate.getTime() + timeOffset);
        this.ganttService.roundDate(newEndDate);
        this.endDate = newEndDate;
        this.originStartDate = this.startDate;
        this.originEndDate = this.endDate;
        this.barOriginLeft = left;
        this.left = left;
    }
    getGanttTaskInfo() {
        this.duration = this.ganttService.getDuration(this.startDate, this.endDate) + 'd';
        const progress = this.progressRate + '%';
        const taskInfo = {
            id: this.id,
            startDate: this.startDate,
            endDate: this.endDate,
            duration: this.duration,
            progress: progress,
            left: this.left,
            width: this.width,
        };
        return taskInfo;
    }
    mouseStopMoving() {
        this.mouseMoveOnBar = false;
        this.ganttService.roundDate(this.startDate);
        this.ganttService.roundDate(this.endDate);
        this.originStartDate = this.startDate;
        this.originEndDate = this.endDate;
        const taskInfo = this.getGanttTaskInfo();
        if (this.moveBarStart) {
            const finalLeft = this.ganttService.getDatePostionOffset(this.startDate);
            this.left = finalLeft > 0 ? finalLeft : 0;
            this.barMoveEndEvent.emit(taskInfo);
        }
        if (this.resizeBarLeftStart) {
            const finalLeft = this.ganttService.getDatePostionOffset(this.startDate);
            const finalWidth = this.ganttService.getDurationWidth(this.startDate, this.endDate);
            this.left = finalLeft > 0 ? finalLeft : 0;
            this.width = finalWidth;
            this.barResizeEndEvent.emit(taskInfo);
        }
        if (this.resizeBarRightStart) {
            const finalWidth = this.ganttService.getDurationWidth(this.startDate, this.endDate);
            this.width = finalWidth;
            this.barResizeEndEvent.emit(taskInfo);
        }
        if (this.dragProgressStart) {
            this.barProgressEvent.emit(this.progressRate);
        }
        this.handleController(false);
        this.stopAutoScroll();
        this.cdr.markForCheck();
    }
    subscribeMouseActions(mouseActions = ['start', 'move', 'end'], events = ['barMove', 'barResize', 'progress']) {
        if (mouseActions.indexOf('start') !== -1 &&
            this.dragProgressStartListener &&
            !this.dragProgressStartHandler &&
            events.indexOf('progress') !== -1) {
            this.dragProgressStartHandler = this.dragProgressStartListener.subscribe(this.progressStartDrag.bind(this));
        }
        if (mouseActions.indexOf('start') !== -1 &&
            this.moveBarStartListener &&
            !this.moveBarStartHandler &&
            events.indexOf('barMove') !== -1) {
            this.moveBarStartHandler = this.moveBarStartListener.subscribe(this.barStartMoving.bind(this));
        }
        if (mouseActions.indexOf('start') !== -1 &&
            this.resizeBarLeftStartListener &&
            !this.resizeBarLeftStartHandler &&
            events.indexOf('barResize') !== -1) {
            this.resizeBarLeftStartHandler = this.resizeBarLeftStartListener.subscribe(this.barLeftStartResizing.bind(this));
        }
        if (mouseActions.indexOf('start') !== -1 &&
            this.resizeBarRightStartListener &&
            !this.resizeBarRightStartHandler &&
            events.indexOf('barResize') !== -1) {
            this.resizeBarRightStartHandler = this.resizeBarRightStartListener.subscribe(this.barRightStartResizing.bind(this));
        }
        if (mouseActions.indexOf('move') !== -1 && this.mouseMoveListener && !this.mouseMoveHandler) {
            this.mouseMoveHandler = this.mouseMoveListener.subscribe(this.mouseMoving.bind(this));
        }
        if (mouseActions.indexOf('end') !== -1 && this.mouseEndListener && !this.mouseEndHandler) {
            this.mouseEndHandler = this.mouseEndListener.subscribe(this.mouseStopMoving.bind(this));
        }
    }
    unsubscribeMouseActions(dragStages = ['start', 'move', 'end'], events = ['barMove', 'barResize', 'progress']) {
        if (dragStages.indexOf('start') !== -1 && events.indexOf('progress') !== -1 && this.dragProgressStartHandler) {
            this.dragProgressStartHandler.unsubscribe();
            this.dragProgressStartHandler = null;
        }
        if (dragStages.indexOf('start') !== -1 && events.indexOf('barMove') !== -1 && this.moveBarStartHandler) {
            this.moveBarStartHandler.unsubscribe();
            this.moveBarStartHandler = null;
        }
        if (dragStages.indexOf('start') !== -1 && events.indexOf('barResize') !== -1 && this.resizeBarLeftStartHandler) {
            this.resizeBarLeftStartHandler.unsubscribe();
            this.resizeBarLeftStartHandler = null;
        }
        if (dragStages.indexOf('start') !== -1 && events.indexOf('barResize') !== -1 && this.resizeBarRightStartHandler) {
            this.resizeBarRightStartHandler.unsubscribe();
            this.resizeBarRightStartHandler = null;
        }
        if (dragStages.indexOf('move') !== -1 && this.mouseMoveHandler) {
            this.mouseMoveHandler.unsubscribe();
            this.mouseMoveHandler = null;
        }
        if (dragStages.indexOf('end') !== -1 && this.mouseEndHandler) {
            this.mouseEndHandler.unsubscribe();
            this.mouseEndHandler = null;
        }
    }
    handleController(movable) {
        if (movable) {
            this.focused = this.focusController();
            this.subscribeMouseActions(['move', 'end']);
        }
        else {
            this.dragProgressStart = false;
            this.moveBarStart = false;
            this.resizeBarLeftStart = false;
            this.resizeBarRightStart = false;
            this.focused = this.focusController();
            this.unsubscribeMouseActions(['move', 'end']);
        }
    }
    setValue(value) {
        if (this.progressRate !== value) {
            this.progressRate = value;
            this.updateTrackAndHandle();
        }
        this.onChangeCallback(this.progressRate);
    }
    ensureValueInRange(value) {
        let safeValue;
        if (!this.valueMustBeValid(value)) {
            safeValue = this.min;
        }
        else {
            safeValue = this.clamp(this.min, value, this.max);
        }
        return safeValue;
    }
    updateTrackAndHandle() {
        const value = this.progressRate;
        const offset = this.valueToOffset(value);
        this.updateStyle(offset / 100);
        this.cdr.markForCheck();
    }
    valueMustBeValid(value) {
        return !isNaN(typeof value !== 'number' ? parseFloat(value) : value);
    }
    valueToOffset(value) {
        return ((value - this.min) / (this.max - this.min)) * 100;
    }
    registerHandleHoverPopoverListener() {
        const mouseOverProgressListener = fromEvent(this.ganttBarProgress.nativeElement, 'mouseover');
        const mouseLeaveProgressListener = fromEvent(this.ganttBarProgress.nativeElement, 'mouseout');
        this.mouseOverProgressHandler = mouseOverProgressListener.subscribe(this.ganttProgressPopoverOnMouseHover.bind(this));
        this.mouseLeaveProgressHandler = mouseLeaveProgressListener.subscribe(this.ganttProgressPopoverOnMouseLeave.bind(this));
    }
    ganttBarPopoverOnMouseHover($event) {
        if (this.mouseLeaveTimer) {
            clearTimeout(this.mouseLeaveTimer);
        }
        this.mouseMoveTimer = setTimeout(() => {
            const barLeft = this.ganttBar.nativeElement.getClientRects()[0].left;
            const eventLeft = $event.clientX;
            this.cdkOverlayOffsetX = eventLeft - barLeft;
            this.barHovering = true;
            this.focused = this.focusController();
            this.dispatchGanttBarStatus();
            this.cdr.markForCheck();
        }, this.mouseEventDalay);
    }
    ganttBarPopoverOnMouseLeave() {
        if (this.mouseMoveTimer) {
            clearTimeout(this.mouseMoveTimer);
        }
        this.mouseLeaveTimer = setTimeout(() => {
            this.barHovering = false;
            this.focused = this.focusController();
            this.dispatchGanttBarStatus();
            this.cdr.markForCheck();
        }, this.mouseEventDalay);
    }
    mouseLeaveTip() {
        setTimeout(() => {
            this.tipHovered = false;
        }, this.mouseEventDalay);
    }
    ganttProgressPopoverOnMouseHover() {
        this.progressHovering = true;
    }
    ganttProgressPopoverOnMouseLeave() {
        this.progressHovering = false;
    }
    unregisterHandleHoverTooltip() {
        if (this.mouseOverProgressHandler) {
            this.mouseOverProgressHandler.unsubscribe();
            this.mouseOverProgressHandler = null;
        }
        if (this.mouseLeaveProgressHandler) {
            this.mouseLeaveProgressHandler.unsubscribe();
            this.mouseLeaveProgressHandler = null;
        }
    }
    clearTimer() {
        if (this.mouseLeaveTimer) {
            clearTimeout(this.mouseLeaveTimer);
        }
        if (this.mouseMoveTimer) {
            clearTimeout(this.mouseMoveTimer);
        }
    }
    focusController() {
        return this.dragProgressStart || this.moveBarStart || this.resizeBarLeftStart || this.resizeBarRightStart || this.barHovering;
    }
    dispatchGanttBarStatus() {
        const status = {
            focused: this.focused,
            startDate: this.startDate,
            endDate: this.endDate,
        };
        this.ganttService.changeGanttBarStatus(status);
    }
    ngOnDestroy() {
        this.clearTimer();
        this.unsubscribeMouseActions();
        this.unregisterHandleHoverTooltip();
        if (this.ganttScaleStatusHandler) {
            this.ganttScaleStatusHandler.unsubscribe();
            this.ganttScaleStatusHandler = null;
        }
    }
}
GanttBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttBarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: GanttService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
GanttBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: GanttBarComponent, selector: "d-gantt-bar", inputs: { barMoveDisabled: "barMoveDisabled", barResizeDisabled: "barResizeDisabled", progressDisabled: "progressDisabled", startDate: "startDate", endDate: "endDate", progressRate: "progressRate", tipTemplateRef: "tipTemplateRef", data: "data", originOffsetX: "originOffsetX", id: "id", title: "title", showTitle: "showTitle", customBarClass: "customBarClass", customBgClass: "customBgClass", customTitleClass: "customTitleClass", scrollElement: "scrollElement" }, outputs: { barMoveStartEvent: "barMoveStartEvent", barMovingEvent: "barMovingEvent", barMoveEndEvent: "barMoveEndEvent", barResizeStartEvent: "barResizeStartEvent", barResizingEvent: "barResizingEvent", barResizeEndEvent: "barResizeEndEvent", barProgressEvent: "barProgressEvent" }, viewQueries: [{ propertyName: "ganttBar", first: true, predicate: ["ganttBar"], descendants: true }, { propertyName: "ganttBarMain", first: true, predicate: ["ganttBarMain"], descendants: true }, { propertyName: "ganttBarProgress", first: true, predicate: ["ganttBarProgress"], descendants: true }, { propertyName: "ganttBarTrack", first: true, predicate: ["ganttBarTrack"], descendants: true }, { propertyName: "ganttBarRail", first: true, predicate: ["ganttBarRail"], descendants: true }, { propertyName: "ganttBarDarggerLeft", first: true, predicate: ["ganttBarDarggerLeft"], descendants: true }, { propertyName: "ganttBarDarggerRight", first: true, predicate: ["ganttBarDarggerRight"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  *ngIf=\"startDate && endDate\"\n  class=\"devui-gantt-bar {{ customBarClass }}\"\n  #ganttBar\n  cdk-overlay-origin\n  #progress=\"cdkOverlayOrigin\"\n  [style.left]=\"left + 'px'\"\n  [style.width]=\"width + 'px'\"\n  (mouseover)=\"ganttBarPopoverOnMouseHover($event)\"\n  (mouseleave)=\"ganttBarPopoverOnMouseLeave()\"\n>\n  <div class=\"devui-gantt-hover-layer\" [style.width]=\"width + 24 + 'px'\" [style.display]=\"focused ? 'block' : 'none'\">\n    <div #ganttBarDarggerLeft class=\"devui-gantt-dragger left\">\n      <div class=\"handle\" [ngClass]=\"{ disabled: barResizeDisabled }\"></div>\n    </div>\n    <div #ganttBarDarggerRight class=\"devui-gantt-dragger right\">\n      <div class=\"handle\" [ngClass]=\"{ disabled: barResizeDisabled }\"></div>\n    </div>\n  </div>\n  <div #ganttBarMain class=\"devui-gantt-main\" [ngClass]=\"{ disabled: barMoveDisabled }\">\n    <div class=\"devui-gantt-bar-rail\" #ganttBarRail></div>\n    <div class=\"devui-gantt-bar-track\" #ganttBarTrack></div>\n  </div>\n  <div\n    class=\"devui-gantt-bar-progress\"\n    #ganttBarProgress\n    [ngClass]=\"{ disabled: progressDisabled, visible: focused }\"\n    [attr.title]=\"progressRate ? progressRate : 0 + '%'\"\n  >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      width=\"12px\"\n      height=\"16px\"\n      viewBox=\"0 0 12 16\"\n      version=\"1.1\"\n    >\n      <g id=\"gantt-bar-handle\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M7.06066017,1.35355339 C6.76776695,1.06066017 6.38388348,0.914213562 6,0.914213562 C5.61611652,0.914213562 5.23223305,1.06066017 4.93933983,1.35355339 L0.5,5.79289322 L0.5,13 C0.5,13.6903559 0.779822031,14.3153559 1.23223305,14.767767 C1.68464406,15.220178 2.30964406,15.5 3,15.5 L9,15.5 C9.69035594,15.5 10.3153559,15.220178 10.767767,14.767767 C11.220178,14.3153559 11.5,13.6903559 11.5,13 L11.5,5.79289322 L7.06066017,1.35355339 Z\"\n          stroke=\"none\"\n          fill=\"none\"\n        />\n      </g>\n    </svg>\n  </div>\n  <div class=\"devui-gantt-bar-title {{ customTitleClass }}\" *ngIf=\"showTitle\">{{ title }}</div>\n  <ng-template\n    *ngIf=\"tipTemplateRef\"\n    cdk-connected-overlay\n    [cdkConnectedOverlayOffsetX]=\"cdkOverlayOffsetX\"\n    [cdkConnectedOverlayOrigin]=\"progress\"\n    [cdkConnectedOverlayOpen]=\"(focused || tipHovered) && !mouseMoveOnBar\"\n  >\n    <div class=\"devui-gantt-tips\" (mouseover)=\"tipHovered = true\" (mouseleave)=\"mouseLeaveTip()\">\n      <ng-template [ngTemplateOutlet]=\"tipTemplateRef\" [ngTemplateOutletContext]=\"{ ganttInstance: this, data: data }\"></ng-template>\n    </div>\n  </ng-template>\n</div>\n\n<div\n  *ngIf=\"moveBarStart\"\n  class=\"moving-bg {{ customBgClass }}\"\n  [style.left]=\"originOffsetX + left + 'px'\"\n  [style.width]=\"width + 'px'\"\n></div>\n", styles: [":host{display:block}.devui-gantt-bar{position:relative;width:100%;cursor:pointer;box-sizing:border-box;height:24px;z-index:3}.devui-gantt-bar .devui-gantt-main{cursor:move}.devui-gantt-bar .devui-gantt-main.disabled{cursor:not-allowed}.devui-gantt-bar .devui-gantt-bar-rail{position:absolute;background:#e9edfa;background:var(--devui-initial, #e9edfa);box-shadow:0 1px 4px rgba(81,112,255,.19);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) rgba(81,112,255,.19);height:20px;margin-top:4px;width:100%;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-gantt-bar .devui-gantt-bar-rail.disabled{background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.devui-gantt-bar .devui-gantt-hover-layer{display:none;position:absolute;height:24px;top:2px;left:-12px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);box-shadow:0 4px 16px rgba(81,112,255,.3);box-shadow:var(--devui-shadow-length-hover, 0 4px 16px 0) rgba(81,112,255,.3)}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger{position:absolute;width:12px;height:24px;cursor:col-resize;display:flex;align-items:center}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger.left{left:0}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger.right{right:0}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger .handle{width:2px;height:14px;background:#71757f;background:var(--devui-icon-fill, #71757f);border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger .handle.disabled{cursor:not-allowed}.devui-gantt-bar .devui-gantt-bar-track{position:absolute;background-color:#5e7ce0;background-color:var(--devui-brand, #5e7ce0);box-shadow:0 1px 4px rgba(81,112,255,.4);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) rgba(81,112,255,.4);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px);height:20px;margin-top:4px;width:0}.devui-gantt-bar .devui-gantt-bar-progress{display:none;position:absolute;left:0;bottom:-8px;transform:translate(-50%);cursor:pointer}.devui-gantt-bar .devui-gantt-bar-progress>svg{display:block}.devui-gantt-bar .devui-gantt-bar-progress>svg>g>path{fill:#fff;fill:var(--devui-icon-bg, #ffffff);stroke:#252b3a;stroke:var(--devui-icon-fill-active, #252b3a)}.devui-gantt-bar .devui-gantt-bar-progress.visible{display:block}.devui-gantt-bar .devui-gantt-bar-progress.disabled{cursor:not-allowed}.devui-gantt-bar:hover .devui-gantt-bar-progress{display:block}.devui-gantt-bar .devui-gantt-bar-title{position:absolute;display:inline-flex;align-items:center;left:100%;height:100%;margin-left:12px;word-break:keep-all}.devui-gantt-tips{width:280px;min-height:100px;background:#ffffff;background:var(--devui-base-bg, #ffffff);box-shadow:0 4px 16px rgba(81,112,255,.1);box-shadow:var(--devui-shadow-length-feedback-overlay, 0 4px 16px 0) rgba(81,112,255,.1);border-radius:6px;border-radius:var(--devui-border-radius-card, 6px);padding:16px;margin-top:8px}.moving-bg{position:absolute;height:100%;top:0;bottom:0;background:rgba(94,124,224,.3);background:var(--devui-float-block-shadow, rgba(94, 124, 224, .3));opacity:.3}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3$1.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3$1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-gantt-bar', template: "<div\n  *ngIf=\"startDate && endDate\"\n  class=\"devui-gantt-bar {{ customBarClass }}\"\n  #ganttBar\n  cdk-overlay-origin\n  #progress=\"cdkOverlayOrigin\"\n  [style.left]=\"left + 'px'\"\n  [style.width]=\"width + 'px'\"\n  (mouseover)=\"ganttBarPopoverOnMouseHover($event)\"\n  (mouseleave)=\"ganttBarPopoverOnMouseLeave()\"\n>\n  <div class=\"devui-gantt-hover-layer\" [style.width]=\"width + 24 + 'px'\" [style.display]=\"focused ? 'block' : 'none'\">\n    <div #ganttBarDarggerLeft class=\"devui-gantt-dragger left\">\n      <div class=\"handle\" [ngClass]=\"{ disabled: barResizeDisabled }\"></div>\n    </div>\n    <div #ganttBarDarggerRight class=\"devui-gantt-dragger right\">\n      <div class=\"handle\" [ngClass]=\"{ disabled: barResizeDisabled }\"></div>\n    </div>\n  </div>\n  <div #ganttBarMain class=\"devui-gantt-main\" [ngClass]=\"{ disabled: barMoveDisabled }\">\n    <div class=\"devui-gantt-bar-rail\" #ganttBarRail></div>\n    <div class=\"devui-gantt-bar-track\" #ganttBarTrack></div>\n  </div>\n  <div\n    class=\"devui-gantt-bar-progress\"\n    #ganttBarProgress\n    [ngClass]=\"{ disabled: progressDisabled, visible: focused }\"\n    [attr.title]=\"progressRate ? progressRate : 0 + '%'\"\n  >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      width=\"12px\"\n      height=\"16px\"\n      viewBox=\"0 0 12 16\"\n      version=\"1.1\"\n    >\n      <g id=\"gantt-bar-handle\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M7.06066017,1.35355339 C6.76776695,1.06066017 6.38388348,0.914213562 6,0.914213562 C5.61611652,0.914213562 5.23223305,1.06066017 4.93933983,1.35355339 L0.5,5.79289322 L0.5,13 C0.5,13.6903559 0.779822031,14.3153559 1.23223305,14.767767 C1.68464406,15.220178 2.30964406,15.5 3,15.5 L9,15.5 C9.69035594,15.5 10.3153559,15.220178 10.767767,14.767767 C11.220178,14.3153559 11.5,13.6903559 11.5,13 L11.5,5.79289322 L7.06066017,1.35355339 Z\"\n          stroke=\"none\"\n          fill=\"none\"\n        />\n      </g>\n    </svg>\n  </div>\n  <div class=\"devui-gantt-bar-title {{ customTitleClass }}\" *ngIf=\"showTitle\">{{ title }}</div>\n  <ng-template\n    *ngIf=\"tipTemplateRef\"\n    cdk-connected-overlay\n    [cdkConnectedOverlayOffsetX]=\"cdkOverlayOffsetX\"\n    [cdkConnectedOverlayOrigin]=\"progress\"\n    [cdkConnectedOverlayOpen]=\"(focused || tipHovered) && !mouseMoveOnBar\"\n  >\n    <div class=\"devui-gantt-tips\" (mouseover)=\"tipHovered = true\" (mouseleave)=\"mouseLeaveTip()\">\n      <ng-template [ngTemplateOutlet]=\"tipTemplateRef\" [ngTemplateOutletContext]=\"{ ganttInstance: this, data: data }\"></ng-template>\n    </div>\n  </ng-template>\n</div>\n\n<div\n  *ngIf=\"moveBarStart\"\n  class=\"moving-bg {{ customBgClass }}\"\n  [style.left]=\"originOffsetX + left + 'px'\"\n  [style.width]=\"width + 'px'\"\n></div>\n", styles: [":host{display:block}.devui-gantt-bar{position:relative;width:100%;cursor:pointer;box-sizing:border-box;height:24px;z-index:3}.devui-gantt-bar .devui-gantt-main{cursor:move}.devui-gantt-bar .devui-gantt-main.disabled{cursor:not-allowed}.devui-gantt-bar .devui-gantt-bar-rail{position:absolute;background:#e9edfa;background:var(--devui-initial, #e9edfa);box-shadow:0 1px 4px rgba(81,112,255,.19);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) rgba(81,112,255,.19);height:20px;margin-top:4px;width:100%;border-radius:2px;border-radius:var(--devui-border-radius, 2px)}.devui-gantt-bar .devui-gantt-bar-rail.disabled{background-color:#f5f5f5;background-color:var(--devui-area, #f5f5f5)}.devui-gantt-bar .devui-gantt-hover-layer{display:none;position:absolute;height:24px;top:2px;left:-12px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);background-color:#fff;background-color:var(--devui-connected-overlay-bg, #ffffff);box-shadow:0 4px 16px rgba(81,112,255,.3);box-shadow:var(--devui-shadow-length-hover, 0 4px 16px 0) rgba(81,112,255,.3)}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger{position:absolute;width:12px;height:24px;cursor:col-resize;display:flex;align-items:center}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger.left{left:0}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger.right{right:0}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger .handle{width:2px;height:14px;background:#71757f;background:var(--devui-icon-fill, #71757f);border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin:4px}.devui-gantt-bar .devui-gantt-hover-layer .devui-gantt-dragger .handle.disabled{cursor:not-allowed}.devui-gantt-bar .devui-gantt-bar-track{position:absolute;background-color:#5e7ce0;background-color:var(--devui-brand, #5e7ce0);box-shadow:0 1px 4px rgba(81,112,255,.4);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) rgba(81,112,255,.4);border-radius:2px 0 0 2px;border-radius:var(--devui-border-radius, 2px) 0 0 var(--devui-border-radius, 2px);height:20px;margin-top:4px;width:0}.devui-gantt-bar .devui-gantt-bar-progress{display:none;position:absolute;left:0;bottom:-8px;transform:translate(-50%);cursor:pointer}.devui-gantt-bar .devui-gantt-bar-progress>svg{display:block}.devui-gantt-bar .devui-gantt-bar-progress>svg>g>path{fill:#fff;fill:var(--devui-icon-bg, #ffffff);stroke:#252b3a;stroke:var(--devui-icon-fill-active, #252b3a)}.devui-gantt-bar .devui-gantt-bar-progress.visible{display:block}.devui-gantt-bar .devui-gantt-bar-progress.disabled{cursor:not-allowed}.devui-gantt-bar:hover .devui-gantt-bar-progress{display:block}.devui-gantt-bar .devui-gantt-bar-title{position:absolute;display:inline-flex;align-items:center;left:100%;height:100%;margin-left:12px;word-break:keep-all}.devui-gantt-tips{width:280px;min-height:100px;background:#ffffff;background:var(--devui-base-bg, #ffffff);box-shadow:0 4px 16px rgba(81,112,255,.1);box-shadow:var(--devui-shadow-length-feedback-overlay, 0 4px 16px 0) rgba(81,112,255,.1);border-radius:6px;border-radius:var(--devui-border-radius-card, 6px);padding:16px;margin-top:8px}.moving-bg{position:absolute;height:100%;top:0;bottom:0;background:rgba(94,124,224,.3);background:var(--devui-float-block-shadow, rgba(94, 124, 224, .3));opacity:.3}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: GanttService }, { type: i0.ElementRef }]; }, propDecorators: { ganttBar: [{
                type: ViewChild,
                args: ['ganttBar']
            }], ganttBarMain: [{
                type: ViewChild,
                args: ['ganttBarMain']
            }], ganttBarProgress: [{
                type: ViewChild,
                args: ['ganttBarProgress']
            }], ganttBarTrack: [{
                type: ViewChild,
                args: ['ganttBarTrack']
            }], ganttBarRail: [{
                type: ViewChild,
                args: ['ganttBarRail']
            }], ganttBarDarggerLeft: [{
                type: ViewChild,
                args: ['ganttBarDarggerLeft']
            }], ganttBarDarggerRight: [{
                type: ViewChild,
                args: ['ganttBarDarggerRight']
            }], barMoveDisabled: [{
                type: Input
            }], barResizeDisabled: [{
                type: Input
            }], progressDisabled: [{
                type: Input
            }], startDate: [{
                type: Input
            }], endDate: [{
                type: Input
            }], progressRate: [{
                type: Input
            }], tipTemplateRef: [{
                type: Input
            }], data: [{
                type: Input
            }], originOffsetX: [{
                type: Input
            }], id: [{
                type: Input
            }], title: [{
                type: Input
            }], showTitle: [{
                type: Input
            }], customBarClass: [{
                type: Input
            }], customBgClass: [{
                type: Input
            }], customTitleClass: [{
                type: Input
            }], scrollElement: [{
                type: Input
            }], barMoveStartEvent: [{
                type: Output
            }], barMovingEvent: [{
                type: Output
            }], barMoveEndEvent: [{
                type: Output
            }], barResizeStartEvent: [{
                type: Output
            }], barResizingEvent: [{
                type: Output
            }], barResizeEndEvent: [{
                type: Output
            }], barProgressEvent: [{
                type: Output
            }] } });

class GanttMarkerDirective {
    constructor(element, renderer) {
        this.renderer = renderer;
        this.monthMark = false;
        this.weekend = false;
        this.today = false;
        this.milestone = '';
        this.hostElement = element.nativeElement;
    }
    ngOnChanges(changes) {
        if (changes['ganttBarContainerElement'] && this.ganttBarContainerElement) {
            this.initMarkElement();
        }
        if (changes['ganttScaleContainerOffsetLeft'] && this.ganttScaleContainerOffsetLeft) {
            this.setElementsStyle();
        }
        if (changes['monthMark']) {
            if (this.monthMark) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('monthMark');
            }
        }
        if (changes['weekend'] || changes['last']) {
            if (this.weekend && !this.last) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('weekend');
            }
        }
        if (changes['today']) {
            if (this.today) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('today');
            }
        }
        if (changes['milestone']) {
            if (this.milestone) {
                this.initMarkElement();
            }
            else {
                this.destroyMarkElement('milestone');
            }
        }
        if (changes['unit'] && this.unit) {
            this.setElementsStyle();
        }
    }
    initMarkElement() {
        if (this.ganttBarContainerElement) {
            if (this.monthMark && !this.monthMarkElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-line');
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.monthMarkElement = node;
                this.setElementsStyle();
            }
            if (this.weekend && !this.last && !this.weekendElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-stripe');
                this.renderer.addClass(node, this.unit);
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.weekendElement = node;
                this.setElementsStyle();
            }
            if (this.today && !this.todayElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-line');
                this.renderer.addClass(node, 'today');
                this.renderer.addClass(node, this.unit);
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.todayElement = node;
                this.setElementsStyle();
            }
            if (this.milestone && !this.milestoneElement) {
                const node = this.renderer.createElement('div');
                this.renderer.addClass(node, 'devui-mark-line');
                this.renderer.addClass(node, 'milestone');
                this.renderer.addClass(node, this.unit);
                this.renderer.appendChild(this.ganttBarContainerElement, node);
                this.milestoneElement = node;
                this.setElementsStyle();
            }
        }
    }
    removeMonthMark() {
        if (this.monthMarkElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.monthMarkElement);
            this.monthMarkElement = null;
        }
    }
    removeWeekendMark() {
        if (this.weekendElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.weekendElement);
            this.weekendElement = null;
        }
    }
    removeTodayMark() {
        if (this.todayElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.todayElement);
            this.todayElement = null;
        }
    }
    removeMileStoneMark() {
        if (this.milestoneElement) {
            this.renderer.removeChild(this.ganttBarContainerElement, this.milestoneElement);
            this.milestoneElement = null;
        }
    }
    destroyMarkElement(type = 'all') {
        switch (type) {
            case 'monthMark':
                this.removeMonthMark();
                break;
            case 'weekend':
                this.removeWeekendMark();
                break;
            case 'today':
                this.removeTodayMark();
                break;
            case 'milestone':
                this.removeMileStoneMark();
                break;
            case 'all':
                this.removeMonthMark();
                this.removeWeekendMark();
                this.removeTodayMark();
                this.removeMileStoneMark();
                break;
            default:
                break;
        }
    }
    setElementsStyle() {
        this.ganttScaleContainerOffsetLeft = this.ganttScaleContainerOffsetLeft ? this.ganttScaleContainerOffsetLeft : 0;
        const leftOffset = this.hostElement.offsetLeft + this.ganttScaleContainerOffsetLeft + 'px';
        if (this.monthMark && this.monthMarkElement) {
            this.renderer.setStyle(this.monthMarkElement, 'left', leftOffset);
        }
        if (this.weekend && this.weekendElement) {
            this.weekendElement.className = 'devui-mark-stripe ' + this.unit;
            this.renderer.setStyle(this.weekendElement, 'left', leftOffset);
        }
        if (this.today && this.todayElement) {
            this.todayElement.className = 'devui-mark-line today ' + this.unit;
            this.renderer.setStyle(this.todayElement, 'left', leftOffset);
        }
        if (this.milestone && this.milestoneElement) {
            this.milestoneElement.className = 'devui-mark-line milestone ' + this.unit;
            this.renderer.setStyle(this.milestoneElement, 'left', leftOffset);
        }
    }
    ngOnDestroy() {
        this.destroyMarkElement();
    }
}
GanttMarkerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttMarkerDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
GanttMarkerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: GanttMarkerDirective, selector: "[dGanttMarker]", inputs: { ganttBarContainerElement: "ganttBarContainerElement", ganttScaleContainerOffsetLeft: "ganttScaleContainerOffsetLeft", monthMark: "monthMark", weekend: "weekend", today: "today", milestone: "milestone", unit: "unit", date: "date", last: "last" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttMarkerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dGanttMarker]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { ganttBarContainerElement: [{
                type: Input
            }], ganttScaleContainerOffsetLeft: [{
                type: Input
            }], monthMark: [{
                type: Input
            }], weekend: [{
                type: Input
            }], today: [{
                type: Input
            }], milestone: [{
                type: Input
            }], unit: [{
                type: Input
            }], date: [{
                type: Input
            }], last: [{
                type: Input
            }] } });

class GanttMilestoneComponent {
    constructor(ganttService) {
        this.ganttService = ganttService;
        this.left = 0;
    }
    ngOnInit() {
        this.ganttScaleStatusHandler = this.ganttService.ganttScaleConfigChange.subscribe((config) => {
            if (config.startDate || config.unit) {
                this.left = this.ganttService.getDatePostionOffset(this.startDate);
            }
        });
    }
    ngOnChanges(changes) {
        if (changes['startDate']) {
            this.left = this.ganttService.getDatePostionOffset(this.startDate);
        }
    }
    ngOnDestroy() {
        if (this.ganttScaleStatusHandler) {
            this.ganttScaleStatusHandler.unsubscribe();
            this.ganttScaleStatusHandler = null;
        }
    }
}
GanttMilestoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttMilestoneComponent, deps: [{ token: GanttService }], target: i0.ɵɵFactoryTarget.Component });
GanttMilestoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: GanttMilestoneComponent, selector: "d-gantt-milestone", inputs: { startDate: "startDate", title: "title", id: "id" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"devui-gantt-milestone\" [style.left]=\"left + 'px'\">\n  <span class=\"icon\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      width=\"22px\"\n      height=\"24px\"\n      viewBox=\"0 0 22 24\"\n      version=\"1.1\"\n    >\n      <defs>\n        <linearGradient x1=\"50%\" y1=\"6.72700158%\" x2=\"50%\" y2=\"91.2568893%\" id=\"gantt-linearGradient-1\">\n          <stop stop-color=\"#3DCCA6\" offset=\"0%\" />\n          <stop stop-color=\"#2AA7AF\" offset=\"100%\" />\n        </linearGradient>\n        <path\n          d=\"M14,1.15470054 L20.3923048,4.84529946 C21.6299092,5.55983064 22.3923048,6.88033872 22.3923048,8.30940108 L22.3923048,15.6905989 C22.3923048,17.1196613 21.6299092,18.4401694 20.3923048,19.1547005 L14,22.8452995 C12.7623957,23.5598306 11.2376043,23.5598306 10,22.8452995 L3.60769515,19.1547005 C2.37009085,18.4401694 1.60769515,17.1196613 1.60769515,15.6905989 L1.60769515,8.30940108 C1.60769515,6.88033872 2.37009085,5.55983064 3.60769515,4.84529946 L10,1.15470054 C11.2376043,0.440169359 12.7623957,0.440169359 14,1.15470054 Z\"\n          id=\"gantt-path-2\"\n        />\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"50%\" id=\"gantt-linearGradient-4\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"51.6276154%\" y2=\"68.3310347%\" id=\"gantt-linearGradient-5\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"70.5804357%\" id=\"gantt-linearGradient-6\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"71.0876747%\" id=\"gantt-linearGradient-7\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"60.3844779%\" id=\"gantt-linearGradient-8\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\" id=\"gantt-linearGradient-9\">\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" offset=\"100%\" />\n        </linearGradient>\n        <filter x=\"-25.0%\" y=\"-75.0%\" width=\"150.0%\" height=\"250.0%\" filterUnits=\"objectBoundingBox\" id=\"gantt-filter-10\">\n          <feGaussianBlur stdDeviation=\"1\" in=\"SourceGraphic\" />\n        </filter>\n        <linearGradient x1=\"-33.9878453%\" y1=\"3.1788779%\" x2=\"67.7654261%\" y2=\"81.2841156%\" id=\"gantt-linearGradient-11\">\n          <stop stop-color=\"#FF790E\" offset=\"0%\" />\n          <stop stop-color=\"#FECC55\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"71.1217155%\" y1=\"42.8128234%\" x2=\"17.9433277%\" y2=\"-14.3609467%\" id=\"gantt-linearGradient-12\">\n          <stop stop-color=\"#FFE88E\" offset=\"0%\" />\n          <stop stop-color=\"#FF790E\" offset=\"100%\" />\n        </linearGradient>\n      </defs>\n      <g id=\"gantt-page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"gantt-04fix\" transform=\"translate(-189.000000, -423.000000)\">\n          <g id=\"gantt-Group-2\" transform=\"translate(40.000000, 417.000000)\">\n            <g id=\"gant-group-4\" transform=\"translate(148.000000, 6.000000)\">\n              <mask id=\"gantt-mask-3\" fill=\"white\">\n                <use xlink:href=\"#gantt-path-2\" />\n              </mask>\n              <use id=\"gantt-men\" fill=\"url(#gantt-linearGradient-1)\" xlink:href=\"#gantt-path-2\" />\n              <polygon fill=\"url(#gantt-linearGradient-4)\" opacity=\"0.200000003\" mask=\"url(#gantt-mask-3)\" points=\"10 0 14 0 13 13 11 13\" />\n              <polygon\n                fill=\"url(#gantt-linearGradient-5)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(17.500000, 11.000000) rotate(-270.000000) translate(-17.500000, -11.000000) \"\n                points=\"14.5 4.5 18.5 4.5 20.5 17.5 19.5 17.5\"\n              />\n              <polygon\n                fill=\"url(#gantt-linearGradient-6)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(7.000000, 11.000000) scale(-1, 1) rotate(-270.000000) translate(-7.000000, -11.000000) \"\n                points=\"4 4.5 8 4.5 10 17.5 9 17.5\"\n              />\n              <polygon\n                fill=\"url(#gantt-linearGradient-7)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(8.110913, 8.110913) rotate(-45.000000) translate(-8.110913, -8.110913) \"\n                points=\"6.1109127 1.6109127 10.1109127 1.6109127 9.1109127 14.6109127 7.1109127 14.6109127\"\n              />\n              <polygon\n                fill=\"url(#gantt-linearGradient-8)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(15.889087, 8.110913) rotate(-315.000000) translate(-15.889087, -8.110913) \"\n                points=\"13.8890873 1.6109127 17.8890873 1.6109127 16.8890873 14.6109127 14.8890873 14.6109127\"\n              />\n              <ellipse\n                fill=\"url(#gantt-linearGradient-9)\"\n                opacity=\"0.5\"\n                filter=\"url(#filter-10)\"\n                mask=\"url(#gantt-mask-3)\"\n                cx=\"12\"\n                cy=\"17\"\n                rx=\"6\"\n                ry=\"2\"\n              />\n              <polygon fill=\"url(#gantt-linearGradient-11)\" mask=\"url(#gantt-mask-3)\" points=\"12 8 18 9 15 11 18 13 11 14\" />\n              <polygon fill=\"url(#gantt-linearGradient-12)\" mask=\"url(#gantt-mask-3)\" points=\"10 6 14 7 13 13 9 13\" />\n              <polygon fill=\"#FFE3A0\" mask=\"url(#gantt-mask-3)\" points=\"10 6 11 6 9 17 8 17\" />\n              <polygon fill=\"#B4832C\" mask=\"url(#gantt-mask-3)\" points=\"13 13 11 14 11.1707479 13\" />\n              <rect fill=\"#000000\" opacity=\"0.100000001\" mask=\"url(#gantt-mask-3)\" x=\"7\" y=\"17\" width=\"10\" height=\"1\" />\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  </span>\n  <span>{{ title }}</span>\n</div>\n", styles: [".devui-gantt-milestone{position:relative;height:24px;line-height:24px;display:inline-block}.devui-gantt-milestone span{display:inline-block;vertical-align:middle}.devui-gantt-milestone .icon{width:20px;height:24px;margin-right:4px}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttMilestoneComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-gantt-milestone', template: "<div class=\"devui-gantt-milestone\" [style.left]=\"left + 'px'\">\n  <span class=\"icon\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      width=\"22px\"\n      height=\"24px\"\n      viewBox=\"0 0 22 24\"\n      version=\"1.1\"\n    >\n      <defs>\n        <linearGradient x1=\"50%\" y1=\"6.72700158%\" x2=\"50%\" y2=\"91.2568893%\" id=\"gantt-linearGradient-1\">\n          <stop stop-color=\"#3DCCA6\" offset=\"0%\" />\n          <stop stop-color=\"#2AA7AF\" offset=\"100%\" />\n        </linearGradient>\n        <path\n          d=\"M14,1.15470054 L20.3923048,4.84529946 C21.6299092,5.55983064 22.3923048,6.88033872 22.3923048,8.30940108 L22.3923048,15.6905989 C22.3923048,17.1196613 21.6299092,18.4401694 20.3923048,19.1547005 L14,22.8452995 C12.7623957,23.5598306 11.2376043,23.5598306 10,22.8452995 L3.60769515,19.1547005 C2.37009085,18.4401694 1.60769515,17.1196613 1.60769515,15.6905989 L1.60769515,8.30940108 C1.60769515,6.88033872 2.37009085,5.55983064 3.60769515,4.84529946 L10,1.15470054 C11.2376043,0.440169359 12.7623957,0.440169359 14,1.15470054 Z\"\n          id=\"gantt-path-2\"\n        />\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"50%\" id=\"gantt-linearGradient-4\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"51.6276154%\" y2=\"68.3310347%\" id=\"gantt-linearGradient-5\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"70.5804357%\" id=\"gantt-linearGradient-6\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"71.0876747%\" id=\"gantt-linearGradient-7\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"60.3844779%\" id=\"gantt-linearGradient-8\">\n          <stop stop-color=\"#FFFFFF\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\" id=\"gantt-linearGradient-9\">\n          <stop stop-color=\"#FFFFFF\" stop-opacity=\"0\" offset=\"0%\" />\n          <stop stop-color=\"#FFFFFF\" offset=\"100%\" />\n        </linearGradient>\n        <filter x=\"-25.0%\" y=\"-75.0%\" width=\"150.0%\" height=\"250.0%\" filterUnits=\"objectBoundingBox\" id=\"gantt-filter-10\">\n          <feGaussianBlur stdDeviation=\"1\" in=\"SourceGraphic\" />\n        </filter>\n        <linearGradient x1=\"-33.9878453%\" y1=\"3.1788779%\" x2=\"67.7654261%\" y2=\"81.2841156%\" id=\"gantt-linearGradient-11\">\n          <stop stop-color=\"#FF790E\" offset=\"0%\" />\n          <stop stop-color=\"#FECC55\" offset=\"100%\" />\n        </linearGradient>\n        <linearGradient x1=\"71.1217155%\" y1=\"42.8128234%\" x2=\"17.9433277%\" y2=\"-14.3609467%\" id=\"gantt-linearGradient-12\">\n          <stop stop-color=\"#FFE88E\" offset=\"0%\" />\n          <stop stop-color=\"#FF790E\" offset=\"100%\" />\n        </linearGradient>\n      </defs>\n      <g id=\"gantt-page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"gantt-04fix\" transform=\"translate(-189.000000, -423.000000)\">\n          <g id=\"gantt-Group-2\" transform=\"translate(40.000000, 417.000000)\">\n            <g id=\"gant-group-4\" transform=\"translate(148.000000, 6.000000)\">\n              <mask id=\"gantt-mask-3\" fill=\"white\">\n                <use xlink:href=\"#gantt-path-2\" />\n              </mask>\n              <use id=\"gantt-men\" fill=\"url(#gantt-linearGradient-1)\" xlink:href=\"#gantt-path-2\" />\n              <polygon fill=\"url(#gantt-linearGradient-4)\" opacity=\"0.200000003\" mask=\"url(#gantt-mask-3)\" points=\"10 0 14 0 13 13 11 13\" />\n              <polygon\n                fill=\"url(#gantt-linearGradient-5)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(17.500000, 11.000000) rotate(-270.000000) translate(-17.500000, -11.000000) \"\n                points=\"14.5 4.5 18.5 4.5 20.5 17.5 19.5 17.5\"\n              />\n              <polygon\n                fill=\"url(#gantt-linearGradient-6)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(7.000000, 11.000000) scale(-1, 1) rotate(-270.000000) translate(-7.000000, -11.000000) \"\n                points=\"4 4.5 8 4.5 10 17.5 9 17.5\"\n              />\n              <polygon\n                fill=\"url(#gantt-linearGradient-7)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(8.110913, 8.110913) rotate(-45.000000) translate(-8.110913, -8.110913) \"\n                points=\"6.1109127 1.6109127 10.1109127 1.6109127 9.1109127 14.6109127 7.1109127 14.6109127\"\n              />\n              <polygon\n                fill=\"url(#gantt-linearGradient-8)\"\n                opacity=\"0.200000003\"\n                mask=\"url(#gantt-mask-3)\"\n                transform=\"translate(15.889087, 8.110913) rotate(-315.000000) translate(-15.889087, -8.110913) \"\n                points=\"13.8890873 1.6109127 17.8890873 1.6109127 16.8890873 14.6109127 14.8890873 14.6109127\"\n              />\n              <ellipse\n                fill=\"url(#gantt-linearGradient-9)\"\n                opacity=\"0.5\"\n                filter=\"url(#filter-10)\"\n                mask=\"url(#gantt-mask-3)\"\n                cx=\"12\"\n                cy=\"17\"\n                rx=\"6\"\n                ry=\"2\"\n              />\n              <polygon fill=\"url(#gantt-linearGradient-11)\" mask=\"url(#gantt-mask-3)\" points=\"12 8 18 9 15 11 18 13 11 14\" />\n              <polygon fill=\"url(#gantt-linearGradient-12)\" mask=\"url(#gantt-mask-3)\" points=\"10 6 14 7 13 13 9 13\" />\n              <polygon fill=\"#FFE3A0\" mask=\"url(#gantt-mask-3)\" points=\"10 6 11 6 9 17 8 17\" />\n              <polygon fill=\"#B4832C\" mask=\"url(#gantt-mask-3)\" points=\"13 13 11 14 11.1707479 13\" />\n              <rect fill=\"#000000\" opacity=\"0.100000001\" mask=\"url(#gantt-mask-3)\" x=\"7\" y=\"17\" width=\"10\" height=\"1\" />\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  </span>\n  <span>{{ title }}</span>\n</div>\n", styles: [".devui-gantt-milestone{position:relative;height:24px;line-height:24px;display:inline-block}.devui-gantt-milestone span{display:inline-block;vertical-align:middle}.devui-gantt-milestone .icon{width:20px;height:24px;margin-right:4px}\n"] }]
        }], ctorParameters: function () { return [{ type: GanttService }]; }, propDecorators: { startDate: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }] } });

class GanttScaleComponent {
    constructor(ganttService, i18n) {
        this.ganttService = ganttService;
        this.i18n = i18n;
        this.viewScaleRange = [0, 0];
        this.viewSCaleData = [];
        this.SCALE_START_LABLE_OFFSET = 7;
        this.scaleWidth = {
            day: 40,
            week: 30,
            month: 20,
        };
        this.unit = GanttScaleUnit.day;
        this.addMilestoneEvent = new EventEmitter();
    }
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().gantt;
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.gantt;
            this.i18nCommonText = data.common;
            this.i18nLocale = data.locale;
        });
        this.ganttBarStatusHandler = this.ganttService.ganttBarStatusChange.subscribe((status) => {
            this.ganttBarStatusChange(status);
        });
        this.ganttSacleConfigHandler = this.ganttService.ganttScaleConfigChange.subscribe((config) => {
            if (config.startDate) {
                this.startDate = config.startDate;
            }
            if (config.endDate) {
                this.endDate = config.endDate;
            }
            if (config.startDate || config.endDate) {
                this.scaleData = this.generateScaleData(this.startDate, this.endDate);
                this.getViewScaleData();
            }
            if (config.unit) {
                this.unit = config.unit;
                this.getViewScaleData();
            }
            if (config.viewChange) {
                this.getViewScaleData();
            }
        });
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'scrollElement')) {
            this.registerScrollEvent();
        }
    }
    registerScrollEvent() {
        if (!this.scrollHandler && this.scrollElement) {
            this.scrollHandler = fromEvent(this.scrollElement, 'scroll').subscribe(e => {
                this.getViewScaleData();
            });
        }
    }
    getViewScaleData() {
        if (this.scrollElement) {
            const containerWidth = this.scrollElement.clientWidth;
            const scrollLeft = this.scrollElement.scrollLeft;
            const start = Math.floor(scrollLeft / this.scaleWidth[this.unit]);
            const offset = Math.ceil(containerWidth / this.scaleWidth[this.unit]);
            this.viewScaleRange = [start - 2, start + offset + 2];
            this.viewSCaleData = this.scaleData.filter((i) => {
                return i.index >= this.viewScaleRange[0] && i.index <= this.viewScaleRange[1];
            });
        }
    }
    generateScaleData(startDate, endDate) {
        if (startDate && endDate) {
            const scaleData = [];
            let handleDate = startDate;
            let index = 0;
            while (!this.ganttService.isSomeDate(handleDate, endDate)) {
                const dateInfo = this.generateDateInfo(handleDate, index);
                scaleData.push(dateInfo);
                handleDate = this.getNextDay(new Date(handleDate));
                index++;
            }
            return scaleData;
        }
    }
    getNextDay(date) {
        const nextDayDate = date.setDate(date.getDate() + 1);
        return new Date(nextDayDate);
    }
    generateDateInfo(date, index) {
        const dateInfo = {
            dayOfMonthLabel: '',
            dayOfWeekLabel: '',
            monthLabel: '',
            yearLabel: '',
            date: date,
            monthStart: false,
            weekend: false,
            today: false,
            milestone: '',
            highlightStart: false,
            scaleStartVisable: true,
            index
        };
        const dayOfMonth = date.getDate();
        dateInfo.dayOfMonthLabel = String(dayOfMonth);
        if (dayOfMonth === 1) {
            dateInfo.monthStart = true;
        }
        const dayOfWeek = date.getDay();
        dateInfo.dayOfWeekLabel = String(dayOfWeek);
        if (dayOfWeek === 6) {
            dateInfo.weekend = true;
        }
        const month = date.getMonth() + 1;
        dateInfo.monthLabel = String(month);
        const year = date.getFullYear();
        dateInfo.yearLabel = String(year);
        if (this.ganttService.isSomeDate(date, new Date())) {
            dateInfo.today = true;
        }
        if (new Date(year, month - 1, dayOfMonth + this.SCALE_START_LABLE_OFFSET).getMonth() > month - 1) {
            dateInfo.scaleStartVisable = false;
        }
        if (this.milestoneList) {
            this.milestoneList.forEach((milestone) => {
                if (milestone.date) {
                    if (this.ganttService.isSomeDate(milestone.date, dateInfo.date)) {
                        dateInfo.milestone = milestone.lable;
                    }
                }
            });
        }
        return dateInfo;
    }
    trackByFn(index, item) {
        return index;
    }
    ganttBarStatusChange(status) {
        this.highlight = status.focused;
        if (this.highlight) {
            this.scaleData.forEach((dateInfo, index) => {
                if (dateInfo.date >= status.startDate && dateInfo.date <= status.endDate) {
                    dateInfo.highlight = true;
                }
                else {
                    dateInfo.highlight = false;
                }
                dateInfo.highlightStart = false;
            });
            const highlightBarStartIndex = this.scaleData.findIndex((data) => {
                return data.highlight;
            });
            if (highlightBarStartIndex > -1) {
                this.scaleData[highlightBarStartIndex].highlightStart = true;
            }
            const highlightData = this.scaleData.filter((data) => {
                return data.highlight;
            });
            if (highlightData.length === 0) {
                return;
            }
            if (highlightData.length === 1) {
                const startData = highlightData[0];
                this.highlightStartText =
                    this.prefixZero(parseInt(startData.monthLabel, 10)) + '-' + this.prefixZero(parseInt(startData.dayOfMonthLabel, 10));
                const highlightWidth = this.ganttService.getScaleUnitPixel();
                if (highlightWidth < 40) {
                    this.highlightMinWidth = 40;
                }
                else {
                    this.highlightMinWidth = highlightWidth;
                }
            }
            else {
                const startData = highlightData[0];
                const endData = highlightData[highlightData.length - 1];
                this.highlightStartText =
                    this.prefixZero(parseInt(startData.monthLabel, 10)) + '-' + this.prefixZero(parseInt(startData.dayOfMonthLabel, 10));
                this.highlightEndText =
                    this.prefixZero(parseInt(endData.monthLabel, 10)) + '-' + this.prefixZero(parseInt(endData.dayOfMonthLabel, 10));
                const highlightWidth = highlightData.length * this.ganttService.getScaleUnitPixel();
                if (highlightWidth < 80) {
                    this.highlightMinWidth = 80;
                }
                else {
                    this.highlightMinWidth = highlightWidth;
                }
            }
        }
    }
    prefixZero(num) {
        return (Array(2).join('0') + num).slice(-2);
    }
    addMilestone(info) {
        this.addMilestoneEvent.emit(info);
    }
    ngOnDestroy() {
        if (this.ganttBarStatusHandler) {
            this.ganttBarStatusHandler.unsubscribe();
            this.ganttBarStatusHandler = null;
        }
        if (this.ganttSacleConfigHandler) {
            this.ganttSacleConfigHandler.unsubscribe();
            this.ganttSacleConfigHandler = null;
        }
        if (this.scrollHandler) {
            this.scrollHandler.unsubscribe();
        }
    }
}
GanttScaleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttScaleComponent, deps: [{ token: GanttService }, { token: i2$1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
GanttScaleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: GanttScaleComponent, selector: "d-gantt-scale", inputs: { unit: "unit", height: "height", startDate: "startDate", endDate: "endDate", ganttBarContainerElement: "ganttBarContainerElement", ganttScaleContainerOffsetLeft: "ganttScaleContainerOffsetLeft", milestoneList: "milestoneList", scrollElement: "scrollElement" }, outputs: { addMilestoneEvent: "addMilestoneEvent" }, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"devui-gantt-scale {{ unit }}\"\n  *ngFor=\"let data of viewSCaleData; trackBy: trackByFn; let first = first; let last = last\"\n  [ngClass]=\"{ today: data.today, milestone: data.milestone }\"\n  [style.left]=\"scaleWidth[unit] * data.index + 'px'\"\n  [style.width]=\"scaleWidth[unit] + 'px'\"\n  dGanttMarker\n  [monthMark]=\"data.monthStart\"\n  [weekend]=\"data.weekend\"\n  [milestone]=\"data.milestone\"\n  [today]=\"data.today\"\n  [date]=\"data.date\"\n  [unit]=\"unit\"\n  [last]=\"last\"\n  [ganttScaleContainerOffsetLeft]=\"ganttScaleContainerOffsetLeft\"\n  [ganttBarContainerElement]=\"ganttBarContainerElement\"\n>\n  <div class=\"devui-scale-start\" [ngClass]=\"{ milestone: data.milestone }\">\n    <ng-container *ngIf=\"data.milestone && unit === 'day'\">\n      {{ data.milestone }}\n    </ng-container>\n    <ng-container *ngIf=\"!data.milestone || unit !== 'day'\">\n      {{\n        data.scaleStartVisable && (first || data.monthStart)\n          ? unit === 'month'\n            ? i18nText?.yearDisplay(data.yearLabel)\n            : i18nText?.yearAndMonthDisplay(data.yearLabel, data.monthLabel)\n          : ''\n      }}\n    </ng-container>\n  </div>\n  <div class=\"devui-scale-unit\">\n    <div *ngIf=\"highlight && data.highlightStart\" class=\"scale-highlight\" [style.minWidth]=\"highlightMinWidth + 'px'\">\n      <div style=\"float: left\">{{ highlightStartText }}</div>\n      <div style=\"float: right\">{{ highlightEndText }}</div>\n      <div style=\"clear: both\"></div>\n    </div>\n    <ng-container *ngIf=\"!highlight || !data.highlight\">\n      <div *ngIf=\"unit === 'day'\" class=\"border-left\" [ngClass]=\"{ today: data.today }\">\n        {{ data.today ? i18nText?.today : data.dayOfMonthLabel }}\n      </div>\n      <div *ngIf=\"unit === 'week'\" [ngClass]=\"{ 'border-left': first || data.weekend }\">\n        {{ first || data.weekend ? data.dayOfMonthLabel : '' }}\n      </div>\n      <div *ngIf=\"unit === 'month'\" [ngClass]=\"{ 'border-left': first || data.monthStart }\">\n        {{ first || data.monthStart ? i18nText?.monthDisplay(data.monthLabel) : '' }}\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"milestone-new {{ unit }}\" [title]=\"i18nText?.milestone\" (click)=\"addMilestone(data)\">\n    <div class=\"icon-add\"></div>\n  </div>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host{display:block;height:36px;line-height:18px}.devui-gantt-scale{display:inline-block;color:#babbc0;color:var(--devui-placeholder, #babbc0);text-align:center;position:absolute;height:36px;font-weight:400}.devui-gantt-scale.day:not(.milestone):hover .devui-scale-start{display:none}.devui-gantt-scale.day.milestone{background-image:linear-gradient(180deg,rgba(254,204,85,0) 0%,rgba(62,204,166,.1) 100%)}.devui-gantt-scale .devui-scale-start{width:100%;height:18px;position:absolute;left:1px;white-space:nowrap}.devui-gantt-scale .devui-scale-start.milestone{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-gantt-scale .devui-scale-unit{height:18px;position:absolute;top:18px;width:100%}.devui-gantt-scale .devui-scale-unit .border-left{height:18px;border-left:1px solid #f2f5fc;border-left:1px solid var(--devui-list-item-selected-bg, #f2f5fc)}.devui-gantt-scale .devui-scale-unit .scale-highlight{position:absolute;height:18px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);background-color:#5e7ce0;background-color:var(--devui-brand, #5e7ce0);padding:0 4px}.devui-gantt-scale .devui-scale-unit .scale-highlight div{color:#fff;color:var(--devui-base-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400}.devui-gantt-scale .devui-scale-unit .today{background:rgba(255,121,14,.2);border-radius:2px;border-radius:var(--devui-border-radius, 2px);height:16px}.devui-gantt-scale .milestone-new{display:none;position:absolute;width:18px;height:18px;margin-left:16px;border:1px solid #f2f5fc;border:1px solid var(--devui-list-item-selected-bg, #f2f5fc);cursor:pointer}.devui-gantt-scale .milestone-new div{line-height:16px}.devui-gantt-scale:not(.milestone):hover .milestone-new.day{display:block}.devui-mark-line{position:absolute;top:0;bottom:0;width:2px;z-index:1;background:#d7d8da;background:var(--devui-line, #d7d8da);opacity:.5}.devui-mark-line.today{opacity:.2;background:#ff790e}.devui-mark-line.today.day{margin-left:24px}.devui-mark-line.today.week{margin-left:9px}.devui-mark-line.today.month{margin-left:4px}.devui-mark-line.milestone{opacity:.2;background:#50d4ab;background:var(--devui-success, #50d4ab)}.devui-mark-line.milestone.day{margin-left:24px}.devui-mark-line.milestone.week{margin-left:9px}.devui-mark-line.milestone.month{margin-left:4px}.devui-mark-stripe{position:absolute;top:0;bottom:0;z-index:1;background:linear-gradient(45deg,rgba(202,207,216,.2) 0,rgba(202,207,216,.2) 10%,transparent 10%,transparent 50%,rgba(202,207,216,.2) 50%,rgba(202,207,216,.2) 60%,transparent 60%,transparent);background-size:6px 6px}.devui-mark-stripe.day{width:100px}.devui-mark-stripe.week{width:40px}.devui-mark-stripe.month{width:20px}\n"], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: GanttMarkerDirective, selector: "[dGanttMarker]", inputs: ["ganttBarContainerElement", "ganttScaleContainerOffsetLeft", "monthMark", "weekend", "today", "milestone", "unit", "date", "last"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttScaleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-gantt-scale', template: "<div\n  class=\"devui-gantt-scale {{ unit }}\"\n  *ngFor=\"let data of viewSCaleData; trackBy: trackByFn; let first = first; let last = last\"\n  [ngClass]=\"{ today: data.today, milestone: data.milestone }\"\n  [style.left]=\"scaleWidth[unit] * data.index + 'px'\"\n  [style.width]=\"scaleWidth[unit] + 'px'\"\n  dGanttMarker\n  [monthMark]=\"data.monthStart\"\n  [weekend]=\"data.weekend\"\n  [milestone]=\"data.milestone\"\n  [today]=\"data.today\"\n  [date]=\"data.date\"\n  [unit]=\"unit\"\n  [last]=\"last\"\n  [ganttScaleContainerOffsetLeft]=\"ganttScaleContainerOffsetLeft\"\n  [ganttBarContainerElement]=\"ganttBarContainerElement\"\n>\n  <div class=\"devui-scale-start\" [ngClass]=\"{ milestone: data.milestone }\">\n    <ng-container *ngIf=\"data.milestone && unit === 'day'\">\n      {{ data.milestone }}\n    </ng-container>\n    <ng-container *ngIf=\"!data.milestone || unit !== 'day'\">\n      {{\n        data.scaleStartVisable && (first || data.monthStart)\n          ? unit === 'month'\n            ? i18nText?.yearDisplay(data.yearLabel)\n            : i18nText?.yearAndMonthDisplay(data.yearLabel, data.monthLabel)\n          : ''\n      }}\n    </ng-container>\n  </div>\n  <div class=\"devui-scale-unit\">\n    <div *ngIf=\"highlight && data.highlightStart\" class=\"scale-highlight\" [style.minWidth]=\"highlightMinWidth + 'px'\">\n      <div style=\"float: left\">{{ highlightStartText }}</div>\n      <div style=\"float: right\">{{ highlightEndText }}</div>\n      <div style=\"clear: both\"></div>\n    </div>\n    <ng-container *ngIf=\"!highlight || !data.highlight\">\n      <div *ngIf=\"unit === 'day'\" class=\"border-left\" [ngClass]=\"{ today: data.today }\">\n        {{ data.today ? i18nText?.today : data.dayOfMonthLabel }}\n      </div>\n      <div *ngIf=\"unit === 'week'\" [ngClass]=\"{ 'border-left': first || data.weekend }\">\n        {{ first || data.weekend ? data.dayOfMonthLabel : '' }}\n      </div>\n      <div *ngIf=\"unit === 'month'\" [ngClass]=\"{ 'border-left': first || data.monthStart }\">\n        {{ first || data.monthStart ? i18nText?.monthDisplay(data.monthLabel) : '' }}\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"milestone-new {{ unit }}\" [title]=\"i18nText?.milestone\" (click)=\"addMilestone(data)\">\n    <div class=\"icon-add\"></div>\n  </div>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}:host{display:block;height:36px;line-height:18px}.devui-gantt-scale{display:inline-block;color:#babbc0;color:var(--devui-placeholder, #babbc0);text-align:center;position:absolute;height:36px;font-weight:400}.devui-gantt-scale.day:not(.milestone):hover .devui-scale-start{display:none}.devui-gantt-scale.day.milestone{background-image:linear-gradient(180deg,rgba(254,204,85,0) 0%,rgba(62,204,166,.1) 100%)}.devui-gantt-scale .devui-scale-start{width:100%;height:18px;position:absolute;left:1px;white-space:nowrap}.devui-gantt-scale .devui-scale-start.milestone{color:#50d4ab;color:var(--devui-success, #50d4ab)}.devui-gantt-scale .devui-scale-unit{height:18px;position:absolute;top:18px;width:100%}.devui-gantt-scale .devui-scale-unit .border-left{height:18px;border-left:1px solid #f2f5fc;border-left:1px solid var(--devui-list-item-selected-bg, #f2f5fc)}.devui-gantt-scale .devui-scale-unit .scale-highlight{position:absolute;height:18px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);background-color:#5e7ce0;background-color:var(--devui-brand, #5e7ce0);padding:0 4px}.devui-gantt-scale .devui-scale-unit .scale-highlight div{color:#fff;color:var(--devui-base-bg, #ffffff);font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400}.devui-gantt-scale .devui-scale-unit .today{background:rgba(255,121,14,.2);border-radius:2px;border-radius:var(--devui-border-radius, 2px);height:16px}.devui-gantt-scale .milestone-new{display:none;position:absolute;width:18px;height:18px;margin-left:16px;border:1px solid #f2f5fc;border:1px solid var(--devui-list-item-selected-bg, #f2f5fc);cursor:pointer}.devui-gantt-scale .milestone-new div{line-height:16px}.devui-gantt-scale:not(.milestone):hover .milestone-new.day{display:block}.devui-mark-line{position:absolute;top:0;bottom:0;width:2px;z-index:1;background:#d7d8da;background:var(--devui-line, #d7d8da);opacity:.5}.devui-mark-line.today{opacity:.2;background:#ff790e}.devui-mark-line.today.day{margin-left:24px}.devui-mark-line.today.week{margin-left:9px}.devui-mark-line.today.month{margin-left:4px}.devui-mark-line.milestone{opacity:.2;background:#50d4ab;background:var(--devui-success, #50d4ab)}.devui-mark-line.milestone.day{margin-left:24px}.devui-mark-line.milestone.week{margin-left:9px}.devui-mark-line.milestone.month{margin-left:4px}.devui-mark-stripe{position:absolute;top:0;bottom:0;z-index:1;background:linear-gradient(45deg,rgba(202,207,216,.2) 0,rgba(202,207,216,.2) 10%,transparent 10%,transparent 50%,rgba(202,207,216,.2) 50%,rgba(202,207,216,.2) 60%,transparent 60%,transparent);background-size:6px 6px}.devui-mark-stripe.day{width:100px}.devui-mark-stripe.week{width:40px}.devui-mark-stripe.month{width:20px}\n"] }]
        }], ctorParameters: function () { return [{ type: GanttService }, { type: i2$1.I18nService }]; }, propDecorators: { unit: [{
                type: Input
            }], height: [{
                type: Input
            }], startDate: [{
                type: Input
            }], endDate: [{
                type: Input
            }], ganttBarContainerElement: [{
                type: Input
            }], ganttScaleContainerOffsetLeft: [{
                type: Input
            }], milestoneList: [{
                type: Input
            }], scrollElement: [{
                type: Input
            }], addMilestoneEvent: [{
                type: Output
            }] } });

class GanttToolsComponent {
    constructor(i18n) {
        this.i18n = i18n;
        this.isFullScreen = false;
        this.goToday = new EventEmitter();
        this.reduceUnit = new EventEmitter();
        this.increaseUnit = new EventEmitter();
        this.switchView = new EventEmitter();
        this.unitRole = UnitRole;
        this._currentUnit = '';
        this.views = [
            {
                label: 'Day',
                value: 'day'
            },
            {
                label: 'Week',
                value: 'week'
            },
            {
                label: 'Month',
                value: 'month'
            }
        ];
    }
    set currentUnit(val) {
        this._currentUnit = val;
        const data = this.views.filter(i => i.value === val);
    }
    get currentUnit() {
        return this._currentUnit;
    }
    get currentUnitLabel() {
        return this._currentLabel || (this.views.length > 0 ? this.views[0].label : '');
    }
    ;
    ngOnInit() {
        this.i18nText = this.i18n.getI18nText().gantt;
        this.i18nLocale = this.i18n.getI18nText().locale;
        this.i18nSubscription = this.i18n.langChange().subscribe((data) => {
            this.i18nText = data.gantt;
            this.i18nLocale = data.locale;
            this.views = [
                {
                    label: this.i18nText?.day,
                    value: 'day'
                },
                {
                    label: this.i18nText?.week,
                    value: 'week'
                },
                {
                    label: this.i18nText?.month,
                    value: 'month'
                }
            ];
        });
    }
    avtionHandle(type) {
        switch (type) {
            case 'today':
                this.goToday.emit();
                break;
            case 'reduce':
                this.reduceUnit.emit();
                break;
            case 'increase':
                this.increaseUnit.emit();
                break;
        }
    }
    selectView(menu) {
        this._currentLabel = menu.label;
        this.switchView.emit(menu.value);
    }
}
GanttToolsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttToolsComponent, deps: [{ token: i2$1.I18nService }], target: i0.ɵɵFactoryTarget.Component });
GanttToolsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: GanttToolsComponent, selector: "d-gantt-tools", inputs: { currentUnit: "currentUnit", isFullScreen: "isFullScreen" }, outputs: { goToday: "goToday", reduceUnit: "reduceUnit", increaseUnit: "increaseUnit", switchView: "switchView" }, ngImport: i0, template: "<div class=\"tools-container\" [style.position]=\"isFullScreen ? 'fixed' : 'absolute'\">\n  <d-button bsStyle=\"text\" (click)=\"avtionHandle('today')\" class=\"tool\">{{ i18nText.today }}</d-button>\n  <div class=\"tool\">\n    <span dDropDown [trigger]=\"'click'\" appendToBody class=\"switch-view\">\n      <span dDropDownToggle class=\"devui-dropdown-origin\">{{ currentUnitLabel }} <span class=\"icon-chevron-down\"></span></span>\n      <ul dDropDownMenu class=\"devui-dropdown-menu devui-scrollbar\" role=\"menu\">\n        <li role=\"menuItem\" *ngFor=\"let menu of views\" (click)=\"selectView(menu)\">\n          <a class=\"devui-dropdown-item\">{{ menu.label }}</a>\n        </li>\n      </ul>\n    </span>\n  </div>\n  <d-button\n    bsStyle=\"text\"\n    (click)=\"avtionHandle('reduce')\"\n    class=\"tool\"\n    [ngClass]=\"{ disabled: unitRole[this.currentUnit] === unitRole.day }\"\n    [disabled]=\"unitRole[this.currentUnit] === unitRole.day\"\n  >\n    <i class=\"icon icon-minus\"></i>\n  </d-button>\n  <d-button\n    bsStyle=\"text\"\n    (click)=\"avtionHandle('increase')\"\n    class=\"tool\"\n    [ngClass]=\"{ disabled: unitRole[this.currentUnit] === unitRole.month }\"\n    [disabled]=\"unitRole[this.currentUnit] === unitRole.month\"\n  >\n    <i class=\"icon icon-add\"></i>\n  </d-button>\n  <ng-content></ng-content>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.tools-container{position:absolute;top:70px;right:20px;z-index:10}.tool{display:inline-flex;align-items:center;justify-content:center;height:32px;margin-left:12px;background-color:#fff;background-color:var(--devui-base-bg, #ffffff);box-shadow:0 1px 4px rgba(81,112,255,.4);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) rgba(81,112,255,.4);cursor:pointer}.tool.disabled{opacity:.5}.tool span{border:0!important}.tool .switch-view{padding:0 8px}.tool .switch-view:hover{color:#526ecc!important;color:var(--devui-link, #526ecc)!important}.devui-dropdown-menu{top:10px!important;left:-6px!important}:host ::ng-deep .devui-dropdown-origin{border:0}:host ::ng-deep .devui-dropdown-origin:hover{color:#526ecc!important;color:var(--devui-link, #526ecc)!important}:host ::ng-deep .devui-btn{height:32px!important;color:#252b3a!important;color:var(--devui-text, #252b3a)!important;padding:0 8px!important}:host ::ng-deep .devui-btn:hover{color:#526ecc!important;color:var(--devui-link, #526ecc)!important}\n"], components: [{ type: i2$2.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }, { type: i3$2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }], directives: [{ type: i3$2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i3$2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i3$2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttToolsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-gantt-tools', template: "<div class=\"tools-container\" [style.position]=\"isFullScreen ? 'fixed' : 'absolute'\">\n  <d-button bsStyle=\"text\" (click)=\"avtionHandle('today')\" class=\"tool\">{{ i18nText.today }}</d-button>\n  <div class=\"tool\">\n    <span dDropDown [trigger]=\"'click'\" appendToBody class=\"switch-view\">\n      <span dDropDownToggle class=\"devui-dropdown-origin\">{{ currentUnitLabel }} <span class=\"icon-chevron-down\"></span></span>\n      <ul dDropDownMenu class=\"devui-dropdown-menu devui-scrollbar\" role=\"menu\">\n        <li role=\"menuItem\" *ngFor=\"let menu of views\" (click)=\"selectView(menu)\">\n          <a class=\"devui-dropdown-item\">{{ menu.label }}</a>\n        </li>\n      </ul>\n    </span>\n  </div>\n  <d-button\n    bsStyle=\"text\"\n    (click)=\"avtionHandle('reduce')\"\n    class=\"tool\"\n    [ngClass]=\"{ disabled: unitRole[this.currentUnit] === unitRole.day }\"\n    [disabled]=\"unitRole[this.currentUnit] === unitRole.day\"\n  >\n    <i class=\"icon icon-minus\"></i>\n  </d-button>\n  <d-button\n    bsStyle=\"text\"\n    (click)=\"avtionHandle('increase')\"\n    class=\"tool\"\n    [ngClass]=\"{ disabled: unitRole[this.currentUnit] === unitRole.month }\"\n    [disabled]=\"unitRole[this.currentUnit] === unitRole.month\"\n  >\n    <i class=\"icon icon-add\"></i>\n  </d-button>\n  <ng-content></ng-content>\n</div>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.tools-container{position:absolute;top:70px;right:20px;z-index:10}.tool{display:inline-flex;align-items:center;justify-content:center;height:32px;margin-left:12px;background-color:#fff;background-color:var(--devui-base-bg, #ffffff);box-shadow:0 1px 4px rgba(81,112,255,.4);box-shadow:var(--devui-shadow-length-base, 0 1px 4px 0) rgba(81,112,255,.4);cursor:pointer}.tool.disabled{opacity:.5}.tool span{border:0!important}.tool .switch-view{padding:0 8px}.tool .switch-view:hover{color:#526ecc!important;color:var(--devui-link, #526ecc)!important}.devui-dropdown-menu{top:10px!important;left:-6px!important}:host ::ng-deep .devui-dropdown-origin{border:0}:host ::ng-deep .devui-dropdown-origin:hover{color:#526ecc!important;color:var(--devui-link, #526ecc)!important}:host ::ng-deep .devui-btn{height:32px!important;color:#252b3a!important;color:var(--devui-text, #252b3a)!important;padding:0 8px!important}:host ::ng-deep .devui-btn:hover{color:#526ecc!important;color:var(--devui-link, #526ecc)!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i2$1.I18nService }]; }, propDecorators: { currentUnit: [{
                type: Input,
                args: ['currentUnit']
            }], isFullScreen: [{
                type: Input
            }], goToday: [{
                type: Output
            }], reduceUnit: [{
                type: Output
            }], increaseUnit: [{
                type: Output
            }], switchView: [{
                type: Output
            }] } });

class ResizeHandleDirective {
    constructor(element, renderer2, zone, doc) {
        this.renderer2 = renderer2;
        this.zone = zone;
        this.doc = doc;
        this.resizeStartEvent = new EventEmitter();
        this.resizingEvent = new EventEmitter();
        this.resizeEndEvent = new EventEmitter();
        this.collapseEvent = new EventEmitter();
        this.preventRemoveHandle = false;
        this.bindMousemove = (e) => {
            this.move(e);
        };
        this.element = element.nativeElement;
        this.document = this.doc;
    }
    onMouseEnter(event) {
        if (!this.resizeHandle) {
            this.resizeHandle = this.renderer2.createElement('div');
            this.renderer2.appendChild(this.containerElement, this.resizeHandle);
            this.renderer2.addClass(this.resizeHandle, 'resize-handle');
            const left = this.element.getBoundingClientRect().right - this.containerElement.getBoundingClientRect().left;
            this.renderer2.setStyle(this.resizeHandle, 'left', left + 'px');
            this.resizeHandleEnter = this.renderer2.listen(this.resizeHandle, 'mouseenter', this.onHandleMouseEnter.bind(this));
            this.resizeHandleLeave = this.renderer2.listen(this.resizeHandle, 'mouseleave', this.onHandleMouseLeave.bind(this));
            this.resizeHandleClick = this.renderer2.listen(this.resizeHandle, 'mousedown', this.onMousedown.bind(this));
        }
    }
    onMouseLeave(event) {
        setTimeout(() => {
            if (!this.preventRemoveHandle) {
                if (this.resizeHandle) {
                    this.renderer2.removeChild(this.containerElement, this.resizeHandle);
                    this.resizeHandle = null;
                }
                if (this.resizeHandleClick) {
                    this.resizeHandleClick();
                }
            }
        }, 100);
    }
    onHandleMouseEnter() {
        this.preventRemoveHandle = true;
    }
    onHandleMouseLeave() {
        this.preventRemoveHandle = false;
        if (this.resizeHandle) {
            this.renderer2.removeChild(this.containerElement, this.resizeHandle);
            this.resizeHandle = null;
        }
        if (this.resizeHandleClick) {
            this.resizeHandleClick();
        }
    }
    onMousedown(event) {
        this.moveCount = 0;
        this.resizeStartEvent.emit(event); // emit begin resize event
        this.initialWidth = this.element.clientWidth;
        const initialOffset = this.element.getBoundingClientRect().left - this.containerElement.getBoundingClientRect().left;
        this.mouseDownScreenX = event.clientX;
        event.stopPropagation();
        // create resizeOverlay
        this.resizeOverlay = this.renderer2.createElement('div');
        this.renderer2.appendChild(this.containerElement, this.resizeOverlay);
        this.renderer2.addClass(this.resizeOverlay, 'resize-overlay');
        this.renderer2.listen(this.resizeOverlay, 'click', (clickEvent) => clickEvent.stopPropagation());
        const resizeBar = this.renderer2.createElement('div');
        this.renderer2.addClass(resizeBar, 'resize-bar');
        this.resizeBarRefElement = resizeBar;
        this.renderer2.appendChild(this.containerElement, resizeBar);
        this.renderer2.setStyle(this.resizeBarRefElement, 'display', 'block');
        this.renderer2.setStyle(this.resizeBarRefElement, 'left', initialOffset + this.initialWidth + 'px');
        const mouseup = fromEvent(document, 'mouseup');
        this.mouseUpSubscription = mouseup.subscribe((ev) => this.onMouseup(ev));
        this.zone.runOutsideAngular(() => {
            this.document.addEventListener('mousemove', this.bindMousemove);
        });
    }
    onMouseup(event) {
        const movementX = event.clientX - this.mouseDownScreenX;
        const newWidth = this.initialWidth + movementX;
        const finalWidth = this.getFinalWidth(newWidth);
        // destroy overlay
        this.renderer2.removeChild(this.element, this.resizeOverlay);
        this.renderer2.removeChild(this.containerElement, this.resizeBarRefElement);
        this.resizeEndEvent.emit({ width: finalWidth });
        if (this.mouseUpSubscription && !this.mouseUpSubscription.closed) {
            this._destroySubscription();
        }
        this.document.removeEventListener('mousemove', this.bindMousemove);
    }
    move(event) {
        this.moveCount++;
        if (this.moveCount % 2 === 0) {
            return;
        }
        const movementX = event.clientX - this.mouseDownScreenX;
        const newWidth = this.initialWidth + movementX;
        const finalWidth = this.getFinalWidth(newWidth);
        this.renderer2.setStyle(this.resizeBarRefElement, 'left', `${finalWidth + this.element.getBoundingClientRect().left - this.containerElement.getBoundingClientRect().left}px`);
        this.resizingEvent.emit({ width: finalWidth });
    }
    getFinalWidth(newWidth) {
        const minWidth = this.handleWidth(this.minWidth);
        const maxWidth = this.handleWidth(this.maxWidth);
        const overMinWidth = !this.minWidth || newWidth >= minWidth;
        const underMaxWidth = !this.maxWidth || newWidth <= maxWidth;
        const finalWidth = !overMinWidth ? minWidth : !underMaxWidth ? maxWidth : newWidth;
        return finalWidth;
    }
    handleWidth(width) {
        if (!width) {
            return;
        }
        if (typeof width === 'number') {
            return width;
        }
        if (width.includes('%')) {
            const tableWidth = this.containerElement.clientWidth;
            return (tableWidth * parseInt(width, 10)) / 100;
        }
        return parseInt(width.replace(/[^\d]+/, ''), 10);
    }
    _destroySubscription() {
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
            this.mouseUpSubscription = undefined;
        }
    }
}
ResizeHandleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResizeHandleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
ResizeHandleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ResizeHandleDirective, selector: "[dResizeHandle]", inputs: { containerElement: "containerElement", minWidth: "minWidth", maxWidth: "maxWidth" }, outputs: { resizeStartEvent: "resizeStartEvent", resizingEvent: "resizingEvent", resizeEndEvent: "resizeEndEvent", collapseEvent: "collapseEvent" }, host: { listeners: { "mouseenter": "onMouseEnter($event)", "mouseleave": "onMouseLeave($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ResizeHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dResizeHandle]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { containerElement: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], resizeStartEvent: [{
                type: Output
            }], resizingEvent: [{
                type: Output
            }], resizeEndEvent: [{
                type: Output
            }], collapseEvent: [{
                type: Output
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave', ['$event']]
            }] } });

class GanttModule {
}
GanttModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
GanttModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttModule, declarations: [GanttScaleComponent,
        GanttBarComponent,
        GanttMarkerDirective,
        GanttMilestoneComponent,
        GanttBarParentComponent,
        ResizeHandleDirective,
        GanttToolsComponent], imports: [CommonModule,
        OverlayModule,
        PopoverModule,
        TooltipModule,
        ButtonModule,
        DropDownModule], exports: [GanttScaleComponent,
        GanttBarComponent,
        GanttMilestoneComponent,
        GanttBarParentComponent,
        ResizeHandleDirective,
        GanttToolsComponent] });
GanttModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttModule, providers: [GanttService], imports: [[
            CommonModule,
            OverlayModule,
            PopoverModule,
            TooltipModule,
            ButtonModule,
            DropDownModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GanttModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        GanttScaleComponent,
                        GanttBarComponent,
                        GanttMarkerDirective,
                        GanttMilestoneComponent,
                        GanttBarParentComponent,
                        ResizeHandleDirective,
                        GanttToolsComponent
                    ],
                    imports: [
                        CommonModule,
                        OverlayModule,
                        PopoverModule,
                        TooltipModule,
                        ButtonModule,
                        DropDownModule
                    ],
                    providers: [GanttService],
                    exports: [
                        GanttScaleComponent,
                        GanttBarComponent,
                        GanttMilestoneComponent,
                        GanttBarParentComponent,
                        ResizeHandleDirective,
                        GanttToolsComponent
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { GanttBarComponent, GanttBarParentComponent, GanttMarkerDirective, GanttMarkerType, GanttMilestoneComponent, GanttModule, GanttScaleComponent, GanttScaleUnit, GanttService, GanttToolsComponent, ResizeHandleDirective, UnitRole };
//# sourceMappingURL=ng-devui-gantt.mjs.map
