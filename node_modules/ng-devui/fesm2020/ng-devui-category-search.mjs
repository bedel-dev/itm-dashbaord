import * as i9 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Directive, Input, EventEmitter, ElementRef, Component, Inject, Output, ViewChild, ViewChildren, ContentChildren, NgModule } from '@angular/core';
import * as i5 from 'ng-devui/datepicker-pro';
import { DatepickerProCalendarComponent, DatepickerProModule } from 'ng-devui/datepicker-pro';
import * as i1 from 'ng-devui/i18n';
import { DefaultIcons } from 'ng-devui/tree-select';
import { DefaultDateConverter, PopperModule } from 'ng-devui/utils';
import { cloneDeep, merge, isEqual } from 'lodash-es';
import { Subject, fromEvent } from 'rxjs';
import { takeUntil, tap, debounceTime } from 'rxjs/operators';
import * as i2 from 'ng-devui/dropdown';
import { DropDownModule } from 'ng-devui/dropdown';
import * as i3 from 'ng-devui/button';
import { ButtonModule } from 'ng-devui/button';
import * as i4 from 'ng-devui/tags';
import { TagsModule } from 'ng-devui/tags';
import * as i6 from 'ng-devui/checkbox';
import { CheckBoxModule } from 'ng-devui/checkbox';
import * as i7 from 'ng-devui/input-number';
import { InputNumberModule } from 'ng-devui/input-number';
import * as i8 from 'ng-devui/tree';
import { TreeModule } from 'ng-devui/tree';
import * as i10 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i11 from 'ng-devui/text-input';
import { TextInputModule } from 'ng-devui/text-input';
import * as i12 from 'ng-devui/form';
import { FormModule } from 'ng-devui/form';
import { LoadingModule } from 'ng-devui/loading';
import { SearchModule } from 'ng-devui/search';

const ALLOWED_SEARCH_FIELD_TYPES = ['radio', 'checkbox', 'label'];
const COLORS = [
    '#f2f5fc',
    '#e9edfa',
    '#beccfa',
    '#96adfa',
    '#7693f5',
    '#5e7ce0',
    '#526ecc',
    '#465eb8',
    '#3c51a6',
    '#344899',
    '#2a3c85',
    '#ebf6ff',
    '#d1ebff',
    '#b8e0ff',
    '#9ed5ff',
    '#85caff',
    '#6cbfff',
    '#4ea6e6',
    '#3590cc',
    '#207ab3',
    '#0f6999',
    '#035880',
    '#edfff9',
    '#cffcee',
    '#acf2dc',
    '#8be8cb',
    '#6ddebb',
    '#50d4ab',
    '#3ac295',
    '#27b080',
    '#169e6c',
    '#088c58',
    '#007a45',
    '#f0ffe6',
    '#e5ffd4',
    '#d8fcc0',
    '#c5f2a7',
    '#b3e890',
    '#a6dd82',
    '#92cc68',
    '#7eba50',
    '#6ca83b',
    '#5e9629',
    '#518519',
    '#fffbf0',
    '#fff1c2',
    '#ffe794',
    '#ffdc66',
    '#ffd138',
    '#fac20a',
    '#e3aa00',
    '#cc9600',
    '#b58200',
    '#9e6f00',
    '#875c00',
    '#fff3e8',
    '#ffe1c7',
    '#ffd0a6',
    '#ffbf85',
    '#ffad63',
    '#fa9841',
    '#e37d29',
    '#cc6414',
    '#b54e04',
    '#9e3f00',
    '#873400',
    '#ffeeed',
    '#ffd5d4',
    '#ffbcba',
    '#ffa4a1',
    '#ff8b87',
    '#f66f6a',
    '#de504e',
    '#c73636',
    '#b02121',
    '#991111',
    '#820404',
    '#ffedf3',
    '#ffd4e3',
    '#ffbad2',
    '#ffa1c2',
    '#fc86b0',
    '#f3689a',
    '#db4d83',
    '#c4356e',
    '#ad215b',
    '#96114d',
    '#800440',
    '#f5f0ff',
    '#e7d9ff',
    '#d8c2ff',
    '#caabff',
    '#bc94ff',
    '#a97af8',
    '#8a5ce0',
    '#6f42c9',
    '#572db3',
    '#3f1a9c',
    '#2a0c85',
];

class ContentTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
ContentTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ContentTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
ContentTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ContentTemplateDirective, selector: "ng-template[field]", inputs: { field: "field" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ContentTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    /* eslint-disable */
                    selector: 'ng-template[field]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { field: [{
                type: Input
            }] } });

class DefaultTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
DefaultTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DefaultTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
DefaultTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: DefaultTemplateDirective, selector: "ng-template[type]", inputs: { type: "type" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: DefaultTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    /* eslint-disable */
                    selector: 'ng-template[type]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { type: [{
                type: Input
            }] } });

class CategorySearchComponent {
    constructor(i18n, doc) {
        this.i18n = i18n;
        this.doc = doc;
        this.defaultSearchField = [];
        this.selectedTags = [];
        this.allowClear = true;
        this.allowSave = true;
        this.allowShowMore = false;
        this.toggleScrollToTail = false;
        this.searchKey = '';
        this.inputReadOnly = false;
        this.showSearchCategory = true; // 配置是否显示搜索相关下拉选项
        this.categoryInGroup = false; // 是否按组别显示分类下拉列表
        this.filterNameRules = [];
        this.searchEvent = new EventEmitter();
        this.selectedTagsChange = new EventEmitter();
        this.createFilterEvent = new EventEmitter();
        this.clearAllEvent = new EventEmitter();
        this.searchKeyChange = new EventEmitter();
        this.currentSelectTag = undefined;
        this.filterName = '';
        this.treeSearchKey = '';
        this.searchKeyCache = '';
        this.enterSearch = false;
        this.isShowSavePanel = false;
        this.isSearchCategory = false;
        this.isHover = false;
        this.isFocus = false;
        this.noRecord = false;
        this.showNoDataTips = false;
        this.icons = DefaultIcons;
        this.destroy$ = new Subject();
        this.scrollToTailFlag = true; // 是否在更新标签内容后滚动至输入框的开关
        this.DROPDOWN_ANIMATION_TIMEOUT = 200; // 下拉动画延迟
        this.DELAY = 300; // 防抖延迟
        this.templates = {}; // 所有类型默认模板
        this.customTemplates = {}; // 按field标记的自定义模板集合
        this.joinLabelTypes = ['checkbox', 'label'];
        this.valueIsArrayTypes = ['numberRange', 'treeSelect'];
        this.document = this.doc;
        this.dateConverter = new DefaultDateConverter();
        this.id = CategorySearchComponent.ID_SEED++;
        this.setI18nText();
        this.showSearchConfig = {
            keyword: true,
            keywordDescription: this.i18nCategorySearchText.getSearchMessage,
            field: true,
            fieldDescription: this.i18nCategorySearchText.getFindingMessage,
            category: true,
            categoryDescription: this.i18nCategorySearchText.selectFilterCondition,
        };
    }
    get showFilterNameClear() {
        return typeof this.filterName === 'string' && this.filterName.length > 0;
    }
    ngOnChanges(changes) {
        if (changes['defaultSearchField'] || changes['category'] || changes['selectedTags']) {
            this.init();
        }
        if (changes['searchKey']) {
            this.setSearchKeyTag();
        }
        if (changes['showSearchCategory']) {
            this.setSearchShow();
        }
        if (changes['tagMaxWidth']) {
            this.setTagsMaxWidth();
        }
    }
    ngAfterViewInit() {
        // 获取所有默认模板，规避脏检查添加延时
        setTimeout(() => this.defaultTemplates.forEach((item) => {
            this.templates[item.type] = item.template;
        }));
        if (this.scrollBarContainer && this.inputEle) {
            // 初始化如果有滚动条直接位移至输入框
            this.scrollToTail(true);
            // 监听滚动事件，在跳转至指定标签后触发其下拉列表
            fromEvent(this.scrollBarContainer.nativeElement, 'scroll')
                .pipe(takeUntil(this.destroy$), tap(() => {
                // 指定标签在可视范围则展开下拉，不在可视范围，即触发滚动后清除定时的展开下拉动作
                if (this.scrollTimeout) {
                    clearTimeout(this.scrollTimeout);
                    this.scrollTimeout = undefined;
                }
                // TODO: 无法区分手动和自动滚动，待处理滚动时关闭已打开的下拉
            }), 
            // 300毫秒内不再触发滚动事件则展开下拉列表
            debounceTime(this.DELAY))
                .subscribe((event) => this.openCurrentScrollTagMenu(event));
        }
    }
    ngAfterContentInit() {
        this.setCustomTemplate(this.contentTemplates);
        this.contentTemplates.changes.subscribe((data) => this.setCustomTemplate(data));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setCustomTemplate(data) {
        if (data?.length && this.category) {
            this.customTemplates = {};
            data.forEach((item) => {
                this.customTemplates[item.field] = item.template;
            });
            this.category.forEach((tag) => {
                tag.customTemplate = this.customTemplates[tag.field];
            });
            this.selectedTags.forEach((tag) => {
                tag.customTemplate = this.customTemplates[tag.field];
            });
        }
    }
    setI18nText() {
        this.i18nCommonText = this.i18n.getI18nText().common;
        this.i18nCategorySearchText = this.i18n.getI18nText().categorySearch;
        this.i18n
            .langChange()
            .pipe(takeUntil(this.destroy$))
            .subscribe((data) => {
            this.i18nCommonText = data.common;
            this.i18nCategorySearchText = data.categorySearch;
            // 关键字分类内文本不能随语言对象变化，需重新赋值
            const [keyword] = this.selectedTags.filter((item) => item.field === 'devuiCategorySearchKeyword');
            if (keyword) {
                keyword.label = this.i18nCategorySearchText['keyword'];
                keyword.title = `${keyword.label}:${keyword.value?.label}`;
            }
        });
    }
    // 插入tag max-width 样式控制是否显示省略号
    setTagsMaxWidth() {
        if (this.tagMaxWidth) {
            const rule = `.devui-category-search-id-${this.id} .devui-tag-container d-tag>.devui-tag-item>span{max-width:${this.tagMaxWidth}px}`;
            const style = this.document.createElement('style');
            style.innerText = rule;
            this.document.head.appendChild(style);
        }
    }
    setSearchShow() {
        const customConfig = typeof this.showSearchCategory === 'boolean'
            ? {
                keyword: this.showSearchCategory,
                field: this.showSearchCategory,
                category: this.showSearchCategory,
            }
            : this.showSearchCategory;
        this.showSearchConfig = { ...this.showSearchConfig, ...customConfig };
    }
    setSearchKeyTag() {
        const result = this.selectedTags.filter((item) => item.field !== 'devuiCategorySearchKeyword');
        if (this.searchKey && !this.currentSelectTag) {
            const label = this.i18nCategorySearchText['keyword'];
            const searchKeyTag = {
                options: [],
                field: 'devuiCategorySearchKeyword',
                label: label,
                type: 'keyword',
                title: `${label}:${this.searchKey}`,
                value: {
                    label: this.searchKey,
                    value: this.searchKey,
                    cache: this.searchKey,
                },
            };
            this.updateSelectedTags(searchKeyTag, true, result);
            this.searchKeyCache = this.searchKey;
        }
        this.searchKey = '';
        setTimeout(() => {
            this.enterSearch = false;
        }, this.DELAY);
        return result;
    }
    init() {
        this.setValue(this.category);
        this.setValue(this.selectedTags, true);
        this.initCategoryDisplay();
        if (this.defaultSearchField && this.defaultSearchField.length) {
            this.searchField = this.category.filter((item) => this.defaultSearchField.includes(item.field) && ALLOWED_SEARCH_FIELD_TYPES.includes(item.type));
        }
        // 初始化时判断已选中分类中最后一项是否赋值，未赋值则识别为正在处理的分类，优先显示赋值下拉列表
        if (this.selectedTags.length) {
            const [lastItem] = this.selectedTags.slice(-1);
            const isNull = lastItem.value[lastItem.filterKey || 'label'] === undefined;
            this.currentSelectTag = isNull && (lastItem.value.value === undefined || lastItem.value.value === []) ? lastItem : undefined;
        }
    }
    // 初始化tag的value属性：{filterKey | label, value, data}
    initCategoryItem(item) {
        const preValue = this.valueIsArrayTypes.includes(item.type) ? { value: [] } : { value: undefined };
        preValue[item.filterKey || 'label'] = undefined;
        if (item.value) {
            for (const prop in preValue) {
                if (item.value[prop] === undefined) {
                    item.value[prop] = preValue[prop];
                }
            }
        }
        else {
            item.value = preValue;
        }
        item.value.cache = (item.value.value && typeof item.value.value === 'object' && cloneDeep(item.value.value)) || item.value.value;
        if (item.type === 'treeSelect' && item.options && item.options.length) {
            item.value.options = cloneDeep(item.options);
        }
        item.customTemplate = this.customTemplates[item.field] || item.customTemplate;
        return item;
    }
    setValue(data, isSelectedTags = false) {
        if (Array.isArray(data) && data.length) {
            data.forEach((item) => {
                if (isSelectedTags) {
                    let result = '';
                    const originItem = this.category.find((categoryItem) => categoryItem.field === item.field);
                    merge(item, originItem);
                    if (item.value.value) {
                        item.value.cache = cloneDeep(item.value.value);
                        result = this.joinLabelTypes.includes(item.type) ? this.getItemValue(item.value.value, item.filterKey || 'label') : '';
                    }
                    item.title = this.setTitle(item, item.type, result);
                }
                else {
                    item = this.initCategoryItem(item);
                }
            });
        }
    }
    setTitle(tag, type, result) {
        return this.joinLabelTypes.includes(type)
            ? `${tag.label}: ${result || ''}`
            : `${tag.label}: ${result || (tag.value && tag.value[tag.filterKey || 'label']) || ''}`;
    }
    initCategoryDisplay() {
        const selectedTagsField = this.selectedTags.map((item) => item.field);
        if (this.categoryInGroup) {
            const groupObj = {};
            this.category.forEach((item) => this.insertCategoryToGroup(item.group, groupObj, item, selectedTagsField.indexOf(item.field) === -1));
            const keys = this.groupOrderConfig || Object.keys(groupObj);
            this.categoryDisplay = [];
            keys.forEach((key) => {
                if (groupObj[key]) {
                    const groupItem = {};
                    groupItem.groupName = key;
                    groupItem.groupLength = groupObj[key].length;
                    this.categoryDisplay.push(groupItem, ...groupObj[key]);
                }
            });
        }
        else {
            this.categoryDisplay =
                selectedTagsField && selectedTagsField.length
                    ? this.category.filter((item) => selectedTagsField.indexOf(item.field) === -1)
                    : this.category;
        }
    }
    insertCategoryToGroup(groupName, groupObj, item, isInsert) {
        if (!groupName) {
            return;
        }
        groupObj[groupName] = groupObj[groupName] || [];
        if (isInsert) {
            groupObj[groupName].push(item);
        }
    }
    search() {
        const result = this.setSearchKeyTag();
        this.searchEvent.emit({ selectedTags: result, searchKey: this.searchKeyCache });
        this.isFocus = true;
    }
    searchCategory(item) {
        const validField = item;
        this.updateFieldValue(validField, this.searchKey);
        this.updateSelectedTags(validField);
        this.searchKey = '';
        this.enterSearch = false;
        this.finishChoose();
    }
    searchInputValue(event) {
        event.preventDefault();
        event.stopPropagation();
        const result = this.setSearchKeyTag();
        this.searchEvent.emit({ selectedTags: result, searchKey: this.searchKeyCache });
    }
    chooseCategory(item, inputDropdown) {
        // 点选分组名称不处理
        if (item.groupLength !== undefined) {
            return;
        }
        setTimeout(() => {
            this.currentSelectTag = item;
            if (this.currentSelectTag.type === 'label') {
                this.currentSelectTag = this.mergeToLabel(this.currentSelectTag);
            }
            inputDropdown.isOpen = true;
        }, this.DROPDOWN_ANIMATION_TIMEOUT);
        this.updateSelectedTags(item, false);
    }
    updateSelectedTags(tag, valueChanged = true, result) {
        this.canChange(tag, 'add').then((val) => {
            if (!val) {
                return;
            }
            const index = this.selectedTags.map((item) => item.field).indexOf(tag.field);
            if (index > -1) {
                if (!tag.value.value) {
                    // 通过输入选择分类时避免空值覆盖已选值
                    merge(tag, this.selectedTags[index]);
                }
                this.selectedTags[index] = tag;
            }
            else {
                this.selectedTags.push(tag);
            }
            this.resolveCategoryDisplay(tag, 'delete');
            if (valueChanged) {
                // 只在新增标签时位移滚动条
                if (this.scrollToTailFlag) {
                    setTimeout(() => this.scrollToTail());
                }
                this.selectedTagsChange.emit({ selectedTags: result || this.selectedTags, currentChangeTag: tag, operation: 'add' });
                this.isSearchCategory = false;
            }
        });
    }
    // 判断滚动条是否存在，如果存在自动滚动到末尾的输入框
    scrollToTail(isInit) {
        const dom = this.scrollBarContainer.nativeElement;
        if (this.toggleScrollToTail && dom.scrollWidth > dom.clientWidth) {
            if (isInit) {
                dom.scrollLeft = dom.scrollWidth - dom.clientWidth;
            }
            else {
                this.inputEle.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
            }
        }
        else if (!isInit) {
            // 初始化不聚焦，避免展开下拉
            this.inputEle.nativeElement.focus();
        }
    }
    // 滚动至指定的tag
    scrollToTag(index, event) {
        const tags = this.scrollBarContainer?.nativeElement.querySelectorAll('ul.devui-category-search-line>li');
        if (tags[index]) {
            this.currentScrollTagIndex = index;
            tags[index].scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
            this.scrollTimeout = setTimeout(() => this.openCurrentScrollTagMenu(event), this.DELAY);
        }
    }
    openCurrentScrollTagMenu(event) {
        if (this.currentScrollTagIndex !== undefined) {
            const dropdownArr = this.selectedDropdownList.toArray();
            this.openMenu(dropdownArr[this.currentScrollTagIndex], event);
            this.currentScrollTagIndex = undefined;
        }
    }
    updateFieldValue(field, value) {
        const result = {};
        const filterKey = field.filterKey || 'label';
        const colorKey = field.colorKey || 'color';
        result[filterKey] = value;
        if (field.type === 'radio') {
            field.value.value = value;
            field.title = this.setTitle(field, 'radio', value);
        }
        if (field.type === 'label') {
            if (!field.options[0]?.$label) {
                this.mergeToLabel(field);
            }
            result[colorKey] = COLORS[Math.floor(COLORS.length * Math.random())];
            result['$label'] = `${value}_${result[colorKey]}`;
        }
        if (['label', 'checkbox'].includes(field.type)) {
            field.value.value = [result];
            // setTitle中checkbox与label同样处理，不需要针对label修改类型参数
            field.title = this.setTitle(field, 'checkbox', value);
        }
        field.value[filterKey] = value;
        field.value.cache = cloneDeep(field.value.value);
    }
    removeTag(tag, event) {
        this.canChange(tag, 'delete').then((val) => {
            if (!val) {
                if (this.beforeTagChange && event) {
                    event.stopPropagation();
                }
                return;
            }
            tag = this.resetValue(tag);
            this.selectedTags = this.selectedTags.filter((item) => item.field !== tag.field);
            if (tag.type !== 'keyword') {
                this.selectedTagsChange.emit({ selectedTags: this.selectedTags, currentChangeTag: tag, operation: 'delete' });
                this.resolveCategoryDisplay(tag, 'add');
            }
            else {
                this.searchKey = this.searchKey === this.searchKeyCache ? '' : this.searchKey;
                this.searchKeyCache = '';
                this.searchEvent.emit({ selectedTags: this.selectedTags, searchKey: '' });
            }
            this.currentSelectTag = undefined;
        });
    }
    checkInputSearching() {
        this.isFocus = true;
        if (this.searchKey === '') {
            this.enterSearch = false;
        }
        else {
            this.enterSearch = true;
        }
    }
    // 解决dropdownMenu展开时焦点会自动到toggle上的问题
    focusInput() {
        setTimeout(() => {
            this.inputEle.nativeElement.focus();
        });
    }
    // 失焦时关闭当前下拉列表，延时用以防止关闭掉点击分类展开的内容列表
    blurInput() {
        setTimeout(() => {
            if (!this.currentSelectTag && this.currentOpenDropdown) {
                this.currentOpenDropdown.isOpen = false;
            }
        }, this.DELAY);
    }
    openMenu(inputDropdown, event) {
        if (inputDropdown.isOpen || (event.type === 'keyup' && (event.code === 'Enter' || event.code === 'Backspace'))) {
            return;
        }
        setTimeout(() => {
            if (!inputDropdown.isOpen) {
                inputDropdown.toggle();
            }
        });
    }
    closeMenu(inputDropdown) {
        if (inputDropdown.isOpen) {
            inputDropdown.toggle();
        }
    }
    backspaceEvent(inputDropdown) {
        if (this.searchKey) {
            return;
        }
        if (this.currentSelectTag) {
            this.currentSelectTag = undefined;
            this.closeMenu(inputDropdown);
            return;
        }
        this.canChange(this.selectedTags[this.selectedTags.length - 1], 'delete').then((val) => {
            if (!val) {
                return;
            }
            const changeTag = this.selectedTags.pop();
            this.resolveCategoryDisplay(changeTag, 'add');
            if (changeTag) {
                this.selectedTagsChange.emit({ selectedTags: this.selectedTags, currentChangeTag: changeTag, operation: 'delete' });
            }
        });
        this.closeMenu(inputDropdown);
    }
    canChange(tag, operation) {
        let changeResult = Promise.resolve(true);
        if (this.beforeTagChange) {
            const result = this.beforeTagChange(tag, this.searchKey, operation);
            if (typeof result !== 'undefined') {
                if (result.then) {
                    changeResult = result;
                }
                else if (result.subscribe) {
                    changeResult = result.toPromise();
                }
                else {
                    changeResult = Promise.resolve(result);
                }
            }
        }
        return changeResult;
    }
    finishChoose() {
        this.currentSelectTag = undefined;
        this.inputEle.nativeElement.focus();
    }
    clearFilter(event) {
        if (this.selectedTags.length) {
            this.selectedTags.forEach((item) => this.resetValue(item));
            this.selectedTags = [];
        }
        if (this.searchKey || this.searchKeyCache) {
            this.searchKey = '';
            this.searchKeyCache = '';
        }
        if (this.currentSelectTag) {
            this.currentSelectTag = undefined;
        }
        this.selectedTagsChange.emit({ selectedTags: [], currentChangeTag: undefined, operation: 'clear' });
        this.clearAllEvent.emit(event);
        this.initCategoryDisplay();
    }
    resolveCategoryDisplay(tag, type) {
        if (tag && type === 'add') {
            if (this.categoryInGroup) {
                const groupIndex = this.categoryDisplay.findIndex((item) => item.groupName === tag.group);
                this.categoryDisplay[groupIndex].groupLength++;
                this.categoryDisplay.splice(groupIndex + 1, 0, tag);
            }
            else {
                this.categoryDisplay.push(tag);
            }
        }
        if (type === 'delete') {
            if (this.categoryInGroup) {
                const tagIndex = this.categoryDisplay.findIndex((item) => item.field === tag.field);
                if (tagIndex >= 0) {
                    const groupIndex = this.categoryDisplay.findIndex((item) => item.groupName === tag.group);
                    this.categoryDisplay[groupIndex].groupLength--;
                    this.categoryDisplay.splice(tagIndex, 1);
                }
            }
            else {
                this.categoryDisplay = this.categoryDisplay.filter((item) => item.field !== tag.field);
            }
        }
    }
    createFilterFn() {
        this.createFilterEvent.emit({ name: this.filterName, selectedTags: this.selectedTags, keyword: this.searchKey });
        this.filterName = '';
    }
    createFilterInputAutoFocus(dropdown, inputElm, filterNameForm) {
        if (dropdown.isOpen) {
            filterNameForm.form.reset();
            setTimeout(() => inputElm.focus());
        }
    }
    searchKeyChangeEvent(event) {
        this.enterSearch = !!event;
        this.currentSearchCategory = this.category.filter((item) => item['label'].toLowerCase().includes(event.toLowerCase()));
        this.searchKeyChange.emit(event);
    }
    checkType(value) {
        return value && value.type === 'radio' ? 'all' : 'blank';
    }
    resetValue(tag) {
        tag.value = this.valueIsArrayTypes.includes(tag.type) ? { value: [] } : { value: undefined };
        tag.value[tag.filterKey || 'label'] = undefined;
        return tag;
    }
    afterDropdownClosed() {
        setTimeout(() => {
            this.currentSelectTag = undefined;
        }, this.DROPDOWN_ANIMATION_TIMEOUT + 100);
    }
    /* 各类型模板调用方法 */
    // radio 单选 处理选中项方法
    chooseItem(tag, chooseItem) {
        this.afterDropdownClosed();
        tag.value = cloneDeep(chooseItem);
        tag.value.cache = tag.value.value;
        tag.title = this.setTitle(tag, 'radio');
        this.updateSelectedTags(tag);
    }
    confirmDate(tag) {
        this.afterDropdownClosed();
        tag.value.cache = cloneDeep(tag.value.value);
        tag.value[tag.filterKey || 'label'] = tag.showTime
            ? this.dateConverter.formatDateTime(tag.value.value[0]) + ' - ' + this.dateConverter.formatDateTime(tag.value.value[1])
            : this.dateConverter.format(tag.value.value[0]) + ' - ' + this.dateConverter.format(tag.value.value[1]);
        tag.title = this.setTitle(tag, 'dateRange');
        this.updateSelectedTags(tag);
    }
    dateValueChange(tag, datepickerpro) {
        if (datepickerpro.dateValue.length) {
            const index = datepickerpro.currentActiveInput === 'start' ? 0 : 1;
            if (tag.value.value && !datepickerpro.dateValue.includes('')) {
                tag.value.value[index] = datepickerpro.curActiveDate;
                tag.value.value = [...tag.value.value];
            }
            else {
                tag.value.value = [datepickerpro.curActiveDate];
            }
        }
        else {
            tag.value.value = [];
        }
    }
    // checkbox | label 多选 处理选中项方法
    chooseItems(tag) {
        this.afterDropdownClosed();
        const result = this.getItemValue(tag.value.value, tag.filterKey || 'label');
        if (result) {
            tag.title = this.setTitle(tag, 'checkbox', result);
            tag.value[tag.filterKey || 'label'] = result;
            tag.value.cache = cloneDeep(tag.value.value);
            this.updateSelectedTags(tag);
        }
        else {
            this.removeTag(tag);
        }
    }
    // checkbox | label 将选中项对应filterKey的值合并的方法，当前多选已通过data展示，可考虑移除
    getItemValue(value, key) {
        if (value && Array.isArray(value)) {
            const result = value.map((item) => item[key]);
            return result.join(',');
        }
    }
    // checkbox | label 当下拉菜单展开重置多选的选中状态
    resetContent(dropdown, tag) {
        if (this.toggleEvent) {
            this.toggleEvent(dropdown, tag, this.currentSelectTag);
        }
        if (dropdown.isOpen) {
            this.currentOpenDropdown = dropdown;
            if (tag?.type === 'keyword') {
                this.searchKey = this.searchKeyCache;
                this.inputEle.nativeElement.focus();
                dropdown.isOpen = false;
            }
        }
        else {
            this.clearCurrentSelectTagFromSearch();
            this.currentOpenDropdown = undefined;
            this.showNoDataTips = false;
            return;
        }
        if (tag) {
            this.scrollToTailFlag = false;
            if (!isEqual(tag.value.value, tag.value.cache)) {
                tag.value.value = cloneDeep(tag.value.cache);
                this.handleAccordingType(tag.type, tag.value.options);
            }
        }
        else if (this.currentSelectTag) {
            this.currentSelectTag.value.value = this.valueIsArrayTypes.includes(this.currentSelectTag.type) ? [] : undefined;
            this.handleAccordingType(this.currentSelectTag.type, this.currentSelectTag.options);
            this.scrollToTailFlag = true;
        }
        this.showNoDataTips = this.categoryDisplay.length === 0 || !this.categoryDisplay.some((item) => item && item.groupLength === undefined);
    }
    showCurrentSearchCategory(item, inputDropdown) {
        this.isSearchCategory = true;
        this.clearSearchKey();
        this.closeMenu(inputDropdown);
        this.chooseCategory(item, inputDropdown);
        setTimeout(() => this.checkInputSearching(), this.DELAY);
    }
    clearCurrentSelectTagFromSearch() {
        if (this.currentSelectTag) {
            if (this.isSearchCategory) {
                this.isSearchCategory = false;
                setTimeout(() => this.finishChoose(), this.DELAY);
            }
        }
    }
    handleAccordingType(type, options) {
        switch (type) {
            case 'treeSelect':
                options = cloneDeep(options);
                break;
            case 'textInput':
                setTimeout(() => {
                    const inputDom = this.document.querySelector('.devui-category-search-type-text-input');
                    if (inputDom) {
                        inputDom.focus();
                    }
                }, this.DROPDOWN_ANIMATION_TIMEOUT);
                break;
            default:
        }
    }
    // label 合并名称和颜色字段赋给tag，待[tag]支持传入对象后可移除
    mergeToLabel(obj) {
        if (obj && obj.options && Array.isArray(obj.options)) {
            obj.options.map((item) => {
                item.$label = `${item[obj.filterKey || 'label']}_${item[obj.colorKey || 'color']}`;
            });
        }
        return obj;
    }
    // label 拆分名称和颜色用于下拉选项显示
    splitLabel(key, value) {
        // 初始化选中类别生成标签时，value为label的对象，不需要对值进行操作
        if (typeof value !== 'string') {
            return;
        }
        const res = value && value.split('_');
        const obj = res && { label: res[0], color: res[1] };
        return obj && obj[key];
    }
    // textInput 文本输入框 处理选中项方法
    getTextInputValue(tag) {
        this.afterDropdownClosed();
        tag.value[tag.filterKey || 'label'] = tag.value.cache = tag.value.value;
        tag.title = this.setTitle(tag, 'textInput');
        this.updateSelectedTags(tag);
    }
    // numberRange 数字范围 处理选中项方法
    getNumberRangeValue(tag) {
        this.afterDropdownClosed();
        const startNum = tag.value.value[0] || 0;
        const endNum = tag.value.value[1] || 0;
        tag.value.value = [startNum, endNum];
        tag.value.cache = [startNum, endNum];
        tag.value[tag.filterKey || 'label'] = `${startNum} - ${endNum}`;
        tag.title = this.setTitle(tag, 'numberRange');
        this.updateSelectedTags(tag);
    }
    // treeSelect 树 处理选中项方法
    getTreeValue(tag, tree) {
        this.afterDropdownClosed();
        const result = [];
        const selectedIds = [];
        tag.value.value.forEach((item) => {
            result.push(item[tag.filterKey || tag.treeNodeTitleKey || 'title']);
            selectedIds.push(item[tag.treeNodeIdKey || 'id']);
        });
        if (result.length) {
            tag.value.options = cloneDeep(tag.options);
            tag.value.cache = cloneDeep(tag.value.value);
            tag.value[tag.filterKey || 'label'] = result.join(',');
            tag.title = this.setTitle(tag, 'treeSelect');
            if (tag.multiple) {
                const halfCheckedIds = [];
                tree.nodes.forEach((item) => item.data.halfChecked && halfCheckedIds.push(item.id));
                this.updateTreeData(tag, tag.value.options, selectedIds, halfCheckedIds);
            }
            this.updateSelectedTags(tag);
        }
        else {
            this.removeTag(tag);
        }
    }
    updateTreeData(tag, data, selectedIds, halfCheckedIds) {
        data.forEach((item) => {
            const itemId = item[tag.treeNodeIdKey || 'id'];
            const childData = item[tag.treeNodeChildrenKey || 'children'];
            item.isChecked = selectedIds.includes(itemId);
            item.halfChecked = halfCheckedIds.includes(itemId);
            if (childData && childData.length) {
                this.updateTreeData(tag, childData, selectedIds, halfCheckedIds);
            }
        });
    }
    onOperableNodeChecked(selectedNodes, tag) {
        const selectedValueExtractor = (nodes) => {
            return tag.leafOnly
                ? nodes.filter((node) => !node.data.isParent).map((node) => node.data.originItem)
                : nodes.map((node) => node.data.originItem);
        };
        if (tag.multiple) {
            tag.value.value = selectedValueExtractor(selectedNodes);
        }
    }
    onOperableNodeSelected(selectedNode, tag, tree) {
        if (tag.multiple || (tag.leafOnly && selectedNode.data.isParent)) {
            return;
        }
        if (selectedNode.data.isActive) {
            tag.value.value = [selectedNode.data.originItem];
            this.getTreeValue(tag, tree);
        }
        else {
            selectedNode.data.isActive = true;
        }
    }
    treeSearch(tree, value) {
        tree.operableTree.treeFactory.searchTree(value, true);
    }
    clearSearchKey() {
        this.searchKey = '';
    }
}
CategorySearchComponent.ID_SEED = 0;
CategorySearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CategorySearchComponent, deps: [{ token: i1.I18nService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
CategorySearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: CategorySearchComponent, selector: "d-category-search", inputs: { category: "category", defaultSearchField: "defaultSearchField", selectedTags: "selectedTags", allowClear: "allowClear", allowSave: "allowSave", allowShowMore: "allowShowMore", toggleScrollToTail: "toggleScrollToTail", searchKey: "searchKey", placeholderText: "placeholderText", inputReadOnly: "inputReadOnly", showSearchCategory: "showSearchCategory", categoryInGroup: "categoryInGroup", groupOrderConfig: "groupOrderConfig", customGroupNameTemplate: "customGroupNameTemplate", tagMaxWidth: "tagMaxWidth", filterNameRules: "filterNameRules", beforeTagChange: "beforeTagChange", toggleEvent: "toggleEvent" }, outputs: { searchEvent: "searchEvent", selectedTagsChange: "selectedTagsChange", createFilterEvent: "createFilterEvent", clearAllEvent: "clearAllEvent", searchKeyChange: "searchKeyChange" }, queries: [{ propertyName: "contentTemplates", predicate: ContentTemplateDirective }], viewQueries: [{ propertyName: "inputEle", first: true, predicate: ["InputEle"], descendants: true }, { propertyName: "scrollBarContainer", first: true, predicate: ["ScrollBarContainer"], descendants: true }, { propertyName: "primeContainer", first: true, predicate: ["PrimeContainer"], descendants: true }, { propertyName: "selectedDropdownList", predicate: ["selectedDropdown"], descendants: true }, { propertyName: "datePickerElements", predicate: DatepickerProCalendarComponent, descendants: true, read: ElementRef }, { propertyName: "defaultTemplates", predicate: DefaultTemplateDirective, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  #PrimeContainer\n  class=\"devui-category-search-container devui-category-search-id-{{ id }}\"\n  [ngClass]=\"{ 'container-hover': isHover && !isFocus }\"\n  (mouseenter)=\"isHover = true\"\n  (mouseleave)=\"isHover = false\"\n>\n  <div class=\"devui-category-search-icon\" (click)=\"search()\">\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      class=\"svg-icon-search\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M7,0 C10.8659932,0 14,3.13400675 14,7 C14,8.57190212 13.4818819,10.0227913 12.6071076,11.1912056 L15.7071068,14.2928932 C16.0976311,14.6834175 16.0976311,15.3165825 15.7071068,15.7071068 C15.3466228,16.0675907 14.7793918,16.0953203 14.3871006,15.7902954 L14.2928932,15.7071068 L11.1912056,12.6071076 C10.0227913,13.4818819 8.57190212,14 7,14 C3.13400675,14 5.5067062e-14,10.8659932 5.5067062e-14,7 C5.5067062e-14,3.13400675 3.13400675,0 7,0 Z M7,2 C4.23857625,2 2,4.23857625 2,7 C2,9.76142375 4.23857625,12 7,12 C9.76142375,12 12,9.76142375 12,7 C12,4.23857625 9.76142375,2 7,2 Z\"\n          id=\"\uFFFD\uFFFD\u0532\uFFFD\uFFFD\"\n          fill=\"#71757F\"\n        ></path>\n      </g>\n    </svg>\n  </div>\n  <div #ScrollBarContainer class=\"devui-category-search-line-container\">\n    <ul class=\"devui-category-search-line\">\n      <li\n        class=\"devui-tag-item\"\n        *ngFor=\"let item of selectedTags\"\n        #selectedDropdown=\"d-dropdown\"\n        [ngStyle]=\"{ width: tagMaxWidth || '' }\"\n        dDropDown\n        appendToBody\n        dDropDownToggle\n        [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n        [closeScope]=\"checkType(item)\"\n        (toggleEvent)=\"resetContent(selectedDropdown, item)\"\n      >\n        <ng-template [ngTemplateOutlet]=\"joinLabelTypesTemplate\" [ngTemplateOutletContext]=\"{ item: item }\"></ng-template>\n        <div dDropDownMenu class=\"devui-dropdown-menu devui-dropdown-menu-fix\" [ngClass]=\"{ 'max-height': item.type !== 'treeSelect' }\">\n          <ng-template\n            [ngTemplateOutlet]=\"item.customTemplate || templates[item.type]\"\n            [ngTemplateOutletContext]=\"{ tagOption: item, dropdown: selectedDropdown, isSelected: true }\"\n          ></ng-template>\n        </div>\n      </li>\n      <div class=\"devui-category-search-input\">\n        <div\n          class=\"devui-input-container\"\n          #inputDropdown=\"d-dropdown\"\n          dDropDown\n          appendToBody\n          [trigger]=\"'manually'\"\n          [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n          [closeScope]=\"checkType(currentSelectTag)\"\n          (toggleEvent)=\"resetContent(inputDropdown)\"\n        >\n          <div style=\"width: 100%\">\n            <input\n              class=\"devui-category-search-toggle\"\n              autocomplete=\"off\"\n              #InputEle\n              dDropDownToggle\n              dTextInput\n              [readOnly]=\"inputReadOnly\"\n              [placeholder]=\"placeholderText || i18nCategorySearchText?.searchPlaceholder || ''\"\n              [(ngModel)]=\"searchKey\"\n              (ngModelChange)=\"searchKeyChangeEvent($event)\"\n              (click)=\"openMenu(inputDropdown, $event)\"\n              (keyup)=\"checkInputSearching(); openMenu(inputDropdown, $event)\"\n              (keydown.backspace)=\"backspaceEvent(inputDropdown)\"\n              (keydown.enter)=\"searchInputValue($event); closeMenu(inputDropdown)\"\n              (focus)=\"isHover = false; isFocus = true\"\n              (blur)=\"isFocus = false; blurInput()\"\n            />\n          </div>\n          <div\n            *ngIf=\"!enterSearch || (enterSearch && showSearchCategory)\"\n            dDropDownMenu\n            class=\"devui-dropdown-menu devui-dropdown-menu-fix\"\n            [ngClass]=\"{ 'max-height': currentSelectTag?.type !== 'treeSelect' }\"\n          >\n            <ul *ngIf=\"!currentSelectTag\" class=\"devui-dropdown-menu-template devui-scrollbar\">\n              <ng-container *ngIf=\"!enterSearch && !currentSelectTag\">\n                <ng-container *ngFor=\"let item of categoryDisplay\">\n                  <li *ngIf=\"item.groupLength\" class=\"devui-dropdown-item devui-category-search-group\">\n                    <ng-template\n                      [ngTemplateOutlet]=\"customGroupNameTemplate || defaultGroupNameTemplate\"\n                      [ngTemplateOutletContext]=\"{ tag: item }\"\n                    ></ng-template>\n                  </li>\n                  <li\n                    *ngIf=\"item.groupLength === undefined\"\n                    class=\"devui-dropdown-item\"\n                    (click)=\"chooseCategory(item, inputDropdown); closeMenu(inputDropdown)\"\n                  >\n                    <span title=\"{{ item?.label }}\">{{ item?.label }}</span>\n                  </li>\n                </ng-container>\n                <div class=\"devui-no-data-text\" *ngIf=\"showNoDataTips\">{{ i18nCategorySearchText?.noFilterConditions }}</div>\n              </ng-container>\n              <ng-container *ngIf=\"enterSearch\">\n                <li\n                  *ngIf=\"showSearchConfig.keyword\"\n                  class=\"devui-dropdown-item devui-search-description\"\n                  (click)=\"searchInputValue($event); closeMenu(inputDropdown)\"\n                >\n                  <span class=\"icon-search\"></span>{{ showSearchConfig.keywordDescription(searchKey) }}\n                </li>\n                <ng-container *ngIf=\"showSearchConfig.field\">\n                  <li *ngFor=\"let item of searchField\" (click)=\"searchCategory(item); closeMenu(inputDropdown)\" class=\"devui-dropdown-item\">\n                    <span class=\"icon-search\"></span>{{ showSearchConfig.fieldDescription(item?.label) }}\n                  </li>\n                </ng-container>\n                <div\n                  *ngIf=\"(showSearchConfig.keyword || showSearchConfig.field) && showSearchConfig.category && currentSearchCategory?.length\"\n                  class=\"devui-dividing-line\"\n                ></div>\n                <ng-container *ngIf=\"showSearchConfig.category && currentSearchCategory?.length\">\n                  <div class=\"devui-dropdown-menu-tip\" [style.paddingBottom]=\"currentSearchCategory.length ? '0' : '12px'\">\n                    {{ showSearchConfig.categoryDescription }}\n                  </div>\n                  <ul class=\"devui-dropdown-menu-template devui-scrollbar\">\n                    <li\n                      *ngFor=\"let item of currentSearchCategory\"\n                      (click)=\"showCurrentSearchCategory(item, inputDropdown)\"\n                      class=\"devui-dropdown-item\"\n                    >\n                      <span>{{ item?.label }}</span>\n                    </li>\n                  </ul>\n                </ng-container>\n              </ng-container>\n            </ul>\n            <ng-container *ngIf=\"!enterSearch && currentSelectTag\">\n              <ng-template\n                [ngTemplateOutlet]=\"currentSelectTag.customTemplate || templates[currentSelectTag.type]\"\n                [ngTemplateOutletContext]=\"{ tagOption: currentSelectTag, dropdown: inputDropdown }\"\n              ></ng-template>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </ul>\n  </div>\n  <div class=\"devui-category-search-ctrl-container\" *ngIf=\"selectedTags.length || searchKey\">\n    <div class=\"devui-category-search-separate-line\"></div>\n    <div *ngIf=\"allowClear\" class=\"devui-category-search-icon\" (click)=\"clearFilter($event)\">\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <title>{{ i18nCategorySearchText?.clearFilterCondition }}</title>\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M4.61289944,3.20970461 L4.70710678,3.29289322 L8,6.585 L11.2928932,3.29289322 C11.6834175,2.90236893 12.3165825,2.90236893 12.7071068,3.29289322 C13.0675907,3.65337718 13.0953203,4.22060824 12.7902954,4.61289944 L12.7071068,4.70710678 L9.415,8 L12.7071068,11.2928932 C13.0976311,11.6834175 13.0976311,12.3165825 12.7071068,12.7071068 C12.3466228,13.0675907 11.7793918,13.0953203 11.3871006,12.7902954 L11.2928932,12.7071068 L8,9.415 L4.70710678,12.7071068 C4.31658249,13.0976311 3.68341751,13.0976311 3.29289322,12.7071068 C2.93240926,12.3466228 2.90467972,11.7793918 3.20970461,11.3871006 L3.29289322,11.2928932 L6.585,8 L3.29289322,4.70710678 C2.90236893,4.31658249 2.90236893,3.68341751 3.29289322,3.29289322 C3.65337718,2.93240926 4.22060824,2.90467972 4.61289944,3.20970461 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </svg>\n    </div>\n    <div\n      *ngIf=\"allowSave\"\n      class=\"devui-category-search-icon\"\n      #saveDropdown=\"d-dropdown\"\n      dDropDown\n      appendToBody\n      [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n      [closeScope]=\"'blank'\"\n      (toggleEvent)=\"createFilterInputAutoFocus(saveDropdown, createFilterInput, filterNameForm)\"\n    >\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        dDropDownToggle\n      >\n        <title>{{ i18nCategorySearchText?.saveFilter }}</title>\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M12,1 L15,4 L15,13 C15,14.1045695 14.1045695,15 13,15 L3,15 C1.8954305,15 1,14.1045695 1,13 L1,3 C1,1.8954305 1.8954305,1 3,1 L12,1 Z M11.171,3 L3,3 L3,13 L4,13 L4,10 C4,9.48716416 4.38604019,9.06449284 4.88337887,9.00672773 L5,9 L11,9 C11.5128358,9 11.9355072,9.38604019 11.9932723,9.88337887 L12,10 L12,13 L13,13 L13,4.829 L11.171,3 Z M9.999,10.999 L5.999,10.999 L6,13 L10,13 L9.999,10.999 Z M7,5 C7.55228475,5 8,5.44771525 8,6 C8,6.55228475 7.55228475,7 7,7 L5,7 C4.44771525,7 4,6.55228475 4,6 C4,5.44771525 4.44771525,5 5,5 L7,5 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </svg>\n      <div dDropDownMenu class=\"devui-save-panel\">\n        <div class=\"devui-save-panel-title\">\n          <span>{{ i18nCategorySearchText?.saveFilter }}</span>\n        </div>\n        <div class=\"devui-save-filter-name\">\n          <span>{{ i18nCategorySearchText?.filterTitle }}</span>\n          <form #filterNameForm=\"ngForm\">\n            <input\n              name=\"filter-name\"\n              class=\"devui-category-search-toggle\"\n              autocomplete=\"off\"\n              #createFilterInput\n              dTextInput\n              [(ngModel)]=\"filterName\"\n              [placeholder]=\"i18nCategorySearchText?.placeholder || ''\"\n              [dValidateRules]=\"filterNameRules\"\n            />\n            <svg\n              *ngIf=\"showFilterNameClear\"\n              (click)=\"$event.preventDefault(); $event.stopPropagation(); filterName = ''\"\n              width=\"16px\"\n              height=\"16px\"\n              viewBox=\"0 0 16 16\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <title>{{ i18nCategorySearchText?.clearFilterCondition }}</title>\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <path\n                  d=\"M4.61289944,3.20970461 L4.70710678,3.29289322 L8,6.585 L11.2928932,3.29289322 C11.6834175,2.90236893 12.3165825,2.90236893 12.7071068,3.29289322 C13.0675907,3.65337718 13.0953203,4.22060824 12.7902954,4.61289944 L12.7071068,4.70710678 L9.415,8 L12.7071068,11.2928932 C13.0976311,11.6834175 13.0976311,12.3165825 12.7071068,12.7071068 C12.3466228,13.0675907 11.7793918,13.0953203 11.3871006,12.7902954 L11.2928932,12.7071068 L8,9.415 L4.70710678,12.7071068 C4.31658249,13.0976311 3.68341751,13.0976311 3.29289322,12.7071068 C2.93240926,12.3466228 2.90467972,11.7793918 3.20970461,11.3871006 L3.29289322,11.2928932 L6.585,8 L3.29289322,4.70710678 C2.90236893,4.31658249 2.90236893,3.68341751 3.29289322,3.29289322 C3.65337718,2.93240926 4.22060824,2.90467972 4.61289944,3.20970461 Z\"\n                  fill-rule=\"nonzero\"\n                ></path>\n              </g>\n            </svg>\n          </form>\n        </div>\n        <div class=\"devui-save-panel-operation-area\">\n          <d-button [disabled]=\"filterNameForm.invalid\" (btnClick)=\"createFilterFn(); saveDropdown.toggle()\">{{\n            i18nCategorySearchText?.confirm\n          }}</d-button>\n          <d-button bsStyle=\"common\" (btnClick)=\"saveDropdown.toggle()\">{{ i18nCategorySearchText?.cancel }}</d-button>\n        </div>\n      </div>\n    </div>\n    <div\n      *ngIf=\"allowShowMore\"\n      class=\"devui-category-search-icon\"\n      #seeMoreDropdown=\"d-dropdown\"\n      dDropDown\n      appendToBody\n      [alignOrigin]=\"primeContainer\"\n      [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n    >\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        dDropDownToggle\n      >\n        <title>{{ i18nCategorySearchText?.seeMore }}</title>\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M1,2 L3,2 L3,4 L1,4 L1,2 Z M1,7 L3,7 L3,9 L1,9 L1,7 Z M1,12 L3,12 L3,14 L1,14 L1,12 Z M5,2 L15,2 L15,4 L5,4 L5,2 Z M5,7 L15,7 L15,9 L5,9 L5,7 Z M5,12 L15,12 L15,14 L5,14 L5,12 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </svg>\n      <div dDropDownMenu class=\"devui-selected-tags-list\">\n        <ul [ngStyle]=\"{ width: PrimeContainer?.clientWidth + 'px' }\">\n          <li class=\"devui-tag-item\" *ngFor=\"let item of selectedTags; let i = index\" (click)=\"scrollToTag(i, $event)\">\n            <ng-template [ngTemplateOutlet]=\"joinLabelTypesTemplate\" [ngTemplateOutletContext]=\"{ item: item }\"></ng-template>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #joinLabelTypesTemplate let-item=\"item\">\n  <div class=\"devui-tag-container\">\n    <d-tag\n      *ngIf=\"!joinLabelTypes.includes(item.type)\"\n      [deletable]=\"true\"\n      [tag]=\"item.label + ': ' + (item.value[item.filterKey || 'label'] || '')\"\n      [titleContent]=\"item.title\"\n      (tagDelete)=\"removeTag(item, $event.event)\"\n    ></d-tag>\n    <d-tags\n      *ngIf=\"joinLabelTypes.includes(item.type)\"\n      [deletable]=\"true\"\n      [tags]=\"[item]\"\n      [titleProperty]=\"'title'\"\n      (tagDelete)=\"removeTag(item, $event.event)\"\n    >\n      <ng-template let-tag=\"tag\" let-colorKey=\"tag.colorKey || 'color'\">\n        <span>{{ tag.label }}: </span>\n        <ng-container *ngFor=\"let val of tag.value.cache; let i = index\">\n          <span *ngIf=\"i > 0\" class=\"devui-color-block-split-line\"> | </span>\n          <span *ngIf=\"item.type === 'label'\" class=\"devui-color-block-sm\" [style.background]=\"val[colorKey]\"></span>\n          <span [style.color]=\"val[colorKey]\">{{ val[tag.filterKey || 'label'] || '' }}</span>\n        </ng-container>\n      </ng-template>\n    </d-tags>\n  </div>\n</ng-template>\n\n<ng-template #defaultGroupNameTemplate let-item=\"tag\">\n  <strong>{{ item?.groupName }}</strong>\n</ng-template>\n\n<ng-template #noData>\n  <div class=\"devui-no-data-tip\">{{ i18nCommonText?.noData }}</div>\n</ng-template>\n\n<ng-template [type]=\"'radio'\" let-tagOption=\"tagOption\" let-key=\"tagOption.filterKey || 'label'\">\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <ul *ngIf=\"tagOption.options?.length\" class=\"devui-dropdown-menu-template devui-scrollbar\">\n    <li\n      *ngFor=\"let item of tagOption.options\"\n      title=\"{{ item[key] }}\"\n      class=\"devui-dropdown-item\"\n      [class.active]=\"tagOption?.value[key] === item[key]\"\n      (click)=\"chooseItem(tagOption, item)\"\n    >\n      <span>{{ item[key] }}</span>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template [type]=\"'dateRange'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <d-datepicker-calendar\n    *ngIf=\"dropdown.isOpen\"\n    id=\"{{ tagOption.field }}\"\n    style=\"overflow-x: hidden\"\n    #dDatepickerPro\n    [isRangeType]=\"true\"\n    [showTime]=\"tagOption.showTime\"\n    [ngModel]=\"tagOption.value.value\"\n    (ngModelChange)=\"dateValueChange(tagOption, dDatepickerPro)\"\n  >\n    <ng-template #footerTemplate>\n      <div class=\"devui-datepicker-footer\">\n        <d-button\n          style=\"margin-right: 8px\"\n          bsStyle=\"primary\"\n          (btnClick)=\"confirmDate(tagOption); closeMenu(dropdown)\"\n          [disabled]=\"!tagOption.value.value || tagOption.value.value.length < 2\"\n        >\n          {{ i18nCategorySearchText?.confirm }}\n        </d-button>\n      </div>\n    </ng-template>\n  </d-datepicker-calendar>\n</ng-template>\n\n<ng-template [type]=\"'checkbox'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <div *ngIf=\"tagOption.options?.length\" class=\"devui-dropdown-menu-template\">\n    <d-checkbox-group\n      [(ngModel)]=\"tagOption.value.value\"\n      [options]=\"tagOption.options\"\n      [filterKey]=\"tagOption.filterKey || 'label'\"\n      [isShowTitle]=\"true\"\n    >\n    </d-checkbox-group>\n  </div>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"chooseItems(tagOption); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'label'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <div *ngIf=\"tagOption.options?.length\" class=\"devui-dropdown-menu-template\">\n    <d-checkbox-group\n      [(ngModel)]=\"tagOption.value.value\"\n      [options]=\"tagOption.options\"\n      [filterKey]=\"'$label'\"\n      [labelTemplate]=\"labelContent\"\n      [isShowTitle]=\"true\"\n    >\n      <ng-template #labelContent let-label=\"label\">\n        <span class=\"devui-color-block\" [style.background]=\"splitLabel('color', label)\" title=\"{{ splitLabel('label', label) }}\"></span>\n        <span title=\"{{ splitLabel('label', label) }}\">{{ splitLabel('label', label) }}</span>\n      </ng-template>\n    </d-checkbox-group>\n  </div>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"chooseItems(tagOption); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'textInput'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <form #textInputForm=\"ngForm\">\n    <input\n      name=\"text-input\"\n      class=\"devui-category-search-type-text-input\"\n      autocomplete=\"off\"\n      dTextInput\n      [(ngModel)]=\"tagOption.value.value\"\n      [maxlength]=\"tagOption.maxLength\"\n      [placeholder]=\"tagOption.placeholder || ''\"\n      [dValidateRules]=\"tagOption.validateRules\"\n    />\n  </form>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button [disabled]=\"textInputForm.invalid\" (btnClick)=\"getTextInputValue(tagOption); closeMenu(dropdown)\">{{\n      i18nCategorySearchText?.confirm\n    }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'numberRange'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <div class=\"devui-input-number-operation-area\">\n    <d-input-number\n      size=\"sm\"\n      [min]=\"tagOption.min?.left\"\n      [max]=\"tagOption.max?.left\"\n      [maxLength]=\"tagOption.maxLength?.left\"\n      [step]=\"tagOption.step?.left || 1\"\n      [reg]=\"tagOption.reg?.left\"\n      [placeholder]=\"tagOption.placeholder?.left || ''\"\n      [(ngModel)]=\"tagOption.value.value[0]\"\n    >\n    </d-input-number>\n    <span> - </span>\n    <d-input-number\n      size=\"sm\"\n      [min]=\"tagOption.min?.right\"\n      [max]=\"tagOption.max?.right\"\n      [maxLength]=\"tagOption.maxLength?.right\"\n      [step]=\"tagOption.step?.right || 1\"\n      [reg]=\"tagOption.reg?.right\"\n      [placeholder]=\"tagOption.placeholder?.right || ''\"\n      [(ngModel)]=\"tagOption.value.value[1]\"\n    >\n    </d-input-number>\n  </div>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"getNumberRangeValue(tagOption); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'treeSelect'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\" let-isSelected=\"isSelected\">\n  <div *ngIf=\"tagOption.multiple && tagOption.options?.length\">\n    <ul class=\"devui-select-list\">\n      <span>{{ i18nCategorySearchText?.selected }}</span>\n      <li class=\"devui-select-item devui-no-label-item\" *ngFor=\"let item of tagOption.value.value; last as isLast\">\n        {{ item[tagOption.filterKey || tagOption.treeNodeTitleKey || 'title'] }}\n        <span *ngIf=\"!isLast\">, </span>\n      </li>\n    </ul>\n  </div>\n  <div *ngIf=\"tagOption.searchable\">\n    <input\n      class=\"devui-input\"\n      autocomplete=\"off\"\n      #searchInputModel=\"ngModel\"\n      [(ngModel)]=\"treeSearchKey\"\n      (ngModelChange)=\"treeSearch(tree, $event)\"\n    />\n    <span class=\"devui-form-control-feedback\">\n      <svg\n        width=\"14px\"\n        height=\"14px\"\n        viewBox=\"0 0 14 14\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        class=\"svg-icon-search\"\n        style=\"vertical-align: middle\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g transform=\"translate(-1.000000, -1.000000)\">\n            <path\n              d=\"M7.30811922,1 C10.7919973,1 13.6162384,3.82424117 13.6162384,7.30811922 C13.6162384,8.72507634 13.149053,10.0329164 12.3603151,11.0860065 L14.7360564,13.4616238 C15.0879812,13.8135487 15.0879812,14.3841316 14.7360564,14.7360564 C14.3841316,15.0879812 13.8135487,15.0879812 13.4616238,14.7360564 L11.0860065,12.3603151 C10.0329164,13.149053 8.72507634,13.6162384 7.30811922,13.6162384 C3.82424117,13.6162384 1,10.7919973 1,7.30811922 C1,3.82424117 3.82424117,1 7.30811922,1 Z M7.31,2.51 C4.6590332,2.51 2.51,4.6590332 2.51,7.31 C2.51,9.9609668 4.6590332,12.11 7.31,12.11 C9.9609668,12.11 12.11,9.9609668 12.11,7.31 C12.11,4.6590332 9.9609668,2.51 7.31,2.51 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </g>\n      </svg>\n    </span>\n  </div>\n  <div class=\"devui-category-search-tree-container\" [style.display]=\"tagOption.options?.length && !noRecord ? 'block' : 'none'\">\n    <d-operable-tree\n      #tree\n      [tree]=\"tagOption.multiple && isSelected ? tagOption.value.options : tagOption.options\"\n      [treeNodeIdKey]=\"tagOption.treeNodeIdKey || 'id'\"\n      [treeNodeChildrenKey]=\"tagOption.treeNodeChildrenKey || 'children'\"\n      [treeNodeTitleKey]=\"tagOption.filterKey || tagOption.treeNodeTitleKey || 'title'\"\n      [checkboxDisabledKey]=\"tagOption.disabledKey || 'disabled'\"\n      [checkable]=\"tagOption.multiple\"\n      [canActivateNode]=\"!tagOption.multiple\"\n      [canActivateParentNode]=\"!tagOption.leafOnly\"\n      [iconParentOpen]=\"tagOption.iconParentOpen || icons.iconParentOpen\"\n      [iconParentClose]=\"tagOption.iconParentClose || icons.iconParentClose\"\n      [iconLeaf]=\"tagOption.iconLeaf || icons.iconLeaf\"\n      (nodeChecked)=\"onOperableNodeChecked($event, tagOption)\"\n      (nodeSelected)=\"onOperableNodeSelected($event, tagOption, tree); closeMenu(dropdown)\"\n      class=\"devui-tree\"\n    >\n    </d-operable-tree>\n  </div>\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <div *ngIf=\"noRecord\" class=\"devui-no-data-tip\">{{ i18nCommonText?.noRecordsFound }}</div>\n  <div *ngIf=\"tagOption.multiple\" class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"getTreeValue(tagOption, tree); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-category-search-container{position:relative;border-radius:2px;border-radius:var(--devui-border-radius, 2px);width:100%;height:32px;padding:0 8px;display:flex;align-items:flex-start;background:transparent;transition:border .3s cubic-bezier(.645,.045,.355,1);transition:border var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));background-color:#fff;background-color:var(--devui-base-bg, #ffffff);border:1px solid #d7d8da;border:1px solid var(--devui-line, #d7d8da)}.devui-category-search-container.container-hover{border:1px solid #9b9fa8;border:1px solid var(--devui-form-control-line-hover, #9b9fa8)}.devui-category-search-container.container-hover .devui-category-search-icon svg g path{fill:#252b3a;fill:var(--devui-icon-fill-hover, #252b3a)}.devui-category-search-container .devui-category-search-line-container{width:100%;height:32px;overflow:hidden}.devui-category-search-container .devui-category-search-line-container:hover{overflow-x:auto;overflow-x:overlay}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line{display:flex;flex-flow:row nowrap;justify-content:flex-start;align-items:flex-start;width:100%;height:30px;position:relative;top:-1px}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line>li{display:flex;align-items:center;flex-grow:0;white-space:nowrap;height:100%}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line .devui-category-search-input{display:flex;justify-content:flex-start;flex-grow:1;align-items:center;min-width:160px;padding-right:20px}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line .devui-category-search-input input{min-width:240px;width:100%;height:32px;font-size:12px;font-size:var(--devui-font-size-sm, 12px)}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line .devui-category-search-input .devui-category-search-toggle{padding-left:0}.devui-category-search-container input{border:none;background:transparent}.devui-category-search-container .devui-input-container{display:flex;flex:1}.devui-category-search-container .devui-category-search-ctrl-container{display:flex;flex-wrap:nowrap}.devui-category-search-container .devui-category-search-ctrl-container .devui-category-search-separate-line{border-right:solid 1px #d7d8da;border-right:solid 1px var(--devui-line, #d7d8da);width:0;height:16px;margin:8px}.devui-tag-item{display:inline-block;margin-right:4px}.devui-tag-item:first-child{margin-left:4px}.devui-tag-item:focus{outline:none}.devui-tag-item .devui-color-block-split-line{color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-tag-item .devui-color-block-sm{width:8px;height:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin-right:4px;display:inline-block;position:relative;top:-1px;vertical-align:middle}span:focus{outline:none}.devui-category-search-icon{display:flex;padding-right:8px;align-items:center;height:30px}.devui-category-search-icon svg{cursor:pointer}.devui-category-search-icon svg path{fill:#71757f;fill:var(--devui-icon-fill, #71757f);transition:all cubic-bezier(.645,.045,.355,1) .3s;transition:all var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)) var(--devui-animation-duration-slow, .3s)}.devui-category-search-icon:hover svg g path{fill:#252b3a;fill:var(--devui-icon-fill-hover, #252b3a)}input,input:focus{outline:none!important}a:focus,a:hover{color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}d-tag{cursor:pointer}.devui-category-search-toggle{height:30px}.devui-date-picker-operation-area{border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3);margin:16px 0;padding:16px 16px 0;display:flex;justify-content:flex-end}.devui-date-picker-operation-area d-button:not(:first-child){margin-left:16px}.devui-dropdown-operation-area{border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3);padding-top:8px;margin:8px 0;display:flex;justify-content:center}.devui-dropdown-operation-area d-button:not(:first-child){margin-left:16px}.devui-input-number-operation-area{padding:16px 16px 8px;display:flex;justify-content:space-evenly}.devui-save-panel{width:400px;height:auto;margin-top:4px}.devui-save-panel .devui-save-panel-title{display:flex;justify-content:space-between;height:48px;line-height:48px;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3);padding:0 20px;font-size:14px;font-weight:700;color:16px;color:var(--devui-font-size-page-title, 16px)}.devui-save-panel .devui-save-filter-name{padding:16px 20px}.devui-save-panel .devui-save-filter-name>form{position:relative}.devui-save-panel .devui-save-filter-name>form svg{position:absolute;right:8px;top:50%;transform:translateY(-50%);cursor:pointer}.devui-save-panel .devui-save-filter-name>form svg path{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}.devui-save-panel .devui-save-filter-name>form svg:hover svg g path{fill:#252b3a;fill:var(--devui-icon-fill-hover, #252b3a)}.devui-save-panel .devui-save-filter-name>span{padding-bottom:8px;display:block;line-height:1em}.devui-save-panel .devui-save-filter-name>input{width:100%;height:32px;margin:4px auto;line-height:20px;border:1px solid #d7d8da;border:1px solid var(--devui-form-control-line, #d7d8da)}.devui-save-panel .devui-save-panel-operation-area{padding-bottom:12px;display:flex;justify-content:center}.devui-save-panel .devui-save-panel-operation-area d-button:not(:first-child){margin-left:16px}.devui-dropdown-menu-template{max-width:300px;max-height:352px}.devui-dropdown-menu-template .devui-category-search-group{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-dropdown-menu-template .devui-category-search-group.devui-dropdown-item:hover{background-color:transparent;color:#252b3a;color:var(--devui-text, #252b3a);cursor:default}.devui-selected-tags-list ul{display:flex;flex-flow:row wrap;align-items:center;justify-content:flex-start;padding:4px;max-height:390px;overflow:auto}.devui-selected-tags-list ul li{display:flex;flex-grow:0;flex-flow:row wrap}.devui-selected-tags-list ul li:first-child{margin-left:0}:host ::ng-deep .devui-tag-container{line-height:1}:host ::ng-deep .devui-tag-container d-tag>.devui-tag-item{display:block!important}:host ::ng-deep .devui-tag-container d-tag>.devui-tag-item>span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:inline-block;vertical-align:bottom;margin:0 4px}:host ::ng-deep .devui-checkbox-column-margin{height:32px!important;line-height:32px!important}::ng-deep .cdk-overlay-container d-datepicker[id=devui-category-search-date-picker] .devui-month-view{box-shadow:none!important}::ng-deep .cdk-overlay-container d-datepicker[id=devui-category-search-date-picker] .devui-month-view tfoot{display:none}::ng-deep .cdk-overlay-container .devui-selected-tags-list ul li .remove-button{right:8px}::ng-deep .devui-dropdown-top .devui-dropdown-menu-fix,::ng-deep .devui-dropdown-bottom .devui-dropdown-menu-fix,::ng-deep .devui-dropdown-open .devui-dropdown-menu-fix{margin-bottom:0}::ng-deep .devui-dropdown-menu-fix{min-width:200px;margin-left:0;overflow-y:auto;white-space:nowrap}::ng-deep .devui-dropdown-menu-fix.max-height{max-height:405px}::ng-deep .devui-dropdown-menu-fix .devui-checkbox-group{padding:8px 12px 0}::ng-deep .devui-dropdown-menu-fix .devui-checkbox-group .devui-color-block{width:12px;height:12px;margin-right:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);top:-1px;position:relative;vertical-align:middle;display:inline-block}::ng-deep .devui-dropdown-menu-fix .devui-category-search-type-text-input{margin:16px 8px 8px;width:calc(100% - 16px)}::ng-deep .devui-dropdown-menu-fix .devui-select-list{display:flex;flex-wrap:wrap;max-width:300px;padding:8px}::ng-deep .devui-dropdown-menu-fix .devui-select-list span{margin-right:8px}::ng-deep .devui-dropdown-menu-fix .devui-category-search-tree-container{overflow-y:auto;max-height:270px;margin-bottom:-8px;padding:4px 0 4px 8px}::ng-deep .devui-dropdown-menu-fix .devui-yearOption,::ng-deep .devui-dropdown-menu-fix .devui-monthOption{white-space:normal}::ng-deep .devui-dropdown-menu-fix d-datepicker-calendar{display:block}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox{margin:0 -8px;padding:0 8px}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:hover label{color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:active{background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:active label{color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:100%}::ng-deep .devui-dropdown-menu-fix d-input-number{width:70px}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group ul{max-height:310px}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox{transition:background-color .1s cubic-bezier(.645,.045,.355,1);transition:background-color var(--devui-animation-duration-fast, .1s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox label{transition:color .1s cubic-bezier(.645,.045,.355,1);transition:color var(--devui-animation-duration-fast, .1s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}.devui-dropdown-menu-tip{cursor:text;padding:12px 12px 0;pointer-events:none;color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-dividing-line{height:1px;width:100%;background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);margin-top:4px}.devui-dropdown-menu{margin-top:4px;padding-bottom:0}.devui-dropdown-menu .devui-dropdown-item .icon-search{margin-right:4px}.devui-no-data-text{padding:8px 0;text-align:center}.devui-datepicker-footer{text-align:right}\n"], components: [{ type: i2.DropDownAppendToBodyComponent, selector: "[dDropDown][appendToBody]", inputs: ["alignOrigin", "appendToBodyDirections"] }, { type: i3.ButtonComponent, selector: "d-button", inputs: ["id", "type", "bsStyle", "shape", "bsSize", "bsPosition", "bordered", "icon", "disabled", "showLoading", "width", "autofocus", "loadingTemplateRef"], outputs: ["btnClick"] }, { type: i4.TagComponent, selector: "d-tag", inputs: ["tag", "labelStyle", "customColor", "deletable", "titleContent", "mode", "checked", "maxWidth", "customViewTemplate"], outputs: ["tagDelete", "checkedChange"], exportAs: ["Tag"] }, { type: i4.TagsComponent, selector: "d-tags", inputs: ["tags", "displayProperty", "deletable", "mode", "titleProperty", "hideBeyondTags"], outputs: ["tagDelete"], exportAs: ["Tags"] }, { type: i5.DatepickerProCalendarComponent, selector: "d-datepicker-calendar", inputs: ["activeRangeType", "isRangeType", "showTime", "mode", "startIndexOfWeek", "splitter", "showRangeHeader", "placeholder", "allowClear", "minDate", "maxDate", "markedRangeDateList", "markedDateList"], outputs: ["confirmEvent", "cancelEvent"] }, { type: i6.CheckBoxGroupComponent, selector: "d-checkbox-group", inputs: ["name", "itemWidth", "color", "direction", "isShowTitle", "disabled", "options", "filterKey", "labelTemplate", "showAnimation", "beforeChange"], outputs: ["change"] }, { type: i7.InputNumberComponent, selector: "d-input-number", inputs: ["step", "disabled", "size", "decimalLimit", "autoFocus", "allowEmpty", "placeholder", "maxLength", "reg", "min", "max"], outputs: ["afterValueChanged", "whileValueChanging"] }, { type: i8.OperableTreeComponent, selector: "d-operable-tree", inputs: ["tree", "treeNodeIdKey", "treeNodeChildrenKey", "checkboxDisabledKey", "selectDisabledKey", "toggleDisabledKey", "iconParentOpen", "iconParentClose", "iconLeaf", "showLoading", "loadingTemplateRef", "treeNodesRef", "checkable", "deletable", "addable", "editable", "draggable", "checkboxInput", "beforeAddNode", "disableMouseEvent", "beforeDeleteNode", "beforeNodeDrop", "beforeEditNode", "canActivateNode", "canActivateParentNode", "canActivateMultipleNode", "treeNodeTitleKey", "postAddNode", "iconTemplatePosition", "virtualScroll", "virtualScrollHeight", "showAnimation", "itemSize", "minBufferPx", "maxBufferPx", "checkableRelation", "dropType"], outputs: ["nodeSelected", "nodeDblClicked", "nodeRightClicked", "nodeToggled", "afterTreeInit", "nodeDeleted", "nodeChecked", "currentNodeChecked", "nodeEdited", "editValueChange", "nodeDragStart", "nodeOnDrop"], exportAs: ["dOperableTreeComponent"] }], directives: [{ type: i9.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.DropDownDirective, selector: "[dDropDown]", inputs: ["isOpen", "disabled", "showAnimation", "trigger", "closeScope", "closeOnMouseLeaveMenu"], outputs: ["toggleEvent"], exportAs: ["d-dropdown"] }, { type: i2.DropDownToggleDirective, selector: "[dDropDownToggle]", inputs: ["toggleOnFocus", "autoFocus"], exportAs: ["d-dropdown-toggle"] }, { type: i9.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.DropDownMenuDirective, selector: "[dDropDownMenu]", exportAs: ["d-dropdown-menu"] }, { type: i10.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i11.TextDirective, selector: "[dTextInput]", inputs: ["error", "size"], exportAs: ["dTextInput"] }, { type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i10.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i10.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i12.DFormControlRuleDirective, selector: "[dValidateRules][formControlName],[dValidateRules][ngModel],[dValidateRules][formControl]", inputs: ["dValidateRules", "dValidatePopConfig"], outputs: ["dRulesStatusChange"], exportAs: ["dValidateRules"] }, { type: DefaultTemplateDirective, selector: "ng-template[type]", inputs: ["type"] }, { type: i10.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CategorySearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'd-category-search', template: "<div\n  #PrimeContainer\n  class=\"devui-category-search-container devui-category-search-id-{{ id }}\"\n  [ngClass]=\"{ 'container-hover': isHover && !isFocus }\"\n  (mouseenter)=\"isHover = true\"\n  (mouseleave)=\"isHover = false\"\n>\n  <div class=\"devui-category-search-icon\" (click)=\"search()\">\n    <svg\n      width=\"16px\"\n      height=\"16px\"\n      viewBox=\"0 0 16 16\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      class=\"svg-icon-search\"\n    >\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <path\n          d=\"M7,0 C10.8659932,0 14,3.13400675 14,7 C14,8.57190212 13.4818819,10.0227913 12.6071076,11.1912056 L15.7071068,14.2928932 C16.0976311,14.6834175 16.0976311,15.3165825 15.7071068,15.7071068 C15.3466228,16.0675907 14.7793918,16.0953203 14.3871006,15.7902954 L14.2928932,15.7071068 L11.1912056,12.6071076 C10.0227913,13.4818819 8.57190212,14 7,14 C3.13400675,14 5.5067062e-14,10.8659932 5.5067062e-14,7 C5.5067062e-14,3.13400675 3.13400675,0 7,0 Z M7,2 C4.23857625,2 2,4.23857625 2,7 C2,9.76142375 4.23857625,12 7,12 C9.76142375,12 12,9.76142375 12,7 C12,4.23857625 9.76142375,2 7,2 Z\"\n          id=\"\uFFFD\uFFFD\u0532\uFFFD\uFFFD\"\n          fill=\"#71757F\"\n        ></path>\n      </g>\n    </svg>\n  </div>\n  <div #ScrollBarContainer class=\"devui-category-search-line-container\">\n    <ul class=\"devui-category-search-line\">\n      <li\n        class=\"devui-tag-item\"\n        *ngFor=\"let item of selectedTags\"\n        #selectedDropdown=\"d-dropdown\"\n        [ngStyle]=\"{ width: tagMaxWidth || '' }\"\n        dDropDown\n        appendToBody\n        dDropDownToggle\n        [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n        [closeScope]=\"checkType(item)\"\n        (toggleEvent)=\"resetContent(selectedDropdown, item)\"\n      >\n        <ng-template [ngTemplateOutlet]=\"joinLabelTypesTemplate\" [ngTemplateOutletContext]=\"{ item: item }\"></ng-template>\n        <div dDropDownMenu class=\"devui-dropdown-menu devui-dropdown-menu-fix\" [ngClass]=\"{ 'max-height': item.type !== 'treeSelect' }\">\n          <ng-template\n            [ngTemplateOutlet]=\"item.customTemplate || templates[item.type]\"\n            [ngTemplateOutletContext]=\"{ tagOption: item, dropdown: selectedDropdown, isSelected: true }\"\n          ></ng-template>\n        </div>\n      </li>\n      <div class=\"devui-category-search-input\">\n        <div\n          class=\"devui-input-container\"\n          #inputDropdown=\"d-dropdown\"\n          dDropDown\n          appendToBody\n          [trigger]=\"'manually'\"\n          [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n          [closeScope]=\"checkType(currentSelectTag)\"\n          (toggleEvent)=\"resetContent(inputDropdown)\"\n        >\n          <div style=\"width: 100%\">\n            <input\n              class=\"devui-category-search-toggle\"\n              autocomplete=\"off\"\n              #InputEle\n              dDropDownToggle\n              dTextInput\n              [readOnly]=\"inputReadOnly\"\n              [placeholder]=\"placeholderText || i18nCategorySearchText?.searchPlaceholder || ''\"\n              [(ngModel)]=\"searchKey\"\n              (ngModelChange)=\"searchKeyChangeEvent($event)\"\n              (click)=\"openMenu(inputDropdown, $event)\"\n              (keyup)=\"checkInputSearching(); openMenu(inputDropdown, $event)\"\n              (keydown.backspace)=\"backspaceEvent(inputDropdown)\"\n              (keydown.enter)=\"searchInputValue($event); closeMenu(inputDropdown)\"\n              (focus)=\"isHover = false; isFocus = true\"\n              (blur)=\"isFocus = false; blurInput()\"\n            />\n          </div>\n          <div\n            *ngIf=\"!enterSearch || (enterSearch && showSearchCategory)\"\n            dDropDownMenu\n            class=\"devui-dropdown-menu devui-dropdown-menu-fix\"\n            [ngClass]=\"{ 'max-height': currentSelectTag?.type !== 'treeSelect' }\"\n          >\n            <ul *ngIf=\"!currentSelectTag\" class=\"devui-dropdown-menu-template devui-scrollbar\">\n              <ng-container *ngIf=\"!enterSearch && !currentSelectTag\">\n                <ng-container *ngFor=\"let item of categoryDisplay\">\n                  <li *ngIf=\"item.groupLength\" class=\"devui-dropdown-item devui-category-search-group\">\n                    <ng-template\n                      [ngTemplateOutlet]=\"customGroupNameTemplate || defaultGroupNameTemplate\"\n                      [ngTemplateOutletContext]=\"{ tag: item }\"\n                    ></ng-template>\n                  </li>\n                  <li\n                    *ngIf=\"item.groupLength === undefined\"\n                    class=\"devui-dropdown-item\"\n                    (click)=\"chooseCategory(item, inputDropdown); closeMenu(inputDropdown)\"\n                  >\n                    <span title=\"{{ item?.label }}\">{{ item?.label }}</span>\n                  </li>\n                </ng-container>\n                <div class=\"devui-no-data-text\" *ngIf=\"showNoDataTips\">{{ i18nCategorySearchText?.noFilterConditions }}</div>\n              </ng-container>\n              <ng-container *ngIf=\"enterSearch\">\n                <li\n                  *ngIf=\"showSearchConfig.keyword\"\n                  class=\"devui-dropdown-item devui-search-description\"\n                  (click)=\"searchInputValue($event); closeMenu(inputDropdown)\"\n                >\n                  <span class=\"icon-search\"></span>{{ showSearchConfig.keywordDescription(searchKey) }}\n                </li>\n                <ng-container *ngIf=\"showSearchConfig.field\">\n                  <li *ngFor=\"let item of searchField\" (click)=\"searchCategory(item); closeMenu(inputDropdown)\" class=\"devui-dropdown-item\">\n                    <span class=\"icon-search\"></span>{{ showSearchConfig.fieldDescription(item?.label) }}\n                  </li>\n                </ng-container>\n                <div\n                  *ngIf=\"(showSearchConfig.keyword || showSearchConfig.field) && showSearchConfig.category && currentSearchCategory?.length\"\n                  class=\"devui-dividing-line\"\n                ></div>\n                <ng-container *ngIf=\"showSearchConfig.category && currentSearchCategory?.length\">\n                  <div class=\"devui-dropdown-menu-tip\" [style.paddingBottom]=\"currentSearchCategory.length ? '0' : '12px'\">\n                    {{ showSearchConfig.categoryDescription }}\n                  </div>\n                  <ul class=\"devui-dropdown-menu-template devui-scrollbar\">\n                    <li\n                      *ngFor=\"let item of currentSearchCategory\"\n                      (click)=\"showCurrentSearchCategory(item, inputDropdown)\"\n                      class=\"devui-dropdown-item\"\n                    >\n                      <span>{{ item?.label }}</span>\n                    </li>\n                  </ul>\n                </ng-container>\n              </ng-container>\n            </ul>\n            <ng-container *ngIf=\"!enterSearch && currentSelectTag\">\n              <ng-template\n                [ngTemplateOutlet]=\"currentSelectTag.customTemplate || templates[currentSelectTag.type]\"\n                [ngTemplateOutletContext]=\"{ tagOption: currentSelectTag, dropdown: inputDropdown }\"\n              ></ng-template>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </ul>\n  </div>\n  <div class=\"devui-category-search-ctrl-container\" *ngIf=\"selectedTags.length || searchKey\">\n    <div class=\"devui-category-search-separate-line\"></div>\n    <div *ngIf=\"allowClear\" class=\"devui-category-search-icon\" (click)=\"clearFilter($event)\">\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <title>{{ i18nCategorySearchText?.clearFilterCondition }}</title>\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M4.61289944,3.20970461 L4.70710678,3.29289322 L8,6.585 L11.2928932,3.29289322 C11.6834175,2.90236893 12.3165825,2.90236893 12.7071068,3.29289322 C13.0675907,3.65337718 13.0953203,4.22060824 12.7902954,4.61289944 L12.7071068,4.70710678 L9.415,8 L12.7071068,11.2928932 C13.0976311,11.6834175 13.0976311,12.3165825 12.7071068,12.7071068 C12.3466228,13.0675907 11.7793918,13.0953203 11.3871006,12.7902954 L11.2928932,12.7071068 L8,9.415 L4.70710678,12.7071068 C4.31658249,13.0976311 3.68341751,13.0976311 3.29289322,12.7071068 C2.93240926,12.3466228 2.90467972,11.7793918 3.20970461,11.3871006 L3.29289322,11.2928932 L6.585,8 L3.29289322,4.70710678 C2.90236893,4.31658249 2.90236893,3.68341751 3.29289322,3.29289322 C3.65337718,2.93240926 4.22060824,2.90467972 4.61289944,3.20970461 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </svg>\n    </div>\n    <div\n      *ngIf=\"allowSave\"\n      class=\"devui-category-search-icon\"\n      #saveDropdown=\"d-dropdown\"\n      dDropDown\n      appendToBody\n      [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n      [closeScope]=\"'blank'\"\n      (toggleEvent)=\"createFilterInputAutoFocus(saveDropdown, createFilterInput, filterNameForm)\"\n    >\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        dDropDownToggle\n      >\n        <title>{{ i18nCategorySearchText?.saveFilter }}</title>\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M12,1 L15,4 L15,13 C15,14.1045695 14.1045695,15 13,15 L3,15 C1.8954305,15 1,14.1045695 1,13 L1,3 C1,1.8954305 1.8954305,1 3,1 L12,1 Z M11.171,3 L3,3 L3,13 L4,13 L4,10 C4,9.48716416 4.38604019,9.06449284 4.88337887,9.00672773 L5,9 L11,9 C11.5128358,9 11.9355072,9.38604019 11.9932723,9.88337887 L12,10 L12,13 L13,13 L13,4.829 L11.171,3 Z M9.999,10.999 L5.999,10.999 L6,13 L10,13 L9.999,10.999 Z M7,5 C7.55228475,5 8,5.44771525 8,6 C8,6.55228475 7.55228475,7 7,7 L5,7 C4.44771525,7 4,6.55228475 4,6 C4,5.44771525 4.44771525,5 5,5 L7,5 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </svg>\n      <div dDropDownMenu class=\"devui-save-panel\">\n        <div class=\"devui-save-panel-title\">\n          <span>{{ i18nCategorySearchText?.saveFilter }}</span>\n        </div>\n        <div class=\"devui-save-filter-name\">\n          <span>{{ i18nCategorySearchText?.filterTitle }}</span>\n          <form #filterNameForm=\"ngForm\">\n            <input\n              name=\"filter-name\"\n              class=\"devui-category-search-toggle\"\n              autocomplete=\"off\"\n              #createFilterInput\n              dTextInput\n              [(ngModel)]=\"filterName\"\n              [placeholder]=\"i18nCategorySearchText?.placeholder || ''\"\n              [dValidateRules]=\"filterNameRules\"\n            />\n            <svg\n              *ngIf=\"showFilterNameClear\"\n              (click)=\"$event.preventDefault(); $event.stopPropagation(); filterName = ''\"\n              width=\"16px\"\n              height=\"16px\"\n              viewBox=\"0 0 16 16\"\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <title>{{ i18nCategorySearchText?.clearFilterCondition }}</title>\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <path\n                  d=\"M4.61289944,3.20970461 L4.70710678,3.29289322 L8,6.585 L11.2928932,3.29289322 C11.6834175,2.90236893 12.3165825,2.90236893 12.7071068,3.29289322 C13.0675907,3.65337718 13.0953203,4.22060824 12.7902954,4.61289944 L12.7071068,4.70710678 L9.415,8 L12.7071068,11.2928932 C13.0976311,11.6834175 13.0976311,12.3165825 12.7071068,12.7071068 C12.3466228,13.0675907 11.7793918,13.0953203 11.3871006,12.7902954 L11.2928932,12.7071068 L8,9.415 L4.70710678,12.7071068 C4.31658249,13.0976311 3.68341751,13.0976311 3.29289322,12.7071068 C2.93240926,12.3466228 2.90467972,11.7793918 3.20970461,11.3871006 L3.29289322,11.2928932 L6.585,8 L3.29289322,4.70710678 C2.90236893,4.31658249 2.90236893,3.68341751 3.29289322,3.29289322 C3.65337718,2.93240926 4.22060824,2.90467972 4.61289944,3.20970461 Z\"\n                  fill-rule=\"nonzero\"\n                ></path>\n              </g>\n            </svg>\n          </form>\n        </div>\n        <div class=\"devui-save-panel-operation-area\">\n          <d-button [disabled]=\"filterNameForm.invalid\" (btnClick)=\"createFilterFn(); saveDropdown.toggle()\">{{\n            i18nCategorySearchText?.confirm\n          }}</d-button>\n          <d-button bsStyle=\"common\" (btnClick)=\"saveDropdown.toggle()\">{{ i18nCategorySearchText?.cancel }}</d-button>\n        </div>\n      </div>\n    </div>\n    <div\n      *ngIf=\"allowShowMore\"\n      class=\"devui-category-search-icon\"\n      #seeMoreDropdown=\"d-dropdown\"\n      dDropDown\n      appendToBody\n      [alignOrigin]=\"primeContainer\"\n      [appendToBodyDirections]=\"['rightDown', 'rightUp', 'leftDown', 'leftUp']\"\n    >\n      <svg\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        dDropDownToggle\n      >\n        <title>{{ i18nCategorySearchText?.seeMore }}</title>\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path\n            d=\"M1,2 L3,2 L3,4 L1,4 L1,2 Z M1,7 L3,7 L3,9 L1,9 L1,7 Z M1,12 L3,12 L3,14 L1,14 L1,12 Z M5,2 L15,2 L15,4 L5,4 L5,2 Z M5,7 L15,7 L15,9 L5,9 L5,7 Z M5,12 L15,12 L15,14 L5,14 L5,12 Z\"\n            fill-rule=\"nonzero\"\n          ></path>\n        </g>\n      </svg>\n      <div dDropDownMenu class=\"devui-selected-tags-list\">\n        <ul [ngStyle]=\"{ width: PrimeContainer?.clientWidth + 'px' }\">\n          <li class=\"devui-tag-item\" *ngFor=\"let item of selectedTags; let i = index\" (click)=\"scrollToTag(i, $event)\">\n            <ng-template [ngTemplateOutlet]=\"joinLabelTypesTemplate\" [ngTemplateOutletContext]=\"{ item: item }\"></ng-template>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #joinLabelTypesTemplate let-item=\"item\">\n  <div class=\"devui-tag-container\">\n    <d-tag\n      *ngIf=\"!joinLabelTypes.includes(item.type)\"\n      [deletable]=\"true\"\n      [tag]=\"item.label + ': ' + (item.value[item.filterKey || 'label'] || '')\"\n      [titleContent]=\"item.title\"\n      (tagDelete)=\"removeTag(item, $event.event)\"\n    ></d-tag>\n    <d-tags\n      *ngIf=\"joinLabelTypes.includes(item.type)\"\n      [deletable]=\"true\"\n      [tags]=\"[item]\"\n      [titleProperty]=\"'title'\"\n      (tagDelete)=\"removeTag(item, $event.event)\"\n    >\n      <ng-template let-tag=\"tag\" let-colorKey=\"tag.colorKey || 'color'\">\n        <span>{{ tag.label }}: </span>\n        <ng-container *ngFor=\"let val of tag.value.cache; let i = index\">\n          <span *ngIf=\"i > 0\" class=\"devui-color-block-split-line\"> | </span>\n          <span *ngIf=\"item.type === 'label'\" class=\"devui-color-block-sm\" [style.background]=\"val[colorKey]\"></span>\n          <span [style.color]=\"val[colorKey]\">{{ val[tag.filterKey || 'label'] || '' }}</span>\n        </ng-container>\n      </ng-template>\n    </d-tags>\n  </div>\n</ng-template>\n\n<ng-template #defaultGroupNameTemplate let-item=\"tag\">\n  <strong>{{ item?.groupName }}</strong>\n</ng-template>\n\n<ng-template #noData>\n  <div class=\"devui-no-data-tip\">{{ i18nCommonText?.noData }}</div>\n</ng-template>\n\n<ng-template [type]=\"'radio'\" let-tagOption=\"tagOption\" let-key=\"tagOption.filterKey || 'label'\">\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <ul *ngIf=\"tagOption.options?.length\" class=\"devui-dropdown-menu-template devui-scrollbar\">\n    <li\n      *ngFor=\"let item of tagOption.options\"\n      title=\"{{ item[key] }}\"\n      class=\"devui-dropdown-item\"\n      [class.active]=\"tagOption?.value[key] === item[key]\"\n      (click)=\"chooseItem(tagOption, item)\"\n    >\n      <span>{{ item[key] }}</span>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template [type]=\"'dateRange'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <d-datepicker-calendar\n    *ngIf=\"dropdown.isOpen\"\n    id=\"{{ tagOption.field }}\"\n    style=\"overflow-x: hidden\"\n    #dDatepickerPro\n    [isRangeType]=\"true\"\n    [showTime]=\"tagOption.showTime\"\n    [ngModel]=\"tagOption.value.value\"\n    (ngModelChange)=\"dateValueChange(tagOption, dDatepickerPro)\"\n  >\n    <ng-template #footerTemplate>\n      <div class=\"devui-datepicker-footer\">\n        <d-button\n          style=\"margin-right: 8px\"\n          bsStyle=\"primary\"\n          (btnClick)=\"confirmDate(tagOption); closeMenu(dropdown)\"\n          [disabled]=\"!tagOption.value.value || tagOption.value.value.length < 2\"\n        >\n          {{ i18nCategorySearchText?.confirm }}\n        </d-button>\n      </div>\n    </ng-template>\n  </d-datepicker-calendar>\n</ng-template>\n\n<ng-template [type]=\"'checkbox'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <div *ngIf=\"tagOption.options?.length\" class=\"devui-dropdown-menu-template\">\n    <d-checkbox-group\n      [(ngModel)]=\"tagOption.value.value\"\n      [options]=\"tagOption.options\"\n      [filterKey]=\"tagOption.filterKey || 'label'\"\n      [isShowTitle]=\"true\"\n    >\n    </d-checkbox-group>\n  </div>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"chooseItems(tagOption); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'label'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <div *ngIf=\"tagOption.options?.length\" class=\"devui-dropdown-menu-template\">\n    <d-checkbox-group\n      [(ngModel)]=\"tagOption.value.value\"\n      [options]=\"tagOption.options\"\n      [filterKey]=\"'$label'\"\n      [labelTemplate]=\"labelContent\"\n      [isShowTitle]=\"true\"\n    >\n      <ng-template #labelContent let-label=\"label\">\n        <span class=\"devui-color-block\" [style.background]=\"splitLabel('color', label)\" title=\"{{ splitLabel('label', label) }}\"></span>\n        <span title=\"{{ splitLabel('label', label) }}\">{{ splitLabel('label', label) }}</span>\n      </ng-template>\n    </d-checkbox-group>\n  </div>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"chooseItems(tagOption); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'textInput'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <form #textInputForm=\"ngForm\">\n    <input\n      name=\"text-input\"\n      class=\"devui-category-search-type-text-input\"\n      autocomplete=\"off\"\n      dTextInput\n      [(ngModel)]=\"tagOption.value.value\"\n      [maxlength]=\"tagOption.maxLength\"\n      [placeholder]=\"tagOption.placeholder || ''\"\n      [dValidateRules]=\"tagOption.validateRules\"\n    />\n  </form>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button [disabled]=\"textInputForm.invalid\" (btnClick)=\"getTextInputValue(tagOption); closeMenu(dropdown)\">{{\n      i18nCategorySearchText?.confirm\n    }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'numberRange'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\">\n  <div class=\"devui-input-number-operation-area\">\n    <d-input-number\n      size=\"sm\"\n      [min]=\"tagOption.min?.left\"\n      [max]=\"tagOption.max?.left\"\n      [maxLength]=\"tagOption.maxLength?.left\"\n      [step]=\"tagOption.step?.left || 1\"\n      [reg]=\"tagOption.reg?.left\"\n      [placeholder]=\"tagOption.placeholder?.left || ''\"\n      [(ngModel)]=\"tagOption.value.value[0]\"\n    >\n    </d-input-number>\n    <span> - </span>\n    <d-input-number\n      size=\"sm\"\n      [min]=\"tagOption.min?.right\"\n      [max]=\"tagOption.max?.right\"\n      [maxLength]=\"tagOption.maxLength?.right\"\n      [step]=\"tagOption.step?.right || 1\"\n      [reg]=\"tagOption.reg?.right\"\n      [placeholder]=\"tagOption.placeholder?.right || ''\"\n      [(ngModel)]=\"tagOption.value.value[1]\"\n    >\n    </d-input-number>\n  </div>\n  <div class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"getNumberRangeValue(tagOption); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n\n<ng-template [type]=\"'treeSelect'\" let-tagOption=\"tagOption\" let-dropdown=\"dropdown\" let-isSelected=\"isSelected\">\n  <div *ngIf=\"tagOption.multiple && tagOption.options?.length\">\n    <ul class=\"devui-select-list\">\n      <span>{{ i18nCategorySearchText?.selected }}</span>\n      <li class=\"devui-select-item devui-no-label-item\" *ngFor=\"let item of tagOption.value.value; last as isLast\">\n        {{ item[tagOption.filterKey || tagOption.treeNodeTitleKey || 'title'] }}\n        <span *ngIf=\"!isLast\">, </span>\n      </li>\n    </ul>\n  </div>\n  <div *ngIf=\"tagOption.searchable\">\n    <input\n      class=\"devui-input\"\n      autocomplete=\"off\"\n      #searchInputModel=\"ngModel\"\n      [(ngModel)]=\"treeSearchKey\"\n      (ngModelChange)=\"treeSearch(tree, $event)\"\n    />\n    <span class=\"devui-form-control-feedback\">\n      <svg\n        width=\"14px\"\n        height=\"14px\"\n        viewBox=\"0 0 14 14\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        class=\"svg-icon-search\"\n        style=\"vertical-align: middle\"\n      >\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g transform=\"translate(-1.000000, -1.000000)\">\n            <path\n              d=\"M7.30811922,1 C10.7919973,1 13.6162384,3.82424117 13.6162384,7.30811922 C13.6162384,8.72507634 13.149053,10.0329164 12.3603151,11.0860065 L14.7360564,13.4616238 C15.0879812,13.8135487 15.0879812,14.3841316 14.7360564,14.7360564 C14.3841316,15.0879812 13.8135487,15.0879812 13.4616238,14.7360564 L11.0860065,12.3603151 C10.0329164,13.149053 8.72507634,13.6162384 7.30811922,13.6162384 C3.82424117,13.6162384 1,10.7919973 1,7.30811922 C1,3.82424117 3.82424117,1 7.30811922,1 Z M7.31,2.51 C4.6590332,2.51 2.51,4.6590332 2.51,7.31 C2.51,9.9609668 4.6590332,12.11 7.31,12.11 C9.9609668,12.11 12.11,9.9609668 12.11,7.31 C12.11,4.6590332 9.9609668,2.51 7.31,2.51 Z\"\n              fill-rule=\"nonzero\"\n            ></path>\n          </g>\n        </g>\n      </svg>\n    </span>\n  </div>\n  <div class=\"devui-category-search-tree-container\" [style.display]=\"tagOption.options?.length && !noRecord ? 'block' : 'none'\">\n    <d-operable-tree\n      #tree\n      [tree]=\"tagOption.multiple && isSelected ? tagOption.value.options : tagOption.options\"\n      [treeNodeIdKey]=\"tagOption.treeNodeIdKey || 'id'\"\n      [treeNodeChildrenKey]=\"tagOption.treeNodeChildrenKey || 'children'\"\n      [treeNodeTitleKey]=\"tagOption.filterKey || tagOption.treeNodeTitleKey || 'title'\"\n      [checkboxDisabledKey]=\"tagOption.disabledKey || 'disabled'\"\n      [checkable]=\"tagOption.multiple\"\n      [canActivateNode]=\"!tagOption.multiple\"\n      [canActivateParentNode]=\"!tagOption.leafOnly\"\n      [iconParentOpen]=\"tagOption.iconParentOpen || icons.iconParentOpen\"\n      [iconParentClose]=\"tagOption.iconParentClose || icons.iconParentClose\"\n      [iconLeaf]=\"tagOption.iconLeaf || icons.iconLeaf\"\n      (nodeChecked)=\"onOperableNodeChecked($event, tagOption)\"\n      (nodeSelected)=\"onOperableNodeSelected($event, tagOption, tree); closeMenu(dropdown)\"\n      class=\"devui-tree\"\n    >\n    </d-operable-tree>\n  </div>\n  <div *ngIf=\"!tagOption.options?.length\">\n    <ng-container *ngTemplateOutlet=\"noData\"></ng-container>\n  </div>\n  <div *ngIf=\"noRecord\" class=\"devui-no-data-tip\">{{ i18nCommonText?.noRecordsFound }}</div>\n  <div *ngIf=\"tagOption.multiple\" class=\"devui-dropdown-operation-area\">\n    <d-button (btnClick)=\"getTreeValue(tagOption, tree); closeMenu(dropdown)\">{{ i18nCategorySearchText?.confirm }}</d-button>\n    <d-button bsStyle=\"common\" (btnClick)=\"closeMenu(dropdown)\">{{ i18nCategorySearchText?.cancel }}</d-button>\n  </div>\n</ng-template>\n", styles: [".devui-font-size-base{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-font-base{font-size:12px;font-size:var(--devui-font-size, 12px);font-weight:400;line-height:1.5}.devui-font-size-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px)}.devui-font-modal-title{font-size:18px;font-size:var(--devui-font-size-modal-title, 18px);font-weight:700;line-height:1.5}.devui-font-size-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px)}.devui-font-page-title{font-size:16px;font-size:var(--devui-font-size-page-title, 16px);font-weight:700;line-height:1.5}.devui-font-size-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px)}.devui-font-secondary-title{font-size:14px;font-size:var(--devui-font-size-card-title, 14px);font-weight:700;line-height:1.5}.devui-category-search-container{position:relative;border-radius:2px;border-radius:var(--devui-border-radius, 2px);width:100%;height:32px;padding:0 8px;display:flex;align-items:flex-start;background:transparent;transition:border .3s cubic-bezier(.645,.045,.355,1);transition:border var(--devui-animation-duration-slow, .3s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1));background-color:#fff;background-color:var(--devui-base-bg, #ffffff);border:1px solid #d7d8da;border:1px solid var(--devui-line, #d7d8da)}.devui-category-search-container.container-hover{border:1px solid #9b9fa8;border:1px solid var(--devui-form-control-line-hover, #9b9fa8)}.devui-category-search-container.container-hover .devui-category-search-icon svg g path{fill:#252b3a;fill:var(--devui-icon-fill-hover, #252b3a)}.devui-category-search-container .devui-category-search-line-container{width:100%;height:32px;overflow:hidden}.devui-category-search-container .devui-category-search-line-container:hover{overflow-x:auto;overflow-x:overlay}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line{display:flex;flex-flow:row nowrap;justify-content:flex-start;align-items:flex-start;width:100%;height:30px;position:relative;top:-1px}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line>li{display:flex;align-items:center;flex-grow:0;white-space:nowrap;height:100%}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line .devui-category-search-input{display:flex;justify-content:flex-start;flex-grow:1;align-items:center;min-width:160px;padding-right:20px}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line .devui-category-search-input input{min-width:240px;width:100%;height:32px;font-size:12px;font-size:var(--devui-font-size-sm, 12px)}.devui-category-search-container .devui-category-search-line-container .devui-category-search-line .devui-category-search-input .devui-category-search-toggle{padding-left:0}.devui-category-search-container input{border:none;background:transparent}.devui-category-search-container .devui-input-container{display:flex;flex:1}.devui-category-search-container .devui-category-search-ctrl-container{display:flex;flex-wrap:nowrap}.devui-category-search-container .devui-category-search-ctrl-container .devui-category-search-separate-line{border-right:solid 1px #d7d8da;border-right:solid 1px var(--devui-line, #d7d8da);width:0;height:16px;margin:8px}.devui-tag-item{display:inline-block;margin-right:4px}.devui-tag-item:first-child{margin-left:4px}.devui-tag-item:focus{outline:none}.devui-tag-item .devui-color-block-split-line{color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-tag-item .devui-color-block-sm{width:8px;height:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);margin-right:4px;display:inline-block;position:relative;top:-1px;vertical-align:middle}span:focus{outline:none}.devui-category-search-icon{display:flex;padding-right:8px;align-items:center;height:30px}.devui-category-search-icon svg{cursor:pointer}.devui-category-search-icon svg path{fill:#71757f;fill:var(--devui-icon-fill, #71757f);transition:all cubic-bezier(.645,.045,.355,1) .3s;transition:all var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1)) var(--devui-animation-duration-slow, .3s)}.devui-category-search-icon:hover svg g path{fill:#252b3a;fill:var(--devui-icon-fill-hover, #252b3a)}input,input:focus{outline:none!important}a:focus,a:hover{color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}d-tag{cursor:pointer}.devui-category-search-toggle{height:30px}.devui-date-picker-operation-area{border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3);margin:16px 0;padding:16px 16px 0;display:flex;justify-content:flex-end}.devui-date-picker-operation-area d-button:not(:first-child){margin-left:16px}.devui-dropdown-operation-area{border-top:1px solid #f2f2f3;border-top:1px solid var(--devui-dividing-line, #f2f2f3);padding-top:8px;margin:8px 0;display:flex;justify-content:center}.devui-dropdown-operation-area d-button:not(:first-child){margin-left:16px}.devui-input-number-operation-area{padding:16px 16px 8px;display:flex;justify-content:space-evenly}.devui-save-panel{width:400px;height:auto;margin-top:4px}.devui-save-panel .devui-save-panel-title{display:flex;justify-content:space-between;height:48px;line-height:48px;border-bottom:1px solid #f2f2f3;border-bottom:1px solid var(--devui-dividing-line, #f2f2f3);padding:0 20px;font-size:14px;font-weight:700;color:16px;color:var(--devui-font-size-page-title, 16px)}.devui-save-panel .devui-save-filter-name{padding:16px 20px}.devui-save-panel .devui-save-filter-name>form{position:relative}.devui-save-panel .devui-save-filter-name>form svg{position:absolute;right:8px;top:50%;transform:translateY(-50%);cursor:pointer}.devui-save-panel .devui-save-filter-name>form svg path{fill:#71757f;fill:var(--devui-icon-fill, #71757f)}.devui-save-panel .devui-save-filter-name>form svg:hover svg g path{fill:#252b3a;fill:var(--devui-icon-fill-hover, #252b3a)}.devui-save-panel .devui-save-filter-name>span{padding-bottom:8px;display:block;line-height:1em}.devui-save-panel .devui-save-filter-name>input{width:100%;height:32px;margin:4px auto;line-height:20px;border:1px solid #d7d8da;border:1px solid var(--devui-form-control-line, #d7d8da)}.devui-save-panel .devui-save-panel-operation-area{padding-bottom:12px;display:flex;justify-content:center}.devui-save-panel .devui-save-panel-operation-area d-button:not(:first-child){margin-left:16px}.devui-dropdown-menu-template{max-width:300px;max-height:352px}.devui-dropdown-menu-template .devui-category-search-group{font-size:12px;font-size:var(--devui-font-size, 12px)}.devui-dropdown-menu-template .devui-category-search-group.devui-dropdown-item:hover{background-color:transparent;color:#252b3a;color:var(--devui-text, #252b3a);cursor:default}.devui-selected-tags-list ul{display:flex;flex-flow:row wrap;align-items:center;justify-content:flex-start;padding:4px;max-height:390px;overflow:auto}.devui-selected-tags-list ul li{display:flex;flex-grow:0;flex-flow:row wrap}.devui-selected-tags-list ul li:first-child{margin-left:0}:host ::ng-deep .devui-tag-container{line-height:1}:host ::ng-deep .devui-tag-container d-tag>.devui-tag-item{display:block!important}:host ::ng-deep .devui-tag-container d-tag>.devui-tag-item>span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:inline-block;vertical-align:bottom;margin:0 4px}:host ::ng-deep .devui-checkbox-column-margin{height:32px!important;line-height:32px!important}::ng-deep .cdk-overlay-container d-datepicker[id=devui-category-search-date-picker] .devui-month-view{box-shadow:none!important}::ng-deep .cdk-overlay-container d-datepicker[id=devui-category-search-date-picker] .devui-month-view tfoot{display:none}::ng-deep .cdk-overlay-container .devui-selected-tags-list ul li .remove-button{right:8px}::ng-deep .devui-dropdown-top .devui-dropdown-menu-fix,::ng-deep .devui-dropdown-bottom .devui-dropdown-menu-fix,::ng-deep .devui-dropdown-open .devui-dropdown-menu-fix{margin-bottom:0}::ng-deep .devui-dropdown-menu-fix{min-width:200px;margin-left:0;overflow-y:auto;white-space:nowrap}::ng-deep .devui-dropdown-menu-fix.max-height{max-height:405px}::ng-deep .devui-dropdown-menu-fix .devui-checkbox-group{padding:8px 12px 0}::ng-deep .devui-dropdown-menu-fix .devui-checkbox-group .devui-color-block{width:12px;height:12px;margin-right:8px;border-radius:2px;border-radius:var(--devui-border-radius, 2px);top:-1px;position:relative;vertical-align:middle;display:inline-block}::ng-deep .devui-dropdown-menu-fix .devui-category-search-type-text-input{margin:16px 8px 8px;width:calc(100% - 16px)}::ng-deep .devui-dropdown-menu-fix .devui-select-list{display:flex;flex-wrap:wrap;max-width:300px;padding:8px}::ng-deep .devui-dropdown-menu-fix .devui-select-list span{margin-right:8px}::ng-deep .devui-dropdown-menu-fix .devui-category-search-tree-container{overflow-y:auto;max-height:270px;margin-bottom:-8px;padding:4px 0 4px 8px}::ng-deep .devui-dropdown-menu-fix .devui-yearOption,::ng-deep .devui-dropdown-menu-fix .devui-monthOption{white-space:normal}::ng-deep .devui-dropdown-menu-fix d-datepicker-calendar{display:block}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox{margin:0 -8px;padding:0 8px}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:hover{background-color:#f2f2f3;background-color:var(--devui-list-item-hover-bg, #f2f2f3)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:hover label{color:#252b3a;color:var(--devui-list-item-hover-text, #252b3a)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:active{background-color:#f2f5fc;background-color:var(--devui-list-item-active-bg, #f2f5fc)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox:active label{color:#252b3a;color:var(--devui-list-item-active-text, #252b3a)}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:100%}::ng-deep .devui-dropdown-menu-fix d-input-number{width:70px}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group ul{max-height:310px}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox{transition:background-color .1s cubic-bezier(.645,.045,.355,1);transition:background-color var(--devui-animation-duration-fast, .1s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}::ng-deep .devui-dropdown-menu-template .devui-checkbox-group d-checkbox .devui-checkbox label{transition:color .1s cubic-bezier(.645,.045,.355,1);transition:color var(--devui-animation-duration-fast, .1s) var(--devui-animation-ease-in-out-smooth, cubic-bezier(.645, .045, .355, 1))}.devui-dropdown-menu-tip{cursor:text;padding:12px 12px 0;pointer-events:none;color:#71757f;color:var(--devui-aide-text, #71757f)}.devui-dividing-line{height:1px;width:100%;background-color:#f2f2f3;background-color:var(--devui-dividing-line, #f2f2f3);margin-top:4px}.devui-dropdown-menu{margin-top:4px;padding-bottom:0}.devui-dropdown-menu .devui-dropdown-item .icon-search{margin-right:4px}.devui-no-data-text{padding:8px 0;text-align:center}.devui-datepicker-footer{text-align:right}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { category: [{
                type: Input
            }], defaultSearchField: [{
                type: Input
            }], selectedTags: [{
                type: Input
            }], allowClear: [{
                type: Input
            }], allowSave: [{
                type: Input
            }], allowShowMore: [{
                type: Input
            }], toggleScrollToTail: [{
                type: Input
            }], searchKey: [{
                type: Input
            }], placeholderText: [{
                type: Input
            }], inputReadOnly: [{
                type: Input
            }], showSearchCategory: [{
                type: Input
            }], categoryInGroup: [{
                type: Input
            }], groupOrderConfig: [{
                type: Input
            }], customGroupNameTemplate: [{
                type: Input
            }], tagMaxWidth: [{
                type: Input
            }], filterNameRules: [{
                type: Input
            }], beforeTagChange: [{
                type: Input
            }], toggleEvent: [{
                type: Input
            }], searchEvent: [{
                type: Output
            }], selectedTagsChange: [{
                type: Output
            }], createFilterEvent: [{
                type: Output
            }], clearAllEvent: [{
                type: Output
            }], searchKeyChange: [{
                type: Output
            }], inputEle: [{
                type: ViewChild,
                args: ['InputEle']
            }], scrollBarContainer: [{
                type: ViewChild,
                args: ['ScrollBarContainer']
            }], primeContainer: [{
                type: ViewChild,
                args: ['PrimeContainer']
            }], selectedDropdownList: [{
                type: ViewChildren,
                args: ['selectedDropdown']
            }], datePickerElements: [{
                type: ViewChildren,
                args: [DatepickerProCalendarComponent, { read: ElementRef }]
            }], defaultTemplates: [{
                type: ViewChildren,
                args: [DefaultTemplateDirective]
            }], contentTemplates: [{
                type: ContentChildren,
                args: [ContentTemplateDirective]
            }] } });

class CategorySearchModule {
}
CategorySearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CategorySearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CategorySearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CategorySearchModule, declarations: [CategorySearchComponent, ContentTemplateDirective, DefaultTemplateDirective], imports: [CommonModule,
        FormModule,
        FormsModule,
        DropDownModule,
        TextInputModule,
        SearchModule,
        TagsModule,
        ButtonModule,
        CheckBoxModule,
        InputNumberModule,
        LoadingModule,
        TreeModule,
        PopperModule,
        DatepickerProModule], exports: [CategorySearchComponent, ContentTemplateDirective, DefaultTemplateDirective] });
CategorySearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CategorySearchModule, imports: [[
            CommonModule,
            FormModule,
            FormsModule,
            DropDownModule,
            TextInputModule,
            SearchModule,
            TagsModule,
            ButtonModule,
            CheckBoxModule,
            InputNumberModule,
            LoadingModule,
            TreeModule,
            PopperModule,
            DatepickerProModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: CategorySearchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormModule,
                        FormsModule,
                        DropDownModule,
                        TextInputModule,
                        SearchModule,
                        TagsModule,
                        ButtonModule,
                        CheckBoxModule,
                        InputNumberModule,
                        LoadingModule,
                        TreeModule,
                        PopperModule,
                        DatepickerProModule,
                    ],
                    declarations: [CategorySearchComponent, ContentTemplateDirective, DefaultTemplateDirective],
                    exports: [CategorySearchComponent, ContentTemplateDirective, DefaultTemplateDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALLOWED_SEARCH_FIELD_TYPES, COLORS, CategorySearchComponent, CategorySearchModule, ContentTemplateDirective, DefaultTemplateDirective };
//# sourceMappingURL=ng-devui-category-search.mjs.map
