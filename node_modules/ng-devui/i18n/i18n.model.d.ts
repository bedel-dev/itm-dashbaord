export interface I18nInterface {
    locale: string;
    common: {
        searchPlaceholder: string;
        noData: string;
        noRecordsFound: string;
        btnConfirm: string;
        loading: string;
        checkAll: string;
        btnOk: string;
        btnCancel: string;
        btnClose: string;
        btnClickMe: string;
        copied: string;
    };
    autoComplete: {
        latestInput: string;
    };
    datePicker: {
        today: string;
        clear: string;
        daysOfWeek: string[];
        monthsOfYear: string[];
        startDate: string;
        endDate: string;
        yearDisplay(year: any): string;
    };
    datePickerPro: {
        placeholder: string;
        startPlaceholder: string;
        endPlaceholder: string;
        daysOfWeek: string[];
        monthsOfYear: string[];
        hour: string;
        min: string;
        second: string;
        getYearMonthStr(year: any, month: any): string;
    };
    form: {
        required(val: any): string;
        minlength(len: any): string;
        maxlength(len: any): string;
        min(val: any): string;
        max(val: any): string;
        requiredTrue(val: any): string;
        email(val: any): string;
        whitespace(val: any): string;
    };
    gantt: {
        today: string;
        day: string;
        week: string;
        month: string;
        milestone: string;
        monthsOfYear: string[];
        yearDisplay(year: any): string;
        monthDisplay(strMonthIndex: string): string;
        yearAndMonthDisplay(year: string, strMonthIndex: string): string;
    };
    pagination: {
        goTo: string;
        pageSize: string;
        page: string;
        perPage: string;
        totalItem(total: any): string;
    };
    quadrant: {
        xAxisLabel: string;
        yAxisLabel: string;
        defaultTitleConf: [{
            title: string;
        }];
    };
    upload: {
        warning: string;
        upload: string;
        chooseFile: string;
        chooseFiles: string;
        preload: string;
        uploading: string;
        uploaded: string;
        uploadFailed: string;
        uploadSuccess: string;
        delete: string;
        reUpload: string;
        cancelUpload: string;
        getNotAllowedFileTypeMsg(filename: any, scope: any): string;
        getBeyondMaximalFileSizeMsg(filename: any, maximalSize: any): string;
        getExistSameNameFilesMsg(sameNames: any): string;
        getAllFilesBeyondMaximalFileSizeMsg(maximalSize: any): string;
        getSelectedFilesCount(filesCount: any): string;
        getUploadingFilesCount(uploadingCount: any, filesCount: any): string;
        getFailedFilesCount(failedCount: any): string;
    };
    modal: {
        warning: string;
        error: string;
        fail: string;
        info: string;
        success: string;
    };
    imagePreview: {
        rotate: string;
        zoomIn: string;
        zoomOut: string;
        bestScale: string;
        originScale: string;
        pre: string;
        next: string;
    };
    colorPicker: {
        recentlyUsed: string;
        basicColors: string;
        moreColors: string;
    };
    stepsGuide: {
        previous: string;
        next: string;
        finish: string;
    };
    splitter: {
        collapse: string;
        expand: string;
    };
    relativeTime: {
        hoursAgo: string;
        minutesAgo: string;
        justnow: string;
        later: string;
        minutesLater: string;
        hoursLater: string;
        yearsAgo(num: number): string;
        monthsAgo(num: number): string;
        weeksAgo(num: number): string;
        daysAgo(num: number): string;
        daysLater(num: number): string;
        weeksLater(num: number): string;
        monthsLater(num: number): string;
        yearsLater(num: number): string;
    };
    tagsInput: {
        tagsReachMaxLength: string;
        tagsReachMaxNumber: string;
    };
    categorySearch: {
        confirm: string;
        cancel: string;
        selectFilterCondition: string;
        getFindingMessage: (msg: string) => string;
        getSearchMessage: (msg: string) => string;
        saveFilter: string;
        filterTitle: string;
        placeholder: string;
        searchPlaceholder: string;
        noFilterConditions: string;
        clearFilterCondition: string;
        seeMore: string;
        selected: string;
        switchToStart: string;
        switchToEnd: string;
        keyword: string;
    };
    userGuide: {
        guide: string;
        prev: string;
        next: string;
        finish: string;
        autoFill: string;
    };
}
