import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export interface Message {
    severity?: string;
    summary?: string;
    detail?: string;
    content?: string | TemplateRef<any>;
    life?: number;
    id?: any;
}
export declare class ToastComponent implements OnInit, AfterViewInit, OnDestroy {
    sticky: boolean;
    life: number;
    style: object;
    styleClass: string;
    lifeMode: 'single' | 'global';
    closeEvent: EventEmitter<any>;
    valueChange: EventEmitter<Message[]>;
    containerViewChild: ElementRef;
    _value: Array<Message>;
    rest: Array<Message>;
    zIndex: number;
    container: HTMLDivElement;
    timeout: any;
    timeoutArr: any[];
    timestamp: number;
    clickSub: Subject<unknown>;
    subItem: Subscription;
    get _life(): number;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    get value(): Array<Message>;
    set value(val: Array<Message>);
    isTemplate(content: any): TemplateRef<any>;
    severityDelay(item: Message): 10000 | 5000;
    show(): void;
    close(): void;
    onHidden(): void;
    handleValueChange(): void;
    singleModeRemove(msg: Message, msgItem: any): void;
    interrupt(index: number, msgItem: any): void;
    resetDelay(fn: Function): void;
    remove(index: number, msgItem: any): void;
    removeAll(): void;
    removeThrottle(index: number, msgItem: any): void;
    removeIndexThrottle(index: number): void;
    removeMsgThrottle(msg: any): void;
    removeReset(index?: number, msgItem?: any, msg?: any): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ToastComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToastComponent, "d-toast", never, { "sticky": "sticky"; "life": "life"; "style": "style"; "styleClass": "styleClass"; "lifeMode": "lifeMode"; "value": "value"; }, { "closeEvent": "closeEvent"; "valueChange": "valueChange"; }, never, never>;
}
