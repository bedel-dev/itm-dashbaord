import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { GanttTaskInfo } from '../gantt.model';
import { GanttService } from '../gantt.service';
import * as i0 from "@angular/core";
export declare class GanttBarComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private cdr;
    private ganttService;
    private ele;
    private moveBarStartListener;
    private resizeBarLeftStartListener;
    private resizeBarRightStartListener;
    private dragProgressStartListener;
    private mouseMoveListener;
    private mouseEndListener;
    private moveBarStartHandler;
    private resizeBarLeftStartHandler;
    private resizeBarRightStartHandler;
    private dragProgressStartHandler;
    private mouseMoveHandler;
    private mouseEndHandler;
    private mouseOverProgressHandler;
    private mouseLeaveProgressHandler;
    mouseMoveTimer: any;
    mouseLeaveTimer: any;
    dragProgressStart: boolean;
    moveBarStart: boolean;
    private resizeBarLeftStart;
    private resizeBarRightStart;
    private barMoveStartPageX;
    private barResizeStartPageX;
    private barOriginLeft;
    private barOriginWidth;
    private originStartDate;
    private originEndDate;
    private barHovering;
    private progressHovering;
    private ganttScaleStatusHandler;
    focused: boolean;
    private MIN_WIDTH;
    left: number;
    width: number;
    private EARLYOFFSET;
    cdkOverlayOffsetX: number;
    ganttBar: ElementRef;
    ganttBarMain: ElementRef;
    ganttBarProgress: ElementRef;
    ganttBarTrack: ElementRef;
    ganttBarRail: ElementRef;
    ganttBarDarggerLeft: ElementRef;
    ganttBarDarggerRight: ElementRef;
    private max;
    private min;
    private step;
    private mouseEventDalay;
    duration: string;
    tipHovered: boolean;
    mouseMoveOnBar: boolean;
    percentage: number;
    private movedOut;
    private mouseenterHandler;
    private mouseleaveHandler;
    private scrollTimer;
    private SCROLL_STEP;
    private outDirection;
    private scrollViewRange;
    barMoveDisabled: boolean;
    barResizeDisabled: boolean;
    progressDisabled: boolean;
    startDate: Date;
    endDate: Date;
    progressRate: number;
    tipTemplateRef: TemplateRef<any>;
    data: any;
    originOffsetX: number;
    id: string;
    title: string;
    showTitle: boolean;
    customBarClass: string;
    customBgClass: string;
    customTitleClass: string;
    scrollElement: HTMLElement;
    barMoveStartEvent: EventEmitter<GanttTaskInfo>;
    barMovingEvent: EventEmitter<GanttTaskInfo>;
    barMoveEndEvent: EventEmitter<GanttTaskInfo>;
    barResizeStartEvent: EventEmitter<GanttTaskInfo>;
    barResizingEvent: EventEmitter<GanttTaskInfo>;
    barResizeEndEvent: EventEmitter<GanttTaskInfo>;
    barProgressEvent: EventEmitter<number>;
    constructor(cdr: ChangeDetectorRef, ganttService: GanttService, ele: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(newValue: number): void;
    private onTouchedCallback;
    private onChangeCallback;
    private checkRangeValues;
    private checkStepValue;
    private ratioToValue;
    private convertHandlePositionToRatio;
    private clamp;
    private updateStyle;
    private registerMouseEventsListeners;
    private getSliderPagePosition;
    private getRailLength;
    private mousePositionToAdaptiveValue;
    private getDecimals;
    private progressStartDrag;
    private barStartMoving;
    private barLeftStartResizing;
    private barRightStartResizing;
    private mouseMoving;
    private checkIsOut;
    private autoScroll;
    private stopAutoScroll;
    private setLeft;
    private getGanttTaskInfo;
    private mouseStopMoving;
    private subscribeMouseActions;
    private unsubscribeMouseActions;
    private handleController;
    private setValue;
    private ensureValueInRange;
    private updateTrackAndHandle;
    private valueMustBeValid;
    private valueToOffset;
    private registerHandleHoverPopoverListener;
    ganttBarPopoverOnMouseHover($event: any): void;
    ganttBarPopoverOnMouseLeave(): void;
    mouseLeaveTip(): void;
    private ganttProgressPopoverOnMouseHover;
    private ganttProgressPopoverOnMouseLeave;
    private unregisterHandleHoverTooltip;
    private clearTimer;
    private focusController;
    dispatchGanttBarStatus(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GanttBarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GanttBarComponent, "d-gantt-bar", never, { "barMoveDisabled": "barMoveDisabled"; "barResizeDisabled": "barResizeDisabled"; "progressDisabled": "progressDisabled"; "startDate": "startDate"; "endDate": "endDate"; "progressRate": "progressRate"; "tipTemplateRef": "tipTemplateRef"; "data": "data"; "originOffsetX": "originOffsetX"; "id": "id"; "title": "title"; "showTitle": "showTitle"; "customBarClass": "customBarClass"; "customBgClass": "customBgClass"; "customTitleClass": "customTitleClass"; "scrollElement": "scrollElement"; }, { "barMoveStartEvent": "barMoveStartEvent"; "barMovingEvent": "barMovingEvent"; "barMoveEndEvent": "barMoveEndEvent"; "barResizeStartEvent": "barResizeStartEvent"; "barResizingEvent": "barResizingEvent"; "barResizeEndEvent": "barResizeEndEvent"; "barProgressEvent": "barProgressEvent"; }, never, never>;
}
