import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
interface ExtraSetConfig {
    extraWidth?: number;
    offset?: string;
}
export declare class PopperComponent implements AfterViewInit, OnDestroy {
    protected el: ElementRef;
    protected renderer: Renderer2;
    protected ngZone: NgZone;
    protected changeDetectorRef: ChangeDetectorRef;
    private doc;
    get open(): any;
    set open(value: any);
    fluidPopper: boolean;
    poppoverAppendDirection: string;
    appendTo: string;
    extraConfig: ExtraSetConfig;
    showAnimation: boolean;
    protected popper: any;
    protected _isOpen: any;
    protected animate: boolean;
    protected popperDirection: string;
    protected directionAnimationTransformOrigin: {
        top: string;
        bottom: string;
    };
    protected popperNode: any;
    protected popperParent: any;
    private directionSubject;
    document: Document;
    openChange: EventEmitter<any>;
    popperActivator: ElementRef;
    popperContainer: ElementRef;
    static nextTick(fn: any): void;
    onDocumentClick: ($event: MouseEvent) => void;
    private blockEvent;
    constructor(el: ElementRef, renderer: Renderer2, ngZone: NgZone, changeDetectorRef: ChangeDetectorRef, doc: any);
    show(): void;
    private close;
    setBlurListener(): void;
    private applyTransitionStyle;
    private updateContainerTransitionDirection;
    private setTransitionOrigin;
    private createCustomPopper;
    private setTransition;
    update(): void;
    ngOnDestroy(): void;
    private detachPopperContainer;
    private attachPopperContainerToNode;
    private attachPopperContainerToSelector;
    ngAfterViewInit(): void;
    directionChange(): Observable<string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PopperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PopperComponent, "d-popper-component", never, { "open": "open"; "fluidPopper": "fluidPopper"; "poppoverAppendDirection": "poppoverAppendDirection"; "appendTo": "appendTo"; "extraConfig": "extraConfig"; "showAnimation": "showAnimation"; }, { "openChange": "openChange"; }, never, ["[popper-activator]", "[popper-prepend]", "[popper-container]", "[popper-append]"]>;
}
export {};
